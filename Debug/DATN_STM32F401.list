
DATN_STM32F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000faa8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  0800fc48  0800fc48  0001fc48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010404  08010404  000309c4  2**0
                  CONTENTS
  4 .ARM          00000008  08010404  08010404  00020404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801040c  0801040c  000309c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801040c  0801040c  0002040c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010414  08010414  00020414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009c4  20000000  08010418  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e8  200009c4  08010ddc  000309c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011ac  08010ddc  000311ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000309c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b59  00000000  00000000  000309f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000251b  00000000  00000000  0004354d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00045a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  00046bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019435  00000000  00000000  00047c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130d1  00000000  00000000  00061075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d7b3  00000000  00000000  00074146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001118f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064f4  00000000  00000000  0011194c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200009c4 	.word	0x200009c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fc30 	.word	0x0800fc30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200009c8 	.word	0x200009c8
 80001dc:	0800fc30 	.word	0x0800fc30

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <W25Q32_Init>:
GPIO_TypeDef *CS_PORT;
uint16_t CS_Pin;
SPI_HandleTypeDef *hspi;
uint8_t dum_byte = 0xff;

void W25Q32_Init(SPI_HandleTypeDef *hspix, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	4613      	mov	r3, r2
 8001014:	80fb      	strh	r3, [r7, #6]
	hspi = hspix;
 8001016:	4a07      	ldr	r2, [pc, #28]	; (8001034 <W25Q32_Init+0x2c>)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6013      	str	r3, [r2, #0]
	CS_PORT = GPIOx;
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <W25Q32_Init+0x30>)
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	6013      	str	r3, [r2, #0]
	CS_Pin = GPIO_Pin;
 8001022:	4a06      	ldr	r2, [pc, #24]	; (800103c <W25Q32_Init+0x34>)
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	8013      	strh	r3, [r2, #0]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	200009e8 	.word	0x200009e8
 8001038:	200009e0 	.word	0x200009e0
 800103c:	200009e4 	.word	0x200009e4

08001040 <W25Q32_CS_LOW>:

void W25Q32_CS_LOW() {
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_Pin, 0);
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <W25Q32_CS_LOW+0x18>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <W25Q32_CS_LOW+0x1c>)
 800104a:	8811      	ldrh	r1, [r2, #0]
 800104c:	2200      	movs	r2, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f003 fd5a 	bl	8004b08 <HAL_GPIO_WritePin>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200009e0 	.word	0x200009e0
 800105c:	200009e4 	.word	0x200009e4

08001060 <W25Q32_CS_HIGH>:

void W25Q32_CS_HIGH() {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_Pin, 1);
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <W25Q32_CS_HIGH+0x18>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <W25Q32_CS_HIGH+0x1c>)
 800106a:	8811      	ldrh	r1, [r2, #0]
 800106c:	2201      	movs	r2, #1
 800106e:	4618      	mov	r0, r3
 8001070:	f003 fd4a 	bl	8004b08 <HAL_GPIO_WritePin>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200009e0 	.word	0x200009e0
 800107c:	200009e4 	.word	0x200009e4

08001080 <WriteEnable>:

void WriteEnable() {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	uint8_t *tsm = malloc(sizeof(uint8_t));
 8001086:	2001      	movs	r0, #1
 8001088:	f007 f872 	bl	8008170 <malloc>
 800108c:	4603      	mov	r3, r0
 800108e:	607b      	str	r3, [r7, #4]
	uint8_t *rev = malloc(sizeof(uint8_t));
 8001090:	2001      	movs	r0, #1
 8001092:	f007 f86d 	bl	8008170 <malloc>
 8001096:	4603      	mov	r3, r0
 8001098:	603b      	str	r3, [r7, #0]
	tsm[0] = WRITE_EN;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2206      	movs	r2, #6
 800109e:	701a      	strb	r2, [r3, #0]

	W25Q32_CS_LOW();
 80010a0:	f7ff ffce 	bl	8001040 <W25Q32_CS_LOW>
	W25Q32_Send_Receive(tsm, rev, 1);
 80010a4:	2201      	movs	r2, #1
 80010a6:	6839      	ldr	r1, [r7, #0]
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 f867 	bl	800117c <W25Q32_Send_Receive>
	W25Q32_CS_HIGH();
 80010ae:	f7ff ffd7 	bl	8001060 <W25Q32_CS_HIGH>

	free(tsm);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f007 f864 	bl	8008180 <free>
	free(rev);
 80010b8:	6838      	ldr	r0, [r7, #0]
 80010ba:	f007 f861 	bl	8008180 <free>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <WriteDisable>:

void WriteDisable() {
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
	uint8_t *tsm = (uint8_t*) malloc(sizeof(uint8_t));
 80010cc:	2001      	movs	r0, #1
 80010ce:	f007 f84f 	bl	8008170 <malloc>
 80010d2:	4603      	mov	r3, r0
 80010d4:	607b      	str	r3, [r7, #4]
	uint8_t *rev = (uint8_t*) malloc(sizeof(uint8_t));
 80010d6:	2001      	movs	r0, #1
 80010d8:	f007 f84a 	bl	8008170 <malloc>
 80010dc:	4603      	mov	r3, r0
 80010de:	603b      	str	r3, [r7, #0]
	tsm[0] = WRITE_DIS;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2204      	movs	r2, #4
 80010e4:	701a      	strb	r2, [r3, #0]

	W25Q32_CS_LOW();
 80010e6:	f7ff ffab 	bl	8001040 <W25Q32_CS_LOW>
	W25Q32_Send_Receive(tsm, rev, 1);
 80010ea:	2201      	movs	r2, #1
 80010ec:	6839      	ldr	r1, [r7, #0]
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 f844 	bl	800117c <W25Q32_Send_Receive>
	W25Q32_CS_HIGH();
 80010f4:	f7ff ffb4 	bl	8001060 <W25Q32_CS_HIGH>

	free(tsm);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f007 f841 	bl	8008180 <free>
	free(rev);
 80010fe:	6838      	ldr	r0, [r7, #0]
 8001100:	f007 f83e 	bl	8008180 <free>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <W25Q32_WaitEndCycle>:

void W25Q32_WaitEndCycle() {
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
	W25Q32_CS_LOW();
 8001112:	f7ff ff95 	bl	8001040 <W25Q32_CS_LOW>
	uint8_t check;
	uint8_t *tx = (uint8_t*) malloc(sizeof(uint8_t));
 8001116:	2001      	movs	r0, #1
 8001118:	f007 f82a 	bl	8008170 <malloc>
 800111c:	4603      	mov	r3, r0
 800111e:	60fb      	str	r3, [r7, #12]
	uint8_t *rx = (uint8_t*) malloc(sizeof(uint8_t));
 8001120:	2001      	movs	r0, #1
 8001122:	f007 f825 	bl	8008170 <malloc>
 8001126:	4603      	mov	r3, r0
 8001128:	60bb      	str	r3, [r7, #8]
	*tx = RDSR1;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2205      	movs	r2, #5
 800112e:	701a      	strb	r2, [r3, #0]

	W25Q32_CS_LOW();
 8001130:	f7ff ff86 	bl	8001040 <W25Q32_CS_LOW>
	W25Q32_Send_Receive(tx, rx, 1);
 8001134:	2201      	movs	r2, #1
 8001136:	68b9      	ldr	r1, [r7, #8]
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f000 f81f 	bl	800117c <W25Q32_Send_Receive>
	do {
		*tx = dum_byte;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <W25Q32_WaitEndCycle+0x6c>)
 8001140:	781a      	ldrb	r2, [r3, #0]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	701a      	strb	r2, [r3, #0]
		W25Q32_Send_Receive(tx, rx, 1);
 8001146:	2201      	movs	r2, #1
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f000 f816 	bl	800117c <W25Q32_Send_Receive>
		check = *rx;
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	71fb      	strb	r3, [r7, #7]
	} while (check & 0x01);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1ee      	bne.n	800113e <W25Q32_WaitEndCycle+0x32>
	W25Q32_CS_HIGH();
 8001160:	f7ff ff7e 	bl	8001060 <W25Q32_CS_HIGH>
	free(tx);
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f007 f80b 	bl	8008180 <free>
	free(rx);
 800116a:	68b8      	ldr	r0, [r7, #8]
 800116c:	f007 f808 	bl	8008180 <free>
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000000 	.word	0x20000000

0800117c <W25Q32_Send_Receive>:

void W25Q32_Send_Receive(uint8_t *tx_buf, uint8_t *rx_buf, uint16_t tx_num) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	4613      	mov	r3, r2
 8001188:	80fb      	strh	r3, [r7, #6]
	rx_spi_flg = 0;
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <W25Q32_Send_Receive+0x3c>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_TransmitReceive_IT(hspi, tx_buf, rx_buf, tx_num);
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <W25Q32_Send_Receive+0x40>)
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	68f9      	ldr	r1, [r7, #12]
 800119a:	f004 f9e3 	bl	8005564 <HAL_SPI_TransmitReceive_IT>
	while (!rx_spi_flg) {
 800119e:	bf00      	nop
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <W25Q32_Send_Receive+0x3c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	f083 0301 	eor.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f8      	bne.n	80011a0 <W25Q32_Send_Receive+0x24>
	}
//	HAL_SPI_TransmitReceive(hspi, tx_buf, rx_buf, tx_num, 500);
}
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200010fc 	.word	0x200010fc
 80011bc:	200009e8 	.word	0x200009e8

080011c0 <W25Q32_ReadData>:

void W25Q32_ReadData(uint8_t *pBuffer, uint32_t ReadAddr, uint16_t len) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	4613      	mov	r3, r2
 80011cc:	80fb      	strh	r3, [r7, #6]
	W25Q32_CS_LOW();
 80011ce:	f7ff ff37 	bl	8001040 <W25Q32_CS_LOW>

	uint8_t *cmd = malloc(sizeof(uint8_t) * (4 + len));
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	3304      	adds	r3, #4
 80011d6:	4618      	mov	r0, r3
 80011d8:	f006 ffca 	bl	8008170 <malloc>
 80011dc:	4603      	mov	r3, r0
 80011de:	617b      	str	r3, [r7, #20]
	uint8_t *ret = malloc(sizeof(uint8_t) * len);
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f006 ffc4 	bl	8008170 <malloc>
 80011e8:	4603      	mov	r3, r0
 80011ea:	613b      	str	r3, [r7, #16]
	cmd[0] = READ_DATA;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	2203      	movs	r2, #3
 80011f0:	701a      	strb	r2, [r3, #0]
	cmd[1] = (ReadAddr & 0x00FF0000) >> 16;
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	0c1a      	lsrs	r2, r3, #16
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	3301      	adds	r3, #1
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	701a      	strb	r2, [r3, #0]
	cmd[2] = (ReadAddr & 0x0000FF00) >> 8;
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	0a1a      	lsrs	r2, r3, #8
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	3302      	adds	r3, #2
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	701a      	strb	r2, [r3, #0]
	cmd[3] = ReadAddr & 0x000000FF;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3303      	adds	r3, #3
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	701a      	strb	r2, [r3, #0]
	W25Q32_Send_Receive(cmd, ret, 4);
 8001214:	2204      	movs	r2, #4
 8001216:	6939      	ldr	r1, [r7, #16]
 8001218:	6978      	ldr	r0, [r7, #20]
 800121a:	f7ff ffaf 	bl	800117c <W25Q32_Send_Receive>
	W25Q32_Send_Receive(cmd + 4, pBuffer , len);
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3304      	adds	r3, #4
 8001222:	88fa      	ldrh	r2, [r7, #6]
 8001224:	68f9      	ldr	r1, [r7, #12]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ffa8 	bl	800117c <W25Q32_Send_Receive>
	W25Q32_CS_HIGH();
 800122c:	f7ff ff18 	bl	8001060 <W25Q32_CS_HIGH>
	free(cmd);
 8001230:	6978      	ldr	r0, [r7, #20]
 8001232:	f006 ffa5 	bl	8008180 <free>
	free(ret);
 8001236:	6938      	ldr	r0, [r7, #16]
 8001238:	f006 ffa2 	bl	8008180 <free>
}
 800123c:	bf00      	nop
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <W25Q32_WriteData>:

void W25Q32_WriteData(uint8_t *pBuffer, uint32_t WriteAddr, uint16_t len) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	4613      	mov	r3, r2
 8001250:	80fb      	strh	r3, [r7, #6]
	uint8_t *cmd = malloc(sizeof(uint8_t) * (4 + len));
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	3304      	adds	r3, #4
 8001256:	4618      	mov	r0, r3
 8001258:	f006 ff8a 	bl	8008170 <malloc>
 800125c:	4603      	mov	r3, r0
 800125e:	61bb      	str	r3, [r7, #24]
	uint8_t *data = malloc(sizeof(uint8_t) * len);
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	4618      	mov	r0, r3
 8001264:	f006 ff84 	bl	8008170 <malloc>
 8001268:	4603      	mov	r3, r0
 800126a:	617b      	str	r3, [r7, #20]
	uint8_t *ret = malloc(sizeof(uint8_t) * len);
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	4618      	mov	r0, r3
 8001270:	f006 ff7e 	bl	8008170 <malloc>
 8001274:	4603      	mov	r3, r0
 8001276:	613b      	str	r3, [r7, #16]

	WriteEnable();
 8001278:	f7ff ff02 	bl	8001080 <WriteEnable>
	W25Q32_CS_LOW();
 800127c:	f7ff fee0 	bl	8001040 <W25Q32_CS_LOW>
	cmd[0] = PAGE_PROGRAM;
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2202      	movs	r2, #2
 8001284:	701a      	strb	r2, [r3, #0]
	cmd[1] = (WriteAddr & 0x00FF0000) >> 16;
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	0c1a      	lsrs	r2, r3, #16
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	3301      	adds	r3, #1
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	701a      	strb	r2, [r3, #0]
	cmd[2] = (WriteAddr & 0x0000FF00) >> 8;
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	0a1a      	lsrs	r2, r3, #8
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	3302      	adds	r3, #2
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	701a      	strb	r2, [r3, #0]
	cmd[3] = WriteAddr & 0x000000FF;
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	3303      	adds	r3, #3
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	701a      	strb	r2, [r3, #0]
	W25Q32_Send_Receive(cmd, data, 4);
 80012a8:	2204      	movs	r2, #4
 80012aa:	6979      	ldr	r1, [r7, #20]
 80012ac:	69b8      	ldr	r0, [r7, #24]
 80012ae:	f7ff ff65 	bl	800117c <W25Q32_Send_Receive>
	for (uint8_t i = 0; i < len; i++) {
 80012b2:	2300      	movs	r3, #0
 80012b4:	77fb      	strb	r3, [r7, #31]
 80012b6:	e00a      	b.n	80012ce <W25Q32_WriteData+0x8a>
		*(data + i) = *(pBuffer + i);
 80012b8:	7ffb      	ldrb	r3, [r7, #31]
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	441a      	add	r2, r3
 80012be:	7ffb      	ldrb	r3, [r7, #31]
 80012c0:	6979      	ldr	r1, [r7, #20]
 80012c2:	440b      	add	r3, r1
 80012c4:	7812      	ldrb	r2, [r2, #0]
 80012c6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < len; i++) {
 80012c8:	7ffb      	ldrb	r3, [r7, #31]
 80012ca:	3301      	adds	r3, #1
 80012cc:	77fb      	strb	r3, [r7, #31]
 80012ce:	7ffb      	ldrb	r3, [r7, #31]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	88fa      	ldrh	r2, [r7, #6]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d8ef      	bhi.n	80012b8 <W25Q32_WriteData+0x74>
	}
	W25Q32_Send_Receive(data, ret, len);
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	461a      	mov	r2, r3
 80012dc:	6939      	ldr	r1, [r7, #16]
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff ff4c 	bl	800117c <W25Q32_Send_Receive>
	W25Q32_CS_HIGH();
 80012e4:	f7ff febc 	bl	8001060 <W25Q32_CS_HIGH>
	W25Q32_WaitEndCycle();
 80012e8:	f7ff ff10 	bl	800110c <W25Q32_WaitEndCycle>
	WriteDisable();
 80012ec:	f7ff feeb 	bl	80010c6 <WriteDisable>
	free(cmd);
 80012f0:	69b8      	ldr	r0, [r7, #24]
 80012f2:	f006 ff45 	bl	8008180 <free>
	free(data);
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f006 ff42 	bl	8008180 <free>
}
 80012fc:	bf00      	nop
 80012fe:	3720      	adds	r7, #32
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <W25Q32_erase4k>:

void W25Q32_erase4k(uint32_t add) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	uint8_t *cmd = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 800130c:	2004      	movs	r0, #4
 800130e:	f006 ff2f 	bl	8008170 <malloc>
 8001312:	4603      	mov	r3, r0
 8001314:	60fb      	str	r3, [r7, #12]
	uint8_t *ret = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 8001316:	2004      	movs	r0, #4
 8001318:	f006 ff2a 	bl	8008170 <malloc>
 800131c:	4603      	mov	r3, r0
 800131e:	60bb      	str	r3, [r7, #8]
	cmd[0] = ERASE_SECTOR;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2220      	movs	r2, #32
 8001324:	701a      	strb	r2, [r3, #0]
	cmd[1] = (add & 0x00FF0000) >> 16;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	0c1a      	lsrs	r2, r3, #16
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3301      	adds	r3, #1
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	701a      	strb	r2, [r3, #0]
	cmd[2] = (add & 0x0000FF00) >> 8;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	0a1a      	lsrs	r2, r3, #8
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3302      	adds	r3, #2
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	701a      	strb	r2, [r3, #0]
	cmd[3] = add & 0x0000000FF;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3303      	adds	r3, #3
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	701a      	strb	r2, [r3, #0]

	WriteEnable();
 8001348:	f7ff fe9a 	bl	8001080 <WriteEnable>
	W25Q32_CS_LOW();
 800134c:	f7ff fe78 	bl	8001040 <W25Q32_CS_LOW>
	W25Q32_Send_Receive(cmd, ret, 4);
 8001350:	2204      	movs	r2, #4
 8001352:	68b9      	ldr	r1, [r7, #8]
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f7ff ff11 	bl	800117c <W25Q32_Send_Receive>
	W25Q32_CS_HIGH();
 800135a:	f7ff fe81 	bl	8001060 <W25Q32_CS_HIGH>
	W25Q32_WaitEndCycle();
 800135e:	f7ff fed5 	bl	800110c <W25Q32_WaitEndCycle>
	WriteDisable();
 8001362:	f7ff feb0 	bl	80010c6 <WriteDisable>
	free(cmd);
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f006 ff0a 	bl	8008180 <free>
	free(ret);
 800136c:	68b8      	ldr	r0, [r7, #8]
 800136e:	f006 ff07 	bl	8008180 <free>
}
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001380:	f002 fc0a 	bl	8003b98 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001384:	f000 f868 	bl	8001458 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001388:	f000 fb9a 	bl	8001ac0 <MX_GPIO_Init>
	MX_ADC1_Init();
 800138c:	f000 f8c4 	bl	8001518 <MX_ADC1_Init>
	MX_SPI2_Init();
 8001390:	f000 f914 	bl	80015bc <MX_SPI2_Init>
	MX_TIM1_Init();
 8001394:	f000 f948 	bl	8001628 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001398:	f000 f9f2 	bl	8001780 <MX_TIM2_Init>
	MX_TIM3_Init();
 800139c:	f000 fa3c 	bl	8001818 <MX_TIM3_Init>
	MX_TIM4_Init();
 80013a0:	f000 fabc 	bl	800191c <MX_TIM4_Init>
	MX_TIM5_Init();
 80013a4:	f000 fb0e 	bl	80019c4 <MX_TIM5_Init>
	MX_USART1_UART_Init();
 80013a8:	f000 fb60 	bl	8001a6c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, &uart_chr, sizeof(uart_chr));
 80013ac:	2201      	movs	r2, #1
 80013ae:	4921      	ldr	r1, [pc, #132]	; (8001434 <main+0xb8>)
 80013b0:	4821      	ldr	r0, [pc, #132]	; (8001438 <main+0xbc>)
 80013b2:	f005 ff16 	bl	80071e2 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80013b6:	4821      	ldr	r0, [pc, #132]	; (800143c <main+0xc0>)
 80013b8:	f004 fd3a 	bl	8005e30 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 80013bc:	4820      	ldr	r0, [pc, #128]	; (8001440 <main+0xc4>)
 80013be:	f004 fcdd 	bl	8005d7c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013c2:	2100      	movs	r1, #0
 80013c4:	481d      	ldr	r0, [pc, #116]	; (800143c <main+0xc0>)
 80013c6:	f004 fdef 	bl	8005fa8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80013ca:	2104      	movs	r1, #4
 80013cc:	481b      	ldr	r0, [pc, #108]	; (800143c <main+0xc0>)
 80013ce:	f004 fdeb 	bl	8005fa8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013d2:	2100      	movs	r1, #0
 80013d4:	481b      	ldr	r0, [pc, #108]	; (8001444 <main+0xc8>)
 80013d6:	f004 fde7 	bl	8005fa8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80013da:	210c      	movs	r1, #12
 80013dc:	4819      	ldr	r0, [pc, #100]	; (8001444 <main+0xc8>)
 80013de:	f004 fde3 	bl	8005fa8 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80013e2:	2104      	movs	r1, #4
 80013e4:	4818      	ldr	r0, [pc, #96]	; (8001448 <main+0xcc>)
 80013e6:	f004 ff35 	bl	8006254 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80013ea:	2104      	movs	r1, #4
 80013ec:	4817      	ldr	r0, [pc, #92]	; (800144c <main+0xd0>)
 80013ee:	f004 ff31 	bl	8006254 <HAL_TIM_Encoder_Start>
	init_dht22();
 80013f2:	f001 fce9 	bl	8002dc8 <init_dht22>
	W25Q32_Init(&hspi2, GPIOB, GPIO_PIN_12);
 80013f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013fa:	4915      	ldr	r1, [pc, #84]	; (8001450 <main+0xd4>)
 80013fc:	4815      	ldr	r0, [pc, #84]	; (8001454 <main+0xd8>)
 80013fe:	f7ff fe03 	bl	8001008 <W25Q32_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8001402:	2201      	movs	r2, #1
 8001404:	2104      	movs	r1, #4
 8001406:	4812      	ldr	r0, [pc, #72]	; (8001450 <main+0xd4>)
 8001408:	f003 fb7e 	bl	8004b08 <HAL_GPIO_WritePin>
//	First_Start();
	Flash_get_info();
 800140c:	f000 fda6 	bl	8001f5c <Flash_get_info>
	Response();
 8001410:	f000 fc94 	bl	8001d3c <Response>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		Blink_Led();
 8001414:	f001 fc62 	bl	8002cdc <Blink_Led>
		Handle_Command();
 8001418:	f000 fdf2 	bl	8002000 <Handle_Command>
		en_motor();
 800141c:	f001 fab4 	bl	8002988 <en_motor>
		control_door();
 8001420:	f001 fa3c 	bl	800289c <control_door>
		control_led();
 8001424:	f001 fbf4 	bl	8002c10 <control_led>
		Send_data();
 8001428:	f000 fdd2 	bl	8001fd0 <Send_data>
		buzzer();
 800142c:	f001 fc72 	bl	8002d14 <buzzer>
		Blink_Led();
 8001430:	e7f0      	b.n	8001414 <main+0x98>
 8001432:	bf00      	nop
 8001434:	2000109d 	.word	0x2000109d
 8001438:	20000bf4 	.word	0x20000bf4
 800143c:	20000b1c 	.word	0x20000b1c
 8001440:	20000ad4 	.word	0x20000ad4
 8001444:	20000a8c 	.word	0x20000a8c
 8001448:	20000b64 	.word	0x20000b64
 800144c:	20000bac 	.word	0x20000bac
 8001450:	40020400 	.word	0x40020400
 8001454:	20000a34 	.word	0x20000a34

08001458 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b094      	sub	sp, #80	; 0x50
 800145c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800145e:	f107 0320 	add.w	r3, r7, #32
 8001462:	2230      	movs	r2, #48	; 0x30
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f007 f8ce 	bl	8008608 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	4b23      	ldr	r3, [pc, #140]	; (8001510 <SystemClock_Config+0xb8>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	4a22      	ldr	r2, [pc, #136]	; (8001510 <SystemClock_Config+0xb8>)
 8001486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148a:	6413      	str	r3, [r2, #64]	; 0x40
 800148c:	4b20      	ldr	r3, [pc, #128]	; (8001510 <SystemClock_Config+0xb8>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <SystemClock_Config+0xbc>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014a4:	4a1b      	ldr	r2, [pc, #108]	; (8001514 <SystemClock_Config+0xbc>)
 80014a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <SystemClock_Config+0xbc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014b8:	2302      	movs	r3, #2
 80014ba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014bc:	2301      	movs	r3, #1
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c0:	2310      	movs	r3, #16
 80014c2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80014c8:	f107 0320 	add.w	r3, r7, #32
 80014cc:	4618      	mov	r0, r3
 80014ce:	f003 fb67 	bl	8004ba0 <HAL_RCC_OscConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SystemClock_Config+0x84>
		Error_Handler();
 80014d8:	f001 ff94 	bl	8003404 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80014dc:	230f      	movs	r3, #15
 80014de:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f003 fdca 	bl	8005090 <HAL_RCC_ClockConfig>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <SystemClock_Config+0xae>
		Error_Handler();
 8001502:	f001 ff7f 	bl	8003404 <Error_Handler>
	}
}
 8001506:	bf00      	nop
 8001508:	3750      	adds	r7, #80	; 0x50
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	40007000 	.word	0x40007000

08001518 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800151e:	463b      	mov	r3, r7
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <MX_ADC1_Init+0x98>)
 800152c:	4a21      	ldr	r2, [pc, #132]	; (80015b4 <MX_ADC1_Init+0x9c>)
 800152e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001530:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <MX_ADC1_Init+0x98>)
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001536:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <MX_ADC1_Init+0x98>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800153c:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <MX_ADC1_Init+0x98>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001542:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <MX_ADC1_Init+0x98>)
 8001544:	2200      	movs	r2, #0
 8001546:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <MX_ADC1_Init+0x98>)
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <MX_ADC1_Init+0x98>)
 8001552:	2200      	movs	r2, #0
 8001554:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001556:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <MX_ADC1_Init+0x98>)
 8001558:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <MX_ADC1_Init+0xa0>)
 800155a:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <MX_ADC1_Init+0x98>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <MX_ADC1_Init+0x98>)
 8001564:	2201      	movs	r2, #1
 8001566:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_ADC1_Init+0x98>)
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <MX_ADC1_Init+0x98>)
 8001572:	2201      	movs	r2, #1
 8001574:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001576:	480e      	ldr	r0, [pc, #56]	; (80015b0 <MX_ADC1_Init+0x98>)
 8001578:	f002 fba4 	bl	8003cc4 <HAL_ADC_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_ADC1_Init+0x6e>
		Error_Handler();
 8001582:	f001 ff3f 	bl	8003404 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8001586:	2305      	movs	r3, #5
 8001588:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800158a:	2301      	movs	r3, #1
 800158c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001592:	463b      	mov	r3, r7
 8001594:	4619      	mov	r1, r3
 8001596:	4806      	ldr	r0, [pc, #24]	; (80015b0 <MX_ADC1_Init+0x98>)
 8001598:	f002 fd58 	bl	800404c <HAL_ADC_ConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_ADC1_Init+0x8e>
		Error_Handler();
 80015a2:	f001 ff2f 	bl	8003404 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200009ec 	.word	0x200009ec
 80015b4:	40012000 	.word	0x40012000
 80015b8:	0f000001 	.word	0x0f000001

080015bc <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <MX_SPI2_Init+0x64>)
 80015c2:	4a18      	ldr	r2, [pc, #96]	; (8001624 <MX_SPI2_Init+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <MX_SPI2_Init+0x64>)
 80015c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015cc:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <MX_SPI2_Init+0x64>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <MX_SPI2_Init+0x64>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_SPI2_Init+0x64>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <MX_SPI2_Init+0x64>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MX_SPI2_Init+0x64>)
 80015e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ec:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <MX_SPI2_Init+0x64>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015f4:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <MX_SPI2_Init+0x64>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MX_SPI2_Init+0x64>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <MX_SPI2_Init+0x64>)
 8001602:	2200      	movs	r2, #0
 8001604:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_SPI2_Init+0x64>)
 8001608:	220a      	movs	r2, #10
 800160a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800160c:	4804      	ldr	r0, [pc, #16]	; (8001620 <MX_SPI2_Init+0x64>)
 800160e:	f003 ff1f 	bl	8005450 <HAL_SPI_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_SPI2_Init+0x60>
		Error_Handler();
 8001618:	f001 fef4 	bl	8003404 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000a34 	.word	0x20000a34
 8001624:	40003800 	.word	0x40003800

08001628 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b096      	sub	sp, #88	; 0x58
 800162c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800162e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800163c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]
 8001656:	615a      	str	r2, [r3, #20]
 8001658:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2220      	movs	r2, #32
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f006 ffd1 	bl	8008608 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001666:	4b44      	ldr	r3, [pc, #272]	; (8001778 <MX_TIM1_Init+0x150>)
 8001668:	4a44      	ldr	r2, [pc, #272]	; (800177c <MX_TIM1_Init+0x154>)
 800166a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1599;
 800166c:	4b42      	ldr	r3, [pc, #264]	; (8001778 <MX_TIM1_Init+0x150>)
 800166e:	f240 623f 	movw	r2, #1599	; 0x63f
 8001672:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001674:	4b40      	ldr	r3, [pc, #256]	; (8001778 <MX_TIM1_Init+0x150>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 199;
 800167a:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <MX_TIM1_Init+0x150>)
 800167c:	22c7      	movs	r2, #199	; 0xc7
 800167e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001680:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <MX_TIM1_Init+0x150>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001686:	4b3c      	ldr	r3, [pc, #240]	; (8001778 <MX_TIM1_Init+0x150>)
 8001688:	2200      	movs	r2, #0
 800168a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168c:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <MX_TIM1_Init+0x150>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001692:	4839      	ldr	r0, [pc, #228]	; (8001778 <MX_TIM1_Init+0x150>)
 8001694:	f004 fb22 	bl	8005cdc <HAL_TIM_Base_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM1_Init+0x7a>
		Error_Handler();
 800169e:	f001 feb1 	bl	8003404 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a6:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80016a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016ac:	4619      	mov	r1, r3
 80016ae:	4832      	ldr	r0, [pc, #200]	; (8001778 <MX_TIM1_Init+0x150>)
 80016b0:	f005 f828 	bl	8006704 <HAL_TIM_ConfigClockSource>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM1_Init+0x96>
		Error_Handler();
 80016ba:	f001 fea3 	bl	8003404 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80016be:	482e      	ldr	r0, [pc, #184]	; (8001778 <MX_TIM1_Init+0x150>)
 80016c0:	f004 fc18 	bl	8005ef4 <HAL_TIM_PWM_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM1_Init+0xa6>
		Error_Handler();
 80016ca:	f001 fe9b 	bl	8003404 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80016d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016da:	4619      	mov	r1, r3
 80016dc:	4826      	ldr	r0, [pc, #152]	; (8001778 <MX_TIM1_Init+0x150>)
 80016de:	f005 fbcd 	bl	8006e7c <HAL_TIMEx_MasterConfigSynchronization>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80016e8:	f001 fe8c 	bl	8003404 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ec:	2360      	movs	r3, #96	; 0x60
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016f8:	2300      	movs	r3, #0
 80016fa:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001700:	2300      	movs	r3, #0
 8001702:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170c:	2200      	movs	r2, #0
 800170e:	4619      	mov	r1, r3
 8001710:	4819      	ldr	r0, [pc, #100]	; (8001778 <MX_TIM1_Init+0x150>)
 8001712:	f004 ff35 	bl	8006580 <HAL_TIM_PWM_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 800171c:	f001 fe72 	bl	8003404 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8001720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001724:	220c      	movs	r2, #12
 8001726:	4619      	mov	r1, r3
 8001728:	4813      	ldr	r0, [pc, #76]	; (8001778 <MX_TIM1_Init+0x150>)
 800172a:	f004 ff29 	bl	8006580 <HAL_TIM_PWM_ConfigChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM1_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 8001734:	f001 fe66 	bl	8003404 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800174c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001750:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4619      	mov	r1, r3
 800175a:	4807      	ldr	r0, [pc, #28]	; (8001778 <MX_TIM1_Init+0x150>)
 800175c:	f005 fbfc 	bl	8006f58 <HAL_TIMEx_ConfigBreakDeadTime>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM1_Init+0x142>
			!= HAL_OK) {
		Error_Handler();
 8001766:	f001 fe4d 	bl	8003404 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800176a:	4803      	ldr	r0, [pc, #12]	; (8001778 <MX_TIM1_Init+0x150>)
 800176c:	f001 ffdc 	bl	8003728 <HAL_TIM_MspPostInit>

}
 8001770:	bf00      	nop
 8001772:	3758      	adds	r7, #88	; 0x58
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000a8c 	.word	0x20000a8c
 800177c:	40010000 	.word	0x40010000

08001780 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001794:	463b      	mov	r3, r7
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800179c:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <MX_TIM2_Init+0x94>)
 800179e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <MX_TIM2_Init+0x94>)
 80017a6:	220f      	movs	r2, #15
 80017a8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017aa:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <MX_TIM2_Init+0x94>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80017b0:	4b18      	ldr	r3, [pc, #96]	; (8001814 <MX_TIM2_Init+0x94>)
 80017b2:	f04f 32ff 	mov.w	r2, #4294967295
 80017b6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b8:	4b16      	ldr	r3, [pc, #88]	; (8001814 <MX_TIM2_Init+0x94>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <MX_TIM2_Init+0x94>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80017c4:	4813      	ldr	r0, [pc, #76]	; (8001814 <MX_TIM2_Init+0x94>)
 80017c6:	f004 fa89 	bl	8005cdc <HAL_TIM_Base_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM2_Init+0x54>
		Error_Handler();
 80017d0:	f001 fe18 	bl	8003404 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80017da:	f107 0308 	add.w	r3, r7, #8
 80017de:	4619      	mov	r1, r3
 80017e0:	480c      	ldr	r0, [pc, #48]	; (8001814 <MX_TIM2_Init+0x94>)
 80017e2:	f004 ff8f 	bl	8006704 <HAL_TIM_ConfigClockSource>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM2_Init+0x70>
		Error_Handler();
 80017ec:	f001 fe0a 	bl	8003404 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80017f8:	463b      	mov	r3, r7
 80017fa:	4619      	mov	r1, r3
 80017fc:	4805      	ldr	r0, [pc, #20]	; (8001814 <MX_TIM2_Init+0x94>)
 80017fe:	f005 fb3d 	bl	8006e7c <HAL_TIMEx_MasterConfigSynchronization>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001808:	f001 fdfc 	bl	8003404 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800180c:	bf00      	nop
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000ad4 	.word	0x20000ad4

08001818 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b08e      	sub	sp, #56	; 0x38
 800181c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800181e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800182c:	f107 0320 	add.w	r3, r7, #32
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
 8001844:	615a      	str	r2, [r3, #20]
 8001846:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001848:	4b32      	ldr	r3, [pc, #200]	; (8001914 <MX_TIM3_Init+0xfc>)
 800184a:	4a33      	ldr	r2, [pc, #204]	; (8001918 <MX_TIM3_Init+0x100>)
 800184c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 15;
 800184e:	4b31      	ldr	r3, [pc, #196]	; (8001914 <MX_TIM3_Init+0xfc>)
 8001850:	220f      	movs	r2, #15
 8001852:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001854:	4b2f      	ldr	r3, [pc, #188]	; (8001914 <MX_TIM3_Init+0xfc>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 999;
 800185a:	4b2e      	ldr	r3, [pc, #184]	; (8001914 <MX_TIM3_Init+0xfc>)
 800185c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001860:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001862:	4b2c      	ldr	r3, [pc, #176]	; (8001914 <MX_TIM3_Init+0xfc>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001868:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <MX_TIM3_Init+0xfc>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800186e:	4829      	ldr	r0, [pc, #164]	; (8001914 <MX_TIM3_Init+0xfc>)
 8001870:	f004 fa34 	bl	8005cdc <HAL_TIM_Base_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM3_Init+0x66>
		Error_Handler();
 800187a:	f001 fdc3 	bl	8003404 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001884:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001888:	4619      	mov	r1, r3
 800188a:	4822      	ldr	r0, [pc, #136]	; (8001914 <MX_TIM3_Init+0xfc>)
 800188c:	f004 ff3a 	bl	8006704 <HAL_TIM_ConfigClockSource>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM3_Init+0x82>
		Error_Handler();
 8001896:	f001 fdb5 	bl	8003404 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800189a:	481e      	ldr	r0, [pc, #120]	; (8001914 <MX_TIM3_Init+0xfc>)
 800189c:	f004 fb2a 	bl	8005ef4 <HAL_TIM_PWM_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM3_Init+0x92>
		Error_Handler();
 80018a6:	f001 fdad 	bl	8003404 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80018b2:	f107 0320 	add.w	r3, r7, #32
 80018b6:	4619      	mov	r1, r3
 80018b8:	4816      	ldr	r0, [pc, #88]	; (8001914 <MX_TIM3_Init+0xfc>)
 80018ba:	f005 fadf 	bl	8006e7c <HAL_TIMEx_MasterConfigSynchronization>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 80018c4:	f001 fd9e 	bl	8003404 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c8:	2360      	movs	r3, #96	; 0x60
 80018ca:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	2200      	movs	r2, #0
 80018dc:	4619      	mov	r1, r3
 80018de:	480d      	ldr	r0, [pc, #52]	; (8001914 <MX_TIM3_Init+0xfc>)
 80018e0:	f004 fe4e 	bl	8006580 <HAL_TIM_PWM_ConfigChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 80018ea:	f001 fd8b 	bl	8003404 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2204      	movs	r2, #4
 80018f2:	4619      	mov	r1, r3
 80018f4:	4807      	ldr	r0, [pc, #28]	; (8001914 <MX_TIM3_Init+0xfc>)
 80018f6:	f004 fe43 	bl	8006580 <HAL_TIM_PWM_ConfigChannel>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM3_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8001900:	f001 fd80 	bl	8003404 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001904:	4803      	ldr	r0, [pc, #12]	; (8001914 <MX_TIM3_Init+0xfc>)
 8001906:	f001 ff0f 	bl	8003728 <HAL_TIM_MspPostInit>

}
 800190a:	bf00      	nop
 800190c:	3738      	adds	r7, #56	; 0x38
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000b1c 	.word	0x20000b1c
 8001918:	40000400 	.word	0x40000400

0800191c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b08c      	sub	sp, #48	; 0x30
 8001920:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	2224      	movs	r2, #36	; 0x24
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f006 fe6c 	bl	8008608 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001938:	4b20      	ldr	r3, [pc, #128]	; (80019bc <MX_TIM4_Init+0xa0>)
 800193a:	4a21      	ldr	r2, [pc, #132]	; (80019c0 <MX_TIM4_Init+0xa4>)
 800193c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800193e:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <MX_TIM4_Init+0xa0>)
 8001940:	2200      	movs	r2, #0
 8001942:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001944:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <MX_TIM4_Init+0xa0>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800194a:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <MX_TIM4_Init+0xa0>)
 800194c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001950:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001952:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <MX_TIM4_Init+0xa0>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001958:	4b18      	ldr	r3, [pc, #96]	; (80019bc <MX_TIM4_Init+0xa0>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800195e:	2303      	movs	r3, #3
 8001960:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001966:	2301      	movs	r3, #1
 8001968:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001976:	2301      	movs	r3, #1
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800197a:	2300      	movs	r3, #0
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8001982:	f107 030c 	add.w	r3, r7, #12
 8001986:	4619      	mov	r1, r3
 8001988:	480c      	ldr	r0, [pc, #48]	; (80019bc <MX_TIM4_Init+0xa0>)
 800198a:	f004 fbbd 	bl	8006108 <HAL_TIM_Encoder_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM4_Init+0x7c>
		Error_Handler();
 8001994:	f001 fd36 	bl	8003404 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001998:	2300      	movs	r3, #0
 800199a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	4619      	mov	r1, r3
 80019a4:	4805      	ldr	r0, [pc, #20]	; (80019bc <MX_TIM4_Init+0xa0>)
 80019a6:	f005 fa69 	bl	8006e7c <HAL_TIMEx_MasterConfigSynchronization>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM4_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80019b0:	f001 fd28 	bl	8003404 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	3730      	adds	r7, #48	; 0x30
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000b64 	.word	0x20000b64
 80019c0:	40000800 	.word	0x40000800

080019c4 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08c      	sub	sp, #48	; 0x30
 80019c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	2224      	movs	r2, #36	; 0x24
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f006 fe18 	bl	8008608 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80019e0:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <MX_TIM5_Init+0xa0>)
 80019e2:	4a21      	ldr	r2, [pc, #132]	; (8001a68 <MX_TIM5_Init+0xa4>)
 80019e4:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 80019e6:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <MX_TIM5_Init+0xa0>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <MX_TIM5_Init+0xa0>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 80019f2:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <MX_TIM5_Init+0xa0>)
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295
 80019f8:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <MX_TIM5_Init+0xa0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a00:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <MX_TIM5_Init+0xa0>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a06:	2303      	movs	r3, #3
 8001a08:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480c      	ldr	r0, [pc, #48]	; (8001a64 <MX_TIM5_Init+0xa0>)
 8001a32:	f004 fb69 	bl	8006108 <HAL_TIM_Encoder_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM5_Init+0x7c>
		Error_Handler();
 8001a3c:	f001 fce2 	bl	8003404 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <MX_TIM5_Init+0xa0>)
 8001a4e:	f005 fa15 	bl	8006e7c <HAL_TIMEx_MasterConfigSynchronization>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM5_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001a58:	f001 fcd4 	bl	8003404 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	3730      	adds	r7, #48	; 0x30
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000bac 	.word	0x20000bac
 8001a68:	40000c00 	.word	0x40000c00

08001a6c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a72:	4a12      	ldr	r2, [pc, #72]	; (8001abc <MX_USART1_UART_Init+0x50>)
 8001a74:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a7c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a92:	220c      	movs	r2, #12
 8001a94:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001aa4:	f005 fabe 	bl	8007024 <HAL_UART_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001aae:	f001 fca9 	bl	8003404 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000bf4 	.word	0x20000bf4
 8001abc:	40011000 	.word	0x40011000

08001ac0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	; 0x28
 8001ac4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	4b7a      	ldr	r3, [pc, #488]	; (8001cc4 <MX_GPIO_Init+0x204>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a79      	ldr	r2, [pc, #484]	; (8001cc4 <MX_GPIO_Init+0x204>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b77      	ldr	r3, [pc, #476]	; (8001cc4 <MX_GPIO_Init+0x204>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b73      	ldr	r3, [pc, #460]	; (8001cc4 <MX_GPIO_Init+0x204>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a72      	ldr	r2, [pc, #456]	; (8001cc4 <MX_GPIO_Init+0x204>)
 8001afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b70      	ldr	r3, [pc, #448]	; (8001cc4 <MX_GPIO_Init+0x204>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	4b6c      	ldr	r3, [pc, #432]	; (8001cc4 <MX_GPIO_Init+0x204>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a6b      	ldr	r2, [pc, #428]	; (8001cc4 <MX_GPIO_Init+0x204>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b69      	ldr	r3, [pc, #420]	; (8001cc4 <MX_GPIO_Init+0x204>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	4b65      	ldr	r3, [pc, #404]	; (8001cc4 <MX_GPIO_Init+0x204>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a64      	ldr	r2, [pc, #400]	; (8001cc4 <MX_GPIO_Init+0x204>)
 8001b34:	f043 0302 	orr.w	r3, r3, #2
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b62      	ldr	r3, [pc, #392]	; (8001cc4 <MX_GPIO_Init+0x204>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001b46:	2200      	movs	r2, #0
 8001b48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b4c:	485e      	ldr	r0, [pc, #376]	; (8001cc8 <MX_GPIO_Init+0x208>)
 8001b4e:	f002 ffdb 	bl	8004b08 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001b52:	2201      	movs	r2, #1
 8001b54:	2104      	movs	r1, #4
 8001b56:	485d      	ldr	r0, [pc, #372]	; (8001ccc <MX_GPIO_Init+0x20c>)
 8001b58:	f002 ffd6 	bl	8004b08 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LIGHT_Pin | CS_Pin | LIGHT2_Pin | DHT_Pin,
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f241 6108 	movw	r1, #5640	; 0x1608
 8001b62:	485a      	ldr	r0, [pc, #360]	; (8001ccc <MX_GPIO_Init+0x20c>)
 8001b64:	f002 ffd0 	bl	8004b08 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b6c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4851      	ldr	r0, [pc, #324]	; (8001cc8 <MX_GPIO_Init+0x208>)
 8001b82:	f002 fe25 	bl	80047d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN6_Pin BTN4_Pin */
	GPIO_InitStruct.Pin = BTN6_Pin | BTN4_Pin;
 8001b86:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b8a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b8c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b90:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	484a      	ldr	r0, [pc, #296]	; (8001cc8 <MX_GPIO_Init+0x208>)
 8001b9e:	f002 fe17 	bl	80047d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SR502_2_Pin LSS_Pin */
	GPIO_InitStruct.Pin = SR502_2_Pin | LSS_Pin;
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ba6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001baa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4846      	ldr	r0, [pc, #280]	; (8001cd0 <MX_GPIO_Init+0x210>)
 8001bb8:	f002 fe0a 	bl	80047d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SR501_Pin LSS2_Pin */
	GPIO_InitStruct.Pin = SR501_Pin | LSS2_Pin;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001bc0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001bc4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	483e      	ldr	r0, [pc, #248]	; (8001ccc <MX_GPIO_Init+0x20c>)
 8001bd2:	f002 fdfd 	bl	80047d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BUZZER_Pin LIGHT_Pin CS_Pin LIGHT2_Pin */
	GPIO_InitStruct.Pin = BUZZER_Pin | LIGHT_Pin | CS_Pin | LIGHT2_Pin;
 8001bd6:	f241 430c 	movw	r3, #5132	; 0x140c
 8001bda:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	4837      	ldr	r0, [pc, #220]	; (8001ccc <MX_GPIO_Init+0x20c>)
 8001bf0:	f002 fdee 	bl	80047d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN5_Pin */
	GPIO_InitStruct.Pin = BTN5_Pin;
 8001bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bfa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bfe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c00:	2301      	movs	r3, #1
 8001c02:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BTN5_GPIO_Port, &GPIO_InitStruct);
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4831      	ldr	r0, [pc, #196]	; (8001cd0 <MX_GPIO_Init+0x210>)
 8001c0c:	f002 fde0 	bl	80047d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin | BTN2_Pin | BTN3_Pin;
 8001c10:	f44f 7398 	mov.w	r3, #304	; 0x130
 8001c14:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c16:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c1a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4619      	mov	r1, r3
 8001c26:	4829      	ldr	r0, [pc, #164]	; (8001ccc <MX_GPIO_Init+0x20c>)
 8001c28:	f002 fdd2 	bl	80047d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : DHT_Pin */
	GPIO_InitStruct.Pin = DHT_Pin;
 8001c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c30:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	4821      	ldr	r0, [pc, #132]	; (8001ccc <MX_GPIO_Init+0x20c>)
 8001c46:	f002 fdc3 	bl	80047d0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2105      	movs	r1, #5
 8001c4e:	2006      	movs	r0, #6
 8001c50:	f002 fcf5 	bl	800463e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c54:	2006      	movs	r0, #6
 8001c56:	f002 fd0e 	bl	8004676 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2105      	movs	r1, #5
 8001c5e:	2007      	movs	r0, #7
 8001c60:	f002 fced 	bl	800463e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c64:	2007      	movs	r0, #7
 8001c66:	f002 fd06 	bl	8004676 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2105      	movs	r1, #5
 8001c6e:	2008      	movs	r0, #8
 8001c70:	f002 fce5 	bl	800463e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001c74:	2008      	movs	r0, #8
 8001c76:	f002 fcfe 	bl	8004676 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2105      	movs	r1, #5
 8001c7e:	2009      	movs	r0, #9
 8001c80:	f002 fcdd 	bl	800463e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001c84:	2009      	movs	r0, #9
 8001c86:	f002 fcf6 	bl	8004676 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 6, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2106      	movs	r1, #6
 8001c8e:	200a      	movs	r0, #10
 8001c90:	f002 fcd5 	bl	800463e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001c94:	200a      	movs	r0, #10
 8001c96:	f002 fcee 	bl	8004676 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2106      	movs	r1, #6
 8001c9e:	2017      	movs	r0, #23
 8001ca0:	f002 fccd 	bl	800463e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ca4:	2017      	movs	r0, #23
 8001ca6:	f002 fce6 	bl	8004676 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2106      	movs	r1, #6
 8001cae:	2028      	movs	r0, #40	; 0x28
 8001cb0:	f002 fcc5 	bl	800463e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cb4:	2028      	movs	r0, #40	; 0x28
 8001cb6:	f002 fcde 	bl	8004676 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001cba:	bf00      	nop
 8001cbc:	3728      	adds	r7, #40	; 0x28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020800 	.word	0x40020800
 8001ccc:	40020400 	.word	0x40020400
 8001cd0:	40020000 	.word	0x40020000

08001cd4 <gpio_set_mode>:
//	d_done = 1;
//	d_done_2 = 1;
//	f_done = 1;
//	f_done_2 = 1;
//}
void gpio_set_mode(uint8_t mode) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001cde:	f107 030c 	add.w	r3, r7, #12
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	60da      	str	r2, [r3, #12]
 8001cec:	611a      	str	r2, [r3, #16]
	if (mode) {						// output
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00f      	beq.n	8001d14 <gpio_set_mode+0x40>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf8:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d02:	2302      	movs	r3, #2
 8001d04:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	480a      	ldr	r0, [pc, #40]	; (8001d38 <gpio_set_mode+0x64>)
 8001d0e:	f002 fd5f 	bl	80047d0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	}
}
 8001d12:	e00c      	b.n	8001d2e <gpio_set_mode+0x5a>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d18:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d22:	f107 030c 	add.w	r3, r7, #12
 8001d26:	4619      	mov	r1, r3
 8001d28:	4803      	ldr	r0, [pc, #12]	; (8001d38 <gpio_set_mode+0x64>)
 8001d2a:	f002 fd51 	bl	80047d0 <HAL_GPIO_Init>
}
 8001d2e:	bf00      	nop
 8001d30:	3720      	adds	r7, #32
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40020400 	.word	0x40020400

08001d3c <Response>:

void Response() {
 8001d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d40:	b0a3      	sub	sp, #140	; 0x8c
 8001d42:	af14      	add	r7, sp, #80	; 0x50
	dht22_GetValue(&dht);
 8001d44:	4840      	ldr	r0, [pc, #256]	; (8001e48 <Response+0x10c>)
 8001d46:	f001 f84f 	bl	8002de8 <dht22_GetValue>
	getADC_value();
 8001d4a:	f001 fb3b 	bl	80033c4 <getADC_value>
	motor_get_speed();
 8001d4e:	f000 fead 	bl	8002aac <motor_get_speed>
//			door2, d_mod_2, door_state_2,
//			fan1, motor_speed, fan2, motor_speed_2,
//			led1, led_mod, led_state,
//			led2, led_mod_2, led_state_2,
//			buz_state);
	Flash_write_info();
 8001d52:	f000 f8a9 	bl	8001ea8 <Flash_write_info>

	sprintf((char*) tx,
 8001d56:	4b3d      	ldr	r3, [pc, #244]	; (8001e4c <Response+0x110>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fbfc 	bl	8000558 <__aeabi_f2d>
 8001d60:	4680      	mov	r8, r0
 8001d62:	4689      	mov	r9, r1
 8001d64:	4b3a      	ldr	r3, [pc, #232]	; (8001e50 <Response+0x114>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fbf5 	bl	8000558 <__aeabi_f2d>
 8001d6e:	4604      	mov	r4, r0
 8001d70:	460d      	mov	r5, r1
 8001d72:	4b38      	ldr	r3, [pc, #224]	; (8001e54 <Response+0x118>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	637b      	str	r3, [r7, #52]	; 0x34
 8001d78:	4b37      	ldr	r3, [pc, #220]	; (8001e58 <Response+0x11c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d7e:	4b37      	ldr	r3, [pc, #220]	; (8001e5c <Response+0x120>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d84:	4b36      	ldr	r3, [pc, #216]	; (8001e60 <Response+0x124>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d8a:	4b36      	ldr	r3, [pc, #216]	; (8001e64 <Response+0x128>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d90:	4b35      	ldr	r3, [pc, #212]	; (8001e68 <Response+0x12c>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	623b      	str	r3, [r7, #32]
 8001d96:	4b35      	ldr	r3, [pc, #212]	; (8001e6c <Response+0x130>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	4b34      	ldr	r3, [pc, #208]	; (8001e70 <Response+0x134>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	61bb      	str	r3, [r7, #24]
 8001da2:	4b34      	ldr	r3, [pc, #208]	; (8001e74 <Response+0x138>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	617a      	str	r2, [r7, #20]
 8001da8:	4b33      	ldr	r3, [pc, #204]	; (8001e78 <Response+0x13c>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	4b33      	ldr	r3, [pc, #204]	; (8001e7c <Response+0x140>)
 8001db0:	681e      	ldr	r6, [r3, #0]
 8001db2:	4b33      	ldr	r3, [pc, #204]	; (8001e80 <Response+0x144>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	4b32      	ldr	r3, [pc, #200]	; (8001e84 <Response+0x148>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	4b32      	ldr	r3, [pc, #200]	; (8001e88 <Response+0x14c>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <Response+0x150>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	4b31      	ldr	r3, [pc, #196]	; (8001e90 <Response+0x154>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4b30      	ldr	r3, [pc, #192]	; (8001e94 <Response+0x158>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4b30      	ldr	r3, [pc, #192]	; (8001e98 <Response+0x15c>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	9313      	str	r3, [sp, #76]	; 0x4c
 8001ddc:	9212      	str	r2, [sp, #72]	; 0x48
 8001dde:	9111      	str	r1, [sp, #68]	; 0x44
 8001de0:	9010      	str	r0, [sp, #64]	; 0x40
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	910f      	str	r1, [sp, #60]	; 0x3c
 8001de6:	68b9      	ldr	r1, [r7, #8]
 8001de8:	910e      	str	r1, [sp, #56]	; 0x38
 8001dea:	68f9      	ldr	r1, [r7, #12]
 8001dec:	910d      	str	r1, [sp, #52]	; 0x34
 8001dee:	960c      	str	r6, [sp, #48]	; 0x30
 8001df0:	6939      	ldr	r1, [r7, #16]
 8001df2:	910b      	str	r1, [sp, #44]	; 0x2c
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	920a      	str	r2, [sp, #40]	; 0x28
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	9209      	str	r2, [sp, #36]	; 0x24
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	9208      	str	r2, [sp, #32]
 8001e00:	6a3a      	ldr	r2, [r7, #32]
 8001e02:	9207      	str	r2, [sp, #28]
 8001e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e06:	9206      	str	r2, [sp, #24]
 8001e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e0a:	9205      	str	r2, [sp, #20]
 8001e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e0e:	9204      	str	r2, [sp, #16]
 8001e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e12:	9203      	str	r2, [sp, #12]
 8001e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e16:	9302      	str	r3, [sp, #8]
 8001e18:	e9cd 4500 	strd	r4, r5, [sp]
 8001e1c:	4642      	mov	r2, r8
 8001e1e:	464b      	mov	r3, r9
 8001e20:	491e      	ldr	r1, [pc, #120]	; (8001e9c <Response+0x160>)
 8001e22:	481f      	ldr	r0, [pc, #124]	; (8001ea0 <Response+0x164>)
 8001e24:	f006 fc14 	bl	8008650 <sprintf>
			"tem:%.1f\thum:%.1f\tmq2:%d\tdr1:%d\tdm1:%d\tds1:%d\tdr2:%d\tdm2:%d\tds2:%d\tfn1:%d\tfs1:%d\tfn2:%d\tfs2:%d\tld1:%d\tlm1:%d\tls1:%d\tld2:%d\tlm2:%d\tls2:%d\tbuz:%d",
			tem, hum, adc_val, door1, d_mod, door_state, door2, d_mod_2,
			door_state_2, fan1, motor_speed, fan2, motor_speed_2, led1, led_mod,
			led_state, led2, led_mod_2, led_state_2, buz_state);
	HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8001e28:	481d      	ldr	r0, [pc, #116]	; (8001ea0 <Response+0x164>)
 8001e2a:	f7fe f9d9 	bl	80001e0 <strlen>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	23c8      	movs	r3, #200	; 0xc8
 8001e34:	491a      	ldr	r1, [pc, #104]	; (8001ea0 <Response+0x164>)
 8001e36:	481b      	ldr	r0, [pc, #108]	; (8001ea4 <Response+0x168>)
 8001e38:	f005 f941 	bl	80070be <HAL_UART_Transmit>
}
 8001e3c:	bf00      	nop
 8001e3e:	373c      	adds	r7, #60	; 0x3c
 8001e40:	46bd      	mov	sp, r7
 8001e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e46:	bf00      	nop
 8001e48:	200010e4 	.word	0x200010e4
 8001e4c:	200010ec 	.word	0x200010ec
 8001e50:	200010f0 	.word	0x200010f0
 8001e54:	200010e0 	.word	0x200010e0
 8001e58:	200010b8 	.word	0x200010b8
 8001e5c:	200010ba 	.word	0x200010ba
 8001e60:	200010bc 	.word	0x200010bc
 8001e64:	200010b9 	.word	0x200010b9
 8001e68:	200010bb 	.word	0x200010bb
 8001e6c:	200010bd 	.word	0x200010bd
 8001e70:	200010c9 	.word	0x200010c9
 8001e74:	200010d0 	.word	0x200010d0
 8001e78:	200010ca 	.word	0x200010ca
 8001e7c:	200010d4 	.word	0x200010d4
 8001e80:	200010ac 	.word	0x200010ac
 8001e84:	200010b0 	.word	0x200010b0
 8001e88:	200010ae 	.word	0x200010ae
 8001e8c:	200010ad 	.word	0x200010ad
 8001e90:	200010b1 	.word	0x200010b1
 8001e94:	200010af 	.word	0x200010af
 8001e98:	200010c8 	.word	0x200010c8
 8001e9c:	0800fc48 	.word	0x0800fc48
 8001ea0:	20000c9c 	.word	0x20000c9c
 8001ea4:	20000bf4 	.word	0x20000bf4

08001ea8 <Flash_write_info>:

void Flash_write_info() {
 8001ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eaa:	b08b      	sub	sp, #44	; 0x2c
 8001eac:	af08      	add	r7, sp, #32
	sprintf((char*) flash_data, "%d %d %d %d %d %d %d %d %d %d", door1, d_mod,
 8001eae:	4b1f      	ldr	r3, [pc, #124]	; (8001f2c <Flash_write_info+0x84>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	469c      	mov	ip, r3
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <Flash_write_info+0x88>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	469e      	mov	lr, r3
 8001eba:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <Flash_write_info+0x8c>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <Flash_write_info+0x90>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <Flash_write_info+0x94>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <Flash_write_info+0x98>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	461c      	mov	r4, r3
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <Flash_write_info+0x9c>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	461d      	mov	r5, r3
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <Flash_write_info+0xa0>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	461e      	mov	r6, r3
 8001ede:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <Flash_write_info+0xa4>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <Flash_write_info+0xa8>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	9307      	str	r3, [sp, #28]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	9306      	str	r3, [sp, #24]
 8001eee:	9605      	str	r6, [sp, #20]
 8001ef0:	9504      	str	r5, [sp, #16]
 8001ef2:	9403      	str	r4, [sp, #12]
 8001ef4:	9002      	str	r0, [sp, #8]
 8001ef6:	9101      	str	r1, [sp, #4]
 8001ef8:	9200      	str	r2, [sp, #0]
 8001efa:	4673      	mov	r3, lr
 8001efc:	4662      	mov	r2, ip
 8001efe:	4915      	ldr	r1, [pc, #84]	; (8001f54 <Flash_write_info+0xac>)
 8001f00:	4815      	ldr	r0, [pc, #84]	; (8001f58 <Flash_write_info+0xb0>)
 8001f02:	f006 fba5 	bl	8008650 <sprintf>
			door2, d_mod_2, fan1, fan2, led1, led_mod, led2, led_mod_2);
	W25Q32_erase4k(SECTOR_USE * SECTOR_SIZE);
 8001f06:	f44f 3024 	mov.w	r0, #167936	; 0x29000
 8001f0a:	f7ff f9fb 	bl	8001304 <W25Q32_erase4k>
	W25Q32_WriteData(flash_data, SECTOR_USE * SECTOR_SIZE,
			strlen((char*) flash_data));
 8001f0e:	4812      	ldr	r0, [pc, #72]	; (8001f58 <Flash_write_info+0xb0>)
 8001f10:	f7fe f966 	bl	80001e0 <strlen>
 8001f14:	4603      	mov	r3, r0
	W25Q32_WriteData(flash_data, SECTOR_USE * SECTOR_SIZE,
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f44f 3124 	mov.w	r1, #167936	; 0x29000
 8001f1e:	480e      	ldr	r0, [pc, #56]	; (8001f58 <Flash_write_info+0xb0>)
 8001f20:	f7ff f990 	bl	8001244 <W25Q32_WriteData>
//	HAL_UART_Transmit(&huart1, flash_data, strlen((char*) flash_data), 200);
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f2c:	200010b8 	.word	0x200010b8
 8001f30:	200010ba 	.word	0x200010ba
 8001f34:	200010b9 	.word	0x200010b9
 8001f38:	200010bb 	.word	0x200010bb
 8001f3c:	200010c9 	.word	0x200010c9
 8001f40:	200010ca 	.word	0x200010ca
 8001f44:	200010ac 	.word	0x200010ac
 8001f48:	200010b0 	.word	0x200010b0
 8001f4c:	200010ad 	.word	0x200010ad
 8001f50:	200010b1 	.word	0x200010b1
 8001f54:	0800fcd8 	.word	0x0800fcd8
 8001f58:	20001100 	.word	0x20001100

08001f5c <Flash_get_info>:

void Flash_get_info() {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af08      	add	r7, sp, #32
	W25Q32_ReadData(flash_data, SECTOR_USE * SECTOR_SIZE, 19);
 8001f62:	2213      	movs	r2, #19
 8001f64:	f44f 3124 	mov.w	r1, #167936	; 0x29000
 8001f68:	480d      	ldr	r0, [pc, #52]	; (8001fa0 <Flash_get_info+0x44>)
 8001f6a:	f7ff f929 	bl	80011c0 <W25Q32_ReadData>
//	HAL_UART_Transmit(&huart1, flash_data, strlen((char*) flash_data), 200);
//	sscanf((char*) flash_data, "%d %d %d %d %d %d %d %d %d %d",
//			&door1, &d_mod, &door2, &d_mod_2,
//			&fan1, &fan2, &led1, &led_mod,
//			&led2, &led_mod_2);
	sscanf((char*) flash_data,
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <Flash_get_info+0x48>)
 8001f70:	9307      	str	r3, [sp, #28]
 8001f72:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <Flash_get_info+0x4c>)
 8001f74:	9306      	str	r3, [sp, #24]
 8001f76:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <Flash_get_info+0x50>)
 8001f78:	9305      	str	r3, [sp, #20]
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <Flash_get_info+0x54>)
 8001f7c:	9304      	str	r3, [sp, #16]
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <Flash_get_info+0x58>)
 8001f80:	9303      	str	r3, [sp, #12]
 8001f82:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <Flash_get_info+0x5c>)
 8001f84:	9302      	str	r3, [sp, #8]
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <Flash_get_info+0x60>)
 8001f88:	9301      	str	r3, [sp, #4]
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <Flash_get_info+0x64>)
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <Flash_get_info+0x68>)
 8001f90:	4a0d      	ldr	r2, [pc, #52]	; (8001fc8 <Flash_get_info+0x6c>)
 8001f92:	490e      	ldr	r1, [pc, #56]	; (8001fcc <Flash_get_info+0x70>)
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <Flash_get_info+0x44>)
 8001f96:	f006 fb7b 	bl	8008690 <sscanf>
			"%hhu %hhu %hhu %hhu %hhu %hhu %hhu %hhu %hhu %hhu", &door1, &d_mod,
			&door2, &d_mod_2, &fan1, &fan2, &led1, &led_mod, &led2, &led_mod_2);
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20001100 	.word	0x20001100
 8001fa4:	200010b1 	.word	0x200010b1
 8001fa8:	200010ad 	.word	0x200010ad
 8001fac:	200010b0 	.word	0x200010b0
 8001fb0:	200010ac 	.word	0x200010ac
 8001fb4:	200010ca 	.word	0x200010ca
 8001fb8:	200010c9 	.word	0x200010c9
 8001fbc:	200010bb 	.word	0x200010bb
 8001fc0:	200010b9 	.word	0x200010b9
 8001fc4:	200010ba 	.word	0x200010ba
 8001fc8:	200010b8 	.word	0x200010b8
 8001fcc:	0800fcf8 	.word	0x0800fcf8

08001fd0 <Send_data>:

void Send_data() {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
	if (g_sys_tick - dur_tick >= DURATION) {
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <Send_data+0x28>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <Send_data+0x2c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f247 522f 	movw	r2, #29999	; 0x752f
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d905      	bls.n	8001ff2 <Send_data+0x22>
		Response();
 8001fe6:	f7ff fea9 	bl	8001d3c <Response>
		dur_tick = g_sys_tick;
 8001fea:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <Send_data+0x28>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a03      	ldr	r2, [pc, #12]	; (8001ffc <Send_data+0x2c>)
 8001ff0:	6013      	str	r3, [r2, #0]
	}
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200010a0 	.word	0x200010a0
 8001ffc:	200010a4 	.word	0x200010a4

08002000 <Handle_Command>:

void Handle_Command() {
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
	if (g_sys_tick - uart_last_rcv >= 20 && strlen((char*) uart_buf) >= 7) {
 8002004:	4ba2      	ldr	r3, [pc, #648]	; (8002290 <Handle_Command+0x290>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4aa2      	ldr	r2, [pc, #648]	; (8002294 <Handle_Command+0x294>)
 800200a:	7812      	ldrb	r2, [r2, #0]
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	2b13      	cmp	r3, #19
 8002010:	f240 8412 	bls.w	8002838 <Handle_Command+0x838>
 8002014:	48a0      	ldr	r0, [pc, #640]	; (8002298 <Handle_Command+0x298>)
 8002016:	f7fe f8e3 	bl	80001e0 <strlen>
 800201a:	4603      	mov	r3, r0
 800201c:	2b06      	cmp	r3, #6
 800201e:	f240 840b 	bls.w	8002838 <Handle_Command+0x838>
		// LIGHT command
		if (isDebug) {
 8002022:	4b9e      	ldr	r3, [pc, #632]	; (800229c <Handle_Command+0x29c>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <Handle_Command+0x3e>
			HAL_UART_Transmit(&huart1, uart_buf, strlen((char*) uart_buf), 200);
 800202a:	489b      	ldr	r0, [pc, #620]	; (8002298 <Handle_Command+0x298>)
 800202c:	f7fe f8d8 	bl	80001e0 <strlen>
 8002030:	4603      	mov	r3, r0
 8002032:	b29a      	uxth	r2, r3
 8002034:	23c8      	movs	r3, #200	; 0xc8
 8002036:	4998      	ldr	r1, [pc, #608]	; (8002298 <Handle_Command+0x298>)
 8002038:	4899      	ldr	r0, [pc, #612]	; (80022a0 <Handle_Command+0x2a0>)
 800203a:	f005 f840 	bl	80070be <HAL_UART_Transmit>
		}
		if (strlen((char*) uart_buf) == 7
 800203e:	4896      	ldr	r0, [pc, #600]	; (8002298 <Handle_Command+0x298>)
 8002040:	f7fe f8ce 	bl	80001e0 <strlen>
 8002044:	4603      	mov	r3, r0
 8002046:	2b07      	cmp	r3, #7
 8002048:	d129      	bne.n	800209e <Handle_Command+0x9e>
				&& strncmp((char*) uart_buf, "c:l:1:", 6) == 0) {
 800204a:	2206      	movs	r2, #6
 800204c:	4995      	ldr	r1, [pc, #596]	; (80022a4 <Handle_Command+0x2a4>)
 800204e:	4892      	ldr	r0, [pc, #584]	; (8002298 <Handle_Command+0x298>)
 8002050:	f006 fb8f 	bl	8008772 <strncmp>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d121      	bne.n	800209e <Handle_Command+0x9e>
			led1 = atoi((char*) uart_buf + 6);
 800205a:	4b93      	ldr	r3, [pc, #588]	; (80022a8 <Handle_Command+0x2a8>)
 800205c:	4618      	mov	r0, r3
 800205e:	f006 f859 	bl	8008114 <atoi>
 8002062:	4603      	mov	r3, r0
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4b91      	ldr	r3, [pc, #580]	; (80022ac <Handle_Command+0x2ac>)
 8002068:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 800206a:	f000 fe99 	bl	8002da0 <clear_uart_buf>
			if (isDebug) {
 800206e:	4b8b      	ldr	r3, [pc, #556]	; (800229c <Handle_Command+0x29c>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d010      	beq.n	8002098 <Handle_Command+0x98>
				sprintf((char*) tx, "LED 1 active: %d\n", led1);
 8002076:	4b8d      	ldr	r3, [pc, #564]	; (80022ac <Handle_Command+0x2ac>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	498c      	ldr	r1, [pc, #560]	; (80022b0 <Handle_Command+0x2b0>)
 800207e:	488d      	ldr	r0, [pc, #564]	; (80022b4 <Handle_Command+0x2b4>)
 8002080:	f006 fae6 	bl	8008650 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002084:	488b      	ldr	r0, [pc, #556]	; (80022b4 <Handle_Command+0x2b4>)
 8002086:	f7fe f8ab 	bl	80001e0 <strlen>
 800208a:	4603      	mov	r3, r0
 800208c:	b29a      	uxth	r2, r3
 800208e:	23c8      	movs	r3, #200	; 0xc8
 8002090:	4988      	ldr	r1, [pc, #544]	; (80022b4 <Handle_Command+0x2b4>)
 8002092:	4883      	ldr	r0, [pc, #524]	; (80022a0 <Handle_Command+0x2a0>)
 8002094:	f005 f813 	bl	80070be <HAL_UART_Transmit>
			}
			Response();
 8002098:	f7ff fe50 	bl	8001d3c <Response>
 800209c:	e3cc      	b.n	8002838 <Handle_Command+0x838>
		} else if (strlen((char*) uart_buf) == 7
 800209e:	487e      	ldr	r0, [pc, #504]	; (8002298 <Handle_Command+0x298>)
 80020a0:	f7fe f89e 	bl	80001e0 <strlen>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b07      	cmp	r3, #7
 80020a8:	d129      	bne.n	80020fe <Handle_Command+0xfe>
				&& strncmp((char*) uart_buf, "c:l:2:", 6) == 0) {
 80020aa:	2206      	movs	r2, #6
 80020ac:	4982      	ldr	r1, [pc, #520]	; (80022b8 <Handle_Command+0x2b8>)
 80020ae:	487a      	ldr	r0, [pc, #488]	; (8002298 <Handle_Command+0x298>)
 80020b0:	f006 fb5f 	bl	8008772 <strncmp>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d121      	bne.n	80020fe <Handle_Command+0xfe>
			led2 = atoi((char*) uart_buf + 6);
 80020ba:	4b7b      	ldr	r3, [pc, #492]	; (80022a8 <Handle_Command+0x2a8>)
 80020bc:	4618      	mov	r0, r3
 80020be:	f006 f829 	bl	8008114 <atoi>
 80020c2:	4603      	mov	r3, r0
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4b7d      	ldr	r3, [pc, #500]	; (80022bc <Handle_Command+0x2bc>)
 80020c8:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 80020ca:	f000 fe69 	bl	8002da0 <clear_uart_buf>
			if (isDebug) {
 80020ce:	4b73      	ldr	r3, [pc, #460]	; (800229c <Handle_Command+0x29c>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d010      	beq.n	80020f8 <Handle_Command+0xf8>
				sprintf((char*) tx, "LED 2 active: %d\n", led2);
 80020d6:	4b79      	ldr	r3, [pc, #484]	; (80022bc <Handle_Command+0x2bc>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	4978      	ldr	r1, [pc, #480]	; (80022c0 <Handle_Command+0x2c0>)
 80020de:	4875      	ldr	r0, [pc, #468]	; (80022b4 <Handle_Command+0x2b4>)
 80020e0:	f006 fab6 	bl	8008650 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 80020e4:	4873      	ldr	r0, [pc, #460]	; (80022b4 <Handle_Command+0x2b4>)
 80020e6:	f7fe f87b 	bl	80001e0 <strlen>
 80020ea:	4603      	mov	r3, r0
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	23c8      	movs	r3, #200	; 0xc8
 80020f0:	4970      	ldr	r1, [pc, #448]	; (80022b4 <Handle_Command+0x2b4>)
 80020f2:	486b      	ldr	r0, [pc, #428]	; (80022a0 <Handle_Command+0x2a0>)
 80020f4:	f004 ffe3 	bl	80070be <HAL_UART_Transmit>
			}
			Response();
 80020f8:	f7ff fe20 	bl	8001d3c <Response>
 80020fc:	e39c      	b.n	8002838 <Handle_Command+0x838>
		} else if (strncmp((char*) uart_buf, "c:l:1:m:", 8) == 0
 80020fe:	2208      	movs	r2, #8
 8002100:	4970      	ldr	r1, [pc, #448]	; (80022c4 <Handle_Command+0x2c4>)
 8002102:	4865      	ldr	r0, [pc, #404]	; (8002298 <Handle_Command+0x298>)
 8002104:	f006 fb35 	bl	8008772 <strncmp>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d129      	bne.n	8002162 <Handle_Command+0x162>
				&& strlen((char*) uart_buf) == 9) {
 800210e:	4862      	ldr	r0, [pc, #392]	; (8002298 <Handle_Command+0x298>)
 8002110:	f7fe f866 	bl	80001e0 <strlen>
 8002114:	4603      	mov	r3, r0
 8002116:	2b09      	cmp	r3, #9
 8002118:	d123      	bne.n	8002162 <Handle_Command+0x162>
			l_done = 1;
 800211a:	4b6b      	ldr	r3, [pc, #428]	; (80022c8 <Handle_Command+0x2c8>)
 800211c:	2201      	movs	r2, #1
 800211e:	701a      	strb	r2, [r3, #0]
			led_mod = atoi((char*) uart_buf + 8);
 8002120:	4b6a      	ldr	r3, [pc, #424]	; (80022cc <Handle_Command+0x2cc>)
 8002122:	4618      	mov	r0, r3
 8002124:	f005 fff6 	bl	8008114 <atoi>
 8002128:	4603      	mov	r3, r0
 800212a:	b2da      	uxtb	r2, r3
 800212c:	4b68      	ldr	r3, [pc, #416]	; (80022d0 <Handle_Command+0x2d0>)
 800212e:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 8002130:	f000 fe36 	bl	8002da0 <clear_uart_buf>
			if (isDebug) {
 8002134:	4b59      	ldr	r3, [pc, #356]	; (800229c <Handle_Command+0x29c>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 837d 	beq.w	8002838 <Handle_Command+0x838>
				sprintf((char*) tx, "LED 1 mode: %d\n", led_mod);
 800213e:	4b64      	ldr	r3, [pc, #400]	; (80022d0 <Handle_Command+0x2d0>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	4963      	ldr	r1, [pc, #396]	; (80022d4 <Handle_Command+0x2d4>)
 8002146:	485b      	ldr	r0, [pc, #364]	; (80022b4 <Handle_Command+0x2b4>)
 8002148:	f006 fa82 	bl	8008650 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 800214c:	4859      	ldr	r0, [pc, #356]	; (80022b4 <Handle_Command+0x2b4>)
 800214e:	f7fe f847 	bl	80001e0 <strlen>
 8002152:	4603      	mov	r3, r0
 8002154:	b29a      	uxth	r2, r3
 8002156:	23c8      	movs	r3, #200	; 0xc8
 8002158:	4956      	ldr	r1, [pc, #344]	; (80022b4 <Handle_Command+0x2b4>)
 800215a:	4851      	ldr	r0, [pc, #324]	; (80022a0 <Handle_Command+0x2a0>)
 800215c:	f004 ffaf 	bl	80070be <HAL_UART_Transmit>
			if (isDebug) {
 8002160:	e36a      	b.n	8002838 <Handle_Command+0x838>
			}
		} else if (strlen((char*) uart_buf) == 9
 8002162:	484d      	ldr	r0, [pc, #308]	; (8002298 <Handle_Command+0x298>)
 8002164:	f7fe f83c 	bl	80001e0 <strlen>
 8002168:	4603      	mov	r3, r0
 800216a:	2b09      	cmp	r3, #9
 800216c:	d12b      	bne.n	80021c6 <Handle_Command+0x1c6>
				&& strncmp((char*) uart_buf, "c:l:2:m:", 8) == 0) {
 800216e:	2208      	movs	r2, #8
 8002170:	4959      	ldr	r1, [pc, #356]	; (80022d8 <Handle_Command+0x2d8>)
 8002172:	4849      	ldr	r0, [pc, #292]	; (8002298 <Handle_Command+0x298>)
 8002174:	f006 fafd 	bl	8008772 <strncmp>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d123      	bne.n	80021c6 <Handle_Command+0x1c6>
			l_done_2 = 1;
 800217e:	4b57      	ldr	r3, [pc, #348]	; (80022dc <Handle_Command+0x2dc>)
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
			led_mod_2 = atoi((char*) uart_buf + 8);
 8002184:	4b51      	ldr	r3, [pc, #324]	; (80022cc <Handle_Command+0x2cc>)
 8002186:	4618      	mov	r0, r3
 8002188:	f005 ffc4 	bl	8008114 <atoi>
 800218c:	4603      	mov	r3, r0
 800218e:	b2da      	uxtb	r2, r3
 8002190:	4b53      	ldr	r3, [pc, #332]	; (80022e0 <Handle_Command+0x2e0>)
 8002192:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 8002194:	f000 fe04 	bl	8002da0 <clear_uart_buf>
			if (isDebug) {
 8002198:	4b40      	ldr	r3, [pc, #256]	; (800229c <Handle_Command+0x29c>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 834b 	beq.w	8002838 <Handle_Command+0x838>
				sprintf((char*) tx, "LED 2 mode: %d\n", led_mod_2);
 80021a2:	4b4f      	ldr	r3, [pc, #316]	; (80022e0 <Handle_Command+0x2e0>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	494e      	ldr	r1, [pc, #312]	; (80022e4 <Handle_Command+0x2e4>)
 80021aa:	4842      	ldr	r0, [pc, #264]	; (80022b4 <Handle_Command+0x2b4>)
 80021ac:	f006 fa50 	bl	8008650 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 80021b0:	4840      	ldr	r0, [pc, #256]	; (80022b4 <Handle_Command+0x2b4>)
 80021b2:	f7fe f815 	bl	80001e0 <strlen>
 80021b6:	4603      	mov	r3, r0
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	23c8      	movs	r3, #200	; 0xc8
 80021bc:	493d      	ldr	r1, [pc, #244]	; (80022b4 <Handle_Command+0x2b4>)
 80021be:	4838      	ldr	r0, [pc, #224]	; (80022a0 <Handle_Command+0x2a0>)
 80021c0:	f004 ff7d 	bl	80070be <HAL_UART_Transmit>
			if (isDebug) {
 80021c4:	e338      	b.n	8002838 <Handle_Command+0x838>
			}
		} else if (strlen((char*) uart_buf) == 9
 80021c6:	4834      	ldr	r0, [pc, #208]	; (8002298 <Handle_Command+0x298>)
 80021c8:	f7fe f80a 	bl	80001e0 <strlen>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b09      	cmp	r3, #9
 80021d0:	d12b      	bne.n	800222a <Handle_Command+0x22a>
				&& strncmp((char*) uart_buf, "c:l:1:s:", 8) == 0) {
 80021d2:	2208      	movs	r2, #8
 80021d4:	4944      	ldr	r1, [pc, #272]	; (80022e8 <Handle_Command+0x2e8>)
 80021d6:	4830      	ldr	r0, [pc, #192]	; (8002298 <Handle_Command+0x298>)
 80021d8:	f006 facb 	bl	8008772 <strncmp>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d123      	bne.n	800222a <Handle_Command+0x22a>
			l_done = 1;
 80021e2:	4b39      	ldr	r3, [pc, #228]	; (80022c8 <Handle_Command+0x2c8>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
			led_state = atoi((char*) uart_buf + 8);
 80021e8:	4b38      	ldr	r3, [pc, #224]	; (80022cc <Handle_Command+0x2cc>)
 80021ea:	4618      	mov	r0, r3
 80021ec:	f005 ff92 	bl	8008114 <atoi>
 80021f0:	4603      	mov	r3, r0
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	4b3d      	ldr	r3, [pc, #244]	; (80022ec <Handle_Command+0x2ec>)
 80021f6:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 80021f8:	f000 fdd2 	bl	8002da0 <clear_uart_buf>
			if (isDebug) {
 80021fc:	4b27      	ldr	r3, [pc, #156]	; (800229c <Handle_Command+0x29c>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 8319 	beq.w	8002838 <Handle_Command+0x838>
				sprintf((char*) tx, "LED 1 state: %d\n", led_state);
 8002206:	4b39      	ldr	r3, [pc, #228]	; (80022ec <Handle_Command+0x2ec>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	4938      	ldr	r1, [pc, #224]	; (80022f0 <Handle_Command+0x2f0>)
 800220e:	4829      	ldr	r0, [pc, #164]	; (80022b4 <Handle_Command+0x2b4>)
 8002210:	f006 fa1e 	bl	8008650 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002214:	4827      	ldr	r0, [pc, #156]	; (80022b4 <Handle_Command+0x2b4>)
 8002216:	f7fd ffe3 	bl	80001e0 <strlen>
 800221a:	4603      	mov	r3, r0
 800221c:	b29a      	uxth	r2, r3
 800221e:	23c8      	movs	r3, #200	; 0xc8
 8002220:	4924      	ldr	r1, [pc, #144]	; (80022b4 <Handle_Command+0x2b4>)
 8002222:	481f      	ldr	r0, [pc, #124]	; (80022a0 <Handle_Command+0x2a0>)
 8002224:	f004 ff4b 	bl	80070be <HAL_UART_Transmit>
			if (isDebug) {
 8002228:	e306      	b.n	8002838 <Handle_Command+0x838>
			}
		} else if (strlen((char*) uart_buf) == 9
 800222a:	481b      	ldr	r0, [pc, #108]	; (8002298 <Handle_Command+0x298>)
 800222c:	f7fd ffd8 	bl	80001e0 <strlen>
 8002230:	4603      	mov	r3, r0
 8002232:	2b09      	cmp	r3, #9
 8002234:	d164      	bne.n	8002300 <Handle_Command+0x300>
				&& strncmp((char*) uart_buf, "c:l:2:s:", 8) == 0) {
 8002236:	2208      	movs	r2, #8
 8002238:	492e      	ldr	r1, [pc, #184]	; (80022f4 <Handle_Command+0x2f4>)
 800223a:	4817      	ldr	r0, [pc, #92]	; (8002298 <Handle_Command+0x298>)
 800223c:	f006 fa99 	bl	8008772 <strncmp>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d15c      	bne.n	8002300 <Handle_Command+0x300>
			l_done_2 = 1;
 8002246:	4b25      	ldr	r3, [pc, #148]	; (80022dc <Handle_Command+0x2dc>)
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
			led_state_2 = atoi((char*) uart_buf + 8);
 800224c:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <Handle_Command+0x2cc>)
 800224e:	4618      	mov	r0, r3
 8002250:	f005 ff60 	bl	8008114 <atoi>
 8002254:	4603      	mov	r3, r0
 8002256:	b2da      	uxtb	r2, r3
 8002258:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <Handle_Command+0x2f8>)
 800225a:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 800225c:	f000 fda0 	bl	8002da0 <clear_uart_buf>
			if (isDebug) {
 8002260:	4b0e      	ldr	r3, [pc, #56]	; (800229c <Handle_Command+0x29c>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 82e7 	beq.w	8002838 <Handle_Command+0x838>
				sprintf((char*) tx, "LED 2 state: %d\n", led_state_2);
 800226a:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <Handle_Command+0x2f8>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	4922      	ldr	r1, [pc, #136]	; (80022fc <Handle_Command+0x2fc>)
 8002272:	4810      	ldr	r0, [pc, #64]	; (80022b4 <Handle_Command+0x2b4>)
 8002274:	f006 f9ec 	bl	8008650 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002278:	480e      	ldr	r0, [pc, #56]	; (80022b4 <Handle_Command+0x2b4>)
 800227a:	f7fd ffb1 	bl	80001e0 <strlen>
 800227e:	4603      	mov	r3, r0
 8002280:	b29a      	uxth	r2, r3
 8002282:	23c8      	movs	r3, #200	; 0xc8
 8002284:	490b      	ldr	r1, [pc, #44]	; (80022b4 <Handle_Command+0x2b4>)
 8002286:	4806      	ldr	r0, [pc, #24]	; (80022a0 <Handle_Command+0x2a0>)
 8002288:	f004 ff19 	bl	80070be <HAL_UART_Transmit>
			if (isDebug) {
 800228c:	e2d4      	b.n	8002838 <Handle_Command+0x838>
 800228e:	bf00      	nop
 8002290:	200010a0 	.word	0x200010a0
 8002294:	2000109e 	.word	0x2000109e
 8002298:	20000c38 	.word	0x20000c38
 800229c:	20001164 	.word	0x20001164
 80022a0:	20000bf4 	.word	0x20000bf4
 80022a4:	0800fd2c 	.word	0x0800fd2c
 80022a8:	20000c3e 	.word	0x20000c3e
 80022ac:	200010ac 	.word	0x200010ac
 80022b0:	0800fd34 	.word	0x0800fd34
 80022b4:	20000c9c 	.word	0x20000c9c
 80022b8:	0800fd48 	.word	0x0800fd48
 80022bc:	200010ad 	.word	0x200010ad
 80022c0:	0800fd50 	.word	0x0800fd50
 80022c4:	0800fd64 	.word	0x0800fd64
 80022c8:	200010b2 	.word	0x200010b2
 80022cc:	20000c40 	.word	0x20000c40
 80022d0:	200010b0 	.word	0x200010b0
 80022d4:	0800fd70 	.word	0x0800fd70
 80022d8:	0800fd80 	.word	0x0800fd80
 80022dc:	200010b3 	.word	0x200010b3
 80022e0:	200010b1 	.word	0x200010b1
 80022e4:	0800fd8c 	.word	0x0800fd8c
 80022e8:	0800fd9c 	.word	0x0800fd9c
 80022ec:	200010ae 	.word	0x200010ae
 80022f0:	0800fda8 	.word	0x0800fda8
 80022f4:	0800fdbc 	.word	0x0800fdbc
 80022f8:	200010af 	.word	0x200010af
 80022fc:	0800fdc8 	.word	0x0800fdc8
			}
		}

		// FAN command
		else if (strlen((char*) uart_buf) == 7
 8002300:	48aa      	ldr	r0, [pc, #680]	; (80025ac <Handle_Command+0x5ac>)
 8002302:	f7fd ff6d 	bl	80001e0 <strlen>
 8002306:	4603      	mov	r3, r0
 8002308:	2b07      	cmp	r3, #7
 800230a:	d129      	bne.n	8002360 <Handle_Command+0x360>
				&& strncmp((char*) uart_buf, "c:f:1:", 6) == 0) {
 800230c:	2206      	movs	r2, #6
 800230e:	49a8      	ldr	r1, [pc, #672]	; (80025b0 <Handle_Command+0x5b0>)
 8002310:	48a6      	ldr	r0, [pc, #664]	; (80025ac <Handle_Command+0x5ac>)
 8002312:	f006 fa2e 	bl	8008772 <strncmp>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d121      	bne.n	8002360 <Handle_Command+0x360>
			fan1 = atoi((char*) uart_buf + 6);
 800231c:	4ba5      	ldr	r3, [pc, #660]	; (80025b4 <Handle_Command+0x5b4>)
 800231e:	4618      	mov	r0, r3
 8002320:	f005 fef8 	bl	8008114 <atoi>
 8002324:	4603      	mov	r3, r0
 8002326:	b2da      	uxtb	r2, r3
 8002328:	4ba3      	ldr	r3, [pc, #652]	; (80025b8 <Handle_Command+0x5b8>)
 800232a:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 800232c:	f000 fd38 	bl	8002da0 <clear_uart_buf>
			if (isDebug) {
 8002330:	4ba2      	ldr	r3, [pc, #648]	; (80025bc <Handle_Command+0x5bc>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d010      	beq.n	800235a <Handle_Command+0x35a>
				sprintf((char*) tx, "fan 1 active: %d\n", fan1);
 8002338:	4b9f      	ldr	r3, [pc, #636]	; (80025b8 <Handle_Command+0x5b8>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	49a0      	ldr	r1, [pc, #640]	; (80025c0 <Handle_Command+0x5c0>)
 8002340:	48a0      	ldr	r0, [pc, #640]	; (80025c4 <Handle_Command+0x5c4>)
 8002342:	f006 f985 	bl	8008650 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002346:	489f      	ldr	r0, [pc, #636]	; (80025c4 <Handle_Command+0x5c4>)
 8002348:	f7fd ff4a 	bl	80001e0 <strlen>
 800234c:	4603      	mov	r3, r0
 800234e:	b29a      	uxth	r2, r3
 8002350:	23c8      	movs	r3, #200	; 0xc8
 8002352:	499c      	ldr	r1, [pc, #624]	; (80025c4 <Handle_Command+0x5c4>)
 8002354:	489c      	ldr	r0, [pc, #624]	; (80025c8 <Handle_Command+0x5c8>)
 8002356:	f004 feb2 	bl	80070be <HAL_UART_Transmit>
			}
			Response();
 800235a:	f7ff fcef 	bl	8001d3c <Response>
 800235e:	e26b      	b.n	8002838 <Handle_Command+0x838>
		} else if (strlen((char*) uart_buf) == 7
 8002360:	4892      	ldr	r0, [pc, #584]	; (80025ac <Handle_Command+0x5ac>)
 8002362:	f7fd ff3d 	bl	80001e0 <strlen>
 8002366:	4603      	mov	r3, r0
 8002368:	2b07      	cmp	r3, #7
 800236a:	d129      	bne.n	80023c0 <Handle_Command+0x3c0>
				&& strncmp((char*) uart_buf, "c:f:2:", 6) == 0) {
 800236c:	2206      	movs	r2, #6
 800236e:	4997      	ldr	r1, [pc, #604]	; (80025cc <Handle_Command+0x5cc>)
 8002370:	488e      	ldr	r0, [pc, #568]	; (80025ac <Handle_Command+0x5ac>)
 8002372:	f006 f9fe 	bl	8008772 <strncmp>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d121      	bne.n	80023c0 <Handle_Command+0x3c0>
			fan2 = atoi((char*) uart_buf + 6);
 800237c:	4b8d      	ldr	r3, [pc, #564]	; (80025b4 <Handle_Command+0x5b4>)
 800237e:	4618      	mov	r0, r3
 8002380:	f005 fec8 	bl	8008114 <atoi>
 8002384:	4603      	mov	r3, r0
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b91      	ldr	r3, [pc, #580]	; (80025d0 <Handle_Command+0x5d0>)
 800238a:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 800238c:	f000 fd08 	bl	8002da0 <clear_uart_buf>
			if (isDebug) {
 8002390:	4b8a      	ldr	r3, [pc, #552]	; (80025bc <Handle_Command+0x5bc>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d010      	beq.n	80023ba <Handle_Command+0x3ba>
				sprintf((char*) tx, "fan 2 active: %d\n", fan2);
 8002398:	4b8d      	ldr	r3, [pc, #564]	; (80025d0 <Handle_Command+0x5d0>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	498d      	ldr	r1, [pc, #564]	; (80025d4 <Handle_Command+0x5d4>)
 80023a0:	4888      	ldr	r0, [pc, #544]	; (80025c4 <Handle_Command+0x5c4>)
 80023a2:	f006 f955 	bl	8008650 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 80023a6:	4887      	ldr	r0, [pc, #540]	; (80025c4 <Handle_Command+0x5c4>)
 80023a8:	f7fd ff1a 	bl	80001e0 <strlen>
 80023ac:	4603      	mov	r3, r0
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	23c8      	movs	r3, #200	; 0xc8
 80023b2:	4984      	ldr	r1, [pc, #528]	; (80025c4 <Handle_Command+0x5c4>)
 80023b4:	4884      	ldr	r0, [pc, #528]	; (80025c8 <Handle_Command+0x5c8>)
 80023b6:	f004 fe82 	bl	80070be <HAL_UART_Transmit>
			}
			Response();
 80023ba:	f7ff fcbf 	bl	8001d3c <Response>
 80023be:	e23b      	b.n	8002838 <Handle_Command+0x838>
		} else if (strlen((char*) uart_buf) == 9
 80023c0:	487a      	ldr	r0, [pc, #488]	; (80025ac <Handle_Command+0x5ac>)
 80023c2:	f7fd ff0d 	bl	80001e0 <strlen>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b09      	cmp	r3, #9
 80023ca:	d12b      	bne.n	8002424 <Handle_Command+0x424>
				&& strncmp((char*) uart_buf, "c:f:1:s:", 8) == 0) {
 80023cc:	2208      	movs	r2, #8
 80023ce:	4982      	ldr	r1, [pc, #520]	; (80025d8 <Handle_Command+0x5d8>)
 80023d0:	4876      	ldr	r0, [pc, #472]	; (80025ac <Handle_Command+0x5ac>)
 80023d2:	f006 f9ce 	bl	8008772 <strncmp>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d123      	bne.n	8002424 <Handle_Command+0x424>
			f_done = 1;
 80023dc:	4b7f      	ldr	r3, [pc, #508]	; (80025dc <Handle_Command+0x5dc>)
 80023de:	2201      	movs	r2, #1
 80023e0:	701a      	strb	r2, [r3, #0]
			speed = atoi((char*) uart_buf + 8);
 80023e2:	4b7f      	ldr	r3, [pc, #508]	; (80025e0 <Handle_Command+0x5e0>)
 80023e4:	4618      	mov	r0, r3
 80023e6:	f005 fe95 	bl	8008114 <atoi>
 80023ea:	4603      	mov	r3, r0
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	4b7d      	ldr	r3, [pc, #500]	; (80025e4 <Handle_Command+0x5e4>)
 80023f0:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 80023f2:	f000 fcd5 	bl	8002da0 <clear_uart_buf>
			if (isDebug) {
 80023f6:	4b71      	ldr	r3, [pc, #452]	; (80025bc <Handle_Command+0x5bc>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 821c 	beq.w	8002838 <Handle_Command+0x838>
				sprintf((char*) tx, "fan 1 speed: %d\n", speed);
 8002400:	4b78      	ldr	r3, [pc, #480]	; (80025e4 <Handle_Command+0x5e4>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	4978      	ldr	r1, [pc, #480]	; (80025e8 <Handle_Command+0x5e8>)
 8002408:	486e      	ldr	r0, [pc, #440]	; (80025c4 <Handle_Command+0x5c4>)
 800240a:	f006 f921 	bl	8008650 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 800240e:	486d      	ldr	r0, [pc, #436]	; (80025c4 <Handle_Command+0x5c4>)
 8002410:	f7fd fee6 	bl	80001e0 <strlen>
 8002414:	4603      	mov	r3, r0
 8002416:	b29a      	uxth	r2, r3
 8002418:	23c8      	movs	r3, #200	; 0xc8
 800241a:	496a      	ldr	r1, [pc, #424]	; (80025c4 <Handle_Command+0x5c4>)
 800241c:	486a      	ldr	r0, [pc, #424]	; (80025c8 <Handle_Command+0x5c8>)
 800241e:	f004 fe4e 	bl	80070be <HAL_UART_Transmit>
			if (isDebug) {
 8002422:	e209      	b.n	8002838 <Handle_Command+0x838>
			}
		} else if (strlen((char*) uart_buf) == 9
 8002424:	4861      	ldr	r0, [pc, #388]	; (80025ac <Handle_Command+0x5ac>)
 8002426:	f7fd fedb 	bl	80001e0 <strlen>
 800242a:	4603      	mov	r3, r0
 800242c:	2b09      	cmp	r3, #9
 800242e:	d12b      	bne.n	8002488 <Handle_Command+0x488>
				&& strncmp((char*) uart_buf, "c:f:2:s:", 8) == 0) {
 8002430:	2208      	movs	r2, #8
 8002432:	496e      	ldr	r1, [pc, #440]	; (80025ec <Handle_Command+0x5ec>)
 8002434:	485d      	ldr	r0, [pc, #372]	; (80025ac <Handle_Command+0x5ac>)
 8002436:	f006 f99c 	bl	8008772 <strncmp>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d123      	bne.n	8002488 <Handle_Command+0x488>
			f_done_2 = 1;
 8002440:	4b6b      	ldr	r3, [pc, #428]	; (80025f0 <Handle_Command+0x5f0>)
 8002442:	2201      	movs	r2, #1
 8002444:	701a      	strb	r2, [r3, #0]
			speed_2 = atoi((char*) uart_buf + 8);
 8002446:	4b66      	ldr	r3, [pc, #408]	; (80025e0 <Handle_Command+0x5e0>)
 8002448:	4618      	mov	r0, r3
 800244a:	f005 fe63 	bl	8008114 <atoi>
 800244e:	4603      	mov	r3, r0
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4b68      	ldr	r3, [pc, #416]	; (80025f4 <Handle_Command+0x5f4>)
 8002454:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 8002456:	f000 fca3 	bl	8002da0 <clear_uart_buf>
			if (isDebug) {
 800245a:	4b58      	ldr	r3, [pc, #352]	; (80025bc <Handle_Command+0x5bc>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 81ea 	beq.w	8002838 <Handle_Command+0x838>
				sprintf((char*) tx, "fan 2 speed: %d\n", speed_2);
 8002464:	4b63      	ldr	r3, [pc, #396]	; (80025f4 <Handle_Command+0x5f4>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	4963      	ldr	r1, [pc, #396]	; (80025f8 <Handle_Command+0x5f8>)
 800246c:	4855      	ldr	r0, [pc, #340]	; (80025c4 <Handle_Command+0x5c4>)
 800246e:	f006 f8ef 	bl	8008650 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002472:	4854      	ldr	r0, [pc, #336]	; (80025c4 <Handle_Command+0x5c4>)
 8002474:	f7fd feb4 	bl	80001e0 <strlen>
 8002478:	4603      	mov	r3, r0
 800247a:	b29a      	uxth	r2, r3
 800247c:	23c8      	movs	r3, #200	; 0xc8
 800247e:	4951      	ldr	r1, [pc, #324]	; (80025c4 <Handle_Command+0x5c4>)
 8002480:	4851      	ldr	r0, [pc, #324]	; (80025c8 <Handle_Command+0x5c8>)
 8002482:	f004 fe1c 	bl	80070be <HAL_UART_Transmit>
			if (isDebug) {
 8002486:	e1d7      	b.n	8002838 <Handle_Command+0x838>
			}
		}

		// DOOR command
		else if (strlen((char*) uart_buf) == 7
 8002488:	4848      	ldr	r0, [pc, #288]	; (80025ac <Handle_Command+0x5ac>)
 800248a:	f7fd fea9 	bl	80001e0 <strlen>
 800248e:	4603      	mov	r3, r0
 8002490:	2b07      	cmp	r3, #7
 8002492:	d129      	bne.n	80024e8 <Handle_Command+0x4e8>
				&& strncmp((char*) uart_buf, "c:d:1:", 6) == 0) {
 8002494:	2206      	movs	r2, #6
 8002496:	4959      	ldr	r1, [pc, #356]	; (80025fc <Handle_Command+0x5fc>)
 8002498:	4844      	ldr	r0, [pc, #272]	; (80025ac <Handle_Command+0x5ac>)
 800249a:	f006 f96a 	bl	8008772 <strncmp>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d121      	bne.n	80024e8 <Handle_Command+0x4e8>
			door1 = atoi((char*) uart_buf + 6);
 80024a4:	4b43      	ldr	r3, [pc, #268]	; (80025b4 <Handle_Command+0x5b4>)
 80024a6:	4618      	mov	r0, r3
 80024a8:	f005 fe34 	bl	8008114 <atoi>
 80024ac:	4603      	mov	r3, r0
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	4b53      	ldr	r3, [pc, #332]	; (8002600 <Handle_Command+0x600>)
 80024b2:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 80024b4:	f000 fc74 	bl	8002da0 <clear_uart_buf>
			if (isDebug) {
 80024b8:	4b40      	ldr	r3, [pc, #256]	; (80025bc <Handle_Command+0x5bc>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d010      	beq.n	80024e2 <Handle_Command+0x4e2>
				sprintf((char*) tx, "door 1 active: %d\n", door1);
 80024c0:	4b4f      	ldr	r3, [pc, #316]	; (8002600 <Handle_Command+0x600>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	494f      	ldr	r1, [pc, #316]	; (8002604 <Handle_Command+0x604>)
 80024c8:	483e      	ldr	r0, [pc, #248]	; (80025c4 <Handle_Command+0x5c4>)
 80024ca:	f006 f8c1 	bl	8008650 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 80024ce:	483d      	ldr	r0, [pc, #244]	; (80025c4 <Handle_Command+0x5c4>)
 80024d0:	f7fd fe86 	bl	80001e0 <strlen>
 80024d4:	4603      	mov	r3, r0
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	23c8      	movs	r3, #200	; 0xc8
 80024da:	493a      	ldr	r1, [pc, #232]	; (80025c4 <Handle_Command+0x5c4>)
 80024dc:	483a      	ldr	r0, [pc, #232]	; (80025c8 <Handle_Command+0x5c8>)
 80024de:	f004 fdee 	bl	80070be <HAL_UART_Transmit>
			}
			Response();
 80024e2:	f7ff fc2b 	bl	8001d3c <Response>
 80024e6:	e1a7      	b.n	8002838 <Handle_Command+0x838>
		} else if (strlen((char*) uart_buf) == 7
 80024e8:	4830      	ldr	r0, [pc, #192]	; (80025ac <Handle_Command+0x5ac>)
 80024ea:	f7fd fe79 	bl	80001e0 <strlen>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b07      	cmp	r3, #7
 80024f2:	d129      	bne.n	8002548 <Handle_Command+0x548>
				&& strncmp((char*) uart_buf, "c:d:2:", 6) == 0) {
 80024f4:	2206      	movs	r2, #6
 80024f6:	4944      	ldr	r1, [pc, #272]	; (8002608 <Handle_Command+0x608>)
 80024f8:	482c      	ldr	r0, [pc, #176]	; (80025ac <Handle_Command+0x5ac>)
 80024fa:	f006 f93a 	bl	8008772 <strncmp>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d121      	bne.n	8002548 <Handle_Command+0x548>
			door2 = atoi((char*) uart_buf + 6);
 8002504:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <Handle_Command+0x5b4>)
 8002506:	4618      	mov	r0, r3
 8002508:	f005 fe04 	bl	8008114 <atoi>
 800250c:	4603      	mov	r3, r0
 800250e:	b2da      	uxtb	r2, r3
 8002510:	4b3e      	ldr	r3, [pc, #248]	; (800260c <Handle_Command+0x60c>)
 8002512:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 8002514:	f000 fc44 	bl	8002da0 <clear_uart_buf>
			if (isDebug) {
 8002518:	4b28      	ldr	r3, [pc, #160]	; (80025bc <Handle_Command+0x5bc>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d010      	beq.n	8002542 <Handle_Command+0x542>
				sprintf((char*) tx, "door 2 active: %d\n", door2);
 8002520:	4b3a      	ldr	r3, [pc, #232]	; (800260c <Handle_Command+0x60c>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	493a      	ldr	r1, [pc, #232]	; (8002610 <Handle_Command+0x610>)
 8002528:	4826      	ldr	r0, [pc, #152]	; (80025c4 <Handle_Command+0x5c4>)
 800252a:	f006 f891 	bl	8008650 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 800252e:	4825      	ldr	r0, [pc, #148]	; (80025c4 <Handle_Command+0x5c4>)
 8002530:	f7fd fe56 	bl	80001e0 <strlen>
 8002534:	4603      	mov	r3, r0
 8002536:	b29a      	uxth	r2, r3
 8002538:	23c8      	movs	r3, #200	; 0xc8
 800253a:	4922      	ldr	r1, [pc, #136]	; (80025c4 <Handle_Command+0x5c4>)
 800253c:	4822      	ldr	r0, [pc, #136]	; (80025c8 <Handle_Command+0x5c8>)
 800253e:	f004 fdbe 	bl	80070be <HAL_UART_Transmit>
			}
			Response();
 8002542:	f7ff fbfb 	bl	8001d3c <Response>
 8002546:	e177      	b.n	8002838 <Handle_Command+0x838>
		} else if (strlen((char*) uart_buf) == 9
 8002548:	4818      	ldr	r0, [pc, #96]	; (80025ac <Handle_Command+0x5ac>)
 800254a:	f7fd fe49 	bl	80001e0 <strlen>
 800254e:	4603      	mov	r3, r0
 8002550:	2b09      	cmp	r3, #9
 8002552:	d167      	bne.n	8002624 <Handle_Command+0x624>
				&& strncmp((char*) uart_buf, "c:d:1:m:", 8) == 0) {
 8002554:	2208      	movs	r2, #8
 8002556:	492f      	ldr	r1, [pc, #188]	; (8002614 <Handle_Command+0x614>)
 8002558:	4814      	ldr	r0, [pc, #80]	; (80025ac <Handle_Command+0x5ac>)
 800255a:	f006 f90a 	bl	8008772 <strncmp>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d15f      	bne.n	8002624 <Handle_Command+0x624>
			d_done = 1;
 8002564:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <Handle_Command+0x618>)
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
			d_mod = atoi((char*) uart_buf + 8);
 800256a:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <Handle_Command+0x5e0>)
 800256c:	4618      	mov	r0, r3
 800256e:	f005 fdd1 	bl	8008114 <atoi>
 8002572:	4603      	mov	r3, r0
 8002574:	b2da      	uxtb	r2, r3
 8002576:	4b29      	ldr	r3, [pc, #164]	; (800261c <Handle_Command+0x61c>)
 8002578:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 800257a:	f000 fc11 	bl	8002da0 <clear_uart_buf>
			if (isDebug) {
 800257e:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <Handle_Command+0x5bc>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 8158 	beq.w	8002838 <Handle_Command+0x838>
				sprintf((char*) tx, "door 1 mode: %d\n", d_mod);
 8002588:	4b24      	ldr	r3, [pc, #144]	; (800261c <Handle_Command+0x61c>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	4924      	ldr	r1, [pc, #144]	; (8002620 <Handle_Command+0x620>)
 8002590:	480c      	ldr	r0, [pc, #48]	; (80025c4 <Handle_Command+0x5c4>)
 8002592:	f006 f85d 	bl	8008650 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002596:	480b      	ldr	r0, [pc, #44]	; (80025c4 <Handle_Command+0x5c4>)
 8002598:	f7fd fe22 	bl	80001e0 <strlen>
 800259c:	4603      	mov	r3, r0
 800259e:	b29a      	uxth	r2, r3
 80025a0:	23c8      	movs	r3, #200	; 0xc8
 80025a2:	4908      	ldr	r1, [pc, #32]	; (80025c4 <Handle_Command+0x5c4>)
 80025a4:	4808      	ldr	r0, [pc, #32]	; (80025c8 <Handle_Command+0x5c8>)
 80025a6:	f004 fd8a 	bl	80070be <HAL_UART_Transmit>
			if (isDebug) {
 80025aa:	e145      	b.n	8002838 <Handle_Command+0x838>
 80025ac:	20000c38 	.word	0x20000c38
 80025b0:	0800fddc 	.word	0x0800fddc
 80025b4:	20000c3e 	.word	0x20000c3e
 80025b8:	200010c9 	.word	0x200010c9
 80025bc:	20001164 	.word	0x20001164
 80025c0:	0800fde4 	.word	0x0800fde4
 80025c4:	20000c9c 	.word	0x20000c9c
 80025c8:	20000bf4 	.word	0x20000bf4
 80025cc:	0800fdf8 	.word	0x0800fdf8
 80025d0:	200010ca 	.word	0x200010ca
 80025d4:	0800fe00 	.word	0x0800fe00
 80025d8:	0800fe14 	.word	0x0800fe14
 80025dc:	200010cd 	.word	0x200010cd
 80025e0:	20000c40 	.word	0x20000c40
 80025e4:	200010cb 	.word	0x200010cb
 80025e8:	0800fe20 	.word	0x0800fe20
 80025ec:	0800fe34 	.word	0x0800fe34
 80025f0:	200010ce 	.word	0x200010ce
 80025f4:	200010cc 	.word	0x200010cc
 80025f8:	0800fe40 	.word	0x0800fe40
 80025fc:	0800fe54 	.word	0x0800fe54
 8002600:	200010b8 	.word	0x200010b8
 8002604:	0800fe5c 	.word	0x0800fe5c
 8002608:	0800fe70 	.word	0x0800fe70
 800260c:	200010b9 	.word	0x200010b9
 8002610:	0800fe78 	.word	0x0800fe78
 8002614:	0800fe8c 	.word	0x0800fe8c
 8002618:	200010be 	.word	0x200010be
 800261c:	200010ba 	.word	0x200010ba
 8002620:	0800fe98 	.word	0x0800fe98
			}
		} else if (strlen((char*) uart_buf) == 9
 8002624:	4885      	ldr	r0, [pc, #532]	; (800283c <Handle_Command+0x83c>)
 8002626:	f7fd fddb 	bl	80001e0 <strlen>
 800262a:	4603      	mov	r3, r0
 800262c:	2b09      	cmp	r3, #9
 800262e:	d12b      	bne.n	8002688 <Handle_Command+0x688>
				&& strncmp((char*) uart_buf, "c:d:2:m:", 8) == 0) {
 8002630:	2208      	movs	r2, #8
 8002632:	4983      	ldr	r1, [pc, #524]	; (8002840 <Handle_Command+0x840>)
 8002634:	4881      	ldr	r0, [pc, #516]	; (800283c <Handle_Command+0x83c>)
 8002636:	f006 f89c 	bl	8008772 <strncmp>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d123      	bne.n	8002688 <Handle_Command+0x688>
			d_done_2 = 1;
 8002640:	4b80      	ldr	r3, [pc, #512]	; (8002844 <Handle_Command+0x844>)
 8002642:	2201      	movs	r2, #1
 8002644:	701a      	strb	r2, [r3, #0]
			d_mod_2 = atoi((char*) uart_buf + 8);
 8002646:	4b80      	ldr	r3, [pc, #512]	; (8002848 <Handle_Command+0x848>)
 8002648:	4618      	mov	r0, r3
 800264a:	f005 fd63 	bl	8008114 <atoi>
 800264e:	4603      	mov	r3, r0
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4b7e      	ldr	r3, [pc, #504]	; (800284c <Handle_Command+0x84c>)
 8002654:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 8002656:	f000 fba3 	bl	8002da0 <clear_uart_buf>
			if (isDebug) {
 800265a:	4b7d      	ldr	r3, [pc, #500]	; (8002850 <Handle_Command+0x850>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 80ea 	beq.w	8002838 <Handle_Command+0x838>
				sprintf((char*) tx, "door 2 mode: %d\n", d_mod_2);
 8002664:	4b79      	ldr	r3, [pc, #484]	; (800284c <Handle_Command+0x84c>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	497a      	ldr	r1, [pc, #488]	; (8002854 <Handle_Command+0x854>)
 800266c:	487a      	ldr	r0, [pc, #488]	; (8002858 <Handle_Command+0x858>)
 800266e:	f005 ffef 	bl	8008650 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002672:	4879      	ldr	r0, [pc, #484]	; (8002858 <Handle_Command+0x858>)
 8002674:	f7fd fdb4 	bl	80001e0 <strlen>
 8002678:	4603      	mov	r3, r0
 800267a:	b29a      	uxth	r2, r3
 800267c:	23c8      	movs	r3, #200	; 0xc8
 800267e:	4976      	ldr	r1, [pc, #472]	; (8002858 <Handle_Command+0x858>)
 8002680:	4876      	ldr	r0, [pc, #472]	; (800285c <Handle_Command+0x85c>)
 8002682:	f004 fd1c 	bl	80070be <HAL_UART_Transmit>
			if (isDebug) {
 8002686:	e0d7      	b.n	8002838 <Handle_Command+0x838>
			}
		} else if (strlen((char*) uart_buf) == 9
 8002688:	486c      	ldr	r0, [pc, #432]	; (800283c <Handle_Command+0x83c>)
 800268a:	f7fd fda9 	bl	80001e0 <strlen>
 800268e:	4603      	mov	r3, r0
 8002690:	2b09      	cmp	r3, #9
 8002692:	d12b      	bne.n	80026ec <Handle_Command+0x6ec>
				&& strncmp((char*) uart_buf, "c:d:1:s:", 8) == 0) {
 8002694:	2208      	movs	r2, #8
 8002696:	4972      	ldr	r1, [pc, #456]	; (8002860 <Handle_Command+0x860>)
 8002698:	4868      	ldr	r0, [pc, #416]	; (800283c <Handle_Command+0x83c>)
 800269a:	f006 f86a 	bl	8008772 <strncmp>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d123      	bne.n	80026ec <Handle_Command+0x6ec>
			d_done = 1;
 80026a4:	4b6f      	ldr	r3, [pc, #444]	; (8002864 <Handle_Command+0x864>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
			door_state = atoi((char*) uart_buf + 8);
 80026aa:	4b67      	ldr	r3, [pc, #412]	; (8002848 <Handle_Command+0x848>)
 80026ac:	4618      	mov	r0, r3
 80026ae:	f005 fd31 	bl	8008114 <atoi>
 80026b2:	4603      	mov	r3, r0
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4b6c      	ldr	r3, [pc, #432]	; (8002868 <Handle_Command+0x868>)
 80026b8:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 80026ba:	f000 fb71 	bl	8002da0 <clear_uart_buf>
			if (isDebug) {
 80026be:	4b64      	ldr	r3, [pc, #400]	; (8002850 <Handle_Command+0x850>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 80b8 	beq.w	8002838 <Handle_Command+0x838>
				sprintf((char*) tx, "door 1 state: %d\n", door_state);
 80026c8:	4b67      	ldr	r3, [pc, #412]	; (8002868 <Handle_Command+0x868>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	4967      	ldr	r1, [pc, #412]	; (800286c <Handle_Command+0x86c>)
 80026d0:	4861      	ldr	r0, [pc, #388]	; (8002858 <Handle_Command+0x858>)
 80026d2:	f005 ffbd 	bl	8008650 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 80026d6:	4860      	ldr	r0, [pc, #384]	; (8002858 <Handle_Command+0x858>)
 80026d8:	f7fd fd82 	bl	80001e0 <strlen>
 80026dc:	4603      	mov	r3, r0
 80026de:	b29a      	uxth	r2, r3
 80026e0:	23c8      	movs	r3, #200	; 0xc8
 80026e2:	495d      	ldr	r1, [pc, #372]	; (8002858 <Handle_Command+0x858>)
 80026e4:	485d      	ldr	r0, [pc, #372]	; (800285c <Handle_Command+0x85c>)
 80026e6:	f004 fcea 	bl	80070be <HAL_UART_Transmit>
			if (isDebug) {
 80026ea:	e0a5      	b.n	8002838 <Handle_Command+0x838>
			}
		} else if (strlen((char*) uart_buf) == 9
 80026ec:	4853      	ldr	r0, [pc, #332]	; (800283c <Handle_Command+0x83c>)
 80026ee:	f7fd fd77 	bl	80001e0 <strlen>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b09      	cmp	r3, #9
 80026f6:	d12b      	bne.n	8002750 <Handle_Command+0x750>
				&& strncmp((char*) uart_buf, "c:d:2:s:", 8) == 0) {
 80026f8:	2208      	movs	r2, #8
 80026fa:	495d      	ldr	r1, [pc, #372]	; (8002870 <Handle_Command+0x870>)
 80026fc:	484f      	ldr	r0, [pc, #316]	; (800283c <Handle_Command+0x83c>)
 80026fe:	f006 f838 	bl	8008772 <strncmp>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d123      	bne.n	8002750 <Handle_Command+0x750>
			d_done_2 = 1;
 8002708:	4b4e      	ldr	r3, [pc, #312]	; (8002844 <Handle_Command+0x844>)
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
			door_state_2 = atoi((char*) uart_buf + 8);
 800270e:	4b4e      	ldr	r3, [pc, #312]	; (8002848 <Handle_Command+0x848>)
 8002710:	4618      	mov	r0, r3
 8002712:	f005 fcff 	bl	8008114 <atoi>
 8002716:	4603      	mov	r3, r0
 8002718:	b2da      	uxtb	r2, r3
 800271a:	4b56      	ldr	r3, [pc, #344]	; (8002874 <Handle_Command+0x874>)
 800271c:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 800271e:	f000 fb3f 	bl	8002da0 <clear_uart_buf>
			if (isDebug) {
 8002722:	4b4b      	ldr	r3, [pc, #300]	; (8002850 <Handle_Command+0x850>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 8086 	beq.w	8002838 <Handle_Command+0x838>
				sprintf((char*) tx, "door 2 state: %d\n", door_state_2);
 800272c:	4b51      	ldr	r3, [pc, #324]	; (8002874 <Handle_Command+0x874>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	4951      	ldr	r1, [pc, #324]	; (8002878 <Handle_Command+0x878>)
 8002734:	4848      	ldr	r0, [pc, #288]	; (8002858 <Handle_Command+0x858>)
 8002736:	f005 ff8b 	bl	8008650 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 800273a:	4847      	ldr	r0, [pc, #284]	; (8002858 <Handle_Command+0x858>)
 800273c:	f7fd fd50 	bl	80001e0 <strlen>
 8002740:	4603      	mov	r3, r0
 8002742:	b29a      	uxth	r2, r3
 8002744:	23c8      	movs	r3, #200	; 0xc8
 8002746:	4944      	ldr	r1, [pc, #272]	; (8002858 <Handle_Command+0x858>)
 8002748:	4844      	ldr	r0, [pc, #272]	; (800285c <Handle_Command+0x85c>)
 800274a:	f004 fcb8 	bl	80070be <HAL_UART_Transmit>
			if (isDebug) {
 800274e:	e073      	b.n	8002838 <Handle_Command+0x838>
			}
		} else if (strncmp((char*) uart_buf, "c:b:s:", 6) == 0
 8002750:	2206      	movs	r2, #6
 8002752:	494a      	ldr	r1, [pc, #296]	; (800287c <Handle_Command+0x87c>)
 8002754:	4839      	ldr	r0, [pc, #228]	; (800283c <Handle_Command+0x83c>)
 8002756:	f006 f80c 	bl	8008772 <strncmp>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d128      	bne.n	80027b2 <Handle_Command+0x7b2>
				&& strlen((char*) uart_buf) == 7) {
 8002760:	4836      	ldr	r0, [pc, #216]	; (800283c <Handle_Command+0x83c>)
 8002762:	f7fd fd3d 	bl	80001e0 <strlen>
 8002766:	4603      	mov	r3, r0
 8002768:	2b07      	cmp	r3, #7
 800276a:	d122      	bne.n	80027b2 <Handle_Command+0x7b2>
			buz_done = 1;
 800276c:	4b44      	ldr	r3, [pc, #272]	; (8002880 <Handle_Command+0x880>)
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]
			buz_state = atoi((char*) uart_buf + 6);
 8002772:	4b44      	ldr	r3, [pc, #272]	; (8002884 <Handle_Command+0x884>)
 8002774:	4618      	mov	r0, r3
 8002776:	f005 fccd 	bl	8008114 <atoi>
 800277a:	4603      	mov	r3, r0
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4b42      	ldr	r3, [pc, #264]	; (8002888 <Handle_Command+0x888>)
 8002780:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 8002782:	f000 fb0d 	bl	8002da0 <clear_uart_buf>
			if (isDebug) {
 8002786:	4b32      	ldr	r3, [pc, #200]	; (8002850 <Handle_Command+0x850>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d054      	beq.n	8002838 <Handle_Command+0x838>
				sprintf((char*) tx, "buz state: %d\n", buz_state);
 800278e:	4b3e      	ldr	r3, [pc, #248]	; (8002888 <Handle_Command+0x888>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	493d      	ldr	r1, [pc, #244]	; (800288c <Handle_Command+0x88c>)
 8002796:	4830      	ldr	r0, [pc, #192]	; (8002858 <Handle_Command+0x858>)
 8002798:	f005 ff5a 	bl	8008650 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 800279c:	482e      	ldr	r0, [pc, #184]	; (8002858 <Handle_Command+0x858>)
 800279e:	f7fd fd1f 	bl	80001e0 <strlen>
 80027a2:	4603      	mov	r3, r0
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	23c8      	movs	r3, #200	; 0xc8
 80027a8:	492b      	ldr	r1, [pc, #172]	; (8002858 <Handle_Command+0x858>)
 80027aa:	482c      	ldr	r0, [pc, #176]	; (800285c <Handle_Command+0x85c>)
 80027ac:	f004 fc87 	bl	80070be <HAL_UART_Transmit>
			if (isDebug) {
 80027b0:	e042      	b.n	8002838 <Handle_Command+0x838>
			}
		} else if (strncmp((char*) uart_buf, "c:d:s:", 6) == 0
 80027b2:	2206      	movs	r2, #6
 80027b4:	4936      	ldr	r1, [pc, #216]	; (8002890 <Handle_Command+0x890>)
 80027b6:	4821      	ldr	r0, [pc, #132]	; (800283c <Handle_Command+0x83c>)
 80027b8:	f005 ffdb 	bl	8008772 <strncmp>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d125      	bne.n	800280e <Handle_Command+0x80e>
				&& strlen((char*) uart_buf) == 7) {
 80027c2:	481e      	ldr	r0, [pc, #120]	; (800283c <Handle_Command+0x83c>)
 80027c4:	f7fd fd0c 	bl	80001e0 <strlen>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b07      	cmp	r3, #7
 80027cc:	d11f      	bne.n	800280e <Handle_Command+0x80e>
			isDebug = atoi((char*) uart_buf + 6);
 80027ce:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <Handle_Command+0x884>)
 80027d0:	4618      	mov	r0, r3
 80027d2:	f005 fc9f 	bl	8008114 <atoi>
 80027d6:	4603      	mov	r3, r0
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <Handle_Command+0x850>)
 80027dc:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 80027de:	f000 fadf 	bl	8002da0 <clear_uart_buf>
			if (isDebug) {
 80027e2:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <Handle_Command+0x850>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d026      	beq.n	8002838 <Handle_Command+0x838>
				sprintf((char*) tx, "Debug state: %d\n", isDebug);
 80027ea:	4b19      	ldr	r3, [pc, #100]	; (8002850 <Handle_Command+0x850>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	4928      	ldr	r1, [pc, #160]	; (8002894 <Handle_Command+0x894>)
 80027f2:	4819      	ldr	r0, [pc, #100]	; (8002858 <Handle_Command+0x858>)
 80027f4:	f005 ff2c 	bl	8008650 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 80027f8:	4817      	ldr	r0, [pc, #92]	; (8002858 <Handle_Command+0x858>)
 80027fa:	f7fd fcf1 	bl	80001e0 <strlen>
 80027fe:	4603      	mov	r3, r0
 8002800:	b29a      	uxth	r2, r3
 8002802:	23c8      	movs	r3, #200	; 0xc8
 8002804:	4914      	ldr	r1, [pc, #80]	; (8002858 <Handle_Command+0x858>)
 8002806:	4815      	ldr	r0, [pc, #84]	; (800285c <Handle_Command+0x85c>)
 8002808:	f004 fc59 	bl	80070be <HAL_UART_Transmit>
			if (isDebug) {
 800280c:	e014      	b.n	8002838 <Handle_Command+0x838>
			}
		} else {
			clear_uart_buf();
 800280e:	f000 fac7 	bl	8002da0 <clear_uart_buf>
			if (isDebug) {
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <Handle_Command+0x850>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00e      	beq.n	8002838 <Handle_Command+0x838>
				sprintf((char*) tx, "Invalid Command!\n");
 800281a:	491f      	ldr	r1, [pc, #124]	; (8002898 <Handle_Command+0x898>)
 800281c:	480e      	ldr	r0, [pc, #56]	; (8002858 <Handle_Command+0x858>)
 800281e:	f005 ff17 	bl	8008650 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002822:	480d      	ldr	r0, [pc, #52]	; (8002858 <Handle_Command+0x858>)
 8002824:	f7fd fcdc 	bl	80001e0 <strlen>
 8002828:	4603      	mov	r3, r0
 800282a:	b29a      	uxth	r2, r3
 800282c:	23c8      	movs	r3, #200	; 0xc8
 800282e:	490a      	ldr	r1, [pc, #40]	; (8002858 <Handle_Command+0x858>)
 8002830:	480a      	ldr	r0, [pc, #40]	; (800285c <Handle_Command+0x85c>)
 8002832:	f004 fc44 	bl	80070be <HAL_UART_Transmit>
			}
		}
	}
}
 8002836:	e7ff      	b.n	8002838 <Handle_Command+0x838>
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000c38 	.word	0x20000c38
 8002840:	0800feac 	.word	0x0800feac
 8002844:	200010bf 	.word	0x200010bf
 8002848:	20000c40 	.word	0x20000c40
 800284c:	200010bb 	.word	0x200010bb
 8002850:	20001164 	.word	0x20001164
 8002854:	0800feb8 	.word	0x0800feb8
 8002858:	20000c9c 	.word	0x20000c9c
 800285c:	20000bf4 	.word	0x20000bf4
 8002860:	0800fecc 	.word	0x0800fecc
 8002864:	200010be 	.word	0x200010be
 8002868:	200010bc 	.word	0x200010bc
 800286c:	0800fed8 	.word	0x0800fed8
 8002870:	0800feec 	.word	0x0800feec
 8002874:	200010bd 	.word	0x200010bd
 8002878:	0800fef8 	.word	0x0800fef8
 800287c:	0800ff0c 	.word	0x0800ff0c
 8002880:	200010c0 	.word	0x200010c0
 8002884:	20000c3e 	.word	0x20000c3e
 8002888:	200010c8 	.word	0x200010c8
 800288c:	0800ff14 	.word	0x0800ff14
 8002890:	0800ff24 	.word	0x0800ff24
 8002894:	0800ff2c 	.word	0x0800ff2c
 8002898:	0800ff40 	.word	0x0800ff40

0800289c <control_door>:

void control_door() {
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
	if (d_done) {
 80028a0:	4b30      	ldr	r3, [pc, #192]	; (8002964 <control_door+0xc8>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d02b      	beq.n	8002900 <control_door+0x64>
		if (d_mod) {
 80028a8:	4b2f      	ldr	r3, [pc, #188]	; (8002968 <control_door+0xcc>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d015      	beq.n	80028dc <control_door+0x40>
			door_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 80028b0:	2101      	movs	r1, #1
 80028b2:	482e      	ldr	r0, [pc, #184]	; (800296c <control_door+0xd0>)
 80028b4:	f002 f910 	bl	8004ad8 <HAL_GPIO_ReadPin>
 80028b8:	4603      	mov	r3, r0
 80028ba:	461a      	mov	r2, r3
 80028bc:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <control_door+0xd4>)
 80028be:	701a      	strb	r2, [r3, #0]
			if (door_state)
 80028c0:	4b2b      	ldr	r3, [pc, #172]	; (8002970 <control_door+0xd4>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d004      	beq.n	80028d2 <control_door+0x36>
				__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 15);
 80028c8:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <control_door+0xd8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	220f      	movs	r2, #15
 80028ce:	635a      	str	r2, [r3, #52]	; 0x34
 80028d0:	e011      	b.n	80028f6 <control_door+0x5a>
			else
				__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 25);
 80028d2:	4b28      	ldr	r3, [pc, #160]	; (8002974 <control_door+0xd8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2219      	movs	r2, #25
 80028d8:	635a      	str	r2, [r3, #52]	; 0x34
 80028da:	e00c      	b.n	80028f6 <control_door+0x5a>
		} else {
			if (door_state)
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <control_door+0xd4>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d004      	beq.n	80028ee <control_door+0x52>
				__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 15);
 80028e4:	4b23      	ldr	r3, [pc, #140]	; (8002974 <control_door+0xd8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	220f      	movs	r2, #15
 80028ea:	635a      	str	r2, [r3, #52]	; 0x34
 80028ec:	e003      	b.n	80028f6 <control_door+0x5a>
			else
				__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 25);
 80028ee:	4b21      	ldr	r3, [pc, #132]	; (8002974 <control_door+0xd8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2219      	movs	r2, #25
 80028f4:	635a      	str	r2, [r3, #52]	; 0x34
		}
		d_done = 0;
 80028f6:	4b1b      	ldr	r3, [pc, #108]	; (8002964 <control_door+0xc8>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
		Response();
 80028fc:	f7ff fa1e 	bl	8001d3c <Response>
	}
	if (d_done_2) {
 8002900:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <control_door+0xdc>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d02b      	beq.n	8002960 <control_door+0xc4>
		if (d_mod_2) {
 8002908:	4b1c      	ldr	r3, [pc, #112]	; (800297c <control_door+0xe0>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d015      	beq.n	800293c <control_door+0xa0>
			door_state_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8002910:	2104      	movs	r1, #4
 8002912:	481b      	ldr	r0, [pc, #108]	; (8002980 <control_door+0xe4>)
 8002914:	f002 f8e0 	bl	8004ad8 <HAL_GPIO_ReadPin>
 8002918:	4603      	mov	r3, r0
 800291a:	461a      	mov	r2, r3
 800291c:	4b19      	ldr	r3, [pc, #100]	; (8002984 <control_door+0xe8>)
 800291e:	701a      	strb	r2, [r3, #0]
			if (door_state_2)
 8002920:	4b18      	ldr	r3, [pc, #96]	; (8002984 <control_door+0xe8>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d004      	beq.n	8002932 <control_door+0x96>
				__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, 5);
 8002928:	4b12      	ldr	r3, [pc, #72]	; (8002974 <control_door+0xd8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2205      	movs	r2, #5
 800292e:	641a      	str	r2, [r3, #64]	; 0x40
 8002930:	e011      	b.n	8002956 <control_door+0xba>
			else
				__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, 15);
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <control_door+0xd8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	220f      	movs	r2, #15
 8002938:	641a      	str	r2, [r3, #64]	; 0x40
 800293a:	e00c      	b.n	8002956 <control_door+0xba>
		} else {
			if (door_state_2)
 800293c:	4b11      	ldr	r3, [pc, #68]	; (8002984 <control_door+0xe8>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d004      	beq.n	800294e <control_door+0xb2>
				__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, 5);
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <control_door+0xd8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2205      	movs	r2, #5
 800294a:	641a      	str	r2, [r3, #64]	; 0x40
 800294c:	e003      	b.n	8002956 <control_door+0xba>
			else
				__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, 15);
 800294e:	4b09      	ldr	r3, [pc, #36]	; (8002974 <control_door+0xd8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	220f      	movs	r2, #15
 8002954:	641a      	str	r2, [r3, #64]	; 0x40
		}
		d_done_2 = 0;
 8002956:	4b08      	ldr	r3, [pc, #32]	; (8002978 <control_door+0xdc>)
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
		Response();
 800295c:	f7ff f9ee 	bl	8001d3c <Response>
	}
}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}
 8002964:	200010be 	.word	0x200010be
 8002968:	200010ba 	.word	0x200010ba
 800296c:	40020400 	.word	0x40020400
 8002970:	200010bc 	.word	0x200010bc
 8002974:	20000a8c 	.word	0x20000a8c
 8002978:	200010bf 	.word	0x200010bf
 800297c:	200010bb 	.word	0x200010bb
 8002980:	40020000 	.word	0x40020000
 8002984:	200010bd 	.word	0x200010bd

08002988 <en_motor>:

void en_motor() {
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
	if (f_done) {
 800298c:	4b42      	ldr	r3, [pc, #264]	; (8002a98 <en_motor+0x110>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d03d      	beq.n	8002a10 <en_motor+0x88>
		if (speed == 0) {
 8002994:	4b41      	ldr	r3, [pc, #260]	; (8002a9c <en_motor+0x114>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d104      	bne.n	80029a6 <en_motor+0x1e>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 800299c:	4b40      	ldr	r3, [pc, #256]	; (8002aa0 <en_motor+0x118>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2200      	movs	r2, #0
 80029a2:	635a      	str	r2, [r3, #52]	; 0x34
 80029a4:	e02f      	b.n	8002a06 <en_motor+0x7e>
		} else if (speed == 1) {
 80029a6:	4b3d      	ldr	r3, [pc, #244]	; (8002a9c <en_motor+0x114>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d104      	bne.n	80029b8 <en_motor+0x30>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 200);
 80029ae:	4b3c      	ldr	r3, [pc, #240]	; (8002aa0 <en_motor+0x118>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	22c8      	movs	r2, #200	; 0xc8
 80029b4:	635a      	str	r2, [r3, #52]	; 0x34
 80029b6:	e026      	b.n	8002a06 <en_motor+0x7e>
		} else if (speed == 2) {
 80029b8:	4b38      	ldr	r3, [pc, #224]	; (8002a9c <en_motor+0x114>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d105      	bne.n	80029cc <en_motor+0x44>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 400);
 80029c0:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <en_motor+0x118>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80029c8:	635a      	str	r2, [r3, #52]	; 0x34
 80029ca:	e01c      	b.n	8002a06 <en_motor+0x7e>
		} else if (speed == 3) {
 80029cc:	4b33      	ldr	r3, [pc, #204]	; (8002a9c <en_motor+0x114>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d105      	bne.n	80029e0 <en_motor+0x58>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 600);
 80029d4:	4b32      	ldr	r3, [pc, #200]	; (8002aa0 <en_motor+0x118>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80029dc:	635a      	str	r2, [r3, #52]	; 0x34
 80029de:	e012      	b.n	8002a06 <en_motor+0x7e>
		} else if (speed == 4) {
 80029e0:	4b2e      	ldr	r3, [pc, #184]	; (8002a9c <en_motor+0x114>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d105      	bne.n	80029f4 <en_motor+0x6c>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 800);
 80029e8:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <en_motor+0x118>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f44f 7248 	mov.w	r2, #800	; 0x320
 80029f0:	635a      	str	r2, [r3, #52]	; 0x34
 80029f2:	e008      	b.n	8002a06 <en_motor+0x7e>
		} else if (speed == 5) {
 80029f4:	4b29      	ldr	r3, [pc, #164]	; (8002a9c <en_motor+0x114>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b05      	cmp	r3, #5
 80029fa:	d104      	bne.n	8002a06 <en_motor+0x7e>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 999);
 80029fc:	4b28      	ldr	r3, [pc, #160]	; (8002aa0 <en_motor+0x118>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a04:	635a      	str	r2, [r3, #52]	; 0x34
		}
//		sprintf((char*) tx, "fan 1x speed: %d\n", speed);
//		HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
		f_done = 0;
 8002a06:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <en_motor+0x110>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
		Response();
 8002a0c:	f7ff f996 	bl	8001d3c <Response>
	}
	if (f_done_2) {
 8002a10:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <en_motor+0x11c>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d03d      	beq.n	8002a94 <en_motor+0x10c>
		if (speed_2 == 0) {
 8002a18:	4b23      	ldr	r3, [pc, #140]	; (8002aa8 <en_motor+0x120>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d104      	bne.n	8002a2a <en_motor+0xa2>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 8002a20:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <en_motor+0x118>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2200      	movs	r2, #0
 8002a26:	639a      	str	r2, [r3, #56]	; 0x38
 8002a28:	e02f      	b.n	8002a8a <en_motor+0x102>
		} else if (speed_2 == 1) {
 8002a2a:	4b1f      	ldr	r3, [pc, #124]	; (8002aa8 <en_motor+0x120>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d104      	bne.n	8002a3c <en_motor+0xb4>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 200);
 8002a32:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <en_motor+0x118>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	22c8      	movs	r2, #200	; 0xc8
 8002a38:	639a      	str	r2, [r3, #56]	; 0x38
 8002a3a:	e026      	b.n	8002a8a <en_motor+0x102>
		} else if (speed_2 == 2) {
 8002a3c:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <en_motor+0x120>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d105      	bne.n	8002a50 <en_motor+0xc8>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 400);
 8002a44:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <en_motor+0x118>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002a4c:	639a      	str	r2, [r3, #56]	; 0x38
 8002a4e:	e01c      	b.n	8002a8a <en_motor+0x102>
		} else if (speed_2 == 3) {
 8002a50:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <en_motor+0x120>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d105      	bne.n	8002a64 <en_motor+0xdc>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 600);
 8002a58:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <en_motor+0x118>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002a60:	639a      	str	r2, [r3, #56]	; 0x38
 8002a62:	e012      	b.n	8002a8a <en_motor+0x102>
		} else if (speed_2 == 4) {
 8002a64:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <en_motor+0x120>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d105      	bne.n	8002a78 <en_motor+0xf0>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 800);
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <en_motor+0x118>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002a74:	639a      	str	r2, [r3, #56]	; 0x38
 8002a76:	e008      	b.n	8002a8a <en_motor+0x102>
		} else if (speed_2 == 5) {
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <en_motor+0x120>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b05      	cmp	r3, #5
 8002a7e:	d104      	bne.n	8002a8a <en_motor+0x102>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 999);
 8002a80:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <en_motor+0x118>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a88:	639a      	str	r2, [r3, #56]	; 0x38
		}
		f_done_2 = 0;
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <en_motor+0x11c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	701a      	strb	r2, [r3, #0]
		Response();
 8002a90:	f7ff f954 	bl	8001d3c <Response>
	}
}
 8002a94:	bf00      	nop
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	200010cd 	.word	0x200010cd
 8002a9c:	200010cb 	.word	0x200010cb
 8002aa0:	20000b1c 	.word	0x20000b1c
 8002aa4:	200010ce 	.word	0x200010ce
 8002aa8:	200010cc 	.word	0x200010cc

08002aac <motor_get_speed>:

void motor_get_speed() {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 8002ab0:	20c8      	movs	r0, #200	; 0xc8
 8002ab2:	f001 f8e3 	bl	8003c7c <HAL_Delay>
	en_cnt_2 = __HAL_TIM_GetCounter(&htim4);
 8002ab6:	4b2d      	ldr	r3, [pc, #180]	; (8002b6c <motor_get_speed+0xc0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	4a2c      	ldr	r2, [pc, #176]	; (8002b70 <motor_get_speed+0xc4>)
 8002abe:	6013      	str	r3, [r2, #0]
	en_cnt = __HAL_TIM_GetCounter(&htim5);
 8002ac0:	4b2c      	ldr	r3, [pc, #176]	; (8002b74 <motor_get_speed+0xc8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	4a2c      	ldr	r2, [pc, #176]	; (8002b78 <motor_get_speed+0xcc>)
 8002ac8:	6013      	str	r3, [r2, #0]
	HAL_Delay(100);
 8002aca:	2064      	movs	r0, #100	; 0x64
 8002acc:	f001 f8d6 	bl	8003c7c <HAL_Delay>
	motor_speed_2 = (__HAL_TIM_GetCounter(&htim4) - en_cnt_2) * 600 / 384; //encoder cnt increase 384 when complete 1 round
 8002ad0:	4b26      	ldr	r3, [pc, #152]	; (8002b6c <motor_get_speed+0xc0>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ad6:	4b26      	ldr	r3, [pc, #152]	; (8002b70 <motor_get_speed+0xc4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002ae0:	fb02 f303 	mul.w	r3, r2, r3
 8002ae4:	4a25      	ldr	r2, [pc, #148]	; (8002b7c <motor_get_speed+0xd0>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	0a1b      	lsrs	r3, r3, #8
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <motor_get_speed+0xd4>)
 8002af0:	601a      	str	r2, [r3, #0]
	motor_speed = (__HAL_TIM_GetCounter(&htim5) - en_cnt) * 600 / 384;
 8002af2:	4b20      	ldr	r3, [pc, #128]	; (8002b74 <motor_get_speed+0xc8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002af8:	4b1f      	ldr	r3, [pc, #124]	; (8002b78 <motor_get_speed+0xcc>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002b02:	fb02 f303 	mul.w	r3, r2, r3
 8002b06:	4a1d      	ldr	r2, [pc, #116]	; (8002b7c <motor_get_speed+0xd0>)
 8002b08:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0c:	0a1b      	lsrs	r3, r3, #8
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <motor_get_speed+0xd8>)
 8002b12:	601a      	str	r2, [r3, #0]
//	sprintf((char*) tx, "\n%d %d\n", motor_speed_2, check_speed(motor_speed_2));
//	HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
	if (check_speed(motor_speed) != speed)
 8002b14:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <motor_get_speed+0xd8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 f839 	bl	8002b90 <check_speed>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <motor_get_speed+0xdc>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d004      	beq.n	8002b34 <motor_get_speed+0x88>
		motor_speed = -1;
 8002b2a:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <motor_get_speed+0xd8>)
 8002b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e004      	b.n	8002b3e <motor_get_speed+0x92>
	else
		motor_speed = speed;
 8002b34:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <motor_get_speed+0xdc>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <motor_get_speed+0xd8>)
 8002b3c:	601a      	str	r2, [r3, #0]
	if (check_speed(motor_speed_2) != speed_2)
 8002b3e:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <motor_get_speed+0xd4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 f824 	bl	8002b90 <check_speed>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4b0f      	ldr	r3, [pc, #60]	; (8002b8c <motor_get_speed+0xe0>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d004      	beq.n	8002b5e <motor_get_speed+0xb2>
		motor_speed_2 = -1;
 8002b54:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <motor_get_speed+0xd4>)
 8002b56:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5a:	601a      	str	r2, [r3, #0]
	else
		motor_speed_2 = speed_2;
}
 8002b5c:	e004      	b.n	8002b68 <motor_get_speed+0xbc>
		motor_speed_2 = speed_2;
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <motor_get_speed+0xe0>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <motor_get_speed+0xd4>)
 8002b66:	601a      	str	r2, [r3, #0]
}
 8002b68:	bf00      	nop
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20000b64 	.word	0x20000b64
 8002b70:	200010dc 	.word	0x200010dc
 8002b74:	20000bac 	.word	0x20000bac
 8002b78:	200010d8 	.word	0x200010d8
 8002b7c:	aaaaaaab 	.word	0xaaaaaaab
 8002b80:	200010d4 	.word	0x200010d4
 8002b84:	200010d0 	.word	0x200010d0
 8002b88:	200010cb 	.word	0x200010cb
 8002b8c:	200010cc 	.word	0x200010cc

08002b90 <check_speed>:

uint8_t check_speed(int encoder_val) {
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

	if (encoder_val < 100)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b63      	cmp	r3, #99	; 0x63
 8002b9c:	dc01      	bgt.n	8002ba2 <check_speed+0x12>
		return 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e02f      	b.n	8002c02 <check_speed+0x72>
	else if (encoder_val >= 600 && encoder_val < 1650)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002ba8:	db06      	blt.n	8002bb8 <check_speed+0x28>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f240 6271 	movw	r2, #1649	; 0x671
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	dc01      	bgt.n	8002bb8 <check_speed+0x28>
		return 1;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e024      	b.n	8002c02 <check_speed+0x72>
	else if (encoder_val >= 1650 && encoder_val < 2750)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f240 6271 	movw	r2, #1649	; 0x671
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	dd06      	ble.n	8002bd0 <check_speed+0x40>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f640 22bd 	movw	r2, #2749	; 0xabd
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	dc01      	bgt.n	8002bd0 <check_speed+0x40>
		return 2;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e018      	b.n	8002c02 <check_speed+0x72>
	else if (encoder_val >= 2750 && encoder_val < 4150)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f640 22bd 	movw	r2, #2749	; 0xabd
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	dd06      	ble.n	8002be8 <check_speed+0x58>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f241 0235 	movw	r2, #4149	; 0x1035
 8002be0:	4293      	cmp	r3, r2
 8002be2:	dc01      	bgt.n	8002be8 <check_speed+0x58>
		return 3;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e00c      	b.n	8002c02 <check_speed+0x72>
	else if (encoder_val >= 4150 && encoder_val < 5200)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f241 0235 	movw	r2, #4149	; 0x1035
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	dd06      	ble.n	8002c00 <check_speed+0x70>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f241 424f 	movw	r2, #5199	; 0x144f
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	dc01      	bgt.n	8002c00 <check_speed+0x70>
		return 4;
 8002bfc:	2304      	movs	r3, #4
 8002bfe:	e000      	b.n	8002c02 <check_speed+0x72>
	else
		return 5;
 8002c00:	2305      	movs	r3, #5
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <control_led>:

void control_led() {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
	if (l_done) {
 8002c14:	4b29      	ldr	r3, [pc, #164]	; (8002cbc <control_led+0xac>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d025      	beq.n	8002c68 <control_led+0x58>
		if (led_mod) {
 8002c1c:	4b28      	ldr	r3, [pc, #160]	; (8002cc0 <control_led+0xb0>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d014      	beq.n	8002c4e <control_led+0x3e>
			HAL_Delay(300);
 8002c24:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002c28:	f001 f828 	bl	8003c7c <HAL_Delay>
			led_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8002c2c:	2108      	movs	r1, #8
 8002c2e:	4825      	ldr	r0, [pc, #148]	; (8002cc4 <control_led+0xb4>)
 8002c30:	f001 ff52 	bl	8004ad8 <HAL_GPIO_ReadPin>
 8002c34:	4603      	mov	r3, r0
 8002c36:	461a      	mov	r2, r3
 8002c38:	4b23      	ldr	r3, [pc, #140]	; (8002cc8 <control_led+0xb8>)
 8002c3a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, led_state);
 8002c3c:	4b22      	ldr	r3, [pc, #136]	; (8002cc8 <control_led+0xb8>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c46:	4821      	ldr	r0, [pc, #132]	; (8002ccc <control_led+0xbc>)
 8002c48:	f001 ff5e 	bl	8004b08 <HAL_GPIO_WritePin>
 8002c4c:	e007      	b.n	8002c5e <control_led+0x4e>
		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, led_state);
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <control_led+0xb8>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c58:	481c      	ldr	r0, [pc, #112]	; (8002ccc <control_led+0xbc>)
 8002c5a:	f001 ff55 	bl	8004b08 <HAL_GPIO_WritePin>
		}
		l_done = 0;
 8002c5e:	4b17      	ldr	r3, [pc, #92]	; (8002cbc <control_led+0xac>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
		Response();
 8002c64:	f7ff f86a 	bl	8001d3c <Response>
	}
	if (l_done_2) {
 8002c68:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <control_led+0xc0>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d023      	beq.n	8002cb8 <control_led+0xa8>
		if (led_mod_2) {
 8002c70:	4b18      	ldr	r3, [pc, #96]	; (8002cd4 <control_led+0xc4>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d013      	beq.n	8002ca0 <control_led+0x90>
			HAL_Delay(300);
 8002c78:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002c7c:	f000 fffe 	bl	8003c7c <HAL_Delay>
			led_state_2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8002c80:	2102      	movs	r1, #2
 8002c82:	4812      	ldr	r0, [pc, #72]	; (8002ccc <control_led+0xbc>)
 8002c84:	f001 ff28 	bl	8004ad8 <HAL_GPIO_ReadPin>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <control_led+0xc8>)
 8002c8e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, led_state_2);
 8002c90:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <control_led+0xc8>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	461a      	mov	r2, r3
 8002c96:	2108      	movs	r1, #8
 8002c98:	480c      	ldr	r0, [pc, #48]	; (8002ccc <control_led+0xbc>)
 8002c9a:	f001 ff35 	bl	8004b08 <HAL_GPIO_WritePin>
 8002c9e:	e006      	b.n	8002cae <control_led+0x9e>
		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, led_state_2);
 8002ca0:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <control_led+0xc8>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2108      	movs	r1, #8
 8002ca8:	4808      	ldr	r0, [pc, #32]	; (8002ccc <control_led+0xbc>)
 8002caa:	f001 ff2d 	bl	8004b08 <HAL_GPIO_WritePin>
		}
		l_done_2 = 0;
 8002cae:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <control_led+0xc0>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
		Response();
 8002cb4:	f7ff f842 	bl	8001d3c <Response>
	}
}
 8002cb8:	bf00      	nop
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	200010b2 	.word	0x200010b2
 8002cc0:	200010b0 	.word	0x200010b0
 8002cc4:	40020000 	.word	0x40020000
 8002cc8:	200010ae 	.word	0x200010ae
 8002ccc:	40020400 	.word	0x40020400
 8002cd0:	200010b3 	.word	0x200010b3
 8002cd4:	200010b1 	.word	0x200010b1
 8002cd8:	200010af 	.word	0x200010af

08002cdc <Blink_Led>:

void Blink_Led() {
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
	if (g_sys_tick - led_tick >= 1000) {
 8002ce0:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <Blink_Led+0x2c>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <Blink_Led+0x30>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cee:	d308      	bcc.n	8002d02 <Blink_Led+0x26>
//		getADC_value();
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002cf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cf4:	4806      	ldr	r0, [pc, #24]	; (8002d10 <Blink_Led+0x34>)
 8002cf6:	f001 ff20 	bl	8004b3a <HAL_GPIO_TogglePin>
		led_tick = g_sys_tick;
 8002cfa:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <Blink_Led+0x2c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a03      	ldr	r2, [pc, #12]	; (8002d0c <Blink_Led+0x30>)
 8002d00:	6013      	str	r3, [r2, #0]
	}
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	200010a0 	.word	0x200010a0
 8002d0c:	200010a8 	.word	0x200010a8
 8002d10:	40020800 	.word	0x40020800

08002d14 <buzzer>:
//			}
//		}
//	}
//}

void buzzer() {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
	if (buz_state) {
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <buzzer+0x20>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <buzzer+0x12>
		alarm();
 8002d20:	f000 f80c 	bl	8002d3c <alarm>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
	}
}
 8002d24:	e004      	b.n	8002d30 <buzzer+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8002d26:	2201      	movs	r2, #1
 8002d28:	2104      	movs	r1, #4
 8002d2a:	4803      	ldr	r0, [pc, #12]	; (8002d38 <buzzer+0x24>)
 8002d2c:	f001 feec 	bl	8004b08 <HAL_GPIO_WritePin>
}
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	200010c8 	.word	0x200010c8
 8002d38:	40020400 	.word	0x40020400

08002d3c <alarm>:

void alarm() {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
	if (g_sys_tick - buz_tick > 1000) {
 8002d40:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <alarm+0x28>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <alarm+0x2c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d4e:	d907      	bls.n	8002d60 <alarm+0x24>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8002d50:	2104      	movs	r1, #4
 8002d52:	4806      	ldr	r0, [pc, #24]	; (8002d6c <alarm+0x30>)
 8002d54:	f001 fef1 	bl	8004b3a <HAL_GPIO_TogglePin>
		buz_tick = g_sys_tick;
 8002d58:	4b02      	ldr	r3, [pc, #8]	; (8002d64 <alarm+0x28>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a02      	ldr	r2, [pc, #8]	; (8002d68 <alarm+0x2c>)
 8002d5e:	6013      	str	r3, [r2, #0]
	}
}
 8002d60:	bf00      	nop
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	200010a0 	.word	0x200010a0
 8002d68:	200010c4 	.word	0x200010c4
 8002d6c:	40020400 	.word	0x40020400

08002d70 <delay_us>:

void delay_us(uint32_t us) {
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCounter(&htim2, 0);
 8002d78:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <delay_us+0x2c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GetCounter(&htim2) < us)
 8002d80:	bf00      	nop
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <delay_us+0x2c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d8f9      	bhi.n	8002d82 <delay_us+0x12>
		;
}
 8002d8e:	bf00      	nop
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	20000ad4 	.word	0x20000ad4

08002da0 <clear_uart_buf>:

void clear_uart_buf() {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
	memset(uart_buf, 0, strlen((char*) uart_buf));
 8002da4:	4806      	ldr	r0, [pc, #24]	; (8002dc0 <clear_uart_buf+0x20>)
 8002da6:	f7fd fa1b 	bl	80001e0 <strlen>
 8002daa:	4603      	mov	r3, r0
 8002dac:	461a      	mov	r2, r3
 8002dae:	2100      	movs	r1, #0
 8002db0:	4803      	ldr	r0, [pc, #12]	; (8002dc0 <clear_uart_buf+0x20>)
 8002db2:	f005 fc29 	bl	8008608 <memset>
	uart_buf_cnt = 0;
 8002db6:	4b03      	ldr	r3, [pc, #12]	; (8002dc4 <clear_uart_buf+0x24>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
}
 8002dbc:	bf00      	nop
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	20000c38 	.word	0x20000c38
 8002dc4:	2000109c 	.word	0x2000109c

08002dc8 <init_dht22>:

void init_dht22() {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
	gpio_set_mode(OUTPUT);
 8002dcc:	2001      	movs	r0, #1
 8002dce:	f7fe ff81 	bl	8001cd4 <gpio_set_mode>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dd8:	4802      	ldr	r0, [pc, #8]	; (8002de4 <init_dht22+0x1c>)
 8002dda:	f001 fe95 	bl	8004b08 <HAL_GPIO_WritePin>
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40020400 	.word	0x40020400

08002de8 <dht22_GetValue>:

void dht22_GetValue(dht22 *dht) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b088      	sub	sp, #32
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
	uint8_t bytes[5];

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8002df0:	2200      	movs	r2, #0
 8002df2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002df6:	488a      	ldr	r0, [pc, #552]	; (8003020 <dht22_GetValue+0x238>)
 8002df8:	f001 fe86 	bl	8004b08 <HAL_GPIO_WritePin>
	delay_us(1000);
 8002dfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e00:	f7ff ffb6 	bl	8002d70 <delay_us>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8002e04:	2201      	movs	r2, #1
 8002e06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e0a:	4885      	ldr	r0, [pc, #532]	; (8003020 <dht22_GetValue+0x238>)
 8002e0c:	f001 fe7c 	bl	8004b08 <HAL_GPIO_WritePin>
	delay_us(20);
 8002e10:	2014      	movs	r0, #20
 8002e12:	f7ff ffad 	bl	8002d70 <delay_us>

	gpio_set_mode(INPUT);
 8002e16:	2000      	movs	r0, #0
 8002e18:	f7fe ff5c 	bl	8001cd4 <gpio_set_mode>
//		tem = -1;
//		hum = -1;
//		return;				// pb9 should be 1
//	}
//	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9));					// wait input become low
	delay_us(120);
 8002e1c:	2078      	movs	r0, #120	; 0x78
 8002e1e:	f7ff ffa7 	bl	8002d70 <delay_us>

	for (int j = 0; j < 5; j++) {
 8002e22:	2300      	movs	r3, #0
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	e087      	b.n	8002f38 <dht22_GetValue+0x150>
		uint8_t result = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	76fb      	strb	r3, [r7, #27]
		for (int i = 0; i < 8; i++) { //for each bit in each byte (8 total)
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	e076      	b.n	8002f20 <dht22_GetValue+0x138>
			time_out = g_sys_tick;					// wait input become high
 8002e32:	4b7c      	ldr	r3, [pc, #496]	; (8003024 <dht22_GetValue+0x23c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a7c      	ldr	r2, [pc, #496]	; (8003028 <dht22_GetValue+0x240>)
 8002e38:	6013      	str	r3, [r2, #0]
			while (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)) {
 8002e3a:	e021      	b.n	8002e80 <dht22_GetValue+0x98>
				if (g_sys_tick - time_out >= DHT_TIMEOUT) {
 8002e3c:	4b79      	ldr	r3, [pc, #484]	; (8003024 <dht22_GetValue+0x23c>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4b79      	ldr	r3, [pc, #484]	; (8003028 <dht22_GetValue+0x240>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d91a      	bls.n	8002e80 <dht22_GetValue+0x98>
					if (isDebug) {
 8002e4a:	4b78      	ldr	r3, [pc, #480]	; (800302c <dht22_GetValue+0x244>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00d      	beq.n	8002e6e <dht22_GetValue+0x86>
						sprintf((char*) tx, "input h");
 8002e52:	4977      	ldr	r1, [pc, #476]	; (8003030 <dht22_GetValue+0x248>)
 8002e54:	4877      	ldr	r0, [pc, #476]	; (8003034 <dht22_GetValue+0x24c>)
 8002e56:	f005 fbfb 	bl	8008650 <sprintf>
						HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002e5a:	4876      	ldr	r0, [pc, #472]	; (8003034 <dht22_GetValue+0x24c>)
 8002e5c:	f7fd f9c0 	bl	80001e0 <strlen>
 8002e60:	4603      	mov	r3, r0
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	23c8      	movs	r3, #200	; 0xc8
 8002e66:	4973      	ldr	r1, [pc, #460]	; (8003034 <dht22_GetValue+0x24c>)
 8002e68:	4873      	ldr	r0, [pc, #460]	; (8003038 <dht22_GetValue+0x250>)
 8002e6a:	f004 f928 	bl	80070be <HAL_UART_Transmit>
					}
					tem = -1;
 8002e6e:	4b73      	ldr	r3, [pc, #460]	; (800303c <dht22_GetValue+0x254>)
 8002e70:	4a73      	ldr	r2, [pc, #460]	; (8003040 <dht22_GetValue+0x258>)
 8002e72:	601a      	str	r2, [r3, #0]
					hum = -1;
 8002e74:	4b73      	ldr	r3, [pc, #460]	; (8003044 <dht22_GetValue+0x25c>)
 8002e76:	4a72      	ldr	r2, [pc, #456]	; (8003040 <dht22_GetValue+0x258>)
 8002e78:	601a      	str	r2, [r3, #0]
					init_dht22();
 8002e7a:	f7ff ffa5 	bl	8002dc8 <init_dht22>
					return;
 8002e7e:	e0cc      	b.n	800301a <dht22_GetValue+0x232>
			while (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)) {
 8002e80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e84:	4866      	ldr	r0, [pc, #408]	; (8003020 <dht22_GetValue+0x238>)
 8002e86:	f001 fe27 	bl	8004ad8 <HAL_GPIO_ReadPin>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0d5      	beq.n	8002e3c <dht22_GetValue+0x54>
				}
			}
			delay_us(30);
 8002e90:	201e      	movs	r0, #30
 8002e92:	f7ff ff6d 	bl	8002d70 <delay_us>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))// if input still high after 30us -> bit 1
 8002e96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e9a:	4861      	ldr	r0, [pc, #388]	; (8003020 <dht22_GetValue+0x238>)
 8002e9c:	f001 fe1c 	bl	8004ad8 <HAL_GPIO_ReadPin>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <dht22_GetValue+0xce>
				//result |= (1 << (7-i));
				result = (result << 1) | 0x01;
 8002ea6:	7efb      	ldrb	r3, [r7, #27]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	b25b      	sxtb	r3, r3
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	b25b      	sxtb	r3, r3
 8002eb2:	76fb      	strb	r3, [r7, #27]
 8002eb4:	e002      	b.n	8002ebc <dht22_GetValue+0xd4>
			else
				// else bit 0
				result = result << 1;
 8002eb6:	7efb      	ldrb	r3, [r7, #27]
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	76fb      	strb	r3, [r7, #27]
			time_out = g_sys_tick;
 8002ebc:	4b59      	ldr	r3, [pc, #356]	; (8003024 <dht22_GetValue+0x23c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a59      	ldr	r2, [pc, #356]	; (8003028 <dht22_GetValue+0x240>)
 8002ec2:	6013      	str	r3, [r2, #0]
			while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))	// wait dht22 transmit bit 1 complete
 8002ec4:	e021      	b.n	8002f0a <dht22_GetValue+0x122>
			{
				if (g_sys_tick - time_out >= DHT_TIMEOUT) {
 8002ec6:	4b57      	ldr	r3, [pc, #348]	; (8003024 <dht22_GetValue+0x23c>)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	4b57      	ldr	r3, [pc, #348]	; (8003028 <dht22_GetValue+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d91a      	bls.n	8002f0a <dht22_GetValue+0x122>
					if (isDebug) {
 8002ed4:	4b55      	ldr	r3, [pc, #340]	; (800302c <dht22_GetValue+0x244>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00d      	beq.n	8002ef8 <dht22_GetValue+0x110>
						sprintf((char*) tx, "tsm cplt");
 8002edc:	495a      	ldr	r1, [pc, #360]	; (8003048 <dht22_GetValue+0x260>)
 8002ede:	4855      	ldr	r0, [pc, #340]	; (8003034 <dht22_GetValue+0x24c>)
 8002ee0:	f005 fbb6 	bl	8008650 <sprintf>
						HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002ee4:	4853      	ldr	r0, [pc, #332]	; (8003034 <dht22_GetValue+0x24c>)
 8002ee6:	f7fd f97b 	bl	80001e0 <strlen>
 8002eea:	4603      	mov	r3, r0
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	23c8      	movs	r3, #200	; 0xc8
 8002ef0:	4950      	ldr	r1, [pc, #320]	; (8003034 <dht22_GetValue+0x24c>)
 8002ef2:	4851      	ldr	r0, [pc, #324]	; (8003038 <dht22_GetValue+0x250>)
 8002ef4:	f004 f8e3 	bl	80070be <HAL_UART_Transmit>
					}
					tem = -1;
 8002ef8:	4b50      	ldr	r3, [pc, #320]	; (800303c <dht22_GetValue+0x254>)
 8002efa:	4a51      	ldr	r2, [pc, #324]	; (8003040 <dht22_GetValue+0x258>)
 8002efc:	601a      	str	r2, [r3, #0]
					hum = -1;
 8002efe:	4b51      	ldr	r3, [pc, #324]	; (8003044 <dht22_GetValue+0x25c>)
 8002f00:	4a4f      	ldr	r2, [pc, #316]	; (8003040 <dht22_GetValue+0x258>)
 8002f02:	601a      	str	r2, [r3, #0]
					init_dht22();
 8002f04:	f7ff ff60 	bl	8002dc8 <init_dht22>
					return;
 8002f08:	e087      	b.n	800301a <dht22_GetValue+0x232>
			while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))	// wait dht22 transmit bit 1 complete
 8002f0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f0e:	4844      	ldr	r0, [pc, #272]	; (8003020 <dht22_GetValue+0x238>)
 8002f10:	f001 fde2 	bl	8004ad8 <HAL_GPIO_ReadPin>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1d5      	bne.n	8002ec6 <dht22_GetValue+0xde>
		for (int i = 0; i < 8; i++) { //for each bit in each byte (8 total)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2b07      	cmp	r3, #7
 8002f24:	dd85      	ble.n	8002e32 <dht22_GetValue+0x4a>
				}
			}
		}
		bytes[j] = result;
 8002f26:	f107 0208 	add.w	r2, r7, #8
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	7efa      	ldrb	r2, [r7, #27]
 8002f30:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 5; j++) {
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3301      	adds	r3, #1
 8002f36:	61fb      	str	r3, [r7, #28]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	f77f af74 	ble.w	8002e28 <dht22_GetValue+0x40>
	}

	init_dht22();
 8002f40:	f7ff ff42 	bl	8002dc8 <init_dht22>

	dht->hum = bytes[0];
 8002f44:	7a3a      	ldrb	r2, [r7, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	701a      	strb	r2, [r3, #0]
	dht->hum0 = bytes[1];
 8002f4a:	7a7a      	ldrb	r2, [r7, #9]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	705a      	strb	r2, [r3, #1]
	dht->tem = bytes[2];
 8002f50:	7aba      	ldrb	r2, [r7, #10]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	709a      	strb	r2, [r3, #2]
	dht->tem0 = bytes[3];
 8002f56:	7afa      	ldrb	r2, [r7, #11]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	70da      	strb	r2, [r3, #3]
	dht->check_sum = bytes[4];
 8002f5c:	7b3a      	ldrb	r2, [r7, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	711a      	strb	r2, [r3, #4]

	uint16_t check = (uint16_t) bytes[0] + (uint16_t) bytes[1]
 8002f62:	7a3b      	ldrb	r3, [r7, #8]
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	7a7b      	ldrb	r3, [r7, #9]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	b29a      	uxth	r2, r3
			+ (uint16_t) bytes[2] + (uint16_t) bytes[3];
 8002f6e:	7abb      	ldrb	r3, [r7, #10]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	4413      	add	r3, r2
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	7afb      	ldrb	r3, [r7, #11]
 8002f78:	b29b      	uxth	r3, r3
	uint16_t check = (uint16_t) bytes[0] + (uint16_t) bytes[1]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	827b      	strh	r3, [r7, #18]
	if ((check % 256) != bytes[4]) {
 8002f7e:	8a7b      	ldrh	r3, [r7, #18]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	7b3b      	ldrb	r3, [r7, #12]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d01a      	beq.n	8002fc2 <dht22_GetValue+0x1da>
		if (isDebug) {
 8002f8c:	4b27      	ldr	r3, [pc, #156]	; (800302c <dht22_GetValue+0x244>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00d      	beq.n	8002fb0 <dht22_GetValue+0x1c8>
			sprintf((char*) tx, "Err cs");
 8002f94:	492d      	ldr	r1, [pc, #180]	; (800304c <dht22_GetValue+0x264>)
 8002f96:	4827      	ldr	r0, [pc, #156]	; (8003034 <dht22_GetValue+0x24c>)
 8002f98:	f005 fb5a 	bl	8008650 <sprintf>
			HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002f9c:	4825      	ldr	r0, [pc, #148]	; (8003034 <dht22_GetValue+0x24c>)
 8002f9e:	f7fd f91f 	bl	80001e0 <strlen>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	23c8      	movs	r3, #200	; 0xc8
 8002fa8:	4922      	ldr	r1, [pc, #136]	; (8003034 <dht22_GetValue+0x24c>)
 8002faa:	4823      	ldr	r0, [pc, #140]	; (8003038 <dht22_GetValue+0x250>)
 8002fac:	f004 f887 	bl	80070be <HAL_UART_Transmit>
		}
		tem = -1;
 8002fb0:	4b22      	ldr	r3, [pc, #136]	; (800303c <dht22_GetValue+0x254>)
 8002fb2:	4a23      	ldr	r2, [pc, #140]	; (8003040 <dht22_GetValue+0x258>)
 8002fb4:	601a      	str	r2, [r3, #0]
		hum = -1;
 8002fb6:	4b23      	ldr	r3, [pc, #140]	; (8003044 <dht22_GetValue+0x25c>)
 8002fb8:	4a21      	ldr	r2, [pc, #132]	; (8003040 <dht22_GetValue+0x258>)
 8002fba:	601a      	str	r2, [r3, #0]
		init_dht22();
 8002fbc:	f7ff ff04 	bl	8002dc8 <init_dht22>
		return;							// incorrect checksum
 8002fc0:	e02b      	b.n	800301a <dht22_GetValue+0x232>
	}

	uint16_t t = ((uint16_t) dht->tem << 8) | ((uint16_t) dht->tem0);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	789b      	ldrb	r3, [r3, #2]
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	b21a      	sxth	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	78db      	ldrb	r3, [r3, #3]
 8002fce:	b21b      	sxth	r3, r3
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	b21b      	sxth	r3, r3
 8002fd4:	823b      	strh	r3, [r7, #16]
	uint16_t h = ((uint16_t) dht->hum << 8) | ((uint16_t) dht->hum0);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	021b      	lsls	r3, r3, #8
 8002fdc:	b21a      	sxth	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	785b      	ldrb	r3, [r3, #1]
 8002fe2:	b21b      	sxth	r3, r3
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	b21b      	sxth	r3, r3
 8002fe8:	81fb      	strh	r3, [r7, #14]

	tem = (float) t / 10;
 8002fea:	8a3b      	ldrh	r3, [r7, #16]
 8002fec:	ee07 3a90 	vmov	s15, r3
 8002ff0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ff4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002ff8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <dht22_GetValue+0x254>)
 8002ffe:	edc3 7a00 	vstr	s15, [r3]
	hum = (float) h / 10;
 8003002:	89fb      	ldrh	r3, [r7, #14]
 8003004:	ee07 3a90 	vmov	s15, r3
 8003008:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800300c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003010:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <dht22_GetValue+0x25c>)
 8003016:	edc3 7a00 	vstr	s15, [r3]
}
 800301a:	3720      	adds	r7, #32
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40020400 	.word	0x40020400
 8003024:	200010a0 	.word	0x200010a0
 8003028:	200010f4 	.word	0x200010f4
 800302c:	20001164 	.word	0x20001164
 8003030:	0800ff54 	.word	0x0800ff54
 8003034:	20000c9c 	.word	0x20000c9c
 8003038:	20000bf4 	.word	0x20000bf4
 800303c:	200010ec 	.word	0x200010ec
 8003040:	bf800000 	.word	0xbf800000
 8003044:	200010f0 	.word	0x200010f0
 8003048:	0800ff5c 	.word	0x0800ff5c
 800304c:	0800ff68 	.word	0x0800ff68

08003050 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);
	if (GPIO_Pin == GPIO_PIN_0) {				// sr501 pin
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d114      	bne.n	800308a <HAL_GPIO_EXTI_Callback+0x3a>
		if (g_sys_tick - btn_tick >= 500) {
 8003060:	4b8d      	ldr	r3, [pc, #564]	; (8003298 <HAL_GPIO_EXTI_Callback+0x248>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4b8d      	ldr	r3, [pc, #564]	; (800329c <HAL_GPIO_EXTI_Callback+0x24c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800306e:	f0c0 810d 	bcc.w	800328c <HAL_GPIO_EXTI_Callback+0x23c>
			if (d_mod)
 8003072:	4b8b      	ldr	r3, [pc, #556]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x250>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_GPIO_EXTI_Callback+0x30>
				d_done = 1;
 800307a:	4b8a      	ldr	r3, [pc, #552]	; (80032a4 <HAL_GPIO_EXTI_Callback+0x254>)
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
			btn_tick = g_sys_tick;
 8003080:	4b85      	ldr	r3, [pc, #532]	; (8003298 <HAL_GPIO_EXTI_Callback+0x248>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a85      	ldr	r2, [pc, #532]	; (800329c <HAL_GPIO_EXTI_Callback+0x24c>)
 8003086:	6013      	str	r3, [r2, #0]
			if (speed_2 == 6)
				speed_2 = 0;
			btn_tick = g_sys_tick;
		}
	}
}
 8003088:	e100      	b.n	800328c <HAL_GPIO_EXTI_Callback+0x23c>
	} else if (GPIO_Pin == GPIO_PIN_2) {			// sr501 2 pin
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	2b04      	cmp	r3, #4
 800308e:	d114      	bne.n	80030ba <HAL_GPIO_EXTI_Callback+0x6a>
		if (g_sys_tick - btn_tick >= 500) {
 8003090:	4b81      	ldr	r3, [pc, #516]	; (8003298 <HAL_GPIO_EXTI_Callback+0x248>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4b81      	ldr	r3, [pc, #516]	; (800329c <HAL_GPIO_EXTI_Callback+0x24c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800309e:	f0c0 80f5 	bcc.w	800328c <HAL_GPIO_EXTI_Callback+0x23c>
			if (d_mod_2)
 80030a2:	4b81      	ldr	r3, [pc, #516]	; (80032a8 <HAL_GPIO_EXTI_Callback+0x258>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_GPIO_EXTI_Callback+0x60>
				d_done_2 = 1;
 80030aa:	4b80      	ldr	r3, [pc, #512]	; (80032ac <HAL_GPIO_EXTI_Callback+0x25c>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	701a      	strb	r2, [r3, #0]
			btn_tick = g_sys_tick;
 80030b0:	4b79      	ldr	r3, [pc, #484]	; (8003298 <HAL_GPIO_EXTI_Callback+0x248>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a79      	ldr	r2, [pc, #484]	; (800329c <HAL_GPIO_EXTI_Callback+0x24c>)
 80030b6:	6013      	str	r3, [r2, #0]
}
 80030b8:	e0e8      	b.n	800328c <HAL_GPIO_EXTI_Callback+0x23c>
	} else if (GPIO_Pin == GPIO_PIN_3) {			// light sensor pin
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d114      	bne.n	80030ea <HAL_GPIO_EXTI_Callback+0x9a>
		if (g_sys_tick - lss_tick >= 500) {
 80030c0:	4b75      	ldr	r3, [pc, #468]	; (8003298 <HAL_GPIO_EXTI_Callback+0x248>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b7a      	ldr	r3, [pc, #488]	; (80032b0 <HAL_GPIO_EXTI_Callback+0x260>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030ce:	f0c0 80dd 	bcc.w	800328c <HAL_GPIO_EXTI_Callback+0x23c>
			if (led_mod)
 80030d2:	4b78      	ldr	r3, [pc, #480]	; (80032b4 <HAL_GPIO_EXTI_Callback+0x264>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <HAL_GPIO_EXTI_Callback+0x90>
				l_done = 1;
 80030da:	4b77      	ldr	r3, [pc, #476]	; (80032b8 <HAL_GPIO_EXTI_Callback+0x268>)
 80030dc:	2201      	movs	r2, #1
 80030de:	701a      	strb	r2, [r3, #0]
			lss_tick = g_sys_tick;
 80030e0:	4b6d      	ldr	r3, [pc, #436]	; (8003298 <HAL_GPIO_EXTI_Callback+0x248>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a72      	ldr	r2, [pc, #456]	; (80032b0 <HAL_GPIO_EXTI_Callback+0x260>)
 80030e6:	6013      	str	r3, [r2, #0]
}
 80030e8:	e0d0      	b.n	800328c <HAL_GPIO_EXTI_Callback+0x23c>
	} else if (GPIO_Pin == GPIO_PIN_1) {			// light sensor 2 pin
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d114      	bne.n	800311a <HAL_GPIO_EXTI_Callback+0xca>
		if (g_sys_tick - lss_tick >= 500) {
 80030f0:	4b69      	ldr	r3, [pc, #420]	; (8003298 <HAL_GPIO_EXTI_Callback+0x248>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b6e      	ldr	r3, [pc, #440]	; (80032b0 <HAL_GPIO_EXTI_Callback+0x260>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030fe:	f0c0 80c5 	bcc.w	800328c <HAL_GPIO_EXTI_Callback+0x23c>
			if (led_mod_2)
 8003102:	4b6e      	ldr	r3, [pc, #440]	; (80032bc <HAL_GPIO_EXTI_Callback+0x26c>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_GPIO_EXTI_Callback+0xc0>
				l_done_2 = 1;
 800310a:	4b6d      	ldr	r3, [pc, #436]	; (80032c0 <HAL_GPIO_EXTI_Callback+0x270>)
 800310c:	2201      	movs	r2, #1
 800310e:	701a      	strb	r2, [r3, #0]
			lss_tick = g_sys_tick;
 8003110:	4b61      	ldr	r3, [pc, #388]	; (8003298 <HAL_GPIO_EXTI_Callback+0x248>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a66      	ldr	r2, [pc, #408]	; (80032b0 <HAL_GPIO_EXTI_Callback+0x260>)
 8003116:	6013      	str	r3, [r2, #0]
}
 8003118:	e0b8      	b.n	800328c <HAL_GPIO_EXTI_Callback+0x23c>
	} else if (GPIO_Pin == GPIO_PIN_4) {				// door button
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	2b10      	cmp	r3, #16
 800311e:	d11a      	bne.n	8003156 <HAL_GPIO_EXTI_Callback+0x106>
		if (g_sys_tick - btn_tick >= 500) {
 8003120:	4b5d      	ldr	r3, [pc, #372]	; (8003298 <HAL_GPIO_EXTI_Callback+0x248>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	4b5d      	ldr	r3, [pc, #372]	; (800329c <HAL_GPIO_EXTI_Callback+0x24c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800312e:	f0c0 80ad 	bcc.w	800328c <HAL_GPIO_EXTI_Callback+0x23c>
			d_mod = 0;
 8003132:	4b5b      	ldr	r3, [pc, #364]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x250>)
 8003134:	2200      	movs	r2, #0
 8003136:	701a      	strb	r2, [r3, #0]
			door_state ^= 1;
 8003138:	4b62      	ldr	r3, [pc, #392]	; (80032c4 <HAL_GPIO_EXTI_Callback+0x274>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	f083 0301 	eor.w	r3, r3, #1
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4b60      	ldr	r3, [pc, #384]	; (80032c4 <HAL_GPIO_EXTI_Callback+0x274>)
 8003144:	701a      	strb	r2, [r3, #0]
			d_done = 1;
 8003146:	4b57      	ldr	r3, [pc, #348]	; (80032a4 <HAL_GPIO_EXTI_Callback+0x254>)
 8003148:	2201      	movs	r2, #1
 800314a:	701a      	strb	r2, [r3, #0]
			btn_tick = g_sys_tick;
 800314c:	4b52      	ldr	r3, [pc, #328]	; (8003298 <HAL_GPIO_EXTI_Callback+0x248>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a52      	ldr	r2, [pc, #328]	; (800329c <HAL_GPIO_EXTI_Callback+0x24c>)
 8003152:	6013      	str	r3, [r2, #0]
}
 8003154:	e09a      	b.n	800328c <HAL_GPIO_EXTI_Callback+0x23c>
	} else if (GPIO_Pin == GPIO_PIN_8) {				// door 2 button
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800315c:	d11a      	bne.n	8003194 <HAL_GPIO_EXTI_Callback+0x144>
		if (g_sys_tick - btn_tick >= 500) {
 800315e:	4b4e      	ldr	r3, [pc, #312]	; (8003298 <HAL_GPIO_EXTI_Callback+0x248>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	4b4e      	ldr	r3, [pc, #312]	; (800329c <HAL_GPIO_EXTI_Callback+0x24c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800316c:	f0c0 808e 	bcc.w	800328c <HAL_GPIO_EXTI_Callback+0x23c>
			d_mod_2 = 0;
 8003170:	4b4d      	ldr	r3, [pc, #308]	; (80032a8 <HAL_GPIO_EXTI_Callback+0x258>)
 8003172:	2200      	movs	r2, #0
 8003174:	701a      	strb	r2, [r3, #0]
			door_state_2 ^= 1;
 8003176:	4b54      	ldr	r3, [pc, #336]	; (80032c8 <HAL_GPIO_EXTI_Callback+0x278>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	f083 0301 	eor.w	r3, r3, #1
 800317e:	b2da      	uxtb	r2, r3
 8003180:	4b51      	ldr	r3, [pc, #324]	; (80032c8 <HAL_GPIO_EXTI_Callback+0x278>)
 8003182:	701a      	strb	r2, [r3, #0]
			d_done_2 = 1;
 8003184:	4b49      	ldr	r3, [pc, #292]	; (80032ac <HAL_GPIO_EXTI_Callback+0x25c>)
 8003186:	2201      	movs	r2, #1
 8003188:	701a      	strb	r2, [r3, #0]
			btn_tick = g_sys_tick;
 800318a:	4b43      	ldr	r3, [pc, #268]	; (8003298 <HAL_GPIO_EXTI_Callback+0x248>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a43      	ldr	r2, [pc, #268]	; (800329c <HAL_GPIO_EXTI_Callback+0x24c>)
 8003190:	6013      	str	r3, [r2, #0]
}
 8003192:	e07b      	b.n	800328c <HAL_GPIO_EXTI_Callback+0x23c>
	} else if (GPIO_Pin == GPIO_PIN_14) {				// light button
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800319a:	d119      	bne.n	80031d0 <HAL_GPIO_EXTI_Callback+0x180>
		if (g_sys_tick - btn_tick >= 500) {
 800319c:	4b3e      	ldr	r3, [pc, #248]	; (8003298 <HAL_GPIO_EXTI_Callback+0x248>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4b3e      	ldr	r3, [pc, #248]	; (800329c <HAL_GPIO_EXTI_Callback+0x24c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031aa:	d36f      	bcc.n	800328c <HAL_GPIO_EXTI_Callback+0x23c>
			led_mod = 0;
 80031ac:	4b41      	ldr	r3, [pc, #260]	; (80032b4 <HAL_GPIO_EXTI_Callback+0x264>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	701a      	strb	r2, [r3, #0]
			led_state ^= 1;
 80031b2:	4b46      	ldr	r3, [pc, #280]	; (80032cc <HAL_GPIO_EXTI_Callback+0x27c>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	f083 0301 	eor.w	r3, r3, #1
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	4b43      	ldr	r3, [pc, #268]	; (80032cc <HAL_GPIO_EXTI_Callback+0x27c>)
 80031be:	701a      	strb	r2, [r3, #0]
			l_done = 1;
 80031c0:	4b3d      	ldr	r3, [pc, #244]	; (80032b8 <HAL_GPIO_EXTI_Callback+0x268>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
			btn_tick = g_sys_tick;
 80031c6:	4b34      	ldr	r3, [pc, #208]	; (8003298 <HAL_GPIO_EXTI_Callback+0x248>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a34      	ldr	r2, [pc, #208]	; (800329c <HAL_GPIO_EXTI_Callback+0x24c>)
 80031cc:	6013      	str	r3, [r2, #0]
}
 80031ce:	e05d      	b.n	800328c <HAL_GPIO_EXTI_Callback+0x23c>
	} else if (GPIO_Pin == GPIO_PIN_15) {				// light button 2
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031d6:	d119      	bne.n	800320c <HAL_GPIO_EXTI_Callback+0x1bc>
		if (g_sys_tick - btn_tick >= 500) {
 80031d8:	4b2f      	ldr	r3, [pc, #188]	; (8003298 <HAL_GPIO_EXTI_Callback+0x248>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4b2f      	ldr	r3, [pc, #188]	; (800329c <HAL_GPIO_EXTI_Callback+0x24c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031e6:	d351      	bcc.n	800328c <HAL_GPIO_EXTI_Callback+0x23c>
			led_mod_2 = 0;
 80031e8:	4b34      	ldr	r3, [pc, #208]	; (80032bc <HAL_GPIO_EXTI_Callback+0x26c>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	701a      	strb	r2, [r3, #0]
			led_state_2 ^= 1;
 80031ee:	4b38      	ldr	r3, [pc, #224]	; (80032d0 <HAL_GPIO_EXTI_Callback+0x280>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	f083 0301 	eor.w	r3, r3, #1
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	4b35      	ldr	r3, [pc, #212]	; (80032d0 <HAL_GPIO_EXTI_Callback+0x280>)
 80031fa:	701a      	strb	r2, [r3, #0]
			l_done_2 = 1;
 80031fc:	4b30      	ldr	r3, [pc, #192]	; (80032c0 <HAL_GPIO_EXTI_Callback+0x270>)
 80031fe:	2201      	movs	r2, #1
 8003200:	701a      	strb	r2, [r3, #0]
			btn_tick = g_sys_tick;
 8003202:	4b25      	ldr	r3, [pc, #148]	; (8003298 <HAL_GPIO_EXTI_Callback+0x248>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a25      	ldr	r2, [pc, #148]	; (800329c <HAL_GPIO_EXTI_Callback+0x24c>)
 8003208:	6013      	str	r3, [r2, #0]
}
 800320a:	e03f      	b.n	800328c <HAL_GPIO_EXTI_Callback+0x23c>
	} else if (GPIO_Pin == GPIO_PIN_12) {				// fan button
 800320c:	88fb      	ldrh	r3, [r7, #6]
 800320e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003212:	d11c      	bne.n	800324e <HAL_GPIO_EXTI_Callback+0x1fe>
		if (g_sys_tick - btn_tick >= 500) {
 8003214:	4b20      	ldr	r3, [pc, #128]	; (8003298 <HAL_GPIO_EXTI_Callback+0x248>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b20      	ldr	r3, [pc, #128]	; (800329c <HAL_GPIO_EXTI_Callback+0x24c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003222:	d333      	bcc.n	800328c <HAL_GPIO_EXTI_Callback+0x23c>
			f_done = 1;
 8003224:	4b2b      	ldr	r3, [pc, #172]	; (80032d4 <HAL_GPIO_EXTI_Callback+0x284>)
 8003226:	2201      	movs	r2, #1
 8003228:	701a      	strb	r2, [r3, #0]
			speed++;
 800322a:	4b2b      	ldr	r3, [pc, #172]	; (80032d8 <HAL_GPIO_EXTI_Callback+0x288>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	3301      	adds	r3, #1
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4b29      	ldr	r3, [pc, #164]	; (80032d8 <HAL_GPIO_EXTI_Callback+0x288>)
 8003234:	701a      	strb	r2, [r3, #0]
			if (speed == 6)
 8003236:	4b28      	ldr	r3, [pc, #160]	; (80032d8 <HAL_GPIO_EXTI_Callback+0x288>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b06      	cmp	r3, #6
 800323c:	d102      	bne.n	8003244 <HAL_GPIO_EXTI_Callback+0x1f4>
				speed = 0;
 800323e:	4b26      	ldr	r3, [pc, #152]	; (80032d8 <HAL_GPIO_EXTI_Callback+0x288>)
 8003240:	2200      	movs	r2, #0
 8003242:	701a      	strb	r2, [r3, #0]
			btn_tick = g_sys_tick;
 8003244:	4b14      	ldr	r3, [pc, #80]	; (8003298 <HAL_GPIO_EXTI_Callback+0x248>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a14      	ldr	r2, [pc, #80]	; (800329c <HAL_GPIO_EXTI_Callback+0x24c>)
 800324a:	6013      	str	r3, [r2, #0]
}
 800324c:	e01e      	b.n	800328c <HAL_GPIO_EXTI_Callback+0x23c>
	} else if (GPIO_Pin == GPIO_PIN_5) {				// fan2 button
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	2b20      	cmp	r3, #32
 8003252:	d11b      	bne.n	800328c <HAL_GPIO_EXTI_Callback+0x23c>
		if (g_sys_tick - btn_tick >= 500) {
 8003254:	4b10      	ldr	r3, [pc, #64]	; (8003298 <HAL_GPIO_EXTI_Callback+0x248>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	4b10      	ldr	r3, [pc, #64]	; (800329c <HAL_GPIO_EXTI_Callback+0x24c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003262:	d313      	bcc.n	800328c <HAL_GPIO_EXTI_Callback+0x23c>
			f_done_2 = 1;
 8003264:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <HAL_GPIO_EXTI_Callback+0x28c>)
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
			speed_2++;
 800326a:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <HAL_GPIO_EXTI_Callback+0x290>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	3301      	adds	r3, #1
 8003270:	b2da      	uxtb	r2, r3
 8003272:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <HAL_GPIO_EXTI_Callback+0x290>)
 8003274:	701a      	strb	r2, [r3, #0]
			if (speed_2 == 6)
 8003276:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <HAL_GPIO_EXTI_Callback+0x290>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b06      	cmp	r3, #6
 800327c:	d102      	bne.n	8003284 <HAL_GPIO_EXTI_Callback+0x234>
				speed_2 = 0;
 800327e:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <HAL_GPIO_EXTI_Callback+0x290>)
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
			btn_tick = g_sys_tick;
 8003284:	4b04      	ldr	r3, [pc, #16]	; (8003298 <HAL_GPIO_EXTI_Callback+0x248>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a04      	ldr	r2, [pc, #16]	; (800329c <HAL_GPIO_EXTI_Callback+0x24c>)
 800328a:	6013      	str	r3, [r2, #0]
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	200010a0 	.word	0x200010a0
 800329c:	200010f8 	.word	0x200010f8
 80032a0:	200010ba 	.word	0x200010ba
 80032a4:	200010be 	.word	0x200010be
 80032a8:	200010bb 	.word	0x200010bb
 80032ac:	200010bf 	.word	0x200010bf
 80032b0:	200010b4 	.word	0x200010b4
 80032b4:	200010b0 	.word	0x200010b0
 80032b8:	200010b2 	.word	0x200010b2
 80032bc:	200010b1 	.word	0x200010b1
 80032c0:	200010b3 	.word	0x200010b3
 80032c4:	200010bc 	.word	0x200010bc
 80032c8:	200010bd 	.word	0x200010bd
 80032cc:	200010ae 	.word	0x200010ae
 80032d0:	200010af 	.word	0x200010af
 80032d4:	200010cd 	.word	0x200010cd
 80032d8:	200010cb 	.word	0x200010cb
 80032dc:	200010ce 	.word	0x200010ce
 80032e0:	200010cc 	.word	0x200010cc

080032e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance) {
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4b11      	ldr	r3, [pc, #68]	; (8003338 <HAL_UART_RxCpltCallback+0x54>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d11a      	bne.n	800332e <HAL_UART_RxCpltCallback+0x4a>
		if (uart_buf_cnt < sizeof(uart_buf)) {
 80032f8:	4b10      	ldr	r3, [pc, #64]	; (800333c <HAL_UART_RxCpltCallback+0x58>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b63      	cmp	r3, #99	; 0x63
 80032fe:	d806      	bhi.n	800330e <HAL_UART_RxCpltCallback+0x2a>
			uart_buf[uart_buf_cnt] = uart_chr;
 8003300:	4b0e      	ldr	r3, [pc, #56]	; (800333c <HAL_UART_RxCpltCallback+0x58>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <HAL_UART_RxCpltCallback+0x5c>)
 8003308:	7819      	ldrb	r1, [r3, #0]
 800330a:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <HAL_UART_RxCpltCallback+0x60>)
 800330c:	5499      	strb	r1, [r3, r2]
		}
		uart_last_rcv = g_sys_tick;
 800330e:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <HAL_UART_RxCpltCallback+0x64>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	b2da      	uxtb	r2, r3
 8003314:	4b0d      	ldr	r3, [pc, #52]	; (800334c <HAL_UART_RxCpltCallback+0x68>)
 8003316:	701a      	strb	r2, [r3, #0]
		uart_buf_cnt++;
 8003318:	4b08      	ldr	r3, [pc, #32]	; (800333c <HAL_UART_RxCpltCallback+0x58>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	3301      	adds	r3, #1
 800331e:	b2da      	uxtb	r2, r3
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <HAL_UART_RxCpltCallback+0x58>)
 8003322:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &uart_chr, sizeof(uart_chr));
 8003324:	2201      	movs	r2, #1
 8003326:	4906      	ldr	r1, [pc, #24]	; (8003340 <HAL_UART_RxCpltCallback+0x5c>)
 8003328:	4803      	ldr	r0, [pc, #12]	; (8003338 <HAL_UART_RxCpltCallback+0x54>)
 800332a:	f003 ff5a 	bl	80071e2 <HAL_UART_Receive_IT>
	}
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20000bf4 	.word	0x20000bf4
 800333c:	2000109c 	.word	0x2000109c
 8003340:	2000109d 	.word	0x2000109d
 8003344:	20000c38 	.word	0x20000c38
 8003348:	200010a0 	.word	0x200010a0
 800334c:	2000109e 	.word	0x2000109e

08003350 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance) {
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d10c      	bne.n	800337e <HAL_TIM_PeriodElapsedCallback+0x2e>
		g_sys_tick++;
 8003364:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3301      	adds	r3, #1
 800336a:	4a09      	ldr	r2, [pc, #36]	; (8003390 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800336c:	6013      	str	r3, [r2, #0]
		if (g_sys_tick >= 0xFFFFFFFF)
 800336e:	4b08      	ldr	r3, [pc, #32]	; (8003390 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003376:	d102      	bne.n	800337e <HAL_TIM_PeriodElapsedCallback+0x2e>
			g_sys_tick = 0;
 8003378:	4b05      	ldr	r3, [pc, #20]	; (8003390 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
	}
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	20000b1c 	.word	0x20000b1c
 8003390:	200010a0 	.word	0x200010a0

08003394 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == hspi2.Instance) {
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_SPI_TxRxCpltCallback+0x28>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d102      	bne.n	80033ae <HAL_SPI_TxRxCpltCallback+0x1a>
		rx_spi_flg = 1;
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_SPI_TxRxCpltCallback+0x2c>)
 80033aa:	2201      	movs	r2, #1
 80033ac:	701a      	strb	r2, [r3, #0]
	}
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000a34 	.word	0x20000a34
 80033c0:	200010fc 	.word	0x200010fc

080033c4 <getADC_value>:

void getADC_value() {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80033c8:	480b      	ldr	r0, [pc, #44]	; (80033f8 <getADC_value+0x34>)
 80033ca:	f000 fcbf 	bl	8003d4c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80033ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033d2:	4809      	ldr	r0, [pc, #36]	; (80033f8 <getADC_value+0x34>)
 80033d4:	f000 fda1 	bl	8003f1a <HAL_ADC_PollForConversion>
	adc_val = HAL_ADC_GetValue(&hadc1);
 80033d8:	4807      	ldr	r0, [pc, #28]	; (80033f8 <getADC_value+0x34>)
 80033da:	f000 fe29 	bl	8004030 <HAL_ADC_GetValue>
 80033de:	4603      	mov	r3, r0
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	4b06      	ldr	r3, [pc, #24]	; (80033fc <getADC_value+0x38>)
 80033e4:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80033e6:	4804      	ldr	r0, [pc, #16]	; (80033f8 <getADC_value+0x34>)
 80033e8:	f000 fd64 	bl	8003eb4 <HAL_ADC_Stop>
	buz_done = 1;
 80033ec:	4b04      	ldr	r3, [pc, #16]	; (8003400 <getADC_value+0x3c>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	701a      	strb	r2, [r3, #0]
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	200009ec 	.word	0x200009ec
 80033fc:	200010e0 	.word	0x200010e0
 8003400:	200010c0 	.word	0x200010c0

08003404 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003408:	b672      	cpsid	i
}
 800340a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800340c:	e7fe      	b.n	800340c <Error_Handler+0x8>
	...

08003410 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003416:	2300      	movs	r3, #0
 8003418:	607b      	str	r3, [r7, #4]
 800341a:	4b10      	ldr	r3, [pc, #64]	; (800345c <HAL_MspInit+0x4c>)
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	4a0f      	ldr	r2, [pc, #60]	; (800345c <HAL_MspInit+0x4c>)
 8003420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003424:	6453      	str	r3, [r2, #68]	; 0x44
 8003426:	4b0d      	ldr	r3, [pc, #52]	; (800345c <HAL_MspInit+0x4c>)
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800342e:	607b      	str	r3, [r7, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	603b      	str	r3, [r7, #0]
 8003436:	4b09      	ldr	r3, [pc, #36]	; (800345c <HAL_MspInit+0x4c>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	4a08      	ldr	r2, [pc, #32]	; (800345c <HAL_MspInit+0x4c>)
 800343c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003440:	6413      	str	r3, [r2, #64]	; 0x40
 8003442:	4b06      	ldr	r3, [pc, #24]	; (800345c <HAL_MspInit+0x4c>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40023800 	.word	0x40023800

08003460 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08a      	sub	sp, #40	; 0x28
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003468:	f107 0314 	add.w	r3, r7, #20
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	60da      	str	r2, [r3, #12]
 8003476:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a17      	ldr	r2, [pc, #92]	; (80034dc <HAL_ADC_MspInit+0x7c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d127      	bne.n	80034d2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
 8003486:	4b16      	ldr	r3, [pc, #88]	; (80034e0 <HAL_ADC_MspInit+0x80>)
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	4a15      	ldr	r2, [pc, #84]	; (80034e0 <HAL_ADC_MspInit+0x80>)
 800348c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003490:	6453      	str	r3, [r2, #68]	; 0x44
 8003492:	4b13      	ldr	r3, [pc, #76]	; (80034e0 <HAL_ADC_MspInit+0x80>)
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <HAL_ADC_MspInit+0x80>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	4a0e      	ldr	r2, [pc, #56]	; (80034e0 <HAL_ADC_MspInit+0x80>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	6313      	str	r3, [r2, #48]	; 0x30
 80034ae:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <HAL_ADC_MspInit+0x80>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80034ba:	2320      	movs	r3, #32
 80034bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034be:	2303      	movs	r3, #3
 80034c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c6:	f107 0314 	add.w	r3, r7, #20
 80034ca:	4619      	mov	r1, r3
 80034cc:	4805      	ldr	r0, [pc, #20]	; (80034e4 <HAL_ADC_MspInit+0x84>)
 80034ce:	f001 f97f 	bl	80047d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80034d2:	bf00      	nop
 80034d4:	3728      	adds	r7, #40	; 0x28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40012000 	.word	0x40012000
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40020000 	.word	0x40020000

080034e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	; 0x28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f0:	f107 0314 	add.w	r3, r7, #20
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	605a      	str	r2, [r3, #4]
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	60da      	str	r2, [r3, #12]
 80034fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1d      	ldr	r2, [pc, #116]	; (800357c <HAL_SPI_MspInit+0x94>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d134      	bne.n	8003574 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <HAL_SPI_MspInit+0x98>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	4a1b      	ldr	r2, [pc, #108]	; (8003580 <HAL_SPI_MspInit+0x98>)
 8003514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003518:	6413      	str	r3, [r2, #64]	; 0x40
 800351a:	4b19      	ldr	r3, [pc, #100]	; (8003580 <HAL_SPI_MspInit+0x98>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	4b15      	ldr	r3, [pc, #84]	; (8003580 <HAL_SPI_MspInit+0x98>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	4a14      	ldr	r2, [pc, #80]	; (8003580 <HAL_SPI_MspInit+0x98>)
 8003530:	f043 0302 	orr.w	r3, r3, #2
 8003534:	6313      	str	r3, [r2, #48]	; 0x30
 8003536:	4b12      	ldr	r3, [pc, #72]	; (8003580 <HAL_SPI_MspInit+0x98>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003542:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003548:	2302      	movs	r3, #2
 800354a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003550:	2303      	movs	r3, #3
 8003552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003554:	2305      	movs	r3, #5
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003558:	f107 0314 	add.w	r3, r7, #20
 800355c:	4619      	mov	r1, r3
 800355e:	4809      	ldr	r0, [pc, #36]	; (8003584 <HAL_SPI_MspInit+0x9c>)
 8003560:	f001 f936 	bl	80047d0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 7, 0);
 8003564:	2200      	movs	r2, #0
 8003566:	2107      	movs	r1, #7
 8003568:	2024      	movs	r0, #36	; 0x24
 800356a:	f001 f868 	bl	800463e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800356e:	2024      	movs	r0, #36	; 0x24
 8003570:	f001 f881 	bl	8004676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003574:	bf00      	nop
 8003576:	3728      	adds	r7, #40	; 0x28
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40003800 	.word	0x40003800
 8003580:	40023800 	.word	0x40023800
 8003584:	40020400 	.word	0x40020400

08003588 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a22      	ldr	r2, [pc, #136]	; (8003620 <HAL_TIM_Base_MspInit+0x98>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d10e      	bne.n	80035b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	4b21      	ldr	r3, [pc, #132]	; (8003624 <HAL_TIM_Base_MspInit+0x9c>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	4a20      	ldr	r2, [pc, #128]	; (8003624 <HAL_TIM_Base_MspInit+0x9c>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	6453      	str	r3, [r2, #68]	; 0x44
 80035aa:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <HAL_TIM_Base_MspInit+0x9c>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80035b6:	e02e      	b.n	8003616 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c0:	d10e      	bne.n	80035e0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	4b17      	ldr	r3, [pc, #92]	; (8003624 <HAL_TIM_Base_MspInit+0x9c>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	4a16      	ldr	r2, [pc, #88]	; (8003624 <HAL_TIM_Base_MspInit+0x9c>)
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	6413      	str	r3, [r2, #64]	; 0x40
 80035d2:	4b14      	ldr	r3, [pc, #80]	; (8003624 <HAL_TIM_Base_MspInit+0x9c>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	693b      	ldr	r3, [r7, #16]
}
 80035de:	e01a      	b.n	8003616 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a10      	ldr	r2, [pc, #64]	; (8003628 <HAL_TIM_Base_MspInit+0xa0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d115      	bne.n	8003616 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <HAL_TIM_Base_MspInit+0x9c>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	4a0c      	ldr	r2, [pc, #48]	; (8003624 <HAL_TIM_Base_MspInit+0x9c>)
 80035f4:	f043 0302 	orr.w	r3, r3, #2
 80035f8:	6413      	str	r3, [r2, #64]	; 0x40
 80035fa:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <HAL_TIM_Base_MspInit+0x9c>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 13, 0);
 8003606:	2200      	movs	r2, #0
 8003608:	210d      	movs	r1, #13
 800360a:	201d      	movs	r0, #29
 800360c:	f001 f817 	bl	800463e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003610:	201d      	movs	r0, #29
 8003612:	f001 f830 	bl	8004676 <HAL_NVIC_EnableIRQ>
}
 8003616:	bf00      	nop
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40010000 	.word	0x40010000
 8003624:	40023800 	.word	0x40023800
 8003628:	40000400 	.word	0x40000400

0800362c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08c      	sub	sp, #48	; 0x30
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003634:	f107 031c 	add.w	r3, r7, #28
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	60da      	str	r2, [r3, #12]
 8003642:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a32      	ldr	r2, [pc, #200]	; (8003714 <HAL_TIM_Encoder_MspInit+0xe8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d12c      	bne.n	80036a8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	61bb      	str	r3, [r7, #24]
 8003652:	4b31      	ldr	r3, [pc, #196]	; (8003718 <HAL_TIM_Encoder_MspInit+0xec>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	4a30      	ldr	r2, [pc, #192]	; (8003718 <HAL_TIM_Encoder_MspInit+0xec>)
 8003658:	f043 0304 	orr.w	r3, r3, #4
 800365c:	6413      	str	r3, [r2, #64]	; 0x40
 800365e:	4b2e      	ldr	r3, [pc, #184]	; (8003718 <HAL_TIM_Encoder_MspInit+0xec>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f003 0304 	and.w	r3, r3, #4
 8003666:	61bb      	str	r3, [r7, #24]
 8003668:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	4b2a      	ldr	r3, [pc, #168]	; (8003718 <HAL_TIM_Encoder_MspInit+0xec>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	4a29      	ldr	r2, [pc, #164]	; (8003718 <HAL_TIM_Encoder_MspInit+0xec>)
 8003674:	f043 0302 	orr.w	r3, r3, #2
 8003678:	6313      	str	r3, [r2, #48]	; 0x30
 800367a:	4b27      	ldr	r3, [pc, #156]	; (8003718 <HAL_TIM_Encoder_MspInit+0xec>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003686:	23c0      	movs	r3, #192	; 0xc0
 8003688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368a:	2302      	movs	r3, #2
 800368c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368e:	2300      	movs	r3, #0
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003692:	2300      	movs	r3, #0
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003696:	2302      	movs	r3, #2
 8003698:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800369a:	f107 031c 	add.w	r3, r7, #28
 800369e:	4619      	mov	r1, r3
 80036a0:	481e      	ldr	r0, [pc, #120]	; (800371c <HAL_TIM_Encoder_MspInit+0xf0>)
 80036a2:	f001 f895 	bl	80047d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80036a6:	e030      	b.n	800370a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1c      	ldr	r2, [pc, #112]	; (8003720 <HAL_TIM_Encoder_MspInit+0xf4>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d12b      	bne.n	800370a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	4b18      	ldr	r3, [pc, #96]	; (8003718 <HAL_TIM_Encoder_MspInit+0xec>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	4a17      	ldr	r2, [pc, #92]	; (8003718 <HAL_TIM_Encoder_MspInit+0xec>)
 80036bc:	f043 0308 	orr.w	r3, r3, #8
 80036c0:	6413      	str	r3, [r2, #64]	; 0x40
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <HAL_TIM_Encoder_MspInit+0xec>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	4b11      	ldr	r3, [pc, #68]	; (8003718 <HAL_TIM_Encoder_MspInit+0xec>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	4a10      	ldr	r2, [pc, #64]	; (8003718 <HAL_TIM_Encoder_MspInit+0xec>)
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	6313      	str	r3, [r2, #48]	; 0x30
 80036de:	4b0e      	ldr	r3, [pc, #56]	; (8003718 <HAL_TIM_Encoder_MspInit+0xec>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80036ea:	2303      	movs	r3, #3
 80036ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ee:	2302      	movs	r3, #2
 80036f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f6:	2300      	movs	r3, #0
 80036f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80036fa:	2302      	movs	r3, #2
 80036fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036fe:	f107 031c 	add.w	r3, r7, #28
 8003702:	4619      	mov	r1, r3
 8003704:	4807      	ldr	r0, [pc, #28]	; (8003724 <HAL_TIM_Encoder_MspInit+0xf8>)
 8003706:	f001 f863 	bl	80047d0 <HAL_GPIO_Init>
}
 800370a:	bf00      	nop
 800370c:	3730      	adds	r7, #48	; 0x30
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40000800 	.word	0x40000800
 8003718:	40023800 	.word	0x40023800
 800371c:	40020400 	.word	0x40020400
 8003720:	40000c00 	.word	0x40000c00
 8003724:	40020000 	.word	0x40020000

08003728 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	; 0x28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003730:	f107 0314 	add.w	r3, r7, #20
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a24      	ldr	r2, [pc, #144]	; (80037d8 <HAL_TIM_MspPostInit+0xb0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d11f      	bne.n	800378a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	4b23      	ldr	r3, [pc, #140]	; (80037dc <HAL_TIM_MspPostInit+0xb4>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	4a22      	ldr	r2, [pc, #136]	; (80037dc <HAL_TIM_MspPostInit+0xb4>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6313      	str	r3, [r2, #48]	; 0x30
 800375a:	4b20      	ldr	r3, [pc, #128]	; (80037dc <HAL_TIM_MspPostInit+0xb4>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8003766:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800376a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376c:	2302      	movs	r3, #2
 800376e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003770:	2300      	movs	r3, #0
 8003772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003774:	2300      	movs	r3, #0
 8003776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003778:	2301      	movs	r3, #1
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800377c:	f107 0314 	add.w	r3, r7, #20
 8003780:	4619      	mov	r1, r3
 8003782:	4817      	ldr	r0, [pc, #92]	; (80037e0 <HAL_TIM_MspPostInit+0xb8>)
 8003784:	f001 f824 	bl	80047d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003788:	e022      	b.n	80037d0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a15      	ldr	r2, [pc, #84]	; (80037e4 <HAL_TIM_MspPostInit+0xbc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d11d      	bne.n	80037d0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	4b10      	ldr	r3, [pc, #64]	; (80037dc <HAL_TIM_MspPostInit+0xb4>)
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	4a0f      	ldr	r2, [pc, #60]	; (80037dc <HAL_TIM_MspPostInit+0xb4>)
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	6313      	str	r3, [r2, #48]	; 0x30
 80037a4:	4b0d      	ldr	r3, [pc, #52]	; (80037dc <HAL_TIM_MspPostInit+0xb4>)
 80037a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037b0:	23c0      	movs	r3, #192	; 0xc0
 80037b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b4:	2302      	movs	r3, #2
 80037b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037bc:	2300      	movs	r3, #0
 80037be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037c0:	2302      	movs	r3, #2
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c4:	f107 0314 	add.w	r3, r7, #20
 80037c8:	4619      	mov	r1, r3
 80037ca:	4805      	ldr	r0, [pc, #20]	; (80037e0 <HAL_TIM_MspPostInit+0xb8>)
 80037cc:	f001 f800 	bl	80047d0 <HAL_GPIO_Init>
}
 80037d0:	bf00      	nop
 80037d2:	3728      	adds	r7, #40	; 0x28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40010000 	.word	0x40010000
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40020000 	.word	0x40020000
 80037e4:	40000400 	.word	0x40000400

080037e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08a      	sub	sp, #40	; 0x28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f0:	f107 0314 	add.w	r3, r7, #20
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	605a      	str	r2, [r3, #4]
 80037fa:	609a      	str	r2, [r3, #8]
 80037fc:	60da      	str	r2, [r3, #12]
 80037fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a1d      	ldr	r2, [pc, #116]	; (800387c <HAL_UART_MspInit+0x94>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d134      	bne.n	8003874 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	4b1c      	ldr	r3, [pc, #112]	; (8003880 <HAL_UART_MspInit+0x98>)
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	4a1b      	ldr	r2, [pc, #108]	; (8003880 <HAL_UART_MspInit+0x98>)
 8003814:	f043 0310 	orr.w	r3, r3, #16
 8003818:	6453      	str	r3, [r2, #68]	; 0x44
 800381a:	4b19      	ldr	r3, [pc, #100]	; (8003880 <HAL_UART_MspInit+0x98>)
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	613b      	str	r3, [r7, #16]
 8003824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	4b15      	ldr	r3, [pc, #84]	; (8003880 <HAL_UART_MspInit+0x98>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	4a14      	ldr	r2, [pc, #80]	; (8003880 <HAL_UART_MspInit+0x98>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	6313      	str	r3, [r2, #48]	; 0x30
 8003836:	4b12      	ldr	r3, [pc, #72]	; (8003880 <HAL_UART_MspInit+0x98>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003842:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003848:	2302      	movs	r3, #2
 800384a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384c:	2300      	movs	r3, #0
 800384e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003850:	2303      	movs	r3, #3
 8003852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003854:	2307      	movs	r3, #7
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003858:	f107 0314 	add.w	r3, r7, #20
 800385c:	4619      	mov	r1, r3
 800385e:	4809      	ldr	r0, [pc, #36]	; (8003884 <HAL_UART_MspInit+0x9c>)
 8003860:	f000 ffb6 	bl	80047d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 8003864:	2200      	movs	r2, #0
 8003866:	210e      	movs	r1, #14
 8003868:	2025      	movs	r0, #37	; 0x25
 800386a:	f000 fee8 	bl	800463e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800386e:	2025      	movs	r0, #37	; 0x25
 8003870:	f000 ff01 	bl	8004676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003874:	bf00      	nop
 8003876:	3728      	adds	r7, #40	; 0x28
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40011000 	.word	0x40011000
 8003880:	40023800 	.word	0x40023800
 8003884:	40020000 	.word	0x40020000

08003888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800388c:	e7fe      	b.n	800388c <NMI_Handler+0x4>

0800388e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800388e:	b480      	push	{r7}
 8003890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003892:	e7fe      	b.n	8003892 <HardFault_Handler+0x4>

08003894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003898:	e7fe      	b.n	8003898 <MemManage_Handler+0x4>

0800389a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800389a:	b480      	push	{r7}
 800389c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800389e:	e7fe      	b.n	800389e <BusFault_Handler+0x4>

080038a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038a4:	e7fe      	b.n	80038a4 <UsageFault_Handler+0x4>

080038a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038a6:	b480      	push	{r7}
 80038a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038aa:	bf00      	nop
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038b8:	bf00      	nop
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038c2:	b480      	push	{r7}
 80038c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038c6:	bf00      	nop
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038d4:	f000 f9b2 	bl	8003c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038d8:	bf00      	nop
 80038da:	bd80      	pop	{r7, pc}

080038dc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SR501_Pin);
 80038e0:	2001      	movs	r0, #1
 80038e2:	f001 f945 	bl	8004b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}

080038ea <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LSS2_Pin);
 80038ee:	2002      	movs	r0, #2
 80038f0:	f001 f93e 	bl	8004b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80038f4:	bf00      	nop
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SR502_2_Pin);
 80038fc:	2004      	movs	r0, #4
 80038fe:	f001 f937 	bl	8004b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}

08003906 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LSS_Pin);
 800390a:	2008      	movs	r0, #8
 800390c:	f001 f930 	bl	8004b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003910:	bf00      	nop
 8003912:	bd80      	pop	{r7, pc}

08003914 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8003918:	2010      	movs	r0, #16
 800391a:	f001 f929 	bl	8004b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}

08003922 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8003926:	2020      	movs	r0, #32
 8003928:	f001 f922 	bl	8004b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 800392c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003930:	f001 f91e 	bl	8004b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003934:	bf00      	nop
 8003936:	bd80      	pop	{r7, pc}

08003938 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800393c:	4802      	ldr	r0, [pc, #8]	; (8003948 <TIM3_IRQHandler+0x10>)
 800393e:	f002 fd17 	bl	8006370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003942:	bf00      	nop
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	20000b1c 	.word	0x20000b1c

0800394c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003950:	4802      	ldr	r0, [pc, #8]	; (800395c <SPI2_IRQHandler+0x10>)
 8003952:	f001 fe9b 	bl	800568c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003956:	bf00      	nop
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000a34 	.word	0x20000a34

08003960 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003964:	4802      	ldr	r0, [pc, #8]	; (8003970 <USART1_IRQHandler+0x10>)
 8003966:	f003 fc6d 	bl	8007244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800396a:	bf00      	nop
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000bf4 	.word	0x20000bf4

08003974 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN5_Pin);
 8003978:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800397c:	f001 f8f8 	bl	8004b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN6_Pin);
 8003980:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003984:	f001 f8f4 	bl	8004b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 8003988:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800398c:	f001 f8f0 	bl	8004b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003990:	bf00      	nop
 8003992:	bd80      	pop	{r7, pc}

08003994 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  return 1;
 8003998:	2301      	movs	r3, #1
}
 800399a:	4618      	mov	r0, r3
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <_kill>:

int _kill(int pid, int sig)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039ae:	f004 fbb5 	bl	800811c <__errno>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2216      	movs	r2, #22
 80039b6:	601a      	str	r2, [r3, #0]
  return -1;
 80039b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <_exit>:

void _exit (int status)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039cc:	f04f 31ff 	mov.w	r1, #4294967295
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff ffe7 	bl	80039a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80039d6:	e7fe      	b.n	80039d6 <_exit+0x12>

080039d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	e00a      	b.n	8003a00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80039ea:	f3af 8000 	nop.w
 80039ee:	4601      	mov	r1, r0
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	60ba      	str	r2, [r7, #8]
 80039f6:	b2ca      	uxtb	r2, r1
 80039f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	3301      	adds	r3, #1
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	dbf0      	blt.n	80039ea <_read+0x12>
  }

  return len;
 8003a08:	687b      	ldr	r3, [r7, #4]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b086      	sub	sp, #24
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	e009      	b.n	8003a38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	60ba      	str	r2, [r7, #8]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	3301      	adds	r3, #1
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	dbf1      	blt.n	8003a24 <_write+0x12>
  }
  return len;
 8003a40:	687b      	ldr	r3, [r7, #4]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <_close>:

int _close(int file)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a72:	605a      	str	r2, [r3, #4]
  return 0;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <_isatty>:

int _isatty(int file)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a8a:	2301      	movs	r3, #1
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003abc:	4a14      	ldr	r2, [pc, #80]	; (8003b10 <_sbrk+0x5c>)
 8003abe:	4b15      	ldr	r3, [pc, #84]	; (8003b14 <_sbrk+0x60>)
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ac8:	4b13      	ldr	r3, [pc, #76]	; (8003b18 <_sbrk+0x64>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d102      	bne.n	8003ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ad0:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <_sbrk+0x64>)
 8003ad2:	4a12      	ldr	r2, [pc, #72]	; (8003b1c <_sbrk+0x68>)
 8003ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ad6:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <_sbrk+0x64>)
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4413      	add	r3, r2
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d207      	bcs.n	8003af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ae4:	f004 fb1a 	bl	800811c <__errno>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	220c      	movs	r2, #12
 8003aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003aee:	f04f 33ff 	mov.w	r3, #4294967295
 8003af2:	e009      	b.n	8003b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003af4:	4b08      	ldr	r3, [pc, #32]	; (8003b18 <_sbrk+0x64>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003afa:	4b07      	ldr	r3, [pc, #28]	; (8003b18 <_sbrk+0x64>)
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4413      	add	r3, r2
 8003b02:	4a05      	ldr	r2, [pc, #20]	; (8003b18 <_sbrk+0x64>)
 8003b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b06:	68fb      	ldr	r3, [r7, #12]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20010000 	.word	0x20010000
 8003b14:	00000400 	.word	0x00000400
 8003b18:	20001168 	.word	0x20001168
 8003b1c:	200011b0 	.word	0x200011b0

08003b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <SystemInit+0x20>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2a:	4a05      	ldr	r2, [pc, #20]	; (8003b40 <SystemInit+0x20>)
 8003b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b34:	bf00      	nop
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	e000ed00 	.word	0xe000ed00

08003b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b48:	480d      	ldr	r0, [pc, #52]	; (8003b80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b4a:	490e      	ldr	r1, [pc, #56]	; (8003b84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b4c:	4a0e      	ldr	r2, [pc, #56]	; (8003b88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b50:	e002      	b.n	8003b58 <LoopCopyDataInit>

08003b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b56:	3304      	adds	r3, #4

08003b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b5c:	d3f9      	bcc.n	8003b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b5e:	4a0b      	ldr	r2, [pc, #44]	; (8003b8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b60:	4c0b      	ldr	r4, [pc, #44]	; (8003b90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b64:	e001      	b.n	8003b6a <LoopFillZerobss>

08003b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b68:	3204      	adds	r2, #4

08003b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b6c:	d3fb      	bcc.n	8003b66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b6e:	f7ff ffd7 	bl	8003b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b72:	f004 fad9 	bl	8008128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b76:	f7fd fc01 	bl	800137c <main>
  bx  lr    
 8003b7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b7c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b84:	200009c4 	.word	0x200009c4
  ldr r2, =_sidata
 8003b88:	08010418 	.word	0x08010418
  ldr r2, =_sbss
 8003b8c:	200009c4 	.word	0x200009c4
  ldr r4, =_ebss
 8003b90:	200011ac 	.word	0x200011ac

08003b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b94:	e7fe      	b.n	8003b94 <ADC_IRQHandler>
	...

08003b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b9c:	4b0e      	ldr	r3, [pc, #56]	; (8003bd8 <HAL_Init+0x40>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a0d      	ldr	r2, [pc, #52]	; (8003bd8 <HAL_Init+0x40>)
 8003ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ba6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <HAL_Init+0x40>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a0a      	ldr	r2, [pc, #40]	; (8003bd8 <HAL_Init+0x40>)
 8003bae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bb4:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <HAL_Init+0x40>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a07      	ldr	r2, [pc, #28]	; (8003bd8 <HAL_Init+0x40>)
 8003bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bc0:	2003      	movs	r0, #3
 8003bc2:	f000 fd31 	bl	8004628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bc6:	200f      	movs	r0, #15
 8003bc8:	f000 f808 	bl	8003bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bcc:	f7ff fc20 	bl	8003410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40023c00 	.word	0x40023c00

08003bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003be4:	4b12      	ldr	r3, [pc, #72]	; (8003c30 <HAL_InitTick+0x54>)
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <HAL_InitTick+0x58>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	4619      	mov	r1, r3
 8003bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fd49 	bl	8004692 <HAL_SYSTICK_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e00e      	b.n	8003c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b0f      	cmp	r3, #15
 8003c0e:	d80a      	bhi.n	8003c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c10:	2200      	movs	r2, #0
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	f04f 30ff 	mov.w	r0, #4294967295
 8003c18:	f000 fd11 	bl	800463e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c1c:	4a06      	ldr	r2, [pc, #24]	; (8003c38 <HAL_InitTick+0x5c>)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	e000      	b.n	8003c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	20000004 	.word	0x20000004
 8003c34:	2000000c 	.word	0x2000000c
 8003c38:	20000008 	.word	0x20000008

08003c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c40:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <HAL_IncTick+0x20>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <HAL_IncTick+0x24>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	4a04      	ldr	r2, [pc, #16]	; (8003c60 <HAL_IncTick+0x24>)
 8003c4e:	6013      	str	r3, [r2, #0]
}
 8003c50:	bf00      	nop
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	2000000c 	.word	0x2000000c
 8003c60:	2000116c 	.word	0x2000116c

08003c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return uwTick;
 8003c68:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <HAL_GetTick+0x14>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	2000116c 	.word	0x2000116c

08003c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c84:	f7ff ffee 	bl	8003c64 <HAL_GetTick>
 8003c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c94:	d005      	beq.n	8003ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c96:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <HAL_Delay+0x44>)
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ca2:	bf00      	nop
 8003ca4:	f7ff ffde 	bl	8003c64 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d8f7      	bhi.n	8003ca4 <HAL_Delay+0x28>
  {
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	bf00      	nop
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	2000000c 	.word	0x2000000c

08003cc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e033      	b.n	8003d42 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff fbbc 	bl	8003460 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f003 0310 	and.w	r3, r3, #16
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d118      	bne.n	8003d34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d0a:	f023 0302 	bic.w	r3, r3, #2
 8003d0e:	f043 0202 	orr.w	r2, r3, #2
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 faba 	bl	8004290 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	f023 0303 	bic.w	r3, r3, #3
 8003d2a:	f043 0201 	orr.w	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	641a      	str	r2, [r3, #64]	; 0x40
 8003d32:	e001      	b.n	8003d38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_ADC_Start+0x1a>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e097      	b.n	8003e96 <HAL_ADC_Start+0x14a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d018      	beq.n	8003dae <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d8c:	4b45      	ldr	r3, [pc, #276]	; (8003ea4 <HAL_ADC_Start+0x158>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a45      	ldr	r2, [pc, #276]	; (8003ea8 <HAL_ADC_Start+0x15c>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	0c9a      	lsrs	r2, r3, #18
 8003d98:	4613      	mov	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	4413      	add	r3, r2
 8003d9e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003da0:	e002      	b.n	8003da8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f9      	bne.n	8003da2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d15f      	bne.n	8003e7c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d007      	beq.n	8003dee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003de6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dfa:	d106      	bne.n	8003e0a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e00:	f023 0206 	bic.w	r2, r3, #6
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	645a      	str	r2, [r3, #68]	; 0x44
 8003e08:	e002      	b.n	8003e10 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e18:	4b24      	ldr	r3, [pc, #144]	; (8003eac <HAL_ADC_Start+0x160>)
 8003e1a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e24:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10f      	bne.n	8003e52 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d129      	bne.n	8003e94 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e4e:	609a      	str	r2, [r3, #8]
 8003e50:	e020      	b.n	8003e94 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a16      	ldr	r2, [pc, #88]	; (8003eb0 <HAL_ADC_Start+0x164>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d11b      	bne.n	8003e94 <HAL_ADC_Start+0x148>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d114      	bne.n	8003e94 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e78:	609a      	str	r2, [r3, #8]
 8003e7a:	e00b      	b.n	8003e94 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	f043 0210 	orr.w	r2, r3, #16
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8c:	f043 0201 	orr.w	r2, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	20000004 	.word	0x20000004
 8003ea8:	431bde83 	.word	0x431bde83
 8003eac:	40012300 	.word	0x40012300
 8003eb0:	40012000 	.word	0x40012000

08003eb4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d101      	bne.n	8003eca <HAL_ADC_Stop+0x16>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	e021      	b.n	8003f0e <HAL_ADC_Stop+0x5a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0201 	bic.w	r2, r2, #1
 8003ee0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d109      	bne.n	8003f04 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	f043 0201 	orr.w	r2, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f36:	d113      	bne.n	8003f60 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f46:	d10b      	bne.n	8003f60 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	f043 0220 	orr.w	r2, r3, #32
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e063      	b.n	8004028 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003f60:	f7ff fe80 	bl	8003c64 <HAL_GetTick>
 8003f64:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f66:	e021      	b.n	8003fac <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6e:	d01d      	beq.n	8003fac <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d007      	beq.n	8003f86 <HAL_ADC_PollForConversion+0x6c>
 8003f76:	f7ff fe75 	bl	8003c64 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d212      	bcs.n	8003fac <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d00b      	beq.n	8003fac <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	f043 0204 	orr.w	r2, r3, #4
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e03d      	b.n	8004028 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d1d6      	bne.n	8003f68 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f06f 0212 	mvn.w	r2, #18
 8003fc2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d123      	bne.n	8004026 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d11f      	bne.n	8004026 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d006      	beq.n	8004002 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d111      	bne.n	8004026 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d105      	bne.n	8004026 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	f043 0201 	orr.w	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800403e:	4618      	mov	r0, r3
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x1c>
 8004064:	2302      	movs	r3, #2
 8004066:	e105      	b.n	8004274 <HAL_ADC_ConfigChannel+0x228>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b09      	cmp	r3, #9
 8004076:	d925      	bls.n	80040c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68d9      	ldr	r1, [r3, #12]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	b29b      	uxth	r3, r3
 8004084:	461a      	mov	r2, r3
 8004086:	4613      	mov	r3, r2
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	4413      	add	r3, r2
 800408c:	3b1e      	subs	r3, #30
 800408e:	2207      	movs	r2, #7
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43da      	mvns	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	400a      	ands	r2, r1
 800409c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68d9      	ldr	r1, [r3, #12]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	4618      	mov	r0, r3
 80040b0:	4603      	mov	r3, r0
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	4403      	add	r3, r0
 80040b6:	3b1e      	subs	r3, #30
 80040b8:	409a      	lsls	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	60da      	str	r2, [r3, #12]
 80040c2:	e022      	b.n	800410a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6919      	ldr	r1, [r3, #16]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	461a      	mov	r2, r3
 80040d2:	4613      	mov	r3, r2
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	4413      	add	r3, r2
 80040d8:	2207      	movs	r2, #7
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43da      	mvns	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	400a      	ands	r2, r1
 80040e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6919      	ldr	r1, [r3, #16]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	4618      	mov	r0, r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	4403      	add	r3, r0
 8004100:	409a      	lsls	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b06      	cmp	r3, #6
 8004110:	d824      	bhi.n	800415c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	3b05      	subs	r3, #5
 8004124:	221f      	movs	r2, #31
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	43da      	mvns	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	400a      	ands	r2, r1
 8004132:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	b29b      	uxth	r3, r3
 8004140:	4618      	mov	r0, r3
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4413      	add	r3, r2
 800414c:	3b05      	subs	r3, #5
 800414e:	fa00 f203 	lsl.w	r2, r0, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	635a      	str	r2, [r3, #52]	; 0x34
 800415a:	e04c      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b0c      	cmp	r3, #12
 8004162:	d824      	bhi.n	80041ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	3b23      	subs	r3, #35	; 0x23
 8004176:	221f      	movs	r2, #31
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	43da      	mvns	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	400a      	ands	r2, r1
 8004184:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	b29b      	uxth	r3, r3
 8004192:	4618      	mov	r0, r3
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	3b23      	subs	r3, #35	; 0x23
 80041a0:	fa00 f203 	lsl.w	r2, r0, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	631a      	str	r2, [r3, #48]	; 0x30
 80041ac:	e023      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	4613      	mov	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	3b41      	subs	r3, #65	; 0x41
 80041c0:	221f      	movs	r2, #31
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43da      	mvns	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	400a      	ands	r2, r1
 80041ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	4618      	mov	r0, r3
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	3b41      	subs	r3, #65	; 0x41
 80041ea:	fa00 f203 	lsl.w	r2, r0, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041f6:	4b22      	ldr	r3, [pc, #136]	; (8004280 <HAL_ADC_ConfigChannel+0x234>)
 80041f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a21      	ldr	r2, [pc, #132]	; (8004284 <HAL_ADC_ConfigChannel+0x238>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d109      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x1cc>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b12      	cmp	r3, #18
 800420a:	d105      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a19      	ldr	r2, [pc, #100]	; (8004284 <HAL_ADC_ConfigChannel+0x238>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d123      	bne.n	800426a <HAL_ADC_ConfigChannel+0x21e>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b10      	cmp	r3, #16
 8004228:	d003      	beq.n	8004232 <HAL_ADC_ConfigChannel+0x1e6>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b11      	cmp	r3, #17
 8004230:	d11b      	bne.n	800426a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b10      	cmp	r3, #16
 8004244:	d111      	bne.n	800426a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004246:	4b10      	ldr	r3, [pc, #64]	; (8004288 <HAL_ADC_ConfigChannel+0x23c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a10      	ldr	r2, [pc, #64]	; (800428c <HAL_ADC_ConfigChannel+0x240>)
 800424c:	fba2 2303 	umull	r2, r3, r2, r3
 8004250:	0c9a      	lsrs	r2, r3, #18
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800425c:	e002      	b.n	8004264 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	3b01      	subs	r3, #1
 8004262:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f9      	bne.n	800425e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	40012300 	.word	0x40012300
 8004284:	40012000 	.word	0x40012000
 8004288:	20000004 	.word	0x20000004
 800428c:	431bde83 	.word	0x431bde83

08004290 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004298:	4b79      	ldr	r3, [pc, #484]	; (8004480 <ADC_Init+0x1f0>)
 800429a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	431a      	orrs	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6859      	ldr	r1, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	021a      	lsls	r2, r3, #8
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80042e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6859      	ldr	r1, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800430a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6899      	ldr	r1, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	4a58      	ldr	r2, [pc, #352]	; (8004484 <ADC_Init+0x1f4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d022      	beq.n	800436e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004336:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6899      	ldr	r1, [r3, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004358:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6899      	ldr	r1, [r3, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	609a      	str	r2, [r3, #8]
 800436c:	e00f      	b.n	800438e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800437c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800438c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0202 	bic.w	r2, r2, #2
 800439c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6899      	ldr	r1, [r3, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	7e1b      	ldrb	r3, [r3, #24]
 80043a8:	005a      	lsls	r2, r3, #1
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01b      	beq.n	80043f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6859      	ldr	r1, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	3b01      	subs	r3, #1
 80043e8:	035a      	lsls	r2, r3, #13
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	605a      	str	r2, [r3, #4]
 80043f2:	e007      	b.n	8004404 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004402:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004412:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	3b01      	subs	r3, #1
 8004420:	051a      	lsls	r2, r3, #20
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004438:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6899      	ldr	r1, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004446:	025a      	lsls	r2, r3, #9
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6899      	ldr	r1, [r3, #8]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	029a      	lsls	r2, r3, #10
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	609a      	str	r2, [r3, #8]
}
 8004474:	bf00      	nop
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	40012300 	.word	0x40012300
 8004484:	0f000001 	.word	0x0f000001

08004488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004498:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <__NVIC_SetPriorityGrouping+0x44>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044a4:	4013      	ands	r3, r2
 80044a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ba:	4a04      	ldr	r2, [pc, #16]	; (80044cc <__NVIC_SetPriorityGrouping+0x44>)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	60d3      	str	r3, [r2, #12]
}
 80044c0:	bf00      	nop
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	e000ed00 	.word	0xe000ed00

080044d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d4:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <__NVIC_GetPriorityGrouping+0x18>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	0a1b      	lsrs	r3, r3, #8
 80044da:	f003 0307 	and.w	r3, r3, #7
}
 80044de:	4618      	mov	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	e000ed00 	.word	0xe000ed00

080044ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	db0b      	blt.n	8004516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	f003 021f 	and.w	r2, r3, #31
 8004504:	4907      	ldr	r1, [pc, #28]	; (8004524 <__NVIC_EnableIRQ+0x38>)
 8004506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	2001      	movs	r0, #1
 800450e:	fa00 f202 	lsl.w	r2, r0, r2
 8004512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	e000e100 	.word	0xe000e100

08004528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	6039      	str	r1, [r7, #0]
 8004532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004538:	2b00      	cmp	r3, #0
 800453a:	db0a      	blt.n	8004552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	b2da      	uxtb	r2, r3
 8004540:	490c      	ldr	r1, [pc, #48]	; (8004574 <__NVIC_SetPriority+0x4c>)
 8004542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004546:	0112      	lsls	r2, r2, #4
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	440b      	add	r3, r1
 800454c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004550:	e00a      	b.n	8004568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	4908      	ldr	r1, [pc, #32]	; (8004578 <__NVIC_SetPriority+0x50>)
 8004558:	79fb      	ldrb	r3, [r7, #7]
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	3b04      	subs	r3, #4
 8004560:	0112      	lsls	r2, r2, #4
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	440b      	add	r3, r1
 8004566:	761a      	strb	r2, [r3, #24]
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	e000e100 	.word	0xe000e100
 8004578:	e000ed00 	.word	0xe000ed00

0800457c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800457c:	b480      	push	{r7}
 800457e:	b089      	sub	sp, #36	; 0x24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f1c3 0307 	rsb	r3, r3, #7
 8004596:	2b04      	cmp	r3, #4
 8004598:	bf28      	it	cs
 800459a:	2304      	movcs	r3, #4
 800459c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	3304      	adds	r3, #4
 80045a2:	2b06      	cmp	r3, #6
 80045a4:	d902      	bls.n	80045ac <NVIC_EncodePriority+0x30>
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	3b03      	subs	r3, #3
 80045aa:	e000      	b.n	80045ae <NVIC_EncodePriority+0x32>
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b0:	f04f 32ff 	mov.w	r2, #4294967295
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43da      	mvns	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	401a      	ands	r2, r3
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c4:	f04f 31ff 	mov.w	r1, #4294967295
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	fa01 f303 	lsl.w	r3, r1, r3
 80045ce:	43d9      	mvns	r1, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d4:	4313      	orrs	r3, r2
         );
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3724      	adds	r7, #36	; 0x24
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
	...

080045e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045f4:	d301      	bcc.n	80045fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045f6:	2301      	movs	r3, #1
 80045f8:	e00f      	b.n	800461a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045fa:	4a0a      	ldr	r2, [pc, #40]	; (8004624 <SysTick_Config+0x40>)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3b01      	subs	r3, #1
 8004600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004602:	210f      	movs	r1, #15
 8004604:	f04f 30ff 	mov.w	r0, #4294967295
 8004608:	f7ff ff8e 	bl	8004528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <SysTick_Config+0x40>)
 800460e:	2200      	movs	r2, #0
 8004610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004612:	4b04      	ldr	r3, [pc, #16]	; (8004624 <SysTick_Config+0x40>)
 8004614:	2207      	movs	r2, #7
 8004616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	e000e010 	.word	0xe000e010

08004628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff ff29 	bl	8004488 <__NVIC_SetPriorityGrouping>
}
 8004636:	bf00      	nop
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800463e:	b580      	push	{r7, lr}
 8004640:	b086      	sub	sp, #24
 8004642:	af00      	add	r7, sp, #0
 8004644:	4603      	mov	r3, r0
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	607a      	str	r2, [r7, #4]
 800464a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004650:	f7ff ff3e 	bl	80044d0 <__NVIC_GetPriorityGrouping>
 8004654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68b9      	ldr	r1, [r7, #8]
 800465a:	6978      	ldr	r0, [r7, #20]
 800465c:	f7ff ff8e 	bl	800457c <NVIC_EncodePriority>
 8004660:	4602      	mov	r2, r0
 8004662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004666:	4611      	mov	r1, r2
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff ff5d 	bl	8004528 <__NVIC_SetPriority>
}
 800466e:	bf00      	nop
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	4603      	mov	r3, r0
 800467e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff ff31 	bl	80044ec <__NVIC_EnableIRQ>
}
 800468a:	bf00      	nop
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7ff ffa2 	bl	80045e4 <SysTick_Config>
 80046a0:	4603      	mov	r3, r0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046b8:	f7ff fad4 	bl	8003c64 <HAL_GetTick>
 80046bc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d008      	beq.n	80046dc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2280      	movs	r2, #128	; 0x80
 80046ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e052      	b.n	8004782 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0216 	bic.w	r2, r2, #22
 80046ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695a      	ldr	r2, [r3, #20]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046fa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	2b00      	cmp	r3, #0
 8004702:	d103      	bne.n	800470c <HAL_DMA_Abort+0x62>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004708:	2b00      	cmp	r3, #0
 800470a:	d007      	beq.n	800471c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0208 	bic.w	r2, r2, #8
 800471a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0201 	bic.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800472c:	e013      	b.n	8004756 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800472e:	f7ff fa99 	bl	8003c64 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b05      	cmp	r3, #5
 800473a:	d90c      	bls.n	8004756 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2203      	movs	r2, #3
 8004746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e015      	b.n	8004782 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e4      	bne.n	800472e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004768:	223f      	movs	r2, #63	; 0x3f
 800476a:	409a      	lsls	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d004      	beq.n	80047a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2280      	movs	r2, #128	; 0x80
 80047a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e00c      	b.n	80047c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2205      	movs	r2, #5
 80047ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0201 	bic.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
	...

080047d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b089      	sub	sp, #36	; 0x24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047de:	2300      	movs	r3, #0
 80047e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047e6:	2300      	movs	r3, #0
 80047e8:	61fb      	str	r3, [r7, #28]
 80047ea:	e159      	b.n	8004aa0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047ec:	2201      	movs	r2, #1
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4013      	ands	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	429a      	cmp	r2, r3
 8004806:	f040 8148 	bne.w	8004a9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	2b01      	cmp	r3, #1
 8004814:	d005      	beq.n	8004822 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800481e:	2b02      	cmp	r3, #2
 8004820:	d130      	bne.n	8004884 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	2203      	movs	r2, #3
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	43db      	mvns	r3, r3
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	4013      	ands	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	4313      	orrs	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004858:	2201      	movs	r2, #1
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	43db      	mvns	r3, r3
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4013      	ands	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	091b      	lsrs	r3, r3, #4
 800486e:	f003 0201 	and.w	r2, r3, #1
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4313      	orrs	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 0303 	and.w	r3, r3, #3
 800488c:	2b03      	cmp	r3, #3
 800488e:	d017      	beq.n	80048c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	2203      	movs	r2, #3
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	4013      	ands	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d123      	bne.n	8004914 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	08da      	lsrs	r2, r3, #3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3208      	adds	r2, #8
 80048d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	220f      	movs	r2, #15
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	43db      	mvns	r3, r3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4013      	ands	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	4313      	orrs	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	08da      	lsrs	r2, r3, #3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3208      	adds	r2, #8
 800490e:	69b9      	ldr	r1, [r7, #24]
 8004910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	2203      	movs	r2, #3
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	43db      	mvns	r3, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 0203 	and.w	r2, r3, #3
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4313      	orrs	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 80a2 	beq.w	8004a9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]
 800495a:	4b57      	ldr	r3, [pc, #348]	; (8004ab8 <HAL_GPIO_Init+0x2e8>)
 800495c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495e:	4a56      	ldr	r2, [pc, #344]	; (8004ab8 <HAL_GPIO_Init+0x2e8>)
 8004960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004964:	6453      	str	r3, [r2, #68]	; 0x44
 8004966:	4b54      	ldr	r3, [pc, #336]	; (8004ab8 <HAL_GPIO_Init+0x2e8>)
 8004968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004972:	4a52      	ldr	r2, [pc, #328]	; (8004abc <HAL_GPIO_Init+0x2ec>)
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	089b      	lsrs	r3, r3, #2
 8004978:	3302      	adds	r3, #2
 800497a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800497e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	220f      	movs	r2, #15
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	43db      	mvns	r3, r3
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	4013      	ands	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a49      	ldr	r2, [pc, #292]	; (8004ac0 <HAL_GPIO_Init+0x2f0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d019      	beq.n	80049d2 <HAL_GPIO_Init+0x202>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a48      	ldr	r2, [pc, #288]	; (8004ac4 <HAL_GPIO_Init+0x2f4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d013      	beq.n	80049ce <HAL_GPIO_Init+0x1fe>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a47      	ldr	r2, [pc, #284]	; (8004ac8 <HAL_GPIO_Init+0x2f8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00d      	beq.n	80049ca <HAL_GPIO_Init+0x1fa>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a46      	ldr	r2, [pc, #280]	; (8004acc <HAL_GPIO_Init+0x2fc>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d007      	beq.n	80049c6 <HAL_GPIO_Init+0x1f6>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a45      	ldr	r2, [pc, #276]	; (8004ad0 <HAL_GPIO_Init+0x300>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d101      	bne.n	80049c2 <HAL_GPIO_Init+0x1f2>
 80049be:	2304      	movs	r3, #4
 80049c0:	e008      	b.n	80049d4 <HAL_GPIO_Init+0x204>
 80049c2:	2307      	movs	r3, #7
 80049c4:	e006      	b.n	80049d4 <HAL_GPIO_Init+0x204>
 80049c6:	2303      	movs	r3, #3
 80049c8:	e004      	b.n	80049d4 <HAL_GPIO_Init+0x204>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e002      	b.n	80049d4 <HAL_GPIO_Init+0x204>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <HAL_GPIO_Init+0x204>
 80049d2:	2300      	movs	r3, #0
 80049d4:	69fa      	ldr	r2, [r7, #28]
 80049d6:	f002 0203 	and.w	r2, r2, #3
 80049da:	0092      	lsls	r2, r2, #2
 80049dc:	4093      	lsls	r3, r2
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049e4:	4935      	ldr	r1, [pc, #212]	; (8004abc <HAL_GPIO_Init+0x2ec>)
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	089b      	lsrs	r3, r3, #2
 80049ea:	3302      	adds	r3, #2
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049f2:	4b38      	ldr	r3, [pc, #224]	; (8004ad4 <HAL_GPIO_Init+0x304>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	43db      	mvns	r3, r3
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	4013      	ands	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a16:	4a2f      	ldr	r2, [pc, #188]	; (8004ad4 <HAL_GPIO_Init+0x304>)
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a1c:	4b2d      	ldr	r3, [pc, #180]	; (8004ad4 <HAL_GPIO_Init+0x304>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	43db      	mvns	r3, r3
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a40:	4a24      	ldr	r2, [pc, #144]	; (8004ad4 <HAL_GPIO_Init+0x304>)
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a46:	4b23      	ldr	r3, [pc, #140]	; (8004ad4 <HAL_GPIO_Init+0x304>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	4013      	ands	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a6a:	4a1a      	ldr	r2, [pc, #104]	; (8004ad4 <HAL_GPIO_Init+0x304>)
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a70:	4b18      	ldr	r3, [pc, #96]	; (8004ad4 <HAL_GPIO_Init+0x304>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a94:	4a0f      	ldr	r2, [pc, #60]	; (8004ad4 <HAL_GPIO_Init+0x304>)
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	2b0f      	cmp	r3, #15
 8004aa4:	f67f aea2 	bls.w	80047ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004aa8:	bf00      	nop
 8004aaa:	bf00      	nop
 8004aac:	3724      	adds	r7, #36	; 0x24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	40013800 	.word	0x40013800
 8004ac0:	40020000 	.word	0x40020000
 8004ac4:	40020400 	.word	0x40020400
 8004ac8:	40020800 	.word	0x40020800
 8004acc:	40020c00 	.word	0x40020c00
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40013c00 	.word	0x40013c00

08004ad8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	887b      	ldrh	r3, [r7, #2]
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d002      	beq.n	8004af6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004af0:	2301      	movs	r3, #1
 8004af2:	73fb      	strb	r3, [r7, #15]
 8004af4:	e001      	b.n	8004afa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004af6:	2300      	movs	r3, #0
 8004af8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	807b      	strh	r3, [r7, #2]
 8004b14:	4613      	mov	r3, r2
 8004b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b18:	787b      	ldrb	r3, [r7, #1]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b1e:	887a      	ldrh	r2, [r7, #2]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b24:	e003      	b.n	8004b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b26:	887b      	ldrh	r3, [r7, #2]
 8004b28:	041a      	lsls	r2, r3, #16
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	619a      	str	r2, [r3, #24]
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b085      	sub	sp, #20
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	460b      	mov	r3, r1
 8004b44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b4c:	887a      	ldrh	r2, [r7, #2]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4013      	ands	r3, r2
 8004b52:	041a      	lsls	r2, r3, #16
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	43d9      	mvns	r1, r3
 8004b58:	887b      	ldrh	r3, [r7, #2]
 8004b5a:	400b      	ands	r3, r1
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	619a      	str	r2, [r3, #24]
}
 8004b62:	bf00      	nop
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b7a:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b7c:	695a      	ldr	r2, [r3, #20]
 8004b7e:	88fb      	ldrh	r3, [r7, #6]
 8004b80:	4013      	ands	r3, r2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d006      	beq.n	8004b94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b86:	4a05      	ldr	r2, [pc, #20]	; (8004b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b88:	88fb      	ldrh	r3, [r7, #6]
 8004b8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b8c:	88fb      	ldrh	r3, [r7, #6]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fe fa5e 	bl	8003050 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b94:	bf00      	nop
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40013c00 	.word	0x40013c00

08004ba0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e267      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d075      	beq.n	8004caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bbe:	4b88      	ldr	r3, [pc, #544]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d00c      	beq.n	8004be4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bca:	4b85      	ldr	r3, [pc, #532]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d112      	bne.n	8004bfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bd6:	4b82      	ldr	r3, [pc, #520]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004be2:	d10b      	bne.n	8004bfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be4:	4b7e      	ldr	r3, [pc, #504]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d05b      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x108>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d157      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e242      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c04:	d106      	bne.n	8004c14 <HAL_RCC_OscConfig+0x74>
 8004c06:	4b76      	ldr	r3, [pc, #472]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a75      	ldr	r2, [pc, #468]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e01d      	b.n	8004c50 <HAL_RCC_OscConfig+0xb0>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c1c:	d10c      	bne.n	8004c38 <HAL_RCC_OscConfig+0x98>
 8004c1e:	4b70      	ldr	r3, [pc, #448]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a6f      	ldr	r2, [pc, #444]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	4b6d      	ldr	r3, [pc, #436]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a6c      	ldr	r2, [pc, #432]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	e00b      	b.n	8004c50 <HAL_RCC_OscConfig+0xb0>
 8004c38:	4b69      	ldr	r3, [pc, #420]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a68      	ldr	r2, [pc, #416]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	4b66      	ldr	r3, [pc, #408]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a65      	ldr	r2, [pc, #404]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d013      	beq.n	8004c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c58:	f7ff f804 	bl	8003c64 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c60:	f7ff f800 	bl	8003c64 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b64      	cmp	r3, #100	; 0x64
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e207      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c72:	4b5b      	ldr	r3, [pc, #364]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0xc0>
 8004c7e:	e014      	b.n	8004caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c80:	f7fe fff0 	bl	8003c64 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c88:	f7fe ffec 	bl	8003c64 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b64      	cmp	r3, #100	; 0x64
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e1f3      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c9a:	4b51      	ldr	r3, [pc, #324]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0xe8>
 8004ca6:	e000      	b.n	8004caa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d063      	beq.n	8004d7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cb6:	4b4a      	ldr	r3, [pc, #296]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00b      	beq.n	8004cda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cc2:	4b47      	ldr	r3, [pc, #284]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d11c      	bne.n	8004d08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cce:	4b44      	ldr	r3, [pc, #272]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d116      	bne.n	8004d08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cda:	4b41      	ldr	r3, [pc, #260]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d005      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x152>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d001      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e1c7      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf2:	4b3b      	ldr	r3, [pc, #236]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	4937      	ldr	r1, [pc, #220]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d06:	e03a      	b.n	8004d7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d020      	beq.n	8004d52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d10:	4b34      	ldr	r3, [pc, #208]	; (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004d12:	2201      	movs	r2, #1
 8004d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d16:	f7fe ffa5 	bl	8003c64 <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d1e:	f7fe ffa1 	bl	8003c64 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e1a8      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d30:	4b2b      	ldr	r3, [pc, #172]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0f0      	beq.n	8004d1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d3c:	4b28      	ldr	r3, [pc, #160]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	4925      	ldr	r1, [pc, #148]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	600b      	str	r3, [r1, #0]
 8004d50:	e015      	b.n	8004d7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d52:	4b24      	ldr	r3, [pc, #144]	; (8004de4 <HAL_RCC_OscConfig+0x244>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d58:	f7fe ff84 	bl	8003c64 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d60:	f7fe ff80 	bl	8003c64 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e187      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d72:	4b1b      	ldr	r3, [pc, #108]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f0      	bne.n	8004d60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d036      	beq.n	8004df8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d016      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d92:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <HAL_RCC_OscConfig+0x248>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d98:	f7fe ff64 	bl	8003c64 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004da0:	f7fe ff60 	bl	8003c64 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e167      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004db2:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <HAL_RCC_OscConfig+0x240>)
 8004db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0x200>
 8004dbe:	e01b      	b.n	8004df8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dc0:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <HAL_RCC_OscConfig+0x248>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc6:	f7fe ff4d 	bl	8003c64 <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dcc:	e00e      	b.n	8004dec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dce:	f7fe ff49 	bl	8003c64 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d907      	bls.n	8004dec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e150      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
 8004de0:	40023800 	.word	0x40023800
 8004de4:	42470000 	.word	0x42470000
 8004de8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dec:	4b88      	ldr	r3, [pc, #544]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1ea      	bne.n	8004dce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 8097 	beq.w	8004f34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e06:	2300      	movs	r3, #0
 8004e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e0a:	4b81      	ldr	r3, [pc, #516]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10f      	bne.n	8004e36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e16:	2300      	movs	r3, #0
 8004e18:	60bb      	str	r3, [r7, #8]
 8004e1a:	4b7d      	ldr	r3, [pc, #500]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	4a7c      	ldr	r2, [pc, #496]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e24:	6413      	str	r3, [r2, #64]	; 0x40
 8004e26:	4b7a      	ldr	r3, [pc, #488]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e2e:	60bb      	str	r3, [r7, #8]
 8004e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e32:	2301      	movs	r3, #1
 8004e34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e36:	4b77      	ldr	r3, [pc, #476]	; (8005014 <HAL_RCC_OscConfig+0x474>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d118      	bne.n	8004e74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e42:	4b74      	ldr	r3, [pc, #464]	; (8005014 <HAL_RCC_OscConfig+0x474>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a73      	ldr	r2, [pc, #460]	; (8005014 <HAL_RCC_OscConfig+0x474>)
 8004e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e4e:	f7fe ff09 	bl	8003c64 <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e56:	f7fe ff05 	bl	8003c64 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e10c      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e68:	4b6a      	ldr	r3, [pc, #424]	; (8005014 <HAL_RCC_OscConfig+0x474>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0f0      	beq.n	8004e56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d106      	bne.n	8004e8a <HAL_RCC_OscConfig+0x2ea>
 8004e7c:	4b64      	ldr	r3, [pc, #400]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e80:	4a63      	ldr	r2, [pc, #396]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	6713      	str	r3, [r2, #112]	; 0x70
 8004e88:	e01c      	b.n	8004ec4 <HAL_RCC_OscConfig+0x324>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	2b05      	cmp	r3, #5
 8004e90:	d10c      	bne.n	8004eac <HAL_RCC_OscConfig+0x30c>
 8004e92:	4b5f      	ldr	r3, [pc, #380]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e96:	4a5e      	ldr	r2, [pc, #376]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004e98:	f043 0304 	orr.w	r3, r3, #4
 8004e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e9e:	4b5c      	ldr	r3, [pc, #368]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea2:	4a5b      	ldr	r2, [pc, #364]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004ea4:	f043 0301 	orr.w	r3, r3, #1
 8004ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eaa:	e00b      	b.n	8004ec4 <HAL_RCC_OscConfig+0x324>
 8004eac:	4b58      	ldr	r3, [pc, #352]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb0:	4a57      	ldr	r2, [pc, #348]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004eb2:	f023 0301 	bic.w	r3, r3, #1
 8004eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb8:	4b55      	ldr	r3, [pc, #340]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebc:	4a54      	ldr	r2, [pc, #336]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004ebe:	f023 0304 	bic.w	r3, r3, #4
 8004ec2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d015      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ecc:	f7fe feca 	bl	8003c64 <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed2:	e00a      	b.n	8004eea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ed4:	f7fe fec6 	bl	8003c64 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e0cb      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eea:	4b49      	ldr	r3, [pc, #292]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0ee      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x334>
 8004ef6:	e014      	b.n	8004f22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef8:	f7fe feb4 	bl	8003c64 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004efe:	e00a      	b.n	8004f16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f00:	f7fe feb0 	bl	8003c64 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e0b5      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f16:	4b3e      	ldr	r3, [pc, #248]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1ee      	bne.n	8004f00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f22:	7dfb      	ldrb	r3, [r7, #23]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d105      	bne.n	8004f34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f28:	4b39      	ldr	r3, [pc, #228]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2c:	4a38      	ldr	r2, [pc, #224]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 80a1 	beq.w	8005080 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f3e:	4b34      	ldr	r3, [pc, #208]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 030c 	and.w	r3, r3, #12
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d05c      	beq.n	8005004 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d141      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f52:	4b31      	ldr	r3, [pc, #196]	; (8005018 <HAL_RCC_OscConfig+0x478>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f58:	f7fe fe84 	bl	8003c64 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f60:	f7fe fe80 	bl	8003c64 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e087      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f72:	4b27      	ldr	r3, [pc, #156]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f0      	bne.n	8004f60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69da      	ldr	r2, [r3, #28]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	019b      	lsls	r3, r3, #6
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f94:	085b      	lsrs	r3, r3, #1
 8004f96:	3b01      	subs	r3, #1
 8004f98:	041b      	lsls	r3, r3, #16
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	061b      	lsls	r3, r3, #24
 8004fa2:	491b      	ldr	r1, [pc, #108]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fa8:	4b1b      	ldr	r3, [pc, #108]	; (8005018 <HAL_RCC_OscConfig+0x478>)
 8004faa:	2201      	movs	r2, #1
 8004fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fae:	f7fe fe59 	bl	8003c64 <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fb6:	f7fe fe55 	bl	8003c64 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e05c      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc8:	4b11      	ldr	r3, [pc, #68]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0f0      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x416>
 8004fd4:	e054      	b.n	8005080 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd6:	4b10      	ldr	r3, [pc, #64]	; (8005018 <HAL_RCC_OscConfig+0x478>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fdc:	f7fe fe42 	bl	8003c64 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe4:	f7fe fe3e 	bl	8003c64 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e045      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ff6:	4b06      	ldr	r3, [pc, #24]	; (8005010 <HAL_RCC_OscConfig+0x470>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f0      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x444>
 8005002:	e03d      	b.n	8005080 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d107      	bne.n	800501c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e038      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
 8005010:	40023800 	.word	0x40023800
 8005014:	40007000 	.word	0x40007000
 8005018:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800501c:	4b1b      	ldr	r3, [pc, #108]	; (800508c <HAL_RCC_OscConfig+0x4ec>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d028      	beq.n	800507c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005034:	429a      	cmp	r2, r3
 8005036:	d121      	bne.n	800507c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005042:	429a      	cmp	r2, r3
 8005044:	d11a      	bne.n	800507c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800504c:	4013      	ands	r3, r2
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005052:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005054:	4293      	cmp	r3, r2
 8005056:	d111      	bne.n	800507c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005062:	085b      	lsrs	r3, r3, #1
 8005064:	3b01      	subs	r3, #1
 8005066:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005068:	429a      	cmp	r2, r3
 800506a:	d107      	bne.n	800507c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005076:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005078:	429a      	cmp	r2, r3
 800507a:	d001      	beq.n	8005080 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e000      	b.n	8005082 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40023800 	.word	0x40023800

08005090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e0cc      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050a4:	4b68      	ldr	r3, [pc, #416]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d90c      	bls.n	80050cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b2:	4b65      	ldr	r3, [pc, #404]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ba:	4b63      	ldr	r3, [pc, #396]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d001      	beq.n	80050cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e0b8      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d020      	beq.n	800511a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050e4:	4b59      	ldr	r3, [pc, #356]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	4a58      	ldr	r2, [pc, #352]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050fc:	4b53      	ldr	r3, [pc, #332]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	4a52      	ldr	r2, [pc, #328]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005108:	4b50      	ldr	r3, [pc, #320]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	494d      	ldr	r1, [pc, #308]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005116:	4313      	orrs	r3, r2
 8005118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d044      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d107      	bne.n	800513e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512e:	4b47      	ldr	r3, [pc, #284]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d119      	bne.n	800516e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e07f      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d003      	beq.n	800514e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800514a:	2b03      	cmp	r3, #3
 800514c:	d107      	bne.n	800515e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800514e:	4b3f      	ldr	r3, [pc, #252]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d109      	bne.n	800516e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e06f      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800515e:	4b3b      	ldr	r3, [pc, #236]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e067      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800516e:	4b37      	ldr	r3, [pc, #220]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f023 0203 	bic.w	r2, r3, #3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	4934      	ldr	r1, [pc, #208]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	4313      	orrs	r3, r2
 800517e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005180:	f7fe fd70 	bl	8003c64 <HAL_GetTick>
 8005184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005186:	e00a      	b.n	800519e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005188:	f7fe fd6c 	bl	8003c64 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	f241 3288 	movw	r2, #5000	; 0x1388
 8005196:	4293      	cmp	r3, r2
 8005198:	d901      	bls.n	800519e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e04f      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800519e:	4b2b      	ldr	r3, [pc, #172]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 020c 	and.w	r2, r3, #12
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d1eb      	bne.n	8005188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051b0:	4b25      	ldr	r3, [pc, #148]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d20c      	bcs.n	80051d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051be:	4b22      	ldr	r3, [pc, #136]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c6:	4b20      	ldr	r3, [pc, #128]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d001      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e032      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d008      	beq.n	80051f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051e4:	4b19      	ldr	r3, [pc, #100]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	4916      	ldr	r1, [pc, #88]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d009      	beq.n	8005216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005202:	4b12      	ldr	r3, [pc, #72]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	490e      	ldr	r1, [pc, #56]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005212:	4313      	orrs	r3, r2
 8005214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005216:	f000 f821 	bl	800525c <HAL_RCC_GetSysClockFreq>
 800521a:	4602      	mov	r2, r0
 800521c:	4b0b      	ldr	r3, [pc, #44]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	091b      	lsrs	r3, r3, #4
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	490a      	ldr	r1, [pc, #40]	; (8005250 <HAL_RCC_ClockConfig+0x1c0>)
 8005228:	5ccb      	ldrb	r3, [r1, r3]
 800522a:	fa22 f303 	lsr.w	r3, r2, r3
 800522e:	4a09      	ldr	r2, [pc, #36]	; (8005254 <HAL_RCC_ClockConfig+0x1c4>)
 8005230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005232:	4b09      	ldr	r3, [pc, #36]	; (8005258 <HAL_RCC_ClockConfig+0x1c8>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f7fe fcd0 	bl	8003bdc <HAL_InitTick>

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	40023c00 	.word	0x40023c00
 800524c:	40023800 	.word	0x40023800
 8005250:	0800ff70 	.word	0x0800ff70
 8005254:	20000004 	.word	0x20000004
 8005258:	20000008 	.word	0x20000008

0800525c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800525c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005260:	b090      	sub	sp, #64	; 0x40
 8005262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	637b      	str	r3, [r7, #52]	; 0x34
 8005268:	2300      	movs	r3, #0
 800526a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800526c:	2300      	movs	r3, #0
 800526e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005274:	4b59      	ldr	r3, [pc, #356]	; (80053dc <HAL_RCC_GetSysClockFreq+0x180>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 030c 	and.w	r3, r3, #12
 800527c:	2b08      	cmp	r3, #8
 800527e:	d00d      	beq.n	800529c <HAL_RCC_GetSysClockFreq+0x40>
 8005280:	2b08      	cmp	r3, #8
 8005282:	f200 80a1 	bhi.w	80053c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <HAL_RCC_GetSysClockFreq+0x34>
 800528a:	2b04      	cmp	r3, #4
 800528c:	d003      	beq.n	8005296 <HAL_RCC_GetSysClockFreq+0x3a>
 800528e:	e09b      	b.n	80053c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005290:	4b53      	ldr	r3, [pc, #332]	; (80053e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005292:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005294:	e09b      	b.n	80053ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005296:	4b53      	ldr	r3, [pc, #332]	; (80053e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005298:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800529a:	e098      	b.n	80053ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800529c:	4b4f      	ldr	r3, [pc, #316]	; (80053dc <HAL_RCC_GetSysClockFreq+0x180>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052a6:	4b4d      	ldr	r3, [pc, #308]	; (80053dc <HAL_RCC_GetSysClockFreq+0x180>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d028      	beq.n	8005304 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052b2:	4b4a      	ldr	r3, [pc, #296]	; (80053dc <HAL_RCC_GetSysClockFreq+0x180>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	099b      	lsrs	r3, r3, #6
 80052b8:	2200      	movs	r2, #0
 80052ba:	623b      	str	r3, [r7, #32]
 80052bc:	627a      	str	r2, [r7, #36]	; 0x24
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80052c4:	2100      	movs	r1, #0
 80052c6:	4b47      	ldr	r3, [pc, #284]	; (80053e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80052c8:	fb03 f201 	mul.w	r2, r3, r1
 80052cc:	2300      	movs	r3, #0
 80052ce:	fb00 f303 	mul.w	r3, r0, r3
 80052d2:	4413      	add	r3, r2
 80052d4:	4a43      	ldr	r2, [pc, #268]	; (80053e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80052d6:	fba0 1202 	umull	r1, r2, r0, r2
 80052da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052dc:	460a      	mov	r2, r1
 80052de:	62ba      	str	r2, [r7, #40]	; 0x28
 80052e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052e2:	4413      	add	r3, r2
 80052e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e8:	2200      	movs	r2, #0
 80052ea:	61bb      	str	r3, [r7, #24]
 80052ec:	61fa      	str	r2, [r7, #28]
 80052ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80052f6:	f7fb fccf 	bl	8000c98 <__aeabi_uldivmod>
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	4613      	mov	r3, r2
 8005300:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005302:	e053      	b.n	80053ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005304:	4b35      	ldr	r3, [pc, #212]	; (80053dc <HAL_RCC_GetSysClockFreq+0x180>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	099b      	lsrs	r3, r3, #6
 800530a:	2200      	movs	r2, #0
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	617a      	str	r2, [r7, #20]
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005316:	f04f 0b00 	mov.w	fp, #0
 800531a:	4652      	mov	r2, sl
 800531c:	465b      	mov	r3, fp
 800531e:	f04f 0000 	mov.w	r0, #0
 8005322:	f04f 0100 	mov.w	r1, #0
 8005326:	0159      	lsls	r1, r3, #5
 8005328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800532c:	0150      	lsls	r0, r2, #5
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	ebb2 080a 	subs.w	r8, r2, sl
 8005336:	eb63 090b 	sbc.w	r9, r3, fp
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	f04f 0300 	mov.w	r3, #0
 8005342:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005346:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800534a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800534e:	ebb2 0408 	subs.w	r4, r2, r8
 8005352:	eb63 0509 	sbc.w	r5, r3, r9
 8005356:	f04f 0200 	mov.w	r2, #0
 800535a:	f04f 0300 	mov.w	r3, #0
 800535e:	00eb      	lsls	r3, r5, #3
 8005360:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005364:	00e2      	lsls	r2, r4, #3
 8005366:	4614      	mov	r4, r2
 8005368:	461d      	mov	r5, r3
 800536a:	eb14 030a 	adds.w	r3, r4, sl
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	eb45 030b 	adc.w	r3, r5, fp
 8005374:	607b      	str	r3, [r7, #4]
 8005376:	f04f 0200 	mov.w	r2, #0
 800537a:	f04f 0300 	mov.w	r3, #0
 800537e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005382:	4629      	mov	r1, r5
 8005384:	028b      	lsls	r3, r1, #10
 8005386:	4621      	mov	r1, r4
 8005388:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800538c:	4621      	mov	r1, r4
 800538e:	028a      	lsls	r2, r1, #10
 8005390:	4610      	mov	r0, r2
 8005392:	4619      	mov	r1, r3
 8005394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005396:	2200      	movs	r2, #0
 8005398:	60bb      	str	r3, [r7, #8]
 800539a:	60fa      	str	r2, [r7, #12]
 800539c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053a0:	f7fb fc7a 	bl	8000c98 <__aeabi_uldivmod>
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	4613      	mov	r3, r2
 80053aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053ac:	4b0b      	ldr	r3, [pc, #44]	; (80053dc <HAL_RCC_GetSysClockFreq+0x180>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	0c1b      	lsrs	r3, r3, #16
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	3301      	adds	r3, #1
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80053bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053c6:	e002      	b.n	80053ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053c8:	4b05      	ldr	r3, [pc, #20]	; (80053e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80053ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3740      	adds	r7, #64	; 0x40
 80053d4:	46bd      	mov	sp, r7
 80053d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053da:	bf00      	nop
 80053dc:	40023800 	.word	0x40023800
 80053e0:	00f42400 	.word	0x00f42400
 80053e4:	017d7840 	.word	0x017d7840

080053e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053ec:	4b03      	ldr	r3, [pc, #12]	; (80053fc <HAL_RCC_GetHCLKFreq+0x14>)
 80053ee:	681b      	ldr	r3, [r3, #0]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	20000004 	.word	0x20000004

08005400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005404:	f7ff fff0 	bl	80053e8 <HAL_RCC_GetHCLKFreq>
 8005408:	4602      	mov	r2, r0
 800540a:	4b05      	ldr	r3, [pc, #20]	; (8005420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	0a9b      	lsrs	r3, r3, #10
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	4903      	ldr	r1, [pc, #12]	; (8005424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005416:	5ccb      	ldrb	r3, [r1, r3]
 8005418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800541c:	4618      	mov	r0, r3
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40023800 	.word	0x40023800
 8005424:	0800ff80 	.word	0x0800ff80

08005428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800542c:	f7ff ffdc 	bl	80053e8 <HAL_RCC_GetHCLKFreq>
 8005430:	4602      	mov	r2, r0
 8005432:	4b05      	ldr	r3, [pc, #20]	; (8005448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	0b5b      	lsrs	r3, r3, #13
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	4903      	ldr	r1, [pc, #12]	; (800544c <HAL_RCC_GetPCLK2Freq+0x24>)
 800543e:	5ccb      	ldrb	r3, [r1, r3]
 8005440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005444:	4618      	mov	r0, r3
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40023800 	.word	0x40023800
 800544c:	0800ff80 	.word	0x0800ff80

08005450 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e07b      	b.n	800555a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2b00      	cmp	r3, #0
 8005468:	d108      	bne.n	800547c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005472:	d009      	beq.n	8005488 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	61da      	str	r2, [r3, #28]
 800547a:	e005      	b.n	8005488 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fe f820 	bl	80034e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054f8:	431a      	orrs	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550c:	ea42 0103 	orr.w	r1, r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005514:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	0c1b      	lsrs	r3, r3, #16
 8005526:	f003 0104 	and.w	r1, r3, #4
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	f003 0210 	and.w	r2, r3, #16
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69da      	ldr	r2, [r3, #28]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005548:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
	...

08005564 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800557c:	2b01      	cmp	r3, #1
 800557e:	d101      	bne.n	8005584 <HAL_SPI_TransmitReceive_IT+0x20>
 8005580:	2302      	movs	r3, #2
 8005582:	e075      	b.n	8005670 <HAL_SPI_TransmitReceive_IT+0x10c>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005592:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800559a:	7dbb      	ldrb	r3, [r7, #22]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d00d      	beq.n	80055bc <HAL_SPI_TransmitReceive_IT+0x58>
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055a6:	d106      	bne.n	80055b6 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d102      	bne.n	80055b6 <HAL_SPI_TransmitReceive_IT+0x52>
 80055b0:	7dbb      	ldrb	r3, [r7, #22]
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d002      	beq.n	80055bc <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80055b6:	2302      	movs	r3, #2
 80055b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055ba:	e054      	b.n	8005666 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d005      	beq.n	80055ce <HAL_SPI_TransmitReceive_IT+0x6a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <HAL_SPI_TransmitReceive_IT+0x6a>
 80055c8:	887b      	ldrh	r3, [r7, #2]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d102      	bne.n	80055d4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055d2:	e048      	b.n	8005666 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d003      	beq.n	80055e8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2205      	movs	r2, #5
 80055e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	887a      	ldrh	r2, [r7, #2]
 80055f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	887a      	ldrh	r2, [r7, #2]
 80055fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	887a      	ldrh	r2, [r7, #2]
 800560a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	887a      	ldrh	r2, [r7, #2]
 8005610:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d006      	beq.n	8005628 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4a17      	ldr	r2, [pc, #92]	; (800567c <HAL_SPI_TransmitReceive_IT+0x118>)
 800561e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4a17      	ldr	r2, [pc, #92]	; (8005680 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8005624:	645a      	str	r2, [r3, #68]	; 0x44
 8005626:	e005      	b.n	8005634 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4a16      	ldr	r2, [pc, #88]	; (8005684 <HAL_SPI_TransmitReceive_IT+0x120>)
 800562c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4a15      	ldr	r2, [pc, #84]	; (8005688 <HAL_SPI_TransmitReceive_IT+0x124>)
 8005632:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8005642:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564e:	2b40      	cmp	r3, #64	; 0x40
 8005650:	d008      	beq.n	8005664 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	e000      	b.n	8005666 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8005664:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800566e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005670:	4618      	mov	r0, r3
 8005672:	371c      	adds	r7, #28
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	080059a1 	.word	0x080059a1
 8005680:	08005a01 	.word	0x08005a01
 8005684:	080058dd 	.word	0x080058dd
 8005688:	08005941 	.word	0x08005941

0800568c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	099b      	lsrs	r3, r3, #6
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10f      	bne.n	80056d0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	099b      	lsrs	r3, r3, #6
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d004      	beq.n	80056d0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	4798      	blx	r3
    return;
 80056ce:	e0d7      	b.n	8005880 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	085b      	lsrs	r3, r3, #1
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <HAL_SPI_IRQHandler+0x66>
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	09db      	lsrs	r3, r3, #7
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d004      	beq.n	80056f2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	4798      	blx	r3
    return;
 80056f0:	e0c6      	b.n	8005880 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	095b      	lsrs	r3, r3, #5
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10c      	bne.n	8005718 <HAL_SPI_IRQHandler+0x8c>
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	099b      	lsrs	r3, r3, #6
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	0a1b      	lsrs	r3, r3, #8
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 80b4 	beq.w	8005880 <HAL_SPI_IRQHandler+0x1f4>
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	095b      	lsrs	r3, r3, #5
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 80ad 	beq.w	8005880 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	099b      	lsrs	r3, r3, #6
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d023      	beq.n	800577a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b03      	cmp	r3, #3
 800573c:	d011      	beq.n	8005762 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005742:	f043 0204 	orr.w	r2, r3, #4
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800574a:	2300      	movs	r3, #0
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	617b      	str	r3, [r7, #20]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	617b      	str	r3, [r7, #20]
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	e00b      	b.n	800577a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005762:	2300      	movs	r3, #0
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	613b      	str	r3, [r7, #16]
 8005776:	693b      	ldr	r3, [r7, #16]
        return;
 8005778:	e082      	b.n	8005880 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	095b      	lsrs	r3, r3, #5
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d014      	beq.n	80057b0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578a:	f043 0201 	orr.w	r2, r3, #1
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005792:	2300      	movs	r3, #0
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	60fb      	str	r3, [r7, #12]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	0a1b      	lsrs	r3, r3, #8
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00c      	beq.n	80057d6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c0:	f043 0208 	orr.w	r2, r3, #8
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80057c8:	2300      	movs	r3, #0
 80057ca:	60bb      	str	r3, [r7, #8]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	60bb      	str	r3, [r7, #8]
 80057d4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d04f      	beq.n	800587e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057ec:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d104      	bne.n	800580a <HAL_SPI_IRQHandler+0x17e>
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d034      	beq.n	8005874 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0203 	bic.w	r2, r2, #3
 8005818:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d011      	beq.n	8005846 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005826:	4a18      	ldr	r2, [pc, #96]	; (8005888 <HAL_SPI_IRQHandler+0x1fc>)
 8005828:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe ffab 	bl	800478a <HAL_DMA_Abort_IT>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d005      	beq.n	8005846 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800584a:	2b00      	cmp	r3, #0
 800584c:	d016      	beq.n	800587c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005852:	4a0d      	ldr	r2, [pc, #52]	; (8005888 <HAL_SPI_IRQHandler+0x1fc>)
 8005854:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800585a:	4618      	mov	r0, r3
 800585c:	f7fe ff95 	bl	800478a <HAL_DMA_Abort_IT>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005872:	e003      	b.n	800587c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f813 	bl	80058a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800587a:	e000      	b.n	800587e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800587c:	bf00      	nop
    return;
 800587e:	bf00      	nop
  }
}
 8005880:	3720      	adds	r7, #32
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	080058b5 	.word	0x080058b5

0800588c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f7ff ffe6 	bl	80058a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80058d4:	bf00      	nop
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f103 020c 	add.w	r2, r3, #12
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	7812      	ldrb	r2, [r2, #0]
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005912:	b29b      	uxth	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10f      	bne.n	8005938 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005926:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800592c:	b29b      	uxth	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d102      	bne.n	8005938 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f95e 	bl	8005bf4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005938:	bf00      	nop
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	330c      	adds	r3, #12
 8005952:	7812      	ldrb	r2, [r2, #0]
 8005954:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005964:	b29b      	uxth	r3, r3
 8005966:	3b01      	subs	r3, #1
 8005968:	b29a      	uxth	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005972:	b29b      	uxth	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10f      	bne.n	8005998 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005986:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d102      	bne.n	8005998 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f92e 	bl	8005bf4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005998:	bf00      	nop
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b2:	b292      	uxth	r2, r2
 80059b4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ba:	1c9a      	adds	r2, r3, #2
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10f      	bne.n	80059f8 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059e6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d102      	bne.n	80059f8 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f8fe 	bl	8005bf4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80059f8:	bf00      	nop
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0c:	881a      	ldrh	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a18:	1c9a      	adds	r2, r3, #2
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10f      	bne.n	8005a56 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a44:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d102      	bne.n	8005a56 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f8cf 	bl	8005bf4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005a56:	bf00      	nop
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
	...

08005a60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b088      	sub	sp, #32
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	603b      	str	r3, [r7, #0]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a70:	f7fe f8f8 	bl	8003c64 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a78:	1a9b      	subs	r3, r3, r2
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a80:	f7fe f8f0 	bl	8003c64 <HAL_GetTick>
 8005a84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a86:	4b39      	ldr	r3, [pc, #228]	; (8005b6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	015b      	lsls	r3, r3, #5
 8005a8c:	0d1b      	lsrs	r3, r3, #20
 8005a8e:	69fa      	ldr	r2, [r7, #28]
 8005a90:	fb02 f303 	mul.w	r3, r2, r3
 8005a94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a96:	e054      	b.n	8005b42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9e:	d050      	beq.n	8005b42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005aa0:	f7fe f8e0 	bl	8003c64 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	69fa      	ldr	r2, [r7, #28]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d902      	bls.n	8005ab6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d13d      	bne.n	8005b32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ac4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ace:	d111      	bne.n	8005af4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ad8:	d004      	beq.n	8005ae4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae2:	d107      	bne.n	8005af4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005af2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005afc:	d10f      	bne.n	8005b1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e017      	b.n	8005b62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	bf0c      	ite	eq
 8005b52:	2301      	moveq	r3, #1
 8005b54:	2300      	movne	r3, #0
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	461a      	mov	r2, r3
 8005b5a:	79fb      	ldrb	r3, [r7, #7]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d19b      	bne.n	8005a98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3720      	adds	r7, #32
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000004 	.word	0x20000004

08005b70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b088      	sub	sp, #32
 8005b74:	af02      	add	r7, sp, #8
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b7c:	4b1b      	ldr	r3, [pc, #108]	; (8005bec <SPI_EndRxTxTransaction+0x7c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1b      	ldr	r2, [pc, #108]	; (8005bf0 <SPI_EndRxTxTransaction+0x80>)
 8005b82:	fba2 2303 	umull	r2, r3, r2, r3
 8005b86:	0d5b      	lsrs	r3, r3, #21
 8005b88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b8c:	fb02 f303 	mul.w	r3, r2, r3
 8005b90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b9a:	d112      	bne.n	8005bc2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2180      	movs	r1, #128	; 0x80
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f7ff ff5a 	bl	8005a60 <SPI_WaitFlagStateUntilTimeout>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d016      	beq.n	8005be0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb6:	f043 0220 	orr.w	r2, r3, #32
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e00f      	b.n	8005be2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00a      	beq.n	8005bde <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd8:	2b80      	cmp	r3, #128	; 0x80
 8005bda:	d0f2      	beq.n	8005bc2 <SPI_EndRxTxTransaction+0x52>
 8005bdc:	e000      	b.n	8005be0 <SPI_EndRxTxTransaction+0x70>
        break;
 8005bde:	bf00      	nop
  }

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20000004 	.word	0x20000004
 8005bf0:	165e9f81 	.word	0x165e9f81

08005bf4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005bfc:	4b35      	ldr	r3, [pc, #212]	; (8005cd4 <SPI_CloseRxTx_ISR+0xe0>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a35      	ldr	r2, [pc, #212]	; (8005cd8 <SPI_CloseRxTx_ISR+0xe4>)
 8005c02:	fba2 2303 	umull	r2, r3, r2, r3
 8005c06:	0a5b      	lsrs	r3, r3, #9
 8005c08:	2264      	movs	r2, #100	; 0x64
 8005c0a:	fb02 f303 	mul.w	r3, r2, r3
 8005c0e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c10:	f7fe f828 	bl	8003c64 <HAL_GetTick>
 8005c14:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0220 	bic.w	r2, r2, #32
 8005c24:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d106      	bne.n	8005c3a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c30:	f043 0220 	orr.w	r2, r3, #32
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c38:	e009      	b.n	8005c4e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0eb      	beq.n	8005c26 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	2164      	movs	r1, #100	; 0x64
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7ff ff8c 	bl	8005b70 <SPI_EndRxTxTransaction>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c62:	f043 0220 	orr.w	r2, r3, #32
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10a      	bne.n	8005c88 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	60fb      	str	r3, [r7, #12]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d115      	bne.n	8005cbc <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d107      	bne.n	8005cac <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7ff fdf1 	bl	800588c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005caa:	e00e      	b.n	8005cca <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7fd fb6d 	bl	8003394 <HAL_SPI_TxRxCpltCallback>
}
 8005cba:	e006      	b.n	8005cca <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7ff fdeb 	bl	80058a0 <HAL_SPI_ErrorCallback>
}
 8005cca:	bf00      	nop
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20000004 	.word	0x20000004
 8005cd8:	057619f1 	.word	0x057619f1

08005cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e041      	b.n	8005d72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fd fc40 	bl	8003588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3304      	adds	r3, #4
 8005d18:	4619      	mov	r1, r3
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	f000 fde2 	bl	80068e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
	...

08005d7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d001      	beq.n	8005d94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e03c      	b.n	8005e0e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a1e      	ldr	r2, [pc, #120]	; (8005e1c <HAL_TIM_Base_Start+0xa0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d018      	beq.n	8005dd8 <HAL_TIM_Base_Start+0x5c>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dae:	d013      	beq.n	8005dd8 <HAL_TIM_Base_Start+0x5c>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a1a      	ldr	r2, [pc, #104]	; (8005e20 <HAL_TIM_Base_Start+0xa4>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00e      	beq.n	8005dd8 <HAL_TIM_Base_Start+0x5c>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a19      	ldr	r2, [pc, #100]	; (8005e24 <HAL_TIM_Base_Start+0xa8>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d009      	beq.n	8005dd8 <HAL_TIM_Base_Start+0x5c>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a17      	ldr	r2, [pc, #92]	; (8005e28 <HAL_TIM_Base_Start+0xac>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d004      	beq.n	8005dd8 <HAL_TIM_Base_Start+0x5c>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a16      	ldr	r2, [pc, #88]	; (8005e2c <HAL_TIM_Base_Start+0xb0>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d111      	bne.n	8005dfc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f003 0307 	and.w	r3, r3, #7
 8005de2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b06      	cmp	r3, #6
 8005de8:	d010      	beq.n	8005e0c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f042 0201 	orr.w	r2, r2, #1
 8005df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfa:	e007      	b.n	8005e0c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0201 	orr.w	r2, r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	40010000 	.word	0x40010000
 8005e20:	40000400 	.word	0x40000400
 8005e24:	40000800 	.word	0x40000800
 8005e28:	40000c00 	.word	0x40000c00
 8005e2c:	40014000 	.word	0x40014000

08005e30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d001      	beq.n	8005e48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e044      	b.n	8005ed2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0201 	orr.w	r2, r2, #1
 8005e5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a1e      	ldr	r2, [pc, #120]	; (8005ee0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d018      	beq.n	8005e9c <HAL_TIM_Base_Start_IT+0x6c>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e72:	d013      	beq.n	8005e9c <HAL_TIM_Base_Start_IT+0x6c>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a1a      	ldr	r2, [pc, #104]	; (8005ee4 <HAL_TIM_Base_Start_IT+0xb4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d00e      	beq.n	8005e9c <HAL_TIM_Base_Start_IT+0x6c>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a19      	ldr	r2, [pc, #100]	; (8005ee8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d009      	beq.n	8005e9c <HAL_TIM_Base_Start_IT+0x6c>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a17      	ldr	r2, [pc, #92]	; (8005eec <HAL_TIM_Base_Start_IT+0xbc>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d004      	beq.n	8005e9c <HAL_TIM_Base_Start_IT+0x6c>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a16      	ldr	r2, [pc, #88]	; (8005ef0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d111      	bne.n	8005ec0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 0307 	and.w	r3, r3, #7
 8005ea6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b06      	cmp	r3, #6
 8005eac:	d010      	beq.n	8005ed0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0201 	orr.w	r2, r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ebe:	e007      	b.n	8005ed0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0201 	orr.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40010000 	.word	0x40010000
 8005ee4:	40000400 	.word	0x40000400
 8005ee8:	40000800 	.word	0x40000800
 8005eec:	40000c00 	.word	0x40000c00
 8005ef0:	40014000 	.word	0x40014000

08005ef4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e041      	b.n	8005f8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d106      	bne.n	8005f20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f839 	bl	8005f92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3304      	adds	r3, #4
 8005f30:	4619      	mov	r1, r3
 8005f32:	4610      	mov	r0, r2
 8005f34:	f000 fcd6 	bl	80068e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
	...

08005fa8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d109      	bne.n	8005fcc <HAL_TIM_PWM_Start+0x24>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	bf14      	ite	ne
 8005fc4:	2301      	movne	r3, #1
 8005fc6:	2300      	moveq	r3, #0
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	e022      	b.n	8006012 <HAL_TIM_PWM_Start+0x6a>
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	2b04      	cmp	r3, #4
 8005fd0:	d109      	bne.n	8005fe6 <HAL_TIM_PWM_Start+0x3e>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	bf14      	ite	ne
 8005fde:	2301      	movne	r3, #1
 8005fe0:	2300      	moveq	r3, #0
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	e015      	b.n	8006012 <HAL_TIM_PWM_Start+0x6a>
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	d109      	bne.n	8006000 <HAL_TIM_PWM_Start+0x58>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	bf14      	ite	ne
 8005ff8:	2301      	movne	r3, #1
 8005ffa:	2300      	moveq	r3, #0
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	e008      	b.n	8006012 <HAL_TIM_PWM_Start+0x6a>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b01      	cmp	r3, #1
 800600a:	bf14      	ite	ne
 800600c:	2301      	movne	r3, #1
 800600e:	2300      	moveq	r3, #0
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e068      	b.n	80060ec <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d104      	bne.n	800602a <HAL_TIM_PWM_Start+0x82>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006028:	e013      	b.n	8006052 <HAL_TIM_PWM_Start+0xaa>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b04      	cmp	r3, #4
 800602e:	d104      	bne.n	800603a <HAL_TIM_PWM_Start+0x92>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006038:	e00b      	b.n	8006052 <HAL_TIM_PWM_Start+0xaa>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b08      	cmp	r3, #8
 800603e:	d104      	bne.n	800604a <HAL_TIM_PWM_Start+0xa2>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2202      	movs	r2, #2
 8006044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006048:	e003      	b.n	8006052 <HAL_TIM_PWM_Start+0xaa>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2202      	movs	r2, #2
 800604e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2201      	movs	r2, #1
 8006058:	6839      	ldr	r1, [r7, #0]
 800605a:	4618      	mov	r0, r3
 800605c:	f000 fee8 	bl	8006e30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a23      	ldr	r2, [pc, #140]	; (80060f4 <HAL_TIM_PWM_Start+0x14c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d107      	bne.n	800607a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006078:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1d      	ldr	r2, [pc, #116]	; (80060f4 <HAL_TIM_PWM_Start+0x14c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d018      	beq.n	80060b6 <HAL_TIM_PWM_Start+0x10e>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800608c:	d013      	beq.n	80060b6 <HAL_TIM_PWM_Start+0x10e>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a19      	ldr	r2, [pc, #100]	; (80060f8 <HAL_TIM_PWM_Start+0x150>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d00e      	beq.n	80060b6 <HAL_TIM_PWM_Start+0x10e>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a17      	ldr	r2, [pc, #92]	; (80060fc <HAL_TIM_PWM_Start+0x154>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d009      	beq.n	80060b6 <HAL_TIM_PWM_Start+0x10e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a16      	ldr	r2, [pc, #88]	; (8006100 <HAL_TIM_PWM_Start+0x158>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d004      	beq.n	80060b6 <HAL_TIM_PWM_Start+0x10e>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a14      	ldr	r2, [pc, #80]	; (8006104 <HAL_TIM_PWM_Start+0x15c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d111      	bne.n	80060da <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2b06      	cmp	r3, #6
 80060c6:	d010      	beq.n	80060ea <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0201 	orr.w	r2, r2, #1
 80060d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d8:	e007      	b.n	80060ea <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f042 0201 	orr.w	r2, r2, #1
 80060e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	40010000 	.word	0x40010000
 80060f8:	40000400 	.word	0x40000400
 80060fc:	40000800 	.word	0x40000800
 8006100:	40000c00 	.word	0x40000c00
 8006104:	40014000 	.word	0x40014000

08006108 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e097      	b.n	800624c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d106      	bne.n	8006136 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7fd fa7b 	bl	800362c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2202      	movs	r2, #2
 800613a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6812      	ldr	r2, [r2, #0]
 8006148:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800614c:	f023 0307 	bic.w	r3, r3, #7
 8006150:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	3304      	adds	r3, #4
 800615a:	4619      	mov	r1, r3
 800615c:	4610      	mov	r0, r2
 800615e:	f000 fbc1 	bl	80068e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	4313      	orrs	r3, r2
 8006182:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800618a:	f023 0303 	bic.w	r3, r3, #3
 800618e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	021b      	lsls	r3, r3, #8
 800619a:	4313      	orrs	r3, r2
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	4313      	orrs	r3, r2
 80061a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80061a8:	f023 030c 	bic.w	r3, r3, #12
 80061ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68da      	ldr	r2, [r3, #12]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	021b      	lsls	r3, r3, #8
 80061c4:	4313      	orrs	r3, r2
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	011a      	lsls	r2, r3, #4
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	031b      	lsls	r3, r3, #12
 80061d8:	4313      	orrs	r3, r2
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4313      	orrs	r3, r2
 80061de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80061e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80061ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	4313      	orrs	r3, r2
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006264:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800626c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006274:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800627c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d110      	bne.n	80062a6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d102      	bne.n	8006290 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800628a:	7b7b      	ldrb	r3, [r7, #13]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d001      	beq.n	8006294 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e069      	b.n	8006368 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062a4:	e031      	b.n	800630a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d110      	bne.n	80062ce <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80062ac:	7bbb      	ldrb	r3, [r7, #14]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d102      	bne.n	80062b8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062b2:	7b3b      	ldrb	r3, [r7, #12]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d001      	beq.n	80062bc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e055      	b.n	8006368 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062cc:	e01d      	b.n	800630a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d108      	bne.n	80062e6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80062d4:	7bbb      	ldrb	r3, [r7, #14]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d105      	bne.n	80062e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062da:	7b7b      	ldrb	r3, [r7, #13]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d102      	bne.n	80062e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062e0:	7b3b      	ldrb	r3, [r7, #12]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d001      	beq.n	80062ea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e03e      	b.n	8006368 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2202      	movs	r2, #2
 80062ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2202      	movs	r2, #2
 80062f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2202      	movs	r2, #2
 80062fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2202      	movs	r2, #2
 8006306:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <HAL_TIM_Encoder_Start+0xc4>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b04      	cmp	r3, #4
 8006314:	d008      	beq.n	8006328 <HAL_TIM_Encoder_Start+0xd4>
 8006316:	e00f      	b.n	8006338 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2201      	movs	r2, #1
 800631e:	2100      	movs	r1, #0
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fd85 	bl	8006e30 <TIM_CCxChannelCmd>
      break;
 8006326:	e016      	b.n	8006356 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2201      	movs	r2, #1
 800632e:	2104      	movs	r1, #4
 8006330:	4618      	mov	r0, r3
 8006332:	f000 fd7d 	bl	8006e30 <TIM_CCxChannelCmd>
      break;
 8006336:	e00e      	b.n	8006356 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2201      	movs	r2, #1
 800633e:	2100      	movs	r1, #0
 8006340:	4618      	mov	r0, r3
 8006342:	f000 fd75 	bl	8006e30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2201      	movs	r2, #1
 800634c:	2104      	movs	r1, #4
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fd6e 	bl	8006e30 <TIM_CCxChannelCmd>
      break;
 8006354:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f042 0201 	orr.w	r2, r2, #1
 8006364:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b02      	cmp	r3, #2
 8006384:	d122      	bne.n	80063cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b02      	cmp	r3, #2
 8006392:	d11b      	bne.n	80063cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f06f 0202 	mvn.w	r2, #2
 800639c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	f003 0303 	and.w	r3, r3, #3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fa77 	bl	80068a6 <HAL_TIM_IC_CaptureCallback>
 80063b8:	e005      	b.n	80063c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fa69 	bl	8006892 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fa7a 	bl	80068ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f003 0304 	and.w	r3, r3, #4
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d122      	bne.n	8006420 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d11b      	bne.n	8006420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f06f 0204 	mvn.w	r2, #4
 80063f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2202      	movs	r2, #2
 80063f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fa4d 	bl	80068a6 <HAL_TIM_IC_CaptureCallback>
 800640c:	e005      	b.n	800641a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fa3f 	bl	8006892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fa50 	bl	80068ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f003 0308 	and.w	r3, r3, #8
 800642a:	2b08      	cmp	r3, #8
 800642c:	d122      	bne.n	8006474 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f003 0308 	and.w	r3, r3, #8
 8006438:	2b08      	cmp	r3, #8
 800643a:	d11b      	bne.n	8006474 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f06f 0208 	mvn.w	r2, #8
 8006444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2204      	movs	r2, #4
 800644a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	f003 0303 	and.w	r3, r3, #3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fa23 	bl	80068a6 <HAL_TIM_IC_CaptureCallback>
 8006460:	e005      	b.n	800646e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fa15 	bl	8006892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fa26 	bl	80068ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	f003 0310 	and.w	r3, r3, #16
 800647e:	2b10      	cmp	r3, #16
 8006480:	d122      	bne.n	80064c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f003 0310 	and.w	r3, r3, #16
 800648c:	2b10      	cmp	r3, #16
 800648e:	d11b      	bne.n	80064c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f06f 0210 	mvn.w	r2, #16
 8006498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2208      	movs	r2, #8
 800649e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f9f9 	bl	80068a6 <HAL_TIM_IC_CaptureCallback>
 80064b4:	e005      	b.n	80064c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f9eb 	bl	8006892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f9fc 	bl	80068ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d10e      	bne.n	80064f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d107      	bne.n	80064f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f06f 0201 	mvn.w	r2, #1
 80064ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7fc ff2e 	bl	8003350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fe:	2b80      	cmp	r3, #128	; 0x80
 8006500:	d10e      	bne.n	8006520 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650c:	2b80      	cmp	r3, #128	; 0x80
 800650e:	d107      	bne.n	8006520 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fd78 	bl	8007010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652a:	2b40      	cmp	r3, #64	; 0x40
 800652c:	d10e      	bne.n	800654c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006538:	2b40      	cmp	r3, #64	; 0x40
 800653a:	d107      	bne.n	800654c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f9c1 	bl	80068ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b20      	cmp	r3, #32
 8006558:	d10e      	bne.n	8006578 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f003 0320 	and.w	r3, r3, #32
 8006564:	2b20      	cmp	r3, #32
 8006566:	d107      	bne.n	8006578 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f06f 0220 	mvn.w	r2, #32
 8006570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fd42 	bl	8006ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006578:	bf00      	nop
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800658c:	2300      	movs	r3, #0
 800658e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006596:	2b01      	cmp	r3, #1
 8006598:	d101      	bne.n	800659e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800659a:	2302      	movs	r3, #2
 800659c:	e0ae      	b.n	80066fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b0c      	cmp	r3, #12
 80065aa:	f200 809f 	bhi.w	80066ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80065ae:	a201      	add	r2, pc, #4	; (adr r2, 80065b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b4:	080065e9 	.word	0x080065e9
 80065b8:	080066ed 	.word	0x080066ed
 80065bc:	080066ed 	.word	0x080066ed
 80065c0:	080066ed 	.word	0x080066ed
 80065c4:	08006629 	.word	0x08006629
 80065c8:	080066ed 	.word	0x080066ed
 80065cc:	080066ed 	.word	0x080066ed
 80065d0:	080066ed 	.word	0x080066ed
 80065d4:	0800666b 	.word	0x0800666b
 80065d8:	080066ed 	.word	0x080066ed
 80065dc:	080066ed 	.word	0x080066ed
 80065e0:	080066ed 	.word	0x080066ed
 80065e4:	080066ab 	.word	0x080066ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68b9      	ldr	r1, [r7, #8]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 f9f8 	bl	80069e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699a      	ldr	r2, [r3, #24]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0208 	orr.w	r2, r2, #8
 8006602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	699a      	ldr	r2, [r3, #24]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f022 0204 	bic.w	r2, r2, #4
 8006612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6999      	ldr	r1, [r3, #24]
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	691a      	ldr	r2, [r3, #16]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	619a      	str	r2, [r3, #24]
      break;
 8006626:	e064      	b.n	80066f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68b9      	ldr	r1, [r7, #8]
 800662e:	4618      	mov	r0, r3
 8006630:	f000 fa3e 	bl	8006ab0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	699a      	ldr	r2, [r3, #24]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	699a      	ldr	r2, [r3, #24]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6999      	ldr	r1, [r3, #24]
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	021a      	lsls	r2, r3, #8
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	619a      	str	r2, [r3, #24]
      break;
 8006668:	e043      	b.n	80066f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68b9      	ldr	r1, [r7, #8]
 8006670:	4618      	mov	r0, r3
 8006672:	f000 fa89 	bl	8006b88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	69da      	ldr	r2, [r3, #28]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f042 0208 	orr.w	r2, r2, #8
 8006684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69da      	ldr	r2, [r3, #28]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0204 	bic.w	r2, r2, #4
 8006694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69d9      	ldr	r1, [r3, #28]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	691a      	ldr	r2, [r3, #16]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	430a      	orrs	r2, r1
 80066a6:	61da      	str	r2, [r3, #28]
      break;
 80066a8:	e023      	b.n	80066f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68b9      	ldr	r1, [r7, #8]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 fad3 	bl	8006c5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	69da      	ldr	r2, [r3, #28]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	69da      	ldr	r2, [r3, #28]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69d9      	ldr	r1, [r3, #28]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	021a      	lsls	r2, r3, #8
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	61da      	str	r2, [r3, #28]
      break;
 80066ea:	e002      	b.n	80066f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	75fb      	strb	r3, [r7, #23]
      break;
 80066f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800670e:	2300      	movs	r3, #0
 8006710:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006718:	2b01      	cmp	r3, #1
 800671a:	d101      	bne.n	8006720 <HAL_TIM_ConfigClockSource+0x1c>
 800671c:	2302      	movs	r3, #2
 800671e:	e0b4      	b.n	800688a <HAL_TIM_ConfigClockSource+0x186>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800673e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006746:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006758:	d03e      	beq.n	80067d8 <HAL_TIM_ConfigClockSource+0xd4>
 800675a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800675e:	f200 8087 	bhi.w	8006870 <HAL_TIM_ConfigClockSource+0x16c>
 8006762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006766:	f000 8086 	beq.w	8006876 <HAL_TIM_ConfigClockSource+0x172>
 800676a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800676e:	d87f      	bhi.n	8006870 <HAL_TIM_ConfigClockSource+0x16c>
 8006770:	2b70      	cmp	r3, #112	; 0x70
 8006772:	d01a      	beq.n	80067aa <HAL_TIM_ConfigClockSource+0xa6>
 8006774:	2b70      	cmp	r3, #112	; 0x70
 8006776:	d87b      	bhi.n	8006870 <HAL_TIM_ConfigClockSource+0x16c>
 8006778:	2b60      	cmp	r3, #96	; 0x60
 800677a:	d050      	beq.n	800681e <HAL_TIM_ConfigClockSource+0x11a>
 800677c:	2b60      	cmp	r3, #96	; 0x60
 800677e:	d877      	bhi.n	8006870 <HAL_TIM_ConfigClockSource+0x16c>
 8006780:	2b50      	cmp	r3, #80	; 0x50
 8006782:	d03c      	beq.n	80067fe <HAL_TIM_ConfigClockSource+0xfa>
 8006784:	2b50      	cmp	r3, #80	; 0x50
 8006786:	d873      	bhi.n	8006870 <HAL_TIM_ConfigClockSource+0x16c>
 8006788:	2b40      	cmp	r3, #64	; 0x40
 800678a:	d058      	beq.n	800683e <HAL_TIM_ConfigClockSource+0x13a>
 800678c:	2b40      	cmp	r3, #64	; 0x40
 800678e:	d86f      	bhi.n	8006870 <HAL_TIM_ConfigClockSource+0x16c>
 8006790:	2b30      	cmp	r3, #48	; 0x30
 8006792:	d064      	beq.n	800685e <HAL_TIM_ConfigClockSource+0x15a>
 8006794:	2b30      	cmp	r3, #48	; 0x30
 8006796:	d86b      	bhi.n	8006870 <HAL_TIM_ConfigClockSource+0x16c>
 8006798:	2b20      	cmp	r3, #32
 800679a:	d060      	beq.n	800685e <HAL_TIM_ConfigClockSource+0x15a>
 800679c:	2b20      	cmp	r3, #32
 800679e:	d867      	bhi.n	8006870 <HAL_TIM_ConfigClockSource+0x16c>
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d05c      	beq.n	800685e <HAL_TIM_ConfigClockSource+0x15a>
 80067a4:	2b10      	cmp	r3, #16
 80067a6:	d05a      	beq.n	800685e <HAL_TIM_ConfigClockSource+0x15a>
 80067a8:	e062      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6818      	ldr	r0, [r3, #0]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	6899      	ldr	r1, [r3, #8]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	f000 fb19 	bl	8006df0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	609a      	str	r2, [r3, #8]
      break;
 80067d6:	e04f      	b.n	8006878 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6818      	ldr	r0, [r3, #0]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	6899      	ldr	r1, [r3, #8]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f000 fb02 	bl	8006df0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689a      	ldr	r2, [r3, #8]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067fa:	609a      	str	r2, [r3, #8]
      break;
 80067fc:	e03c      	b.n	8006878 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6818      	ldr	r0, [r3, #0]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	6859      	ldr	r1, [r3, #4]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	461a      	mov	r2, r3
 800680c:	f000 fa76 	bl	8006cfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2150      	movs	r1, #80	; 0x50
 8006816:	4618      	mov	r0, r3
 8006818:	f000 facf 	bl	8006dba <TIM_ITRx_SetConfig>
      break;
 800681c:	e02c      	b.n	8006878 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6818      	ldr	r0, [r3, #0]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	6859      	ldr	r1, [r3, #4]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	461a      	mov	r2, r3
 800682c:	f000 fa95 	bl	8006d5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2160      	movs	r1, #96	; 0x60
 8006836:	4618      	mov	r0, r3
 8006838:	f000 fabf 	bl	8006dba <TIM_ITRx_SetConfig>
      break;
 800683c:	e01c      	b.n	8006878 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6818      	ldr	r0, [r3, #0]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	6859      	ldr	r1, [r3, #4]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	461a      	mov	r2, r3
 800684c:	f000 fa56 	bl	8006cfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2140      	movs	r1, #64	; 0x40
 8006856:	4618      	mov	r0, r3
 8006858:	f000 faaf 	bl	8006dba <TIM_ITRx_SetConfig>
      break;
 800685c:	e00c      	b.n	8006878 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4619      	mov	r1, r3
 8006868:	4610      	mov	r0, r2
 800686a:	f000 faa6 	bl	8006dba <TIM_ITRx_SetConfig>
      break;
 800686e:	e003      	b.n	8006878 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	73fb      	strb	r3, [r7, #15]
      break;
 8006874:	e000      	b.n	8006878 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006876:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006888:	7bfb      	ldrb	r3, [r7, #15]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800689a:	bf00      	nop
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068c2:	bf00      	nop
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068d6:	bf00      	nop
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
	...

080068e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a34      	ldr	r2, [pc, #208]	; (80069c8 <TIM_Base_SetConfig+0xe4>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d00f      	beq.n	800691c <TIM_Base_SetConfig+0x38>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006902:	d00b      	beq.n	800691c <TIM_Base_SetConfig+0x38>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a31      	ldr	r2, [pc, #196]	; (80069cc <TIM_Base_SetConfig+0xe8>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d007      	beq.n	800691c <TIM_Base_SetConfig+0x38>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a30      	ldr	r2, [pc, #192]	; (80069d0 <TIM_Base_SetConfig+0xec>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d003      	beq.n	800691c <TIM_Base_SetConfig+0x38>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a2f      	ldr	r2, [pc, #188]	; (80069d4 <TIM_Base_SetConfig+0xf0>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d108      	bne.n	800692e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a25      	ldr	r2, [pc, #148]	; (80069c8 <TIM_Base_SetConfig+0xe4>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d01b      	beq.n	800696e <TIM_Base_SetConfig+0x8a>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800693c:	d017      	beq.n	800696e <TIM_Base_SetConfig+0x8a>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a22      	ldr	r2, [pc, #136]	; (80069cc <TIM_Base_SetConfig+0xe8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d013      	beq.n	800696e <TIM_Base_SetConfig+0x8a>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a21      	ldr	r2, [pc, #132]	; (80069d0 <TIM_Base_SetConfig+0xec>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d00f      	beq.n	800696e <TIM_Base_SetConfig+0x8a>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a20      	ldr	r2, [pc, #128]	; (80069d4 <TIM_Base_SetConfig+0xf0>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d00b      	beq.n	800696e <TIM_Base_SetConfig+0x8a>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a1f      	ldr	r2, [pc, #124]	; (80069d8 <TIM_Base_SetConfig+0xf4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d007      	beq.n	800696e <TIM_Base_SetConfig+0x8a>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a1e      	ldr	r2, [pc, #120]	; (80069dc <TIM_Base_SetConfig+0xf8>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d003      	beq.n	800696e <TIM_Base_SetConfig+0x8a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a1d      	ldr	r2, [pc, #116]	; (80069e0 <TIM_Base_SetConfig+0xfc>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d108      	bne.n	8006980 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	4313      	orrs	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a08      	ldr	r2, [pc, #32]	; (80069c8 <TIM_Base_SetConfig+0xe4>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d103      	bne.n	80069b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	691a      	ldr	r2, [r3, #16]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	615a      	str	r2, [r3, #20]
}
 80069ba:	bf00      	nop
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	40010000 	.word	0x40010000
 80069cc:	40000400 	.word	0x40000400
 80069d0:	40000800 	.word	0x40000800
 80069d4:	40000c00 	.word	0x40000c00
 80069d8:	40014000 	.word	0x40014000
 80069dc:	40014400 	.word	0x40014400
 80069e0:	40014800 	.word	0x40014800

080069e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	f023 0201 	bic.w	r2, r3, #1
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 0303 	bic.w	r3, r3, #3
 8006a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f023 0302 	bic.w	r3, r3, #2
 8006a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a1c      	ldr	r2, [pc, #112]	; (8006aac <TIM_OC1_SetConfig+0xc8>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d10c      	bne.n	8006a5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f023 0308 	bic.w	r3, r3, #8
 8006a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f023 0304 	bic.w	r3, r3, #4
 8006a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a13      	ldr	r2, [pc, #76]	; (8006aac <TIM_OC1_SetConfig+0xc8>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d111      	bne.n	8006a86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	621a      	str	r2, [r3, #32]
}
 8006aa0:	bf00      	nop
 8006aa2:	371c      	adds	r7, #28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	40010000 	.word	0x40010000

08006ab0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	f023 0210 	bic.w	r2, r3, #16
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	021b      	lsls	r3, r3, #8
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f023 0320 	bic.w	r3, r3, #32
 8006afa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	011b      	lsls	r3, r3, #4
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a1e      	ldr	r2, [pc, #120]	; (8006b84 <TIM_OC2_SetConfig+0xd4>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d10d      	bne.n	8006b2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	011b      	lsls	r3, r3, #4
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a15      	ldr	r2, [pc, #84]	; (8006b84 <TIM_OC2_SetConfig+0xd4>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d113      	bne.n	8006b5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	621a      	str	r2, [r3, #32]
}
 8006b76:	bf00      	nop
 8006b78:	371c      	adds	r7, #28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	40010000 	.word	0x40010000

08006b88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b087      	sub	sp, #28
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f023 0303 	bic.w	r3, r3, #3
 8006bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	021b      	lsls	r3, r3, #8
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a1d      	ldr	r2, [pc, #116]	; (8006c58 <TIM_OC3_SetConfig+0xd0>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d10d      	bne.n	8006c02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	021b      	lsls	r3, r3, #8
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a14      	ldr	r2, [pc, #80]	; (8006c58 <TIM_OC3_SetConfig+0xd0>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d113      	bne.n	8006c32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	011b      	lsls	r3, r3, #4
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	011b      	lsls	r3, r3, #4
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	621a      	str	r2, [r3, #32]
}
 8006c4c:	bf00      	nop
 8006c4e:	371c      	adds	r7, #28
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	40010000 	.word	0x40010000

08006c5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	021b      	lsls	r3, r3, #8
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ca6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	031b      	lsls	r3, r3, #12
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a10      	ldr	r2, [pc, #64]	; (8006cf8 <TIM_OC4_SetConfig+0x9c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d109      	bne.n	8006cd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	019b      	lsls	r3, r3, #6
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	621a      	str	r2, [r3, #32]
}
 8006cea:	bf00      	nop
 8006cec:	371c      	adds	r7, #28
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	40010000 	.word	0x40010000

08006cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	f023 0201 	bic.w	r2, r3, #1
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f023 030a 	bic.w	r3, r3, #10
 8006d38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	621a      	str	r2, [r3, #32]
}
 8006d4e:	bf00      	nop
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b087      	sub	sp, #28
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	60f8      	str	r0, [r7, #12]
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	f023 0210 	bic.w	r2, r3, #16
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	031b      	lsls	r3, r3, #12
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	011b      	lsls	r3, r3, #4
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	621a      	str	r2, [r3, #32]
}
 8006dae:	bf00      	nop
 8006db0:	371c      	adds	r7, #28
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b085      	sub	sp, #20
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	f043 0307 	orr.w	r3, r3, #7
 8006ddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	609a      	str	r2, [r3, #8]
}
 8006de4:	bf00      	nop
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b087      	sub	sp, #28
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
 8006dfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	021a      	lsls	r2, r3, #8
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	431a      	orrs	r2, r3
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	609a      	str	r2, [r3, #8]
}
 8006e24:	bf00      	nop
 8006e26:	371c      	adds	r7, #28
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f003 031f 	and.w	r3, r3, #31
 8006e42:	2201      	movs	r2, #1
 8006e44:	fa02 f303 	lsl.w	r3, r2, r3
 8006e48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6a1a      	ldr	r2, [r3, #32]
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	43db      	mvns	r3, r3
 8006e52:	401a      	ands	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a1a      	ldr	r2, [r3, #32]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	f003 031f 	and.w	r3, r3, #31
 8006e62:	6879      	ldr	r1, [r7, #4]
 8006e64:	fa01 f303 	lsl.w	r3, r1, r3
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	621a      	str	r2, [r3, #32]
}
 8006e6e:	bf00      	nop
 8006e70:	371c      	adds	r7, #28
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
	...

08006e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d101      	bne.n	8006e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e90:	2302      	movs	r3, #2
 8006e92:	e050      	b.n	8006f36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a1c      	ldr	r2, [pc, #112]	; (8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d018      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee0:	d013      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a18      	ldr	r2, [pc, #96]	; (8006f48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d00e      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a16      	ldr	r2, [pc, #88]	; (8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d009      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a15      	ldr	r2, [pc, #84]	; (8006f50 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d004      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a13      	ldr	r2, [pc, #76]	; (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d10c      	bne.n	8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	40010000 	.word	0x40010000
 8006f48:	40000400 	.word	0x40000400
 8006f4c:	40000800 	.word	0x40000800
 8006f50:	40000c00 	.word	0x40000c00
 8006f54:	40014000 	.word	0x40014000

08006f58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f62:	2300      	movs	r3, #0
 8006f64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e03d      	b.n	8006ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	69db      	ldr	r3, [r3, #28]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e03f      	b.n	80070b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d106      	bne.n	8007050 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7fc fbcc 	bl	80037e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2224      	movs	r2, #36	; 0x24
 8007054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68da      	ldr	r2, [r3, #12]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007066:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fddf 	bl	8007c2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	691a      	ldr	r2, [r3, #16]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800707c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	695a      	ldr	r2, [r3, #20]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800708c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68da      	ldr	r2, [r3, #12]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800709c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2220      	movs	r2, #32
 80070a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b08a      	sub	sp, #40	; 0x28
 80070c2:	af02      	add	r7, sp, #8
 80070c4:	60f8      	str	r0, [r7, #12]
 80070c6:	60b9      	str	r1, [r7, #8]
 80070c8:	603b      	str	r3, [r7, #0]
 80070ca:	4613      	mov	r3, r2
 80070cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b20      	cmp	r3, #32
 80070dc:	d17c      	bne.n	80071d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d002      	beq.n	80070ea <HAL_UART_Transmit+0x2c>
 80070e4:	88fb      	ldrh	r3, [r7, #6]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e075      	b.n	80071da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d101      	bne.n	80070fc <HAL_UART_Transmit+0x3e>
 80070f8:	2302      	movs	r3, #2
 80070fa:	e06e      	b.n	80071da <HAL_UART_Transmit+0x11c>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2221      	movs	r2, #33	; 0x21
 800710e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007112:	f7fc fda7 	bl	8003c64 <HAL_GetTick>
 8007116:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	88fa      	ldrh	r2, [r7, #6]
 800711c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	88fa      	ldrh	r2, [r7, #6]
 8007122:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800712c:	d108      	bne.n	8007140 <HAL_UART_Transmit+0x82>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d104      	bne.n	8007140 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007136:	2300      	movs	r3, #0
 8007138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	61bb      	str	r3, [r7, #24]
 800713e:	e003      	b.n	8007148 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007144:	2300      	movs	r3, #0
 8007146:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007150:	e02a      	b.n	80071a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	2200      	movs	r2, #0
 800715a:	2180      	movs	r1, #128	; 0x80
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 fb1f 	bl	80077a0 <UART_WaitOnFlagUntilTimeout>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e036      	b.n	80071da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10b      	bne.n	800718a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007180:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	3302      	adds	r3, #2
 8007186:	61bb      	str	r3, [r7, #24]
 8007188:	e007      	b.n	800719a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	781a      	ldrb	r2, [r3, #0]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	3301      	adds	r3, #1
 8007198:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800719e:	b29b      	uxth	r3, r3
 80071a0:	3b01      	subs	r3, #1
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1cf      	bne.n	8007152 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2200      	movs	r2, #0
 80071ba:	2140      	movs	r1, #64	; 0x40
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 faef 	bl	80077a0 <UART_WaitOnFlagUntilTimeout>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d001      	beq.n	80071cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e006      	b.n	80071da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2220      	movs	r2, #32
 80071d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80071d4:	2300      	movs	r3, #0
 80071d6:	e000      	b.n	80071da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80071d8:	2302      	movs	r3, #2
  }
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3720      	adds	r7, #32
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b084      	sub	sp, #16
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	60f8      	str	r0, [r7, #12]
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	4613      	mov	r3, r2
 80071ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b20      	cmp	r3, #32
 80071fa:	d11d      	bne.n	8007238 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <HAL_UART_Receive_IT+0x26>
 8007202:	88fb      	ldrh	r3, [r7, #6]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d101      	bne.n	800720c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e016      	b.n	800723a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007212:	2b01      	cmp	r3, #1
 8007214:	d101      	bne.n	800721a <HAL_UART_Receive_IT+0x38>
 8007216:	2302      	movs	r3, #2
 8007218:	e00f      	b.n	800723a <HAL_UART_Receive_IT+0x58>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007228:	88fb      	ldrh	r3, [r7, #6]
 800722a:	461a      	mov	r2, r3
 800722c:	68b9      	ldr	r1, [r7, #8]
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 fb24 	bl	800787c <UART_Start_Receive_IT>
 8007234:	4603      	mov	r3, r0
 8007236:	e000      	b.n	800723a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007238:	2302      	movs	r3, #2
  }
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
	...

08007244 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b0ba      	sub	sp, #232	; 0xe8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800726a:	2300      	movs	r3, #0
 800726c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007270:	2300      	movs	r3, #0
 8007272:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800727a:	f003 030f 	and.w	r3, r3, #15
 800727e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007282:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10f      	bne.n	80072aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800728a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800728e:	f003 0320 	and.w	r3, r3, #32
 8007292:	2b00      	cmp	r3, #0
 8007294:	d009      	beq.n	80072aa <HAL_UART_IRQHandler+0x66>
 8007296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800729a:	f003 0320 	and.w	r3, r3, #32
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fc07 	bl	8007ab6 <UART_Receive_IT>
      return;
 80072a8:	e256      	b.n	8007758 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80072aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 80de 	beq.w	8007470 <HAL_UART_IRQHandler+0x22c>
 80072b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d106      	bne.n	80072ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 80d1 	beq.w	8007470 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80072ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00b      	beq.n	80072f2 <HAL_UART_IRQHandler+0xae>
 80072da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d005      	beq.n	80072f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	f043 0201 	orr.w	r2, r3, #1
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072f6:	f003 0304 	and.w	r3, r3, #4
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00b      	beq.n	8007316 <HAL_UART_IRQHandler+0xd2>
 80072fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d005      	beq.n	8007316 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	f043 0202 	orr.w	r2, r3, #2
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800731a:	f003 0302 	and.w	r3, r3, #2
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00b      	beq.n	800733a <HAL_UART_IRQHandler+0xf6>
 8007322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	2b00      	cmp	r3, #0
 800732c:	d005      	beq.n	800733a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007332:	f043 0204 	orr.w	r2, r3, #4
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800733a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800733e:	f003 0308 	and.w	r3, r3, #8
 8007342:	2b00      	cmp	r3, #0
 8007344:	d011      	beq.n	800736a <HAL_UART_IRQHandler+0x126>
 8007346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800734a:	f003 0320 	and.w	r3, r3, #32
 800734e:	2b00      	cmp	r3, #0
 8007350:	d105      	bne.n	800735e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d005      	beq.n	800736a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	f043 0208 	orr.w	r2, r3, #8
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 81ed 	beq.w	800774e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007378:	f003 0320 	and.w	r3, r3, #32
 800737c:	2b00      	cmp	r3, #0
 800737e:	d008      	beq.n	8007392 <HAL_UART_IRQHandler+0x14e>
 8007380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007384:	f003 0320 	and.w	r3, r3, #32
 8007388:	2b00      	cmp	r3, #0
 800738a:	d002      	beq.n	8007392 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fb92 	bl	8007ab6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739c:	2b40      	cmp	r3, #64	; 0x40
 800739e:	bf0c      	ite	eq
 80073a0:	2301      	moveq	r3, #1
 80073a2:	2300      	movne	r3, #0
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ae:	f003 0308 	and.w	r3, r3, #8
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d103      	bne.n	80073be <HAL_UART_IRQHandler+0x17a>
 80073b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d04f      	beq.n	800745e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fa9a 	bl	80078f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ce:	2b40      	cmp	r3, #64	; 0x40
 80073d0:	d141      	bne.n	8007456 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3314      	adds	r3, #20
 80073d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073e0:	e853 3f00 	ldrex	r3, [r3]
 80073e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80073e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3314      	adds	r3, #20
 80073fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80073fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007402:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007406:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800740a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800740e:	e841 2300 	strex	r3, r2, [r1]
 8007412:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007416:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1d9      	bne.n	80073d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007422:	2b00      	cmp	r3, #0
 8007424:	d013      	beq.n	800744e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742a:	4a7d      	ldr	r2, [pc, #500]	; (8007620 <HAL_UART_IRQHandler+0x3dc>)
 800742c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007432:	4618      	mov	r0, r3
 8007434:	f7fd f9a9 	bl	800478a <HAL_DMA_Abort_IT>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d016      	beq.n	800746c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007448:	4610      	mov	r0, r2
 800744a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800744c:	e00e      	b.n	800746c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f990 	bl	8007774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007454:	e00a      	b.n	800746c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f98c 	bl	8007774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800745c:	e006      	b.n	800746c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f988 	bl	8007774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800746a:	e170      	b.n	800774e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800746c:	bf00      	nop
    return;
 800746e:	e16e      	b.n	800774e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007474:	2b01      	cmp	r3, #1
 8007476:	f040 814a 	bne.w	800770e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800747a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800747e:	f003 0310 	and.w	r3, r3, #16
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 8143 	beq.w	800770e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800748c:	f003 0310 	and.w	r3, r3, #16
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 813c 	beq.w	800770e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007496:	2300      	movs	r3, #0
 8007498:	60bb      	str	r3, [r7, #8]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	60bb      	str	r3, [r7, #8]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	60bb      	str	r3, [r7, #8]
 80074aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b6:	2b40      	cmp	r3, #64	; 0x40
 80074b8:	f040 80b4 	bne.w	8007624 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80074c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 8140 	beq.w	8007752 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074da:	429a      	cmp	r2, r3
 80074dc:	f080 8139 	bcs.w	8007752 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074f2:	f000 8088 	beq.w	8007606 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	330c      	adds	r3, #12
 80074fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007504:	e853 3f00 	ldrex	r3, [r3]
 8007508:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800750c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007514:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	330c      	adds	r3, #12
 800751e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007522:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007526:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800752e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800753a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1d9      	bne.n	80074f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3314      	adds	r3, #20
 8007548:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800754c:	e853 3f00 	ldrex	r3, [r3]
 8007550:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007554:	f023 0301 	bic.w	r3, r3, #1
 8007558:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3314      	adds	r3, #20
 8007562:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007566:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800756a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800756e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007572:	e841 2300 	strex	r3, r2, [r1]
 8007576:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1e1      	bne.n	8007542 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3314      	adds	r3, #20
 8007584:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007588:	e853 3f00 	ldrex	r3, [r3]
 800758c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800758e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007594:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	3314      	adds	r3, #20
 800759e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80075a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80075a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80075a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80075aa:	e841 2300 	strex	r3, r2, [r1]
 80075ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80075b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1e3      	bne.n	800757e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2220      	movs	r2, #32
 80075ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	330c      	adds	r3, #12
 80075ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ce:	e853 3f00 	ldrex	r3, [r3]
 80075d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075d6:	f023 0310 	bic.w	r3, r3, #16
 80075da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	330c      	adds	r3, #12
 80075e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80075e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80075ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075f0:	e841 2300 	strex	r3, r2, [r1]
 80075f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1e3      	bne.n	80075c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007600:	4618      	mov	r0, r3
 8007602:	f7fd f852 	bl	80046aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800760e:	b29b      	uxth	r3, r3
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	b29b      	uxth	r3, r3
 8007614:	4619      	mov	r1, r3
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f8b6 	bl	8007788 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800761c:	e099      	b.n	8007752 <HAL_UART_IRQHandler+0x50e>
 800761e:	bf00      	nop
 8007620:	080079bf 	.word	0x080079bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800762c:	b29b      	uxth	r3, r3
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007638:	b29b      	uxth	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	f000 808b 	beq.w	8007756 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007640:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007644:	2b00      	cmp	r3, #0
 8007646:	f000 8086 	beq.w	8007756 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	330c      	adds	r3, #12
 8007650:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800765a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800765c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007660:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	330c      	adds	r3, #12
 800766a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800766e:	647a      	str	r2, [r7, #68]	; 0x44
 8007670:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007672:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007674:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007676:	e841 2300 	strex	r3, r2, [r1]
 800767a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800767c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1e3      	bne.n	800764a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	3314      	adds	r3, #20
 8007688:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768c:	e853 3f00 	ldrex	r3, [r3]
 8007690:	623b      	str	r3, [r7, #32]
   return(result);
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	f023 0301 	bic.w	r3, r3, #1
 8007698:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3314      	adds	r3, #20
 80076a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80076a6:	633a      	str	r2, [r7, #48]	; 0x30
 80076a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ae:	e841 2300 	strex	r3, r2, [r1]
 80076b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1e3      	bne.n	8007682 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2220      	movs	r2, #32
 80076be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	330c      	adds	r3, #12
 80076ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	e853 3f00 	ldrex	r3, [r3]
 80076d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f023 0310 	bic.w	r3, r3, #16
 80076de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	330c      	adds	r3, #12
 80076e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80076ec:	61fa      	str	r2, [r7, #28]
 80076ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f0:	69b9      	ldr	r1, [r7, #24]
 80076f2:	69fa      	ldr	r2, [r7, #28]
 80076f4:	e841 2300 	strex	r3, r2, [r1]
 80076f8:	617b      	str	r3, [r7, #20]
   return(result);
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1e3      	bne.n	80076c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007700:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f83e 	bl	8007788 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800770c:	e023      	b.n	8007756 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800770e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007716:	2b00      	cmp	r3, #0
 8007718:	d009      	beq.n	800772e <HAL_UART_IRQHandler+0x4ea>
 800771a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800771e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f95d 	bl	80079e6 <UART_Transmit_IT>
    return;
 800772c:	e014      	b.n	8007758 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800772e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00e      	beq.n	8007758 <HAL_UART_IRQHandler+0x514>
 800773a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800773e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007742:	2b00      	cmp	r3, #0
 8007744:	d008      	beq.n	8007758 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f99d 	bl	8007a86 <UART_EndTransmit_IT>
    return;
 800774c:	e004      	b.n	8007758 <HAL_UART_IRQHandler+0x514>
    return;
 800774e:	bf00      	nop
 8007750:	e002      	b.n	8007758 <HAL_UART_IRQHandler+0x514>
      return;
 8007752:	bf00      	nop
 8007754:	e000      	b.n	8007758 <HAL_UART_IRQHandler+0x514>
      return;
 8007756:	bf00      	nop
  }
}
 8007758:	37e8      	adds	r7, #232	; 0xe8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop

08007760 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b090      	sub	sp, #64	; 0x40
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	603b      	str	r3, [r7, #0]
 80077ac:	4613      	mov	r3, r2
 80077ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077b0:	e050      	b.n	8007854 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b8:	d04c      	beq.n	8007854 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80077ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d007      	beq.n	80077d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80077c0:	f7fc fa50 	bl	8003c64 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d241      	bcs.n	8007854 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	330c      	adds	r3, #12
 80077d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077da:	e853 3f00 	ldrex	r3, [r3]
 80077de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	330c      	adds	r3, #12
 80077ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80077f0:	637a      	str	r2, [r7, #52]	; 0x34
 80077f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077f8:	e841 2300 	strex	r3, r2, [r1]
 80077fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1e5      	bne.n	80077d0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3314      	adds	r3, #20
 800780a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	e853 3f00 	ldrex	r3, [r3]
 8007812:	613b      	str	r3, [r7, #16]
   return(result);
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	f023 0301 	bic.w	r3, r3, #1
 800781a:	63bb      	str	r3, [r7, #56]	; 0x38
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3314      	adds	r3, #20
 8007822:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007824:	623a      	str	r2, [r7, #32]
 8007826:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	69f9      	ldr	r1, [r7, #28]
 800782a:	6a3a      	ldr	r2, [r7, #32]
 800782c:	e841 2300 	strex	r3, r2, [r1]
 8007830:	61bb      	str	r3, [r7, #24]
   return(result);
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e5      	bne.n	8007804 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2220      	movs	r2, #32
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2220      	movs	r2, #32
 8007844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e00f      	b.n	8007874 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	4013      	ands	r3, r2
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	429a      	cmp	r2, r3
 8007862:	bf0c      	ite	eq
 8007864:	2301      	moveq	r3, #1
 8007866:	2300      	movne	r3, #0
 8007868:	b2db      	uxtb	r3, r3
 800786a:	461a      	mov	r2, r3
 800786c:	79fb      	ldrb	r3, [r7, #7]
 800786e:	429a      	cmp	r2, r3
 8007870:	d09f      	beq.n	80077b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3740      	adds	r7, #64	; 0x40
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	4613      	mov	r3, r2
 8007888:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	88fa      	ldrh	r2, [r7, #6]
 8007894:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	88fa      	ldrh	r2, [r7, #6]
 800789a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2222      	movs	r2, #34	; 0x22
 80078a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d007      	beq.n	80078ca <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68da      	ldr	r2, [r3, #12]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078c8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	695a      	ldr	r2, [r3, #20]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f042 0201 	orr.w	r2, r2, #1
 80078d8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68da      	ldr	r2, [r3, #12]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f042 0220 	orr.w	r2, r2, #32
 80078e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b095      	sub	sp, #84	; 0x54
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	330c      	adds	r3, #12
 8007906:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790a:	e853 3f00 	ldrex	r3, [r3]
 800790e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007912:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	330c      	adds	r3, #12
 800791e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007920:	643a      	str	r2, [r7, #64]	; 0x40
 8007922:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007924:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007926:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007928:	e841 2300 	strex	r3, r2, [r1]
 800792c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800792e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e5      	bne.n	8007900 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3314      	adds	r3, #20
 800793a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	e853 3f00 	ldrex	r3, [r3]
 8007942:	61fb      	str	r3, [r7, #28]
   return(result);
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	f023 0301 	bic.w	r3, r3, #1
 800794a:	64bb      	str	r3, [r7, #72]	; 0x48
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3314      	adds	r3, #20
 8007952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007954:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007956:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007958:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800795a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800795c:	e841 2300 	strex	r3, r2, [r1]
 8007960:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1e5      	bne.n	8007934 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796c:	2b01      	cmp	r3, #1
 800796e:	d119      	bne.n	80079a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	330c      	adds	r3, #12
 8007976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	e853 3f00 	ldrex	r3, [r3]
 800797e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f023 0310 	bic.w	r3, r3, #16
 8007986:	647b      	str	r3, [r7, #68]	; 0x44
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	330c      	adds	r3, #12
 800798e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007990:	61ba      	str	r2, [r7, #24]
 8007992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007994:	6979      	ldr	r1, [r7, #20]
 8007996:	69ba      	ldr	r2, [r7, #24]
 8007998:	e841 2300 	strex	r3, r2, [r1]
 800799c:	613b      	str	r3, [r7, #16]
   return(result);
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1e5      	bne.n	8007970 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2220      	movs	r2, #32
 80079a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80079b2:	bf00      	nop
 80079b4:	3754      	adds	r7, #84	; 0x54
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b084      	sub	sp, #16
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f7ff fecb 	bl	8007774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079de:	bf00      	nop
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b085      	sub	sp, #20
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b21      	cmp	r3, #33	; 0x21
 80079f8:	d13e      	bne.n	8007a78 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a02:	d114      	bne.n	8007a2e <UART_Transmit_IT+0x48>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d110      	bne.n	8007a2e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a1b      	ldr	r3, [r3, #32]
 8007a10:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	881b      	ldrh	r3, [r3, #0]
 8007a16:	461a      	mov	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a20:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	1c9a      	adds	r2, r3, #2
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	621a      	str	r2, [r3, #32]
 8007a2c:	e008      	b.n	8007a40 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	1c59      	adds	r1, r3, #1
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	6211      	str	r1, [r2, #32]
 8007a38:	781a      	ldrb	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	3b01      	subs	r3, #1
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d10f      	bne.n	8007a74 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a62:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68da      	ldr	r2, [r3, #12]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a72:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	e000      	b.n	8007a7a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a78:	2302      	movs	r3, #2
  }
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b082      	sub	sp, #8
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68da      	ldr	r2, [r3, #12]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7ff fe5a 	bl	8007760 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b08c      	sub	sp, #48	; 0x30
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b22      	cmp	r3, #34	; 0x22
 8007ac8:	f040 80ab 	bne.w	8007c22 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad4:	d117      	bne.n	8007b06 <UART_Receive_IT+0x50>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d113      	bne.n	8007b06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afe:	1c9a      	adds	r2, r3, #2
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	629a      	str	r2, [r3, #40]	; 0x28
 8007b04:	e026      	b.n	8007b54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b18:	d007      	beq.n	8007b2a <UART_Receive_IT+0x74>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10a      	bne.n	8007b38 <UART_Receive_IT+0x82>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d106      	bne.n	8007b38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b34:	701a      	strb	r2, [r3, #0]
 8007b36:	e008      	b.n	8007b4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b44:	b2da      	uxtb	r2, r3
 8007b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4e:	1c5a      	adds	r2, r3, #1
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	4619      	mov	r1, r3
 8007b62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d15a      	bne.n	8007c1e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68da      	ldr	r2, [r3, #12]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f022 0220 	bic.w	r2, r2, #32
 8007b76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68da      	ldr	r2, [r3, #12]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	695a      	ldr	r2, [r3, #20]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 0201 	bic.w	r2, r2, #1
 8007b96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d135      	bne.n	8007c14 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	330c      	adds	r3, #12
 8007bb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	e853 3f00 	ldrex	r3, [r3]
 8007bbc:	613b      	str	r3, [r7, #16]
   return(result);
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	f023 0310 	bic.w	r3, r3, #16
 8007bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	330c      	adds	r3, #12
 8007bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bce:	623a      	str	r2, [r7, #32]
 8007bd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd2:	69f9      	ldr	r1, [r7, #28]
 8007bd4:	6a3a      	ldr	r2, [r7, #32]
 8007bd6:	e841 2300 	strex	r3, r2, [r1]
 8007bda:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1e5      	bne.n	8007bae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0310 	and.w	r3, r3, #16
 8007bec:	2b10      	cmp	r3, #16
 8007bee:	d10a      	bne.n	8007c06 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	60fb      	str	r3, [r7, #12]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	60fb      	str	r3, [r7, #12]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	60fb      	str	r3, [r7, #12]
 8007c04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f7ff fdbb 	bl	8007788 <HAL_UARTEx_RxEventCallback>
 8007c12:	e002      	b.n	8007c1a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f7fb fb65 	bl	80032e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	e002      	b.n	8007c24 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	e000      	b.n	8007c24 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007c22:	2302      	movs	r3, #2
  }
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3730      	adds	r7, #48	; 0x30
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c30:	b0c0      	sub	sp, #256	; 0x100
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c48:	68d9      	ldr	r1, [r3, #12]
 8007c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	ea40 0301 	orr.w	r3, r0, r1
 8007c54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c5a:	689a      	ldr	r2, [r3, #8]
 8007c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	431a      	orrs	r2, r3
 8007c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007c84:	f021 010c 	bic.w	r1, r1, #12
 8007c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c92:	430b      	orrs	r3, r1
 8007c94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca6:	6999      	ldr	r1, [r3, #24]
 8007ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	ea40 0301 	orr.w	r3, r0, r1
 8007cb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	4b8f      	ldr	r3, [pc, #572]	; (8007ef8 <UART_SetConfig+0x2cc>)
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d005      	beq.n	8007ccc <UART_SetConfig+0xa0>
 8007cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	4b8d      	ldr	r3, [pc, #564]	; (8007efc <UART_SetConfig+0x2d0>)
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d104      	bne.n	8007cd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ccc:	f7fd fbac 	bl	8005428 <HAL_RCC_GetPCLK2Freq>
 8007cd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007cd4:	e003      	b.n	8007cde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cd6:	f7fd fb93 	bl	8005400 <HAL_RCC_GetPCLK1Freq>
 8007cda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce2:	69db      	ldr	r3, [r3, #28]
 8007ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ce8:	f040 810c 	bne.w	8007f04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007cf6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007cfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007cfe:	4622      	mov	r2, r4
 8007d00:	462b      	mov	r3, r5
 8007d02:	1891      	adds	r1, r2, r2
 8007d04:	65b9      	str	r1, [r7, #88]	; 0x58
 8007d06:	415b      	adcs	r3, r3
 8007d08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d0e:	4621      	mov	r1, r4
 8007d10:	eb12 0801 	adds.w	r8, r2, r1
 8007d14:	4629      	mov	r1, r5
 8007d16:	eb43 0901 	adc.w	r9, r3, r1
 8007d1a:	f04f 0200 	mov.w	r2, #0
 8007d1e:	f04f 0300 	mov.w	r3, #0
 8007d22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d2e:	4690      	mov	r8, r2
 8007d30:	4699      	mov	r9, r3
 8007d32:	4623      	mov	r3, r4
 8007d34:	eb18 0303 	adds.w	r3, r8, r3
 8007d38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d3c:	462b      	mov	r3, r5
 8007d3e:	eb49 0303 	adc.w	r3, r9, r3
 8007d42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007d56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	18db      	adds	r3, r3, r3
 8007d5e:	653b      	str	r3, [r7, #80]	; 0x50
 8007d60:	4613      	mov	r3, r2
 8007d62:	eb42 0303 	adc.w	r3, r2, r3
 8007d66:	657b      	str	r3, [r7, #84]	; 0x54
 8007d68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d70:	f7f8 ff92 	bl	8000c98 <__aeabi_uldivmod>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4b61      	ldr	r3, [pc, #388]	; (8007f00 <UART_SetConfig+0x2d4>)
 8007d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8007d7e:	095b      	lsrs	r3, r3, #5
 8007d80:	011c      	lsls	r4, r3, #4
 8007d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d86:	2200      	movs	r2, #0
 8007d88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007d90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007d94:	4642      	mov	r2, r8
 8007d96:	464b      	mov	r3, r9
 8007d98:	1891      	adds	r1, r2, r2
 8007d9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d9c:	415b      	adcs	r3, r3
 8007d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007da0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007da4:	4641      	mov	r1, r8
 8007da6:	eb12 0a01 	adds.w	sl, r2, r1
 8007daa:	4649      	mov	r1, r9
 8007dac:	eb43 0b01 	adc.w	fp, r3, r1
 8007db0:	f04f 0200 	mov.w	r2, #0
 8007db4:	f04f 0300 	mov.w	r3, #0
 8007db8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007dbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007dc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007dc4:	4692      	mov	sl, r2
 8007dc6:	469b      	mov	fp, r3
 8007dc8:	4643      	mov	r3, r8
 8007dca:	eb1a 0303 	adds.w	r3, sl, r3
 8007dce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dd2:	464b      	mov	r3, r9
 8007dd4:	eb4b 0303 	adc.w	r3, fp, r3
 8007dd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007de8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007dec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007df0:	460b      	mov	r3, r1
 8007df2:	18db      	adds	r3, r3, r3
 8007df4:	643b      	str	r3, [r7, #64]	; 0x40
 8007df6:	4613      	mov	r3, r2
 8007df8:	eb42 0303 	adc.w	r3, r2, r3
 8007dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8007dfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e06:	f7f8 ff47 	bl	8000c98 <__aeabi_uldivmod>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4611      	mov	r1, r2
 8007e10:	4b3b      	ldr	r3, [pc, #236]	; (8007f00 <UART_SetConfig+0x2d4>)
 8007e12:	fba3 2301 	umull	r2, r3, r3, r1
 8007e16:	095b      	lsrs	r3, r3, #5
 8007e18:	2264      	movs	r2, #100	; 0x64
 8007e1a:	fb02 f303 	mul.w	r3, r2, r3
 8007e1e:	1acb      	subs	r3, r1, r3
 8007e20:	00db      	lsls	r3, r3, #3
 8007e22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007e26:	4b36      	ldr	r3, [pc, #216]	; (8007f00 <UART_SetConfig+0x2d4>)
 8007e28:	fba3 2302 	umull	r2, r3, r3, r2
 8007e2c:	095b      	lsrs	r3, r3, #5
 8007e2e:	005b      	lsls	r3, r3, #1
 8007e30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e34:	441c      	add	r4, r3
 8007e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007e44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007e48:	4642      	mov	r2, r8
 8007e4a:	464b      	mov	r3, r9
 8007e4c:	1891      	adds	r1, r2, r2
 8007e4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e50:	415b      	adcs	r3, r3
 8007e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e58:	4641      	mov	r1, r8
 8007e5a:	1851      	adds	r1, r2, r1
 8007e5c:	6339      	str	r1, [r7, #48]	; 0x30
 8007e5e:	4649      	mov	r1, r9
 8007e60:	414b      	adcs	r3, r1
 8007e62:	637b      	str	r3, [r7, #52]	; 0x34
 8007e64:	f04f 0200 	mov.w	r2, #0
 8007e68:	f04f 0300 	mov.w	r3, #0
 8007e6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007e70:	4659      	mov	r1, fp
 8007e72:	00cb      	lsls	r3, r1, #3
 8007e74:	4651      	mov	r1, sl
 8007e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e7a:	4651      	mov	r1, sl
 8007e7c:	00ca      	lsls	r2, r1, #3
 8007e7e:	4610      	mov	r0, r2
 8007e80:	4619      	mov	r1, r3
 8007e82:	4603      	mov	r3, r0
 8007e84:	4642      	mov	r2, r8
 8007e86:	189b      	adds	r3, r3, r2
 8007e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e8c:	464b      	mov	r3, r9
 8007e8e:	460a      	mov	r2, r1
 8007e90:	eb42 0303 	adc.w	r3, r2, r3
 8007e94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007ea4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007ea8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007eac:	460b      	mov	r3, r1
 8007eae:	18db      	adds	r3, r3, r3
 8007eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	eb42 0303 	adc.w	r3, r2, r3
 8007eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ebe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007ec2:	f7f8 fee9 	bl	8000c98 <__aeabi_uldivmod>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	460b      	mov	r3, r1
 8007eca:	4b0d      	ldr	r3, [pc, #52]	; (8007f00 <UART_SetConfig+0x2d4>)
 8007ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8007ed0:	095b      	lsrs	r3, r3, #5
 8007ed2:	2164      	movs	r1, #100	; 0x64
 8007ed4:	fb01 f303 	mul.w	r3, r1, r3
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	00db      	lsls	r3, r3, #3
 8007edc:	3332      	adds	r3, #50	; 0x32
 8007ede:	4a08      	ldr	r2, [pc, #32]	; (8007f00 <UART_SetConfig+0x2d4>)
 8007ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee4:	095b      	lsrs	r3, r3, #5
 8007ee6:	f003 0207 	and.w	r2, r3, #7
 8007eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4422      	add	r2, r4
 8007ef2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ef4:	e105      	b.n	8008102 <UART_SetConfig+0x4d6>
 8007ef6:	bf00      	nop
 8007ef8:	40011000 	.word	0x40011000
 8007efc:	40011400 	.word	0x40011400
 8007f00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007f16:	4642      	mov	r2, r8
 8007f18:	464b      	mov	r3, r9
 8007f1a:	1891      	adds	r1, r2, r2
 8007f1c:	6239      	str	r1, [r7, #32]
 8007f1e:	415b      	adcs	r3, r3
 8007f20:	627b      	str	r3, [r7, #36]	; 0x24
 8007f22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f26:	4641      	mov	r1, r8
 8007f28:	1854      	adds	r4, r2, r1
 8007f2a:	4649      	mov	r1, r9
 8007f2c:	eb43 0501 	adc.w	r5, r3, r1
 8007f30:	f04f 0200 	mov.w	r2, #0
 8007f34:	f04f 0300 	mov.w	r3, #0
 8007f38:	00eb      	lsls	r3, r5, #3
 8007f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f3e:	00e2      	lsls	r2, r4, #3
 8007f40:	4614      	mov	r4, r2
 8007f42:	461d      	mov	r5, r3
 8007f44:	4643      	mov	r3, r8
 8007f46:	18e3      	adds	r3, r4, r3
 8007f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f4c:	464b      	mov	r3, r9
 8007f4e:	eb45 0303 	adc.w	r3, r5, r3
 8007f52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f66:	f04f 0200 	mov.w	r2, #0
 8007f6a:	f04f 0300 	mov.w	r3, #0
 8007f6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007f72:	4629      	mov	r1, r5
 8007f74:	008b      	lsls	r3, r1, #2
 8007f76:	4621      	mov	r1, r4
 8007f78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f7c:	4621      	mov	r1, r4
 8007f7e:	008a      	lsls	r2, r1, #2
 8007f80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007f84:	f7f8 fe88 	bl	8000c98 <__aeabi_uldivmod>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4b60      	ldr	r3, [pc, #384]	; (8008110 <UART_SetConfig+0x4e4>)
 8007f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007f92:	095b      	lsrs	r3, r3, #5
 8007f94:	011c      	lsls	r4, r3, #4
 8007f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007fa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007fa4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007fa8:	4642      	mov	r2, r8
 8007faa:	464b      	mov	r3, r9
 8007fac:	1891      	adds	r1, r2, r2
 8007fae:	61b9      	str	r1, [r7, #24]
 8007fb0:	415b      	adcs	r3, r3
 8007fb2:	61fb      	str	r3, [r7, #28]
 8007fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fb8:	4641      	mov	r1, r8
 8007fba:	1851      	adds	r1, r2, r1
 8007fbc:	6139      	str	r1, [r7, #16]
 8007fbe:	4649      	mov	r1, r9
 8007fc0:	414b      	adcs	r3, r1
 8007fc2:	617b      	str	r3, [r7, #20]
 8007fc4:	f04f 0200 	mov.w	r2, #0
 8007fc8:	f04f 0300 	mov.w	r3, #0
 8007fcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fd0:	4659      	mov	r1, fp
 8007fd2:	00cb      	lsls	r3, r1, #3
 8007fd4:	4651      	mov	r1, sl
 8007fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fda:	4651      	mov	r1, sl
 8007fdc:	00ca      	lsls	r2, r1, #3
 8007fde:	4610      	mov	r0, r2
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	4642      	mov	r2, r8
 8007fe6:	189b      	adds	r3, r3, r2
 8007fe8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fec:	464b      	mov	r3, r9
 8007fee:	460a      	mov	r2, r1
 8007ff0:	eb42 0303 	adc.w	r3, r2, r3
 8007ff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	67bb      	str	r3, [r7, #120]	; 0x78
 8008002:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008004:	f04f 0200 	mov.w	r2, #0
 8008008:	f04f 0300 	mov.w	r3, #0
 800800c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008010:	4649      	mov	r1, r9
 8008012:	008b      	lsls	r3, r1, #2
 8008014:	4641      	mov	r1, r8
 8008016:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800801a:	4641      	mov	r1, r8
 800801c:	008a      	lsls	r2, r1, #2
 800801e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008022:	f7f8 fe39 	bl	8000c98 <__aeabi_uldivmod>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	4b39      	ldr	r3, [pc, #228]	; (8008110 <UART_SetConfig+0x4e4>)
 800802c:	fba3 1302 	umull	r1, r3, r3, r2
 8008030:	095b      	lsrs	r3, r3, #5
 8008032:	2164      	movs	r1, #100	; 0x64
 8008034:	fb01 f303 	mul.w	r3, r1, r3
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	011b      	lsls	r3, r3, #4
 800803c:	3332      	adds	r3, #50	; 0x32
 800803e:	4a34      	ldr	r2, [pc, #208]	; (8008110 <UART_SetConfig+0x4e4>)
 8008040:	fba2 2303 	umull	r2, r3, r2, r3
 8008044:	095b      	lsrs	r3, r3, #5
 8008046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800804a:	441c      	add	r4, r3
 800804c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008050:	2200      	movs	r2, #0
 8008052:	673b      	str	r3, [r7, #112]	; 0x70
 8008054:	677a      	str	r2, [r7, #116]	; 0x74
 8008056:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800805a:	4642      	mov	r2, r8
 800805c:	464b      	mov	r3, r9
 800805e:	1891      	adds	r1, r2, r2
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	415b      	adcs	r3, r3
 8008064:	60fb      	str	r3, [r7, #12]
 8008066:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800806a:	4641      	mov	r1, r8
 800806c:	1851      	adds	r1, r2, r1
 800806e:	6039      	str	r1, [r7, #0]
 8008070:	4649      	mov	r1, r9
 8008072:	414b      	adcs	r3, r1
 8008074:	607b      	str	r3, [r7, #4]
 8008076:	f04f 0200 	mov.w	r2, #0
 800807a:	f04f 0300 	mov.w	r3, #0
 800807e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008082:	4659      	mov	r1, fp
 8008084:	00cb      	lsls	r3, r1, #3
 8008086:	4651      	mov	r1, sl
 8008088:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800808c:	4651      	mov	r1, sl
 800808e:	00ca      	lsls	r2, r1, #3
 8008090:	4610      	mov	r0, r2
 8008092:	4619      	mov	r1, r3
 8008094:	4603      	mov	r3, r0
 8008096:	4642      	mov	r2, r8
 8008098:	189b      	adds	r3, r3, r2
 800809a:	66bb      	str	r3, [r7, #104]	; 0x68
 800809c:	464b      	mov	r3, r9
 800809e:	460a      	mov	r2, r1
 80080a0:	eb42 0303 	adc.w	r3, r2, r3
 80080a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	663b      	str	r3, [r7, #96]	; 0x60
 80080b0:	667a      	str	r2, [r7, #100]	; 0x64
 80080b2:	f04f 0200 	mov.w	r2, #0
 80080b6:	f04f 0300 	mov.w	r3, #0
 80080ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80080be:	4649      	mov	r1, r9
 80080c0:	008b      	lsls	r3, r1, #2
 80080c2:	4641      	mov	r1, r8
 80080c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080c8:	4641      	mov	r1, r8
 80080ca:	008a      	lsls	r2, r1, #2
 80080cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80080d0:	f7f8 fde2 	bl	8000c98 <__aeabi_uldivmod>
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	4b0d      	ldr	r3, [pc, #52]	; (8008110 <UART_SetConfig+0x4e4>)
 80080da:	fba3 1302 	umull	r1, r3, r3, r2
 80080de:	095b      	lsrs	r3, r3, #5
 80080e0:	2164      	movs	r1, #100	; 0x64
 80080e2:	fb01 f303 	mul.w	r3, r1, r3
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	011b      	lsls	r3, r3, #4
 80080ea:	3332      	adds	r3, #50	; 0x32
 80080ec:	4a08      	ldr	r2, [pc, #32]	; (8008110 <UART_SetConfig+0x4e4>)
 80080ee:	fba2 2303 	umull	r2, r3, r2, r3
 80080f2:	095b      	lsrs	r3, r3, #5
 80080f4:	f003 020f 	and.w	r2, r3, #15
 80080f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4422      	add	r2, r4
 8008100:	609a      	str	r2, [r3, #8]
}
 8008102:	bf00      	nop
 8008104:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008108:	46bd      	mov	sp, r7
 800810a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800810e:	bf00      	nop
 8008110:	51eb851f 	.word	0x51eb851f

08008114 <atoi>:
 8008114:	220a      	movs	r2, #10
 8008116:	2100      	movs	r1, #0
 8008118:	f000 bbc4 	b.w	80088a4 <strtol>

0800811c <__errno>:
 800811c:	4b01      	ldr	r3, [pc, #4]	; (8008124 <__errno+0x8>)
 800811e:	6818      	ldr	r0, [r3, #0]
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	20000010 	.word	0x20000010

08008128 <__libc_init_array>:
 8008128:	b570      	push	{r4, r5, r6, lr}
 800812a:	4d0d      	ldr	r5, [pc, #52]	; (8008160 <__libc_init_array+0x38>)
 800812c:	4c0d      	ldr	r4, [pc, #52]	; (8008164 <__libc_init_array+0x3c>)
 800812e:	1b64      	subs	r4, r4, r5
 8008130:	10a4      	asrs	r4, r4, #2
 8008132:	2600      	movs	r6, #0
 8008134:	42a6      	cmp	r6, r4
 8008136:	d109      	bne.n	800814c <__libc_init_array+0x24>
 8008138:	4d0b      	ldr	r5, [pc, #44]	; (8008168 <__libc_init_array+0x40>)
 800813a:	4c0c      	ldr	r4, [pc, #48]	; (800816c <__libc_init_array+0x44>)
 800813c:	f007 fd78 	bl	800fc30 <_init>
 8008140:	1b64      	subs	r4, r4, r5
 8008142:	10a4      	asrs	r4, r4, #2
 8008144:	2600      	movs	r6, #0
 8008146:	42a6      	cmp	r6, r4
 8008148:	d105      	bne.n	8008156 <__libc_init_array+0x2e>
 800814a:	bd70      	pop	{r4, r5, r6, pc}
 800814c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008150:	4798      	blx	r3
 8008152:	3601      	adds	r6, #1
 8008154:	e7ee      	b.n	8008134 <__libc_init_array+0xc>
 8008156:	f855 3b04 	ldr.w	r3, [r5], #4
 800815a:	4798      	blx	r3
 800815c:	3601      	adds	r6, #1
 800815e:	e7f2      	b.n	8008146 <__libc_init_array+0x1e>
 8008160:	0801040c 	.word	0x0801040c
 8008164:	0801040c 	.word	0x0801040c
 8008168:	0801040c 	.word	0x0801040c
 800816c:	08010414 	.word	0x08010414

08008170 <malloc>:
 8008170:	4b02      	ldr	r3, [pc, #8]	; (800817c <malloc+0xc>)
 8008172:	4601      	mov	r1, r0
 8008174:	6818      	ldr	r0, [r3, #0]
 8008176:	f000 b80b 	b.w	8008190 <_malloc_r>
 800817a:	bf00      	nop
 800817c:	20000010 	.word	0x20000010

08008180 <free>:
 8008180:	4b02      	ldr	r3, [pc, #8]	; (800818c <free+0xc>)
 8008182:	4601      	mov	r1, r0
 8008184:	6818      	ldr	r0, [r3, #0]
 8008186:	f003 be29 	b.w	800bddc <_free_r>
 800818a:	bf00      	nop
 800818c:	20000010 	.word	0x20000010

08008190 <_malloc_r>:
 8008190:	f101 030b 	add.w	r3, r1, #11
 8008194:	2b16      	cmp	r3, #22
 8008196:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819a:	4605      	mov	r5, r0
 800819c:	d906      	bls.n	80081ac <_malloc_r+0x1c>
 800819e:	f033 0707 	bics.w	r7, r3, #7
 80081a2:	d504      	bpl.n	80081ae <_malloc_r+0x1e>
 80081a4:	230c      	movs	r3, #12
 80081a6:	602b      	str	r3, [r5, #0]
 80081a8:	2400      	movs	r4, #0
 80081aa:	e1a5      	b.n	80084f8 <_malloc_r+0x368>
 80081ac:	2710      	movs	r7, #16
 80081ae:	42b9      	cmp	r1, r7
 80081b0:	d8f8      	bhi.n	80081a4 <_malloc_r+0x14>
 80081b2:	4628      	mov	r0, r5
 80081b4:	f000 fa30 	bl	8008618 <__malloc_lock>
 80081b8:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 80081bc:	4eb0      	ldr	r6, [pc, #704]	; (8008480 <_malloc_r+0x2f0>)
 80081be:	d237      	bcs.n	8008230 <_malloc_r+0xa0>
 80081c0:	f107 0208 	add.w	r2, r7, #8
 80081c4:	4432      	add	r2, r6
 80081c6:	f1a2 0108 	sub.w	r1, r2, #8
 80081ca:	6854      	ldr	r4, [r2, #4]
 80081cc:	428c      	cmp	r4, r1
 80081ce:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80081d2:	d102      	bne.n	80081da <_malloc_r+0x4a>
 80081d4:	68d4      	ldr	r4, [r2, #12]
 80081d6:	42a2      	cmp	r2, r4
 80081d8:	d010      	beq.n	80081fc <_malloc_r+0x6c>
 80081da:	6863      	ldr	r3, [r4, #4]
 80081dc:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80081e0:	f023 0303 	bic.w	r3, r3, #3
 80081e4:	60ca      	str	r2, [r1, #12]
 80081e6:	4423      	add	r3, r4
 80081e8:	6091      	str	r1, [r2, #8]
 80081ea:	685a      	ldr	r2, [r3, #4]
 80081ec:	f042 0201 	orr.w	r2, r2, #1
 80081f0:	605a      	str	r2, [r3, #4]
 80081f2:	4628      	mov	r0, r5
 80081f4:	f000 fa16 	bl	8008624 <__malloc_unlock>
 80081f8:	3408      	adds	r4, #8
 80081fa:	e17d      	b.n	80084f8 <_malloc_r+0x368>
 80081fc:	3302      	adds	r3, #2
 80081fe:	6934      	ldr	r4, [r6, #16]
 8008200:	49a0      	ldr	r1, [pc, #640]	; (8008484 <_malloc_r+0x2f4>)
 8008202:	428c      	cmp	r4, r1
 8008204:	d077      	beq.n	80082f6 <_malloc_r+0x166>
 8008206:	6862      	ldr	r2, [r4, #4]
 8008208:	f022 0c03 	bic.w	ip, r2, #3
 800820c:	ebac 0007 	sub.w	r0, ip, r7
 8008210:	280f      	cmp	r0, #15
 8008212:	dd48      	ble.n	80082a6 <_malloc_r+0x116>
 8008214:	19e2      	adds	r2, r4, r7
 8008216:	f040 0301 	orr.w	r3, r0, #1
 800821a:	f047 0701 	orr.w	r7, r7, #1
 800821e:	6067      	str	r7, [r4, #4]
 8008220:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8008224:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8008228:	6053      	str	r3, [r2, #4]
 800822a:	f844 000c 	str.w	r0, [r4, ip]
 800822e:	e7e0      	b.n	80081f2 <_malloc_r+0x62>
 8008230:	0a7b      	lsrs	r3, r7, #9
 8008232:	d02a      	beq.n	800828a <_malloc_r+0xfa>
 8008234:	2b04      	cmp	r3, #4
 8008236:	d812      	bhi.n	800825e <_malloc_r+0xce>
 8008238:	09bb      	lsrs	r3, r7, #6
 800823a:	3338      	adds	r3, #56	; 0x38
 800823c:	1c5a      	adds	r2, r3, #1
 800823e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8008242:	f1a2 0c08 	sub.w	ip, r2, #8
 8008246:	6854      	ldr	r4, [r2, #4]
 8008248:	4564      	cmp	r4, ip
 800824a:	d006      	beq.n	800825a <_malloc_r+0xca>
 800824c:	6862      	ldr	r2, [r4, #4]
 800824e:	f022 0203 	bic.w	r2, r2, #3
 8008252:	1bd0      	subs	r0, r2, r7
 8008254:	280f      	cmp	r0, #15
 8008256:	dd1c      	ble.n	8008292 <_malloc_r+0x102>
 8008258:	3b01      	subs	r3, #1
 800825a:	3301      	adds	r3, #1
 800825c:	e7cf      	b.n	80081fe <_malloc_r+0x6e>
 800825e:	2b14      	cmp	r3, #20
 8008260:	d801      	bhi.n	8008266 <_malloc_r+0xd6>
 8008262:	335b      	adds	r3, #91	; 0x5b
 8008264:	e7ea      	b.n	800823c <_malloc_r+0xac>
 8008266:	2b54      	cmp	r3, #84	; 0x54
 8008268:	d802      	bhi.n	8008270 <_malloc_r+0xe0>
 800826a:	0b3b      	lsrs	r3, r7, #12
 800826c:	336e      	adds	r3, #110	; 0x6e
 800826e:	e7e5      	b.n	800823c <_malloc_r+0xac>
 8008270:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008274:	d802      	bhi.n	800827c <_malloc_r+0xec>
 8008276:	0bfb      	lsrs	r3, r7, #15
 8008278:	3377      	adds	r3, #119	; 0x77
 800827a:	e7df      	b.n	800823c <_malloc_r+0xac>
 800827c:	f240 5254 	movw	r2, #1364	; 0x554
 8008280:	4293      	cmp	r3, r2
 8008282:	d804      	bhi.n	800828e <_malloc_r+0xfe>
 8008284:	0cbb      	lsrs	r3, r7, #18
 8008286:	337c      	adds	r3, #124	; 0x7c
 8008288:	e7d8      	b.n	800823c <_malloc_r+0xac>
 800828a:	233f      	movs	r3, #63	; 0x3f
 800828c:	e7d6      	b.n	800823c <_malloc_r+0xac>
 800828e:	237e      	movs	r3, #126	; 0x7e
 8008290:	e7d4      	b.n	800823c <_malloc_r+0xac>
 8008292:	2800      	cmp	r0, #0
 8008294:	68e1      	ldr	r1, [r4, #12]
 8008296:	db04      	blt.n	80082a2 <_malloc_r+0x112>
 8008298:	68a3      	ldr	r3, [r4, #8]
 800829a:	60d9      	str	r1, [r3, #12]
 800829c:	608b      	str	r3, [r1, #8]
 800829e:	18a3      	adds	r3, r4, r2
 80082a0:	e7a3      	b.n	80081ea <_malloc_r+0x5a>
 80082a2:	460c      	mov	r4, r1
 80082a4:	e7d0      	b.n	8008248 <_malloc_r+0xb8>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80082ac:	db07      	blt.n	80082be <_malloc_r+0x12e>
 80082ae:	44a4      	add	ip, r4
 80082b0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80082b4:	f043 0301 	orr.w	r3, r3, #1
 80082b8:	f8cc 3004 	str.w	r3, [ip, #4]
 80082bc:	e799      	b.n	80081f2 <_malloc_r+0x62>
 80082be:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80082c2:	6870      	ldr	r0, [r6, #4]
 80082c4:	f080 8096 	bcs.w	80083f4 <_malloc_r+0x264>
 80082c8:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 80082cc:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80082d0:	f04f 0c01 	mov.w	ip, #1
 80082d4:	3201      	adds	r2, #1
 80082d6:	fa0c fc0e 	lsl.w	ip, ip, lr
 80082da:	ea4c 0000 	orr.w	r0, ip, r0
 80082de:	6070      	str	r0, [r6, #4]
 80082e0:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80082e4:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80082e8:	3808      	subs	r0, #8
 80082ea:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80082ee:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80082f2:	f8cc 400c 	str.w	r4, [ip, #12]
 80082f6:	2001      	movs	r0, #1
 80082f8:	109a      	asrs	r2, r3, #2
 80082fa:	fa00 f202 	lsl.w	r2, r0, r2
 80082fe:	6870      	ldr	r0, [r6, #4]
 8008300:	4290      	cmp	r0, r2
 8008302:	d326      	bcc.n	8008352 <_malloc_r+0x1c2>
 8008304:	4210      	tst	r0, r2
 8008306:	d106      	bne.n	8008316 <_malloc_r+0x186>
 8008308:	f023 0303 	bic.w	r3, r3, #3
 800830c:	0052      	lsls	r2, r2, #1
 800830e:	4210      	tst	r0, r2
 8008310:	f103 0304 	add.w	r3, r3, #4
 8008314:	d0fa      	beq.n	800830c <_malloc_r+0x17c>
 8008316:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800831a:	46c1      	mov	r9, r8
 800831c:	469e      	mov	lr, r3
 800831e:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8008322:	454c      	cmp	r4, r9
 8008324:	f040 80ba 	bne.w	800849c <_malloc_r+0x30c>
 8008328:	f10e 0e01 	add.w	lr, lr, #1
 800832c:	f01e 0f03 	tst.w	lr, #3
 8008330:	f109 0908 	add.w	r9, r9, #8
 8008334:	d1f3      	bne.n	800831e <_malloc_r+0x18e>
 8008336:	0798      	lsls	r0, r3, #30
 8008338:	f040 80e4 	bne.w	8008504 <_malloc_r+0x374>
 800833c:	6873      	ldr	r3, [r6, #4]
 800833e:	ea23 0302 	bic.w	r3, r3, r2
 8008342:	6073      	str	r3, [r6, #4]
 8008344:	6870      	ldr	r0, [r6, #4]
 8008346:	0052      	lsls	r2, r2, #1
 8008348:	4290      	cmp	r0, r2
 800834a:	d302      	bcc.n	8008352 <_malloc_r+0x1c2>
 800834c:	2a00      	cmp	r2, #0
 800834e:	f040 80e6 	bne.w	800851e <_malloc_r+0x38e>
 8008352:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8008356:	f8da 3004 	ldr.w	r3, [sl, #4]
 800835a:	f023 0903 	bic.w	r9, r3, #3
 800835e:	45b9      	cmp	r9, r7
 8008360:	d304      	bcc.n	800836c <_malloc_r+0x1dc>
 8008362:	eba9 0207 	sub.w	r2, r9, r7
 8008366:	2a0f      	cmp	r2, #15
 8008368:	f300 8142 	bgt.w	80085f0 <_malloc_r+0x460>
 800836c:	4b46      	ldr	r3, [pc, #280]	; (8008488 <_malloc_r+0x2f8>)
 800836e:	6819      	ldr	r1, [r3, #0]
 8008370:	3110      	adds	r1, #16
 8008372:	4439      	add	r1, r7
 8008374:	2008      	movs	r0, #8
 8008376:	9101      	str	r1, [sp, #4]
 8008378:	f002 fe26 	bl	800afc8 <sysconf>
 800837c:	4a43      	ldr	r2, [pc, #268]	; (800848c <_malloc_r+0x2fc>)
 800837e:	9901      	ldr	r1, [sp, #4]
 8008380:	6813      	ldr	r3, [r2, #0]
 8008382:	3301      	adds	r3, #1
 8008384:	bf1f      	itttt	ne
 8008386:	f101 31ff 	addne.w	r1, r1, #4294967295
 800838a:	1809      	addne	r1, r1, r0
 800838c:	4243      	negne	r3, r0
 800838e:	4019      	andne	r1, r3
 8008390:	4680      	mov	r8, r0
 8008392:	4628      	mov	r0, r5
 8008394:	9101      	str	r1, [sp, #4]
 8008396:	f000 f94b 	bl	8008630 <_sbrk_r>
 800839a:	1c42      	adds	r2, r0, #1
 800839c:	eb0a 0b09 	add.w	fp, sl, r9
 80083a0:	4604      	mov	r4, r0
 80083a2:	f000 80f8 	beq.w	8008596 <_malloc_r+0x406>
 80083a6:	4583      	cmp	fp, r0
 80083a8:	9901      	ldr	r1, [sp, #4]
 80083aa:	4a38      	ldr	r2, [pc, #224]	; (800848c <_malloc_r+0x2fc>)
 80083ac:	d902      	bls.n	80083b4 <_malloc_r+0x224>
 80083ae:	45b2      	cmp	sl, r6
 80083b0:	f040 80f1 	bne.w	8008596 <_malloc_r+0x406>
 80083b4:	4b36      	ldr	r3, [pc, #216]	; (8008490 <_malloc_r+0x300>)
 80083b6:	6818      	ldr	r0, [r3, #0]
 80083b8:	45a3      	cmp	fp, r4
 80083ba:	eb00 0e01 	add.w	lr, r0, r1
 80083be:	f8c3 e000 	str.w	lr, [r3]
 80083c2:	f108 3cff 	add.w	ip, r8, #4294967295
 80083c6:	f040 80ac 	bne.w	8008522 <_malloc_r+0x392>
 80083ca:	ea1b 0f0c 	tst.w	fp, ip
 80083ce:	f040 80a8 	bne.w	8008522 <_malloc_r+0x392>
 80083d2:	68b2      	ldr	r2, [r6, #8]
 80083d4:	4449      	add	r1, r9
 80083d6:	f041 0101 	orr.w	r1, r1, #1
 80083da:	6051      	str	r1, [r2, #4]
 80083dc:	4a2d      	ldr	r2, [pc, #180]	; (8008494 <_malloc_r+0x304>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6811      	ldr	r1, [r2, #0]
 80083e2:	428b      	cmp	r3, r1
 80083e4:	bf88      	it	hi
 80083e6:	6013      	strhi	r3, [r2, #0]
 80083e8:	4a2b      	ldr	r2, [pc, #172]	; (8008498 <_malloc_r+0x308>)
 80083ea:	6811      	ldr	r1, [r2, #0]
 80083ec:	428b      	cmp	r3, r1
 80083ee:	bf88      	it	hi
 80083f0:	6013      	strhi	r3, [r2, #0]
 80083f2:	e0d0      	b.n	8008596 <_malloc_r+0x406>
 80083f4:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80083f8:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80083fc:	d218      	bcs.n	8008430 <_malloc_r+0x2a0>
 80083fe:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8008402:	3238      	adds	r2, #56	; 0x38
 8008404:	f102 0e01 	add.w	lr, r2, #1
 8008408:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800840c:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8008410:	45f0      	cmp	r8, lr
 8008412:	d12b      	bne.n	800846c <_malloc_r+0x2dc>
 8008414:	1092      	asrs	r2, r2, #2
 8008416:	f04f 0c01 	mov.w	ip, #1
 800841a:	fa0c f202 	lsl.w	r2, ip, r2
 800841e:	4310      	orrs	r0, r2
 8008420:	6070      	str	r0, [r6, #4]
 8008422:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8008426:	f8c8 4008 	str.w	r4, [r8, #8]
 800842a:	f8ce 400c 	str.w	r4, [lr, #12]
 800842e:	e762      	b.n	80082f6 <_malloc_r+0x166>
 8008430:	2a14      	cmp	r2, #20
 8008432:	d801      	bhi.n	8008438 <_malloc_r+0x2a8>
 8008434:	325b      	adds	r2, #91	; 0x5b
 8008436:	e7e5      	b.n	8008404 <_malloc_r+0x274>
 8008438:	2a54      	cmp	r2, #84	; 0x54
 800843a:	d803      	bhi.n	8008444 <_malloc_r+0x2b4>
 800843c:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8008440:	326e      	adds	r2, #110	; 0x6e
 8008442:	e7df      	b.n	8008404 <_malloc_r+0x274>
 8008444:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008448:	d803      	bhi.n	8008452 <_malloc_r+0x2c2>
 800844a:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800844e:	3277      	adds	r2, #119	; 0x77
 8008450:	e7d8      	b.n	8008404 <_malloc_r+0x274>
 8008452:	f240 5e54 	movw	lr, #1364	; 0x554
 8008456:	4572      	cmp	r2, lr
 8008458:	bf9a      	itte	ls
 800845a:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800845e:	327c      	addls	r2, #124	; 0x7c
 8008460:	227e      	movhi	r2, #126	; 0x7e
 8008462:	e7cf      	b.n	8008404 <_malloc_r+0x274>
 8008464:	f8de e008 	ldr.w	lr, [lr, #8]
 8008468:	45f0      	cmp	r8, lr
 800846a:	d005      	beq.n	8008478 <_malloc_r+0x2e8>
 800846c:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008470:	f022 0203 	bic.w	r2, r2, #3
 8008474:	4562      	cmp	r2, ip
 8008476:	d8f5      	bhi.n	8008464 <_malloc_r+0x2d4>
 8008478:	f8de 800c 	ldr.w	r8, [lr, #12]
 800847c:	e7d1      	b.n	8008422 <_malloc_r+0x292>
 800847e:	bf00      	nop
 8008480:	20000440 	.word	0x20000440
 8008484:	20000448 	.word	0x20000448
 8008488:	200011a0 	.word	0x200011a0
 800848c:	20000848 	.word	0x20000848
 8008490:	20001170 	.word	0x20001170
 8008494:	20001198 	.word	0x20001198
 8008498:	2000119c 	.word	0x2000119c
 800849c:	6860      	ldr	r0, [r4, #4]
 800849e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80084a2:	f020 0003 	bic.w	r0, r0, #3
 80084a6:	eba0 0a07 	sub.w	sl, r0, r7
 80084aa:	f1ba 0f0f 	cmp.w	sl, #15
 80084ae:	dd12      	ble.n	80084d6 <_malloc_r+0x346>
 80084b0:	68a3      	ldr	r3, [r4, #8]
 80084b2:	19e2      	adds	r2, r4, r7
 80084b4:	f047 0701 	orr.w	r7, r7, #1
 80084b8:	6067      	str	r7, [r4, #4]
 80084ba:	f8c3 c00c 	str.w	ip, [r3, #12]
 80084be:	f8cc 3008 	str.w	r3, [ip, #8]
 80084c2:	f04a 0301 	orr.w	r3, sl, #1
 80084c6:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80084ca:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80084ce:	6053      	str	r3, [r2, #4]
 80084d0:	f844 a000 	str.w	sl, [r4, r0]
 80084d4:	e68d      	b.n	80081f2 <_malloc_r+0x62>
 80084d6:	f1ba 0f00 	cmp.w	sl, #0
 80084da:	db11      	blt.n	8008500 <_malloc_r+0x370>
 80084dc:	4420      	add	r0, r4
 80084de:	6843      	ldr	r3, [r0, #4]
 80084e0:	f043 0301 	orr.w	r3, r3, #1
 80084e4:	6043      	str	r3, [r0, #4]
 80084e6:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80084ea:	4628      	mov	r0, r5
 80084ec:	f8c3 c00c 	str.w	ip, [r3, #12]
 80084f0:	f8cc 3008 	str.w	r3, [ip, #8]
 80084f4:	f000 f896 	bl	8008624 <__malloc_unlock>
 80084f8:	4620      	mov	r0, r4
 80084fa:	b003      	add	sp, #12
 80084fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008500:	4664      	mov	r4, ip
 8008502:	e70e      	b.n	8008322 <_malloc_r+0x192>
 8008504:	f858 0908 	ldr.w	r0, [r8], #-8
 8008508:	4540      	cmp	r0, r8
 800850a:	f103 33ff 	add.w	r3, r3, #4294967295
 800850e:	f43f af12 	beq.w	8008336 <_malloc_r+0x1a6>
 8008512:	e717      	b.n	8008344 <_malloc_r+0x1b4>
 8008514:	3304      	adds	r3, #4
 8008516:	0052      	lsls	r2, r2, #1
 8008518:	4210      	tst	r0, r2
 800851a:	d0fb      	beq.n	8008514 <_malloc_r+0x384>
 800851c:	e6fb      	b.n	8008316 <_malloc_r+0x186>
 800851e:	4673      	mov	r3, lr
 8008520:	e7fa      	b.n	8008518 <_malloc_r+0x388>
 8008522:	6810      	ldr	r0, [r2, #0]
 8008524:	3001      	adds	r0, #1
 8008526:	bf1b      	ittet	ne
 8008528:	eba4 0b0b 	subne.w	fp, r4, fp
 800852c:	eb0b 020e 	addne.w	r2, fp, lr
 8008530:	6014      	streq	r4, [r2, #0]
 8008532:	601a      	strne	r2, [r3, #0]
 8008534:	f014 0b07 	ands.w	fp, r4, #7
 8008538:	bf1a      	itte	ne
 800853a:	f1cb 0008 	rsbne	r0, fp, #8
 800853e:	1824      	addne	r4, r4, r0
 8008540:	4658      	moveq	r0, fp
 8008542:	1862      	adds	r2, r4, r1
 8008544:	ea02 010c 	and.w	r1, r2, ip
 8008548:	4480      	add	r8, r0
 800854a:	eba8 0801 	sub.w	r8, r8, r1
 800854e:	ea08 080c 	and.w	r8, r8, ip
 8008552:	4641      	mov	r1, r8
 8008554:	4628      	mov	r0, r5
 8008556:	9201      	str	r2, [sp, #4]
 8008558:	f000 f86a 	bl	8008630 <_sbrk_r>
 800855c:	1c43      	adds	r3, r0, #1
 800855e:	9a01      	ldr	r2, [sp, #4]
 8008560:	4b28      	ldr	r3, [pc, #160]	; (8008604 <_malloc_r+0x474>)
 8008562:	d107      	bne.n	8008574 <_malloc_r+0x3e4>
 8008564:	f1bb 0f00 	cmp.w	fp, #0
 8008568:	d023      	beq.n	80085b2 <_malloc_r+0x422>
 800856a:	f1ab 0008 	sub.w	r0, fp, #8
 800856e:	4410      	add	r0, r2
 8008570:	f04f 0800 	mov.w	r8, #0
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	60b4      	str	r4, [r6, #8]
 8008578:	1b00      	subs	r0, r0, r4
 800857a:	4440      	add	r0, r8
 800857c:	4442      	add	r2, r8
 800857e:	f040 0001 	orr.w	r0, r0, #1
 8008582:	45b2      	cmp	sl, r6
 8008584:	601a      	str	r2, [r3, #0]
 8008586:	6060      	str	r0, [r4, #4]
 8008588:	f43f af28 	beq.w	80083dc <_malloc_r+0x24c>
 800858c:	f1b9 0f0f 	cmp.w	r9, #15
 8008590:	d812      	bhi.n	80085b8 <_malloc_r+0x428>
 8008592:	2301      	movs	r3, #1
 8008594:	6063      	str	r3, [r4, #4]
 8008596:	68b3      	ldr	r3, [r6, #8]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	f023 0303 	bic.w	r3, r3, #3
 800859e:	42bb      	cmp	r3, r7
 80085a0:	eba3 0207 	sub.w	r2, r3, r7
 80085a4:	d301      	bcc.n	80085aa <_malloc_r+0x41a>
 80085a6:	2a0f      	cmp	r2, #15
 80085a8:	dc22      	bgt.n	80085f0 <_malloc_r+0x460>
 80085aa:	4628      	mov	r0, r5
 80085ac:	f000 f83a 	bl	8008624 <__malloc_unlock>
 80085b0:	e5fa      	b.n	80081a8 <_malloc_r+0x18>
 80085b2:	4610      	mov	r0, r2
 80085b4:	46d8      	mov	r8, fp
 80085b6:	e7dd      	b.n	8008574 <_malloc_r+0x3e4>
 80085b8:	f8da 2004 	ldr.w	r2, [sl, #4]
 80085bc:	f1a9 090c 	sub.w	r9, r9, #12
 80085c0:	f029 0907 	bic.w	r9, r9, #7
 80085c4:	f002 0201 	and.w	r2, r2, #1
 80085c8:	ea42 0209 	orr.w	r2, r2, r9
 80085cc:	f8ca 2004 	str.w	r2, [sl, #4]
 80085d0:	2105      	movs	r1, #5
 80085d2:	eb0a 0209 	add.w	r2, sl, r9
 80085d6:	f1b9 0f0f 	cmp.w	r9, #15
 80085da:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80085de:	f67f aefd 	bls.w	80083dc <_malloc_r+0x24c>
 80085e2:	f10a 0108 	add.w	r1, sl, #8
 80085e6:	4628      	mov	r0, r5
 80085e8:	f003 fbf8 	bl	800bddc <_free_r>
 80085ec:	4b05      	ldr	r3, [pc, #20]	; (8008604 <_malloc_r+0x474>)
 80085ee:	e6f5      	b.n	80083dc <_malloc_r+0x24c>
 80085f0:	68b4      	ldr	r4, [r6, #8]
 80085f2:	f047 0301 	orr.w	r3, r7, #1
 80085f6:	4427      	add	r7, r4
 80085f8:	f042 0201 	orr.w	r2, r2, #1
 80085fc:	6063      	str	r3, [r4, #4]
 80085fe:	60b7      	str	r7, [r6, #8]
 8008600:	607a      	str	r2, [r7, #4]
 8008602:	e5f6      	b.n	80081f2 <_malloc_r+0x62>
 8008604:	20001170 	.word	0x20001170

08008608 <memset>:
 8008608:	4402      	add	r2, r0
 800860a:	4603      	mov	r3, r0
 800860c:	4293      	cmp	r3, r2
 800860e:	d100      	bne.n	8008612 <memset+0xa>
 8008610:	4770      	bx	lr
 8008612:	f803 1b01 	strb.w	r1, [r3], #1
 8008616:	e7f9      	b.n	800860c <memset+0x4>

08008618 <__malloc_lock>:
 8008618:	4801      	ldr	r0, [pc, #4]	; (8008620 <__malloc_lock+0x8>)
 800861a:	f003 bcb9 	b.w	800bf90 <__retarget_lock_acquire_recursive>
 800861e:	bf00      	nop
 8008620:	200011a5 	.word	0x200011a5

08008624 <__malloc_unlock>:
 8008624:	4801      	ldr	r0, [pc, #4]	; (800862c <__malloc_unlock+0x8>)
 8008626:	f003 bcb4 	b.w	800bf92 <__retarget_lock_release_recursive>
 800862a:	bf00      	nop
 800862c:	200011a5 	.word	0x200011a5

08008630 <_sbrk_r>:
 8008630:	b538      	push	{r3, r4, r5, lr}
 8008632:	4d06      	ldr	r5, [pc, #24]	; (800864c <_sbrk_r+0x1c>)
 8008634:	2300      	movs	r3, #0
 8008636:	4604      	mov	r4, r0
 8008638:	4608      	mov	r0, r1
 800863a:	602b      	str	r3, [r5, #0]
 800863c:	f7fb fa3a 	bl	8003ab4 <_sbrk>
 8008640:	1c43      	adds	r3, r0, #1
 8008642:	d102      	bne.n	800864a <_sbrk_r+0x1a>
 8008644:	682b      	ldr	r3, [r5, #0]
 8008646:	b103      	cbz	r3, 800864a <_sbrk_r+0x1a>
 8008648:	6023      	str	r3, [r4, #0]
 800864a:	bd38      	pop	{r3, r4, r5, pc}
 800864c:	200011a8 	.word	0x200011a8

08008650 <sprintf>:
 8008650:	b40e      	push	{r1, r2, r3}
 8008652:	b500      	push	{lr}
 8008654:	b09c      	sub	sp, #112	; 0x70
 8008656:	ab1d      	add	r3, sp, #116	; 0x74
 8008658:	9002      	str	r0, [sp, #8]
 800865a:	9006      	str	r0, [sp, #24]
 800865c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008660:	4809      	ldr	r0, [pc, #36]	; (8008688 <sprintf+0x38>)
 8008662:	9107      	str	r1, [sp, #28]
 8008664:	9104      	str	r1, [sp, #16]
 8008666:	4909      	ldr	r1, [pc, #36]	; (800868c <sprintf+0x3c>)
 8008668:	f853 2b04 	ldr.w	r2, [r3], #4
 800866c:	9105      	str	r1, [sp, #20]
 800866e:	6800      	ldr	r0, [r0, #0]
 8008670:	9301      	str	r3, [sp, #4]
 8008672:	a902      	add	r1, sp, #8
 8008674:	f000 f920 	bl	80088b8 <_svfprintf_r>
 8008678:	9b02      	ldr	r3, [sp, #8]
 800867a:	2200      	movs	r2, #0
 800867c:	701a      	strb	r2, [r3, #0]
 800867e:	b01c      	add	sp, #112	; 0x70
 8008680:	f85d eb04 	ldr.w	lr, [sp], #4
 8008684:	b003      	add	sp, #12
 8008686:	4770      	bx	lr
 8008688:	20000010 	.word	0x20000010
 800868c:	ffff0208 	.word	0xffff0208

08008690 <sscanf>:
 8008690:	b40e      	push	{r1, r2, r3}
 8008692:	b510      	push	{r4, lr}
 8008694:	b09f      	sub	sp, #124	; 0x7c
 8008696:	ac21      	add	r4, sp, #132	; 0x84
 8008698:	f44f 7101 	mov.w	r1, #516	; 0x204
 800869c:	f854 2b04 	ldr.w	r2, [r4], #4
 80086a0:	9201      	str	r2, [sp, #4]
 80086a2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80086a6:	9004      	str	r0, [sp, #16]
 80086a8:	9008      	str	r0, [sp, #32]
 80086aa:	f7f7 fd99 	bl	80001e0 <strlen>
 80086ae:	4b0c      	ldr	r3, [pc, #48]	; (80086e0 <sscanf+0x50>)
 80086b0:	9005      	str	r0, [sp, #20]
 80086b2:	9009      	str	r0, [sp, #36]	; 0x24
 80086b4:	930c      	str	r3, [sp, #48]	; 0x30
 80086b6:	480b      	ldr	r0, [pc, #44]	; (80086e4 <sscanf+0x54>)
 80086b8:	9a01      	ldr	r2, [sp, #4]
 80086ba:	6800      	ldr	r0, [r0, #0]
 80086bc:	9403      	str	r4, [sp, #12]
 80086be:	2300      	movs	r3, #0
 80086c0:	9310      	str	r3, [sp, #64]	; 0x40
 80086c2:	9315      	str	r3, [sp, #84]	; 0x54
 80086c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086c8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80086cc:	a904      	add	r1, sp, #16
 80086ce:	4623      	mov	r3, r4
 80086d0:	f001 fad6 	bl	8009c80 <__ssvfscanf_r>
 80086d4:	b01f      	add	sp, #124	; 0x7c
 80086d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086da:	b003      	add	sp, #12
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	0800870b 	.word	0x0800870b
 80086e4:	20000010 	.word	0x20000010

080086e8 <__sread>:
 80086e8:	b510      	push	{r4, lr}
 80086ea:	460c      	mov	r4, r1
 80086ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f0:	f004 f910 	bl	800c914 <_read_r>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	bfab      	itete	ge
 80086f8:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 80086fa:	89a3      	ldrhlt	r3, [r4, #12]
 80086fc:	181b      	addge	r3, r3, r0
 80086fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008702:	bfac      	ite	ge
 8008704:	6523      	strge	r3, [r4, #80]	; 0x50
 8008706:	81a3      	strhlt	r3, [r4, #12]
 8008708:	bd10      	pop	{r4, pc}

0800870a <__seofread>:
 800870a:	2000      	movs	r0, #0
 800870c:	4770      	bx	lr

0800870e <__swrite>:
 800870e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008712:	461f      	mov	r7, r3
 8008714:	898b      	ldrh	r3, [r1, #12]
 8008716:	05db      	lsls	r3, r3, #23
 8008718:	4605      	mov	r5, r0
 800871a:	460c      	mov	r4, r1
 800871c:	4616      	mov	r6, r2
 800871e:	d505      	bpl.n	800872c <__swrite+0x1e>
 8008720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008724:	2302      	movs	r3, #2
 8008726:	2200      	movs	r2, #0
 8008728:	f003 fc34 	bl	800bf94 <_lseek_r>
 800872c:	89a3      	ldrh	r3, [r4, #12]
 800872e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008736:	81a3      	strh	r3, [r4, #12]
 8008738:	4632      	mov	r2, r6
 800873a:	463b      	mov	r3, r7
 800873c:	4628      	mov	r0, r5
 800873e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008742:	f002 bc4f 	b.w	800afe4 <_write_r>

08008746 <__sseek>:
 8008746:	b510      	push	{r4, lr}
 8008748:	460c      	mov	r4, r1
 800874a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800874e:	f003 fc21 	bl	800bf94 <_lseek_r>
 8008752:	1c43      	adds	r3, r0, #1
 8008754:	89a3      	ldrh	r3, [r4, #12]
 8008756:	bf15      	itete	ne
 8008758:	6520      	strne	r0, [r4, #80]	; 0x50
 800875a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800875e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008762:	81a3      	strheq	r3, [r4, #12]
 8008764:	bf18      	it	ne
 8008766:	81a3      	strhne	r3, [r4, #12]
 8008768:	bd10      	pop	{r4, pc}

0800876a <__sclose>:
 800876a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876e:	f002 bc5b 	b.w	800b028 <_close_r>

08008772 <strncmp>:
 8008772:	b510      	push	{r4, lr}
 8008774:	b17a      	cbz	r2, 8008796 <strncmp+0x24>
 8008776:	4603      	mov	r3, r0
 8008778:	3901      	subs	r1, #1
 800877a:	1884      	adds	r4, r0, r2
 800877c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008780:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008784:	4290      	cmp	r0, r2
 8008786:	d101      	bne.n	800878c <strncmp+0x1a>
 8008788:	42a3      	cmp	r3, r4
 800878a:	d101      	bne.n	8008790 <strncmp+0x1e>
 800878c:	1a80      	subs	r0, r0, r2
 800878e:	bd10      	pop	{r4, pc}
 8008790:	2800      	cmp	r0, #0
 8008792:	d1f3      	bne.n	800877c <strncmp+0xa>
 8008794:	e7fa      	b.n	800878c <strncmp+0x1a>
 8008796:	4610      	mov	r0, r2
 8008798:	e7f9      	b.n	800878e <strncmp+0x1c>
	...

0800879c <_strtol_l.constprop.0>:
 800879c:	2b01      	cmp	r3, #1
 800879e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087a2:	d001      	beq.n	80087a8 <_strtol_l.constprop.0+0xc>
 80087a4:	2b24      	cmp	r3, #36	; 0x24
 80087a6:	d906      	bls.n	80087b6 <_strtol_l.constprop.0+0x1a>
 80087a8:	f7ff fcb8 	bl	800811c <__errno>
 80087ac:	2316      	movs	r3, #22
 80087ae:	6003      	str	r3, [r0, #0]
 80087b0:	2000      	movs	r0, #0
 80087b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800889c <_strtol_l.constprop.0+0x100>
 80087ba:	460d      	mov	r5, r1
 80087bc:	462e      	mov	r6, r5
 80087be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087c2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80087c6:	f017 0708 	ands.w	r7, r7, #8
 80087ca:	d1f7      	bne.n	80087bc <_strtol_l.constprop.0+0x20>
 80087cc:	2c2d      	cmp	r4, #45	; 0x2d
 80087ce:	d132      	bne.n	8008836 <_strtol_l.constprop.0+0x9a>
 80087d0:	782c      	ldrb	r4, [r5, #0]
 80087d2:	2701      	movs	r7, #1
 80087d4:	1cb5      	adds	r5, r6, #2
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d05b      	beq.n	8008892 <_strtol_l.constprop.0+0xf6>
 80087da:	2b10      	cmp	r3, #16
 80087dc:	d109      	bne.n	80087f2 <_strtol_l.constprop.0+0x56>
 80087de:	2c30      	cmp	r4, #48	; 0x30
 80087e0:	d107      	bne.n	80087f2 <_strtol_l.constprop.0+0x56>
 80087e2:	782c      	ldrb	r4, [r5, #0]
 80087e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80087e8:	2c58      	cmp	r4, #88	; 0x58
 80087ea:	d14d      	bne.n	8008888 <_strtol_l.constprop.0+0xec>
 80087ec:	786c      	ldrb	r4, [r5, #1]
 80087ee:	2310      	movs	r3, #16
 80087f0:	3502      	adds	r5, #2
 80087f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80087f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80087fa:	f04f 0c00 	mov.w	ip, #0
 80087fe:	fbb8 f9f3 	udiv	r9, r8, r3
 8008802:	4666      	mov	r6, ip
 8008804:	fb03 8a19 	mls	sl, r3, r9, r8
 8008808:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800880c:	f1be 0f09 	cmp.w	lr, #9
 8008810:	d816      	bhi.n	8008840 <_strtol_l.constprop.0+0xa4>
 8008812:	4674      	mov	r4, lr
 8008814:	42a3      	cmp	r3, r4
 8008816:	dd24      	ble.n	8008862 <_strtol_l.constprop.0+0xc6>
 8008818:	f1bc 0f00 	cmp.w	ip, #0
 800881c:	db1e      	blt.n	800885c <_strtol_l.constprop.0+0xc0>
 800881e:	45b1      	cmp	r9, r6
 8008820:	d31c      	bcc.n	800885c <_strtol_l.constprop.0+0xc0>
 8008822:	d101      	bne.n	8008828 <_strtol_l.constprop.0+0x8c>
 8008824:	45a2      	cmp	sl, r4
 8008826:	db19      	blt.n	800885c <_strtol_l.constprop.0+0xc0>
 8008828:	fb06 4603 	mla	r6, r6, r3, r4
 800882c:	f04f 0c01 	mov.w	ip, #1
 8008830:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008834:	e7e8      	b.n	8008808 <_strtol_l.constprop.0+0x6c>
 8008836:	2c2b      	cmp	r4, #43	; 0x2b
 8008838:	bf04      	itt	eq
 800883a:	782c      	ldrbeq	r4, [r5, #0]
 800883c:	1cb5      	addeq	r5, r6, #2
 800883e:	e7ca      	b.n	80087d6 <_strtol_l.constprop.0+0x3a>
 8008840:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008844:	f1be 0f19 	cmp.w	lr, #25
 8008848:	d801      	bhi.n	800884e <_strtol_l.constprop.0+0xb2>
 800884a:	3c37      	subs	r4, #55	; 0x37
 800884c:	e7e2      	b.n	8008814 <_strtol_l.constprop.0+0x78>
 800884e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008852:	f1be 0f19 	cmp.w	lr, #25
 8008856:	d804      	bhi.n	8008862 <_strtol_l.constprop.0+0xc6>
 8008858:	3c57      	subs	r4, #87	; 0x57
 800885a:	e7db      	b.n	8008814 <_strtol_l.constprop.0+0x78>
 800885c:	f04f 3cff 	mov.w	ip, #4294967295
 8008860:	e7e6      	b.n	8008830 <_strtol_l.constprop.0+0x94>
 8008862:	f1bc 0f00 	cmp.w	ip, #0
 8008866:	da05      	bge.n	8008874 <_strtol_l.constprop.0+0xd8>
 8008868:	2322      	movs	r3, #34	; 0x22
 800886a:	6003      	str	r3, [r0, #0]
 800886c:	4646      	mov	r6, r8
 800886e:	b942      	cbnz	r2, 8008882 <_strtol_l.constprop.0+0xe6>
 8008870:	4630      	mov	r0, r6
 8008872:	e79e      	b.n	80087b2 <_strtol_l.constprop.0+0x16>
 8008874:	b107      	cbz	r7, 8008878 <_strtol_l.constprop.0+0xdc>
 8008876:	4276      	negs	r6, r6
 8008878:	2a00      	cmp	r2, #0
 800887a:	d0f9      	beq.n	8008870 <_strtol_l.constprop.0+0xd4>
 800887c:	f1bc 0f00 	cmp.w	ip, #0
 8008880:	d000      	beq.n	8008884 <_strtol_l.constprop.0+0xe8>
 8008882:	1e69      	subs	r1, r5, #1
 8008884:	6011      	str	r1, [r2, #0]
 8008886:	e7f3      	b.n	8008870 <_strtol_l.constprop.0+0xd4>
 8008888:	2430      	movs	r4, #48	; 0x30
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1b1      	bne.n	80087f2 <_strtol_l.constprop.0+0x56>
 800888e:	2308      	movs	r3, #8
 8008890:	e7af      	b.n	80087f2 <_strtol_l.constprop.0+0x56>
 8008892:	2c30      	cmp	r4, #48	; 0x30
 8008894:	d0a5      	beq.n	80087e2 <_strtol_l.constprop.0+0x46>
 8008896:	230a      	movs	r3, #10
 8008898:	e7ab      	b.n	80087f2 <_strtol_l.constprop.0+0x56>
 800889a:	bf00      	nop
 800889c:	08010009 	.word	0x08010009

080088a0 <_strtol_r>:
 80088a0:	f7ff bf7c 	b.w	800879c <_strtol_l.constprop.0>

080088a4 <strtol>:
 80088a4:	4613      	mov	r3, r2
 80088a6:	460a      	mov	r2, r1
 80088a8:	4601      	mov	r1, r0
 80088aa:	4802      	ldr	r0, [pc, #8]	; (80088b4 <strtol+0x10>)
 80088ac:	6800      	ldr	r0, [r0, #0]
 80088ae:	f7ff bf75 	b.w	800879c <_strtol_l.constprop.0>
 80088b2:	bf00      	nop
 80088b4:	20000010 	.word	0x20000010

080088b8 <_svfprintf_r>:
 80088b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088bc:	ed2d 8b04 	vpush	{d8-d9}
 80088c0:	b0cf      	sub	sp, #316	; 0x13c
 80088c2:	4688      	mov	r8, r1
 80088c4:	4691      	mov	r9, r2
 80088c6:	461e      	mov	r6, r3
 80088c8:	4682      	mov	sl, r0
 80088ca:	f003 fb5b 	bl	800bf84 <_localeconv_r>
 80088ce:	6803      	ldr	r3, [r0, #0]
 80088d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7f7 fc84 	bl	80001e0 <strlen>
 80088d8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80088dc:	900d      	str	r0, [sp, #52]	; 0x34
 80088de:	0618      	lsls	r0, r3, #24
 80088e0:	d51a      	bpl.n	8008918 <_svfprintf_r+0x60>
 80088e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80088e6:	b9bb      	cbnz	r3, 8008918 <_svfprintf_r+0x60>
 80088e8:	2140      	movs	r1, #64	; 0x40
 80088ea:	4650      	mov	r0, sl
 80088ec:	f7ff fc50 	bl	8008190 <_malloc_r>
 80088f0:	f8c8 0000 	str.w	r0, [r8]
 80088f4:	f8c8 0010 	str.w	r0, [r8, #16]
 80088f8:	b958      	cbnz	r0, 8008912 <_svfprintf_r+0x5a>
 80088fa:	230c      	movs	r3, #12
 80088fc:	f8ca 3000 	str.w	r3, [sl]
 8008900:	f04f 33ff 	mov.w	r3, #4294967295
 8008904:	930c      	str	r3, [sp, #48]	; 0x30
 8008906:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008908:	b04f      	add	sp, #316	; 0x13c
 800890a:	ecbd 8b04 	vpop	{d8-d9}
 800890e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008912:	2340      	movs	r3, #64	; 0x40
 8008914:	f8c8 3014 	str.w	r3, [r8, #20]
 8008918:	ed9f 7b93 	vldr	d7, [pc, #588]	; 8008b68 <_svfprintf_r+0x2b0>
 800891c:	2500      	movs	r5, #0
 800891e:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 8008922:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8008926:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 800892a:	ac25      	add	r4, sp, #148	; 0x94
 800892c:	9422      	str	r4, [sp, #136]	; 0x88
 800892e:	9505      	str	r5, [sp, #20]
 8008930:	950a      	str	r5, [sp, #40]	; 0x28
 8008932:	9512      	str	r5, [sp, #72]	; 0x48
 8008934:	9514      	str	r5, [sp, #80]	; 0x50
 8008936:	950c      	str	r5, [sp, #48]	; 0x30
 8008938:	464b      	mov	r3, r9
 800893a:	461d      	mov	r5, r3
 800893c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008940:	b10a      	cbz	r2, 8008946 <_svfprintf_r+0x8e>
 8008942:	2a25      	cmp	r2, #37	; 0x25
 8008944:	d1f9      	bne.n	800893a <_svfprintf_r+0x82>
 8008946:	ebb5 0709 	subs.w	r7, r5, r9
 800894a:	d00d      	beq.n	8008968 <_svfprintf_r+0xb0>
 800894c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800894e:	443b      	add	r3, r7
 8008950:	9324      	str	r3, [sp, #144]	; 0x90
 8008952:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008954:	3301      	adds	r3, #1
 8008956:	2b07      	cmp	r3, #7
 8008958:	e9c4 9700 	strd	r9, r7, [r4]
 800895c:	9323      	str	r3, [sp, #140]	; 0x8c
 800895e:	dc79      	bgt.n	8008a54 <_svfprintf_r+0x19c>
 8008960:	3408      	adds	r4, #8
 8008962:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008964:	443b      	add	r3, r7
 8008966:	930c      	str	r3, [sp, #48]	; 0x30
 8008968:	782b      	ldrb	r3, [r5, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	f001 8148 	beq.w	8009c00 <_svfprintf_r+0x1348>
 8008970:	2300      	movs	r3, #0
 8008972:	f04f 32ff 	mov.w	r2, #4294967295
 8008976:	9204      	str	r2, [sp, #16]
 8008978:	3501      	adds	r5, #1
 800897a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800897e:	9310      	str	r3, [sp, #64]	; 0x40
 8008980:	469b      	mov	fp, r3
 8008982:	270a      	movs	r7, #10
 8008984:	222b      	movs	r2, #43	; 0x2b
 8008986:	462b      	mov	r3, r5
 8008988:	f813 1b01 	ldrb.w	r1, [r3], #1
 800898c:	9106      	str	r1, [sp, #24]
 800898e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008990:	9b06      	ldr	r3, [sp, #24]
 8008992:	3b20      	subs	r3, #32
 8008994:	2b5a      	cmp	r3, #90	; 0x5a
 8008996:	f200 85bf 	bhi.w	8009518 <_svfprintf_r+0xc60>
 800899a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800899e:	007e      	.short	0x007e
 80089a0:	05bd05bd 	.word	0x05bd05bd
 80089a4:	05bd0086 	.word	0x05bd0086
 80089a8:	05bd05bd 	.word	0x05bd05bd
 80089ac:	05bd0065 	.word	0x05bd0065
 80089b0:	008905bd 	.word	0x008905bd
 80089b4:	05bd0093 	.word	0x05bd0093
 80089b8:	00960090 	.word	0x00960090
 80089bc:	00b305bd 	.word	0x00b305bd
 80089c0:	00b600b6 	.word	0x00b600b6
 80089c4:	00b600b6 	.word	0x00b600b6
 80089c8:	00b600b6 	.word	0x00b600b6
 80089cc:	00b600b6 	.word	0x00b600b6
 80089d0:	05bd00b6 	.word	0x05bd00b6
 80089d4:	05bd05bd 	.word	0x05bd05bd
 80089d8:	05bd05bd 	.word	0x05bd05bd
 80089dc:	05bd05bd 	.word	0x05bd05bd
 80089e0:	05bd012c 	.word	0x05bd012c
 80089e4:	00fc00e9 	.word	0x00fc00e9
 80089e8:	012c012c 	.word	0x012c012c
 80089ec:	05bd012c 	.word	0x05bd012c
 80089f0:	05bd05bd 	.word	0x05bd05bd
 80089f4:	00c605bd 	.word	0x00c605bd
 80089f8:	05bd05bd 	.word	0x05bd05bd
 80089fc:	05bd0498 	.word	0x05bd0498
 8008a00:	05bd05bd 	.word	0x05bd05bd
 8008a04:	05bd04e2 	.word	0x05bd04e2
 8008a08:	05bd0503 	.word	0x05bd0503
 8008a0c:	052505bd 	.word	0x052505bd
 8008a10:	05bd05bd 	.word	0x05bd05bd
 8008a14:	05bd05bd 	.word	0x05bd05bd
 8008a18:	05bd05bd 	.word	0x05bd05bd
 8008a1c:	05bd05bd 	.word	0x05bd05bd
 8008a20:	05bd012c 	.word	0x05bd012c
 8008a24:	00fe00e9 	.word	0x00fe00e9
 8008a28:	012c012c 	.word	0x012c012c
 8008a2c:	00c9012c 	.word	0x00c9012c
 8008a30:	00dd00fe 	.word	0x00dd00fe
 8008a34:	00d605bd 	.word	0x00d605bd
 8008a38:	047305bd 	.word	0x047305bd
 8008a3c:	04d0049a 	.word	0x04d0049a
 8008a40:	05bd00dd 	.word	0x05bd00dd
 8008a44:	007c04e2 	.word	0x007c04e2
 8008a48:	05bd0505 	.word	0x05bd0505
 8008a4c:	054405bd 	.word	0x054405bd
 8008a50:	007c05bd 	.word	0x007c05bd
 8008a54:	aa22      	add	r2, sp, #136	; 0x88
 8008a56:	4641      	mov	r1, r8
 8008a58:	4650      	mov	r0, sl
 8008a5a:	f005 f973 	bl	800dd44 <__ssprint_r>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	f040 8137 	bne.w	8008cd2 <_svfprintf_r+0x41a>
 8008a64:	ac25      	add	r4, sp, #148	; 0x94
 8008a66:	e77c      	b.n	8008962 <_svfprintf_r+0xaa>
 8008a68:	4650      	mov	r0, sl
 8008a6a:	f003 fa8b 	bl	800bf84 <_localeconv_r>
 8008a6e:	6843      	ldr	r3, [r0, #4]
 8008a70:	9314      	str	r3, [sp, #80]	; 0x50
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7f7 fbb4 	bl	80001e0 <strlen>
 8008a78:	9012      	str	r0, [sp, #72]	; 0x48
 8008a7a:	4650      	mov	r0, sl
 8008a7c:	f003 fa82 	bl	800bf84 <_localeconv_r>
 8008a80:	6883      	ldr	r3, [r0, #8]
 8008a82:	930a      	str	r3, [sp, #40]	; 0x28
 8008a84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a86:	222b      	movs	r2, #43	; 0x2b
 8008a88:	b12b      	cbz	r3, 8008a96 <_svfprintf_r+0x1de>
 8008a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a8c:	b11b      	cbz	r3, 8008a96 <_svfprintf_r+0x1de>
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	b10b      	cbz	r3, 8008a96 <_svfprintf_r+0x1de>
 8008a92:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 8008a96:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008a98:	e775      	b.n	8008986 <_svfprintf_r+0xce>
 8008a9a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1f9      	bne.n	8008a96 <_svfprintf_r+0x1de>
 8008aa2:	2320      	movs	r3, #32
 8008aa4:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8008aa8:	e7f5      	b.n	8008a96 <_svfprintf_r+0x1de>
 8008aaa:	f04b 0b01 	orr.w	fp, fp, #1
 8008aae:	e7f2      	b.n	8008a96 <_svfprintf_r+0x1de>
 8008ab0:	f856 3b04 	ldr.w	r3, [r6], #4
 8008ab4:	9310      	str	r3, [sp, #64]	; 0x40
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	daed      	bge.n	8008a96 <_svfprintf_r+0x1de>
 8008aba:	425b      	negs	r3, r3
 8008abc:	9310      	str	r3, [sp, #64]	; 0x40
 8008abe:	f04b 0b04 	orr.w	fp, fp, #4
 8008ac2:	e7e8      	b.n	8008a96 <_svfprintf_r+0x1de>
 8008ac4:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8008ac8:	e7e5      	b.n	8008a96 <_svfprintf_r+0x1de>
 8008aca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008acc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008ad0:	9306      	str	r3, [sp, #24]
 8008ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ad4:	d113      	bne.n	8008afe <_svfprintf_r+0x246>
 8008ad6:	f856 0b04 	ldr.w	r0, [r6], #4
 8008ada:	950b      	str	r5, [sp, #44]	; 0x2c
 8008adc:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8008ae0:	9304      	str	r3, [sp, #16]
 8008ae2:	e7d8      	b.n	8008a96 <_svfprintf_r+0x1de>
 8008ae4:	9904      	ldr	r1, [sp, #16]
 8008ae6:	fb07 3301 	mla	r3, r7, r1, r3
 8008aea:	9304      	str	r3, [sp, #16]
 8008aec:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008af0:	9306      	str	r3, [sp, #24]
 8008af2:	9b06      	ldr	r3, [sp, #24]
 8008af4:	3b30      	subs	r3, #48	; 0x30
 8008af6:	2b09      	cmp	r3, #9
 8008af8:	d9f4      	bls.n	8008ae4 <_svfprintf_r+0x22c>
 8008afa:	950b      	str	r5, [sp, #44]	; 0x2c
 8008afc:	e748      	b.n	8008990 <_svfprintf_r+0xd8>
 8008afe:	2300      	movs	r3, #0
 8008b00:	9304      	str	r3, [sp, #16]
 8008b02:	e7f6      	b.n	8008af2 <_svfprintf_r+0x23a>
 8008b04:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8008b08:	e7c5      	b.n	8008a96 <_svfprintf_r+0x1de>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008b0e:	9310      	str	r3, [sp, #64]	; 0x40
 8008b10:	9b06      	ldr	r3, [sp, #24]
 8008b12:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008b14:	3b30      	subs	r3, #48	; 0x30
 8008b16:	fb07 3301 	mla	r3, r7, r1, r3
 8008b1a:	9310      	str	r3, [sp, #64]	; 0x40
 8008b1c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008b20:	9306      	str	r3, [sp, #24]
 8008b22:	3b30      	subs	r3, #48	; 0x30
 8008b24:	2b09      	cmp	r3, #9
 8008b26:	d9f3      	bls.n	8008b10 <_svfprintf_r+0x258>
 8008b28:	e7e7      	b.n	8008afa <_svfprintf_r+0x242>
 8008b2a:	f04b 0b08 	orr.w	fp, fp, #8
 8008b2e:	e7b2      	b.n	8008a96 <_svfprintf_r+0x1de>
 8008b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	2b68      	cmp	r3, #104	; 0x68
 8008b36:	bf01      	itttt	eq
 8008b38:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8008b3a:	3301      	addeq	r3, #1
 8008b3c:	930b      	streq	r3, [sp, #44]	; 0x2c
 8008b3e:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8008b42:	bf18      	it	ne
 8008b44:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8008b48:	e7a5      	b.n	8008a96 <_svfprintf_r+0x1de>
 8008b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	2b6c      	cmp	r3, #108	; 0x6c
 8008b50:	d105      	bne.n	8008b5e <_svfprintf_r+0x2a6>
 8008b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b54:	3301      	adds	r3, #1
 8008b56:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b58:	f04b 0b20 	orr.w	fp, fp, #32
 8008b5c:	e79b      	b.n	8008a96 <_svfprintf_r+0x1de>
 8008b5e:	f04b 0b10 	orr.w	fp, fp, #16
 8008b62:	e798      	b.n	8008a96 <_svfprintf_r+0x1de>
 8008b64:	f3af 8000 	nop.w
	...
 8008b70:	4632      	mov	r2, r6
 8008b72:	2000      	movs	r0, #0
 8008b74:	f852 3b04 	ldr.w	r3, [r2], #4
 8008b78:	9207      	str	r2, [sp, #28]
 8008b7a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8008b7e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8008b82:	2301      	movs	r3, #1
 8008b84:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8008b88:	9003      	str	r0, [sp, #12]
 8008b8a:	9304      	str	r3, [sp, #16]
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	4605      	mov	r5, r0
 8008b90:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 8008b94:	e1bc      	b.n	8008f10 <_svfprintf_r+0x658>
 8008b96:	f04b 0b10 	orr.w	fp, fp, #16
 8008b9a:	f01b 0f20 	tst.w	fp, #32
 8008b9e:	d012      	beq.n	8008bc6 <_svfprintf_r+0x30e>
 8008ba0:	1df3      	adds	r3, r6, #7
 8008ba2:	f023 0307 	bic.w	r3, r3, #7
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	685d      	ldr	r5, [r3, #4]
 8008baa:	f852 6b08 	ldr.w	r6, [r2], #8
 8008bae:	9207      	str	r2, [sp, #28]
 8008bb0:	2d00      	cmp	r5, #0
 8008bb2:	da06      	bge.n	8008bc2 <_svfprintf_r+0x30a>
 8008bb4:	4276      	negs	r6, r6
 8008bb6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8008bba:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8008bbe:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e396      	b.n	80092f4 <_svfprintf_r+0xa3c>
 8008bc6:	4633      	mov	r3, r6
 8008bc8:	f01b 0f10 	tst.w	fp, #16
 8008bcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8008bd0:	9307      	str	r3, [sp, #28]
 8008bd2:	d002      	beq.n	8008bda <_svfprintf_r+0x322>
 8008bd4:	462e      	mov	r6, r5
 8008bd6:	17ed      	asrs	r5, r5, #31
 8008bd8:	e7ea      	b.n	8008bb0 <_svfprintf_r+0x2f8>
 8008bda:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8008bde:	d003      	beq.n	8008be8 <_svfprintf_r+0x330>
 8008be0:	b22e      	sxth	r6, r5
 8008be2:	f345 35c0 	sbfx	r5, r5, #15, #1
 8008be6:	e7e3      	b.n	8008bb0 <_svfprintf_r+0x2f8>
 8008be8:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8008bec:	d0f2      	beq.n	8008bd4 <_svfprintf_r+0x31c>
 8008bee:	b26e      	sxtb	r6, r5
 8008bf0:	f345 15c0 	sbfx	r5, r5, #7, #1
 8008bf4:	e7dc      	b.n	8008bb0 <_svfprintf_r+0x2f8>
 8008bf6:	3607      	adds	r6, #7
 8008bf8:	f026 0307 	bic.w	r3, r6, #7
 8008bfc:	ecb3 7b02 	vldmia	r3!, {d7}
 8008c00:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8008c04:	9307      	str	r3, [sp, #28]
 8008c06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c08:	ee09 3a10 	vmov	s18, r3
 8008c0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c12:	ee09 3a90 	vmov	s19, r3
 8008c16:	f04f 32ff 	mov.w	r2, #4294967295
 8008c1a:	4b3a      	ldr	r3, [pc, #232]	; (8008d04 <_svfprintf_r+0x44c>)
 8008c1c:	ec51 0b19 	vmov	r0, r1, d9
 8008c20:	f7f7 ff8c 	bl	8000b3c <__aeabi_dcmpun>
 8008c24:	bb10      	cbnz	r0, 8008c6c <_svfprintf_r+0x3b4>
 8008c26:	4b37      	ldr	r3, [pc, #220]	; (8008d04 <_svfprintf_r+0x44c>)
 8008c28:	ec51 0b19 	vmov	r0, r1, d9
 8008c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c30:	f7f7 ff66 	bl	8000b00 <__aeabi_dcmple>
 8008c34:	b9d0      	cbnz	r0, 8008c6c <_svfprintf_r+0x3b4>
 8008c36:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	f7f7 ff55 	bl	8000aec <__aeabi_dcmplt>
 8008c42:	b110      	cbz	r0, 8008c4a <_svfprintf_r+0x392>
 8008c44:	232d      	movs	r3, #45	; 0x2d
 8008c46:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8008c4a:	4a2f      	ldr	r2, [pc, #188]	; (8008d08 <_svfprintf_r+0x450>)
 8008c4c:	482f      	ldr	r0, [pc, #188]	; (8008d0c <_svfprintf_r+0x454>)
 8008c4e:	9b06      	ldr	r3, [sp, #24]
 8008c50:	2100      	movs	r1, #0
 8008c52:	2b47      	cmp	r3, #71	; 0x47
 8008c54:	bfd4      	ite	le
 8008c56:	4691      	movle	r9, r2
 8008c58:	4681      	movgt	r9, r0
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8008c60:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8008c64:	2600      	movs	r6, #0
 8008c66:	4633      	mov	r3, r6
 8008c68:	f001 b800 	b.w	8009c6c <_svfprintf_r+0x13b4>
 8008c6c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008c70:	4610      	mov	r0, r2
 8008c72:	4619      	mov	r1, r3
 8008c74:	f7f7 ff62 	bl	8000b3c <__aeabi_dcmpun>
 8008c78:	b140      	cbz	r0, 8008c8c <_svfprintf_r+0x3d4>
 8008c7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c7c:	4a24      	ldr	r2, [pc, #144]	; (8008d10 <_svfprintf_r+0x458>)
 8008c7e:	4825      	ldr	r0, [pc, #148]	; (8008d14 <_svfprintf_r+0x45c>)
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	bfbc      	itt	lt
 8008c84:	232d      	movlt	r3, #45	; 0x2d
 8008c86:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8008c8a:	e7e0      	b.n	8008c4e <_svfprintf_r+0x396>
 8008c8c:	9b06      	ldr	r3, [sp, #24]
 8008c8e:	f023 0320 	bic.w	r3, r3, #32
 8008c92:	2b41      	cmp	r3, #65	; 0x41
 8008c94:	9308      	str	r3, [sp, #32]
 8008c96:	d125      	bne.n	8008ce4 <_svfprintf_r+0x42c>
 8008c98:	2330      	movs	r3, #48	; 0x30
 8008c9a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8008c9e:	9b06      	ldr	r3, [sp, #24]
 8008ca0:	2b61      	cmp	r3, #97	; 0x61
 8008ca2:	bf0c      	ite	eq
 8008ca4:	2378      	moveq	r3, #120	; 0x78
 8008ca6:	2358      	movne	r3, #88	; 0x58
 8008ca8:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8008cac:	9b04      	ldr	r3, [sp, #16]
 8008cae:	2b63      	cmp	r3, #99	; 0x63
 8008cb0:	f04b 0b02 	orr.w	fp, fp, #2
 8008cb4:	dd30      	ble.n	8008d18 <_svfprintf_r+0x460>
 8008cb6:	1c59      	adds	r1, r3, #1
 8008cb8:	4650      	mov	r0, sl
 8008cba:	f7ff fa69 	bl	8008190 <_malloc_r>
 8008cbe:	4681      	mov	r9, r0
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	f040 81fd 	bne.w	80090c0 <_svfprintf_r+0x808>
 8008cc6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cce:	f8a8 300c 	strh.w	r3, [r8, #12]
 8008cd2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008cd6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008cda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cdc:	bf18      	it	ne
 8008cde:	f04f 33ff 	movne.w	r3, #4294967295
 8008ce2:	e60f      	b.n	8008904 <_svfprintf_r+0x4c>
 8008ce4:	9b04      	ldr	r3, [sp, #16]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	f000 81ec 	beq.w	80090c4 <_svfprintf_r+0x80c>
 8008cec:	9b08      	ldr	r3, [sp, #32]
 8008cee:	2b47      	cmp	r3, #71	; 0x47
 8008cf0:	f040 81eb 	bne.w	80090ca <_svfprintf_r+0x812>
 8008cf4:	9b04      	ldr	r3, [sp, #16]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f040 81e7 	bne.w	80090ca <_svfprintf_r+0x812>
 8008cfc:	9303      	str	r3, [sp, #12]
 8008cfe:	2301      	movs	r3, #1
 8008d00:	9304      	str	r3, [sp, #16]
 8008d02:	e00c      	b.n	8008d1e <_svfprintf_r+0x466>
 8008d04:	7fefffff 	.word	0x7fefffff
 8008d08:	0800ff8c 	.word	0x0800ff8c
 8008d0c:	0800ff90 	.word	0x0800ff90
 8008d10:	0800ff94 	.word	0x0800ff94
 8008d14:	0800ff98 	.word	0x0800ff98
 8008d18:	9003      	str	r0, [sp, #12]
 8008d1a:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 8008d1e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8008d22:	9311      	str	r3, [sp, #68]	; 0x44
 8008d24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f280 81d1 	bge.w	80090ce <_svfprintf_r+0x816>
 8008d2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d2e:	ee08 3a10 	vmov	s16, r3
 8008d32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d34:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008d38:	ee08 3a90 	vmov	s17, r3
 8008d3c:	232d      	movs	r3, #45	; 0x2d
 8008d3e:	9318      	str	r3, [sp, #96]	; 0x60
 8008d40:	9b08      	ldr	r3, [sp, #32]
 8008d42:	2b41      	cmp	r3, #65	; 0x41
 8008d44:	f040 81e1 	bne.w	800910a <_svfprintf_r+0x852>
 8008d48:	eeb0 0a48 	vmov.f32	s0, s16
 8008d4c:	eef0 0a68 	vmov.f32	s1, s17
 8008d50:	a81c      	add	r0, sp, #112	; 0x70
 8008d52:	f003 ff9d 	bl	800cc90 <frexp>
 8008d56:	2200      	movs	r2, #0
 8008d58:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008d5c:	ec51 0b10 	vmov	r0, r1, d0
 8008d60:	f7f7 fc52 	bl	8000608 <__aeabi_dmul>
 8008d64:	2200      	movs	r2, #0
 8008d66:	2300      	movs	r3, #0
 8008d68:	4606      	mov	r6, r0
 8008d6a:	460f      	mov	r7, r1
 8008d6c:	f7f7 feb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d70:	b108      	cbz	r0, 8008d76 <_svfprintf_r+0x4be>
 8008d72:	2301      	movs	r3, #1
 8008d74:	931c      	str	r3, [sp, #112]	; 0x70
 8008d76:	4ba7      	ldr	r3, [pc, #668]	; (8009014 <_svfprintf_r+0x75c>)
 8008d78:	4aa7      	ldr	r2, [pc, #668]	; (8009018 <_svfprintf_r+0x760>)
 8008d7a:	9906      	ldr	r1, [sp, #24]
 8008d7c:	2961      	cmp	r1, #97	; 0x61
 8008d7e:	bf18      	it	ne
 8008d80:	461a      	movne	r2, r3
 8008d82:	9b04      	ldr	r3, [sp, #16]
 8008d84:	9217      	str	r2, [sp, #92]	; 0x5c
 8008d86:	3b01      	subs	r3, #1
 8008d88:	9305      	str	r3, [sp, #20]
 8008d8a:	464d      	mov	r5, r9
 8008d8c:	4ba3      	ldr	r3, [pc, #652]	; (800901c <_svfprintf_r+0x764>)
 8008d8e:	2200      	movs	r2, #0
 8008d90:	4630      	mov	r0, r6
 8008d92:	4639      	mov	r1, r7
 8008d94:	f7f7 fc38 	bl	8000608 <__aeabi_dmul>
 8008d98:	460f      	mov	r7, r1
 8008d9a:	4606      	mov	r6, r0
 8008d9c:	f7f7 fee4 	bl	8000b68 <__aeabi_d2iz>
 8008da0:	9019      	str	r0, [sp, #100]	; 0x64
 8008da2:	f7f7 fbc7 	bl	8000534 <__aeabi_i2d>
 8008da6:	4602      	mov	r2, r0
 8008da8:	460b      	mov	r3, r1
 8008daa:	4630      	mov	r0, r6
 8008dac:	4639      	mov	r1, r7
 8008dae:	f7f7 fa73 	bl	8000298 <__aeabi_dsub>
 8008db2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008db4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008db6:	5c9b      	ldrb	r3, [r3, r2]
 8008db8:	f805 3b01 	strb.w	r3, [r5], #1
 8008dbc:	9b05      	ldr	r3, [sp, #20]
 8008dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8008dc0:	1c5a      	adds	r2, r3, #1
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	460f      	mov	r7, r1
 8008dc6:	d007      	beq.n	8008dd8 <_svfprintf_r+0x520>
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	9305      	str	r3, [sp, #20]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	2300      	movs	r3, #0
 8008dd0:	f7f7 fe82 	bl	8000ad8 <__aeabi_dcmpeq>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d0d9      	beq.n	8008d8c <_svfprintf_r+0x4d4>
 8008dd8:	4b91      	ldr	r3, [pc, #580]	; (8009020 <_svfprintf_r+0x768>)
 8008dda:	2200      	movs	r2, #0
 8008ddc:	4630      	mov	r0, r6
 8008dde:	4639      	mov	r1, r7
 8008de0:	f7f7 fea2 	bl	8000b28 <__aeabi_dcmpgt>
 8008de4:	b960      	cbnz	r0, 8008e00 <_svfprintf_r+0x548>
 8008de6:	4b8e      	ldr	r3, [pc, #568]	; (8009020 <_svfprintf_r+0x768>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	4630      	mov	r0, r6
 8008dec:	4639      	mov	r1, r7
 8008dee:	f7f7 fe73 	bl	8000ad8 <__aeabi_dcmpeq>
 8008df2:	2800      	cmp	r0, #0
 8008df4:	f000 8184 	beq.w	8009100 <_svfprintf_r+0x848>
 8008df8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008dfa:	07db      	lsls	r3, r3, #31
 8008dfc:	f140 8180 	bpl.w	8009100 <_svfprintf_r+0x848>
 8008e00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e02:	9520      	str	r5, [sp, #128]	; 0x80
 8008e04:	7bd9      	ldrb	r1, [r3, #15]
 8008e06:	2030      	movs	r0, #48	; 0x30
 8008e08:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008e0a:	1e53      	subs	r3, r2, #1
 8008e0c:	9320      	str	r3, [sp, #128]	; 0x80
 8008e0e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8008e12:	428b      	cmp	r3, r1
 8008e14:	f000 8163 	beq.w	80090de <_svfprintf_r+0x826>
 8008e18:	2b39      	cmp	r3, #57	; 0x39
 8008e1a:	bf0b      	itete	eq
 8008e1c:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8008e1e:	3301      	addne	r3, #1
 8008e20:	7a9b      	ldrbeq	r3, [r3, #10]
 8008e22:	b2db      	uxtbne	r3, r3
 8008e24:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008e28:	eba5 0309 	sub.w	r3, r5, r9
 8008e2c:	9305      	str	r3, [sp, #20]
 8008e2e:	9b08      	ldr	r3, [sp, #32]
 8008e30:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8008e32:	2b47      	cmp	r3, #71	; 0x47
 8008e34:	f040 81b1 	bne.w	800919a <_svfprintf_r+0x8e2>
 8008e38:	1cef      	adds	r7, r5, #3
 8008e3a:	db03      	blt.n	8008e44 <_svfprintf_r+0x58c>
 8008e3c:	9b04      	ldr	r3, [sp, #16]
 8008e3e:	42ab      	cmp	r3, r5
 8008e40:	f280 81d6 	bge.w	80091f0 <_svfprintf_r+0x938>
 8008e44:	9b06      	ldr	r3, [sp, #24]
 8008e46:	3b02      	subs	r3, #2
 8008e48:	9306      	str	r3, [sp, #24]
 8008e4a:	9906      	ldr	r1, [sp, #24]
 8008e4c:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8008e50:	f021 0120 	bic.w	r1, r1, #32
 8008e54:	2941      	cmp	r1, #65	; 0x41
 8008e56:	bf08      	it	eq
 8008e58:	320f      	addeq	r2, #15
 8008e5a:	f105 33ff 	add.w	r3, r5, #4294967295
 8008e5e:	bf06      	itte	eq
 8008e60:	b2d2      	uxtbeq	r2, r2
 8008e62:	2101      	moveq	r1, #1
 8008e64:	2100      	movne	r1, #0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	931c      	str	r3, [sp, #112]	; 0x70
 8008e6a:	bfb8      	it	lt
 8008e6c:	f1c5 0301 	rsblt	r3, r5, #1
 8008e70:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8008e74:	bfb4      	ite	lt
 8008e76:	222d      	movlt	r2, #45	; 0x2d
 8008e78:	222b      	movge	r2, #43	; 0x2b
 8008e7a:	2b09      	cmp	r3, #9
 8008e7c:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8008e80:	f340 81a4 	ble.w	80091cc <_svfprintf_r+0x914>
 8008e84:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8008e88:	260a      	movs	r6, #10
 8008e8a:	4611      	mov	r1, r2
 8008e8c:	fb93 f5f6 	sdiv	r5, r3, r6
 8008e90:	fb06 3015 	mls	r0, r6, r5, r3
 8008e94:	3030      	adds	r0, #48	; 0x30
 8008e96:	f801 0c01 	strb.w	r0, [r1, #-1]
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	2863      	cmp	r0, #99	; 0x63
 8008e9e:	f102 32ff 	add.w	r2, r2, #4294967295
 8008ea2:	462b      	mov	r3, r5
 8008ea4:	dcf1      	bgt.n	8008e8a <_svfprintf_r+0x5d2>
 8008ea6:	3330      	adds	r3, #48	; 0x30
 8008ea8:	1e88      	subs	r0, r1, #2
 8008eaa:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008eae:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 8008eb2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	42ab      	cmp	r3, r5
 8008eba:	f0c0 8182 	bcc.w	80091c2 <_svfprintf_r+0x90a>
 8008ebe:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8008ec2:	1a52      	subs	r2, r2, r1
 8008ec4:	42a8      	cmp	r0, r5
 8008ec6:	bf88      	it	hi
 8008ec8:	2200      	movhi	r2, #0
 8008eca:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 8008ece:	441a      	add	r2, r3
 8008ed0:	ab1e      	add	r3, sp, #120	; 0x78
 8008ed2:	1ad3      	subs	r3, r2, r3
 8008ed4:	9a05      	ldr	r2, [sp, #20]
 8008ed6:	9315      	str	r3, [sp, #84]	; 0x54
 8008ed8:	2a01      	cmp	r2, #1
 8008eda:	4413      	add	r3, r2
 8008edc:	9304      	str	r3, [sp, #16]
 8008ede:	dc02      	bgt.n	8008ee6 <_svfprintf_r+0x62e>
 8008ee0:	f01b 0f01 	tst.w	fp, #1
 8008ee4:	d003      	beq.n	8008eee <_svfprintf_r+0x636>
 8008ee6:	9b04      	ldr	r3, [sp, #16]
 8008ee8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008eea:	4413      	add	r3, r2
 8008eec:	9304      	str	r3, [sp, #16]
 8008eee:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8008ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ef6:	9311      	str	r3, [sp, #68]	; 0x44
 8008ef8:	2300      	movs	r3, #0
 8008efa:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8008efe:	461d      	mov	r5, r3
 8008f00:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008f02:	b113      	cbz	r3, 8008f0a <_svfprintf_r+0x652>
 8008f04:	232d      	movs	r3, #45	; 0x2d
 8008f06:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8008f0a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8008f0e:	2600      	movs	r6, #0
 8008f10:	9b04      	ldr	r3, [sp, #16]
 8008f12:	42b3      	cmp	r3, r6
 8008f14:	bfb8      	it	lt
 8008f16:	4633      	movlt	r3, r6
 8008f18:	9311      	str	r3, [sp, #68]	; 0x44
 8008f1a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8008f1e:	b113      	cbz	r3, 8008f26 <_svfprintf_r+0x66e>
 8008f20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f22:	3301      	adds	r3, #1
 8008f24:	9311      	str	r3, [sp, #68]	; 0x44
 8008f26:	f01b 0302 	ands.w	r3, fp, #2
 8008f2a:	9317      	str	r3, [sp, #92]	; 0x5c
 8008f2c:	bf1e      	ittt	ne
 8008f2e:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8008f30:	3302      	addne	r3, #2
 8008f32:	9311      	strne	r3, [sp, #68]	; 0x44
 8008f34:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8008f38:	9318      	str	r3, [sp, #96]	; 0x60
 8008f3a:	d11f      	bne.n	8008f7c <_svfprintf_r+0x6c4>
 8008f3c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8008f40:	1a9f      	subs	r7, r3, r2
 8008f42:	2f00      	cmp	r7, #0
 8008f44:	dd1a      	ble.n	8008f7c <_svfprintf_r+0x6c4>
 8008f46:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8008f4a:	4836      	ldr	r0, [pc, #216]	; (8009024 <_svfprintf_r+0x76c>)
 8008f4c:	6020      	str	r0, [r4, #0]
 8008f4e:	2f10      	cmp	r7, #16
 8008f50:	f103 0301 	add.w	r3, r3, #1
 8008f54:	f104 0108 	add.w	r1, r4, #8
 8008f58:	f300 82ed 	bgt.w	8009536 <_svfprintf_r+0xc7e>
 8008f5c:	6067      	str	r7, [r4, #4]
 8008f5e:	2b07      	cmp	r3, #7
 8008f60:	4417      	add	r7, r2
 8008f62:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8008f66:	f340 82f9 	ble.w	800955c <_svfprintf_r+0xca4>
 8008f6a:	aa22      	add	r2, sp, #136	; 0x88
 8008f6c:	4641      	mov	r1, r8
 8008f6e:	4650      	mov	r0, sl
 8008f70:	f004 fee8 	bl	800dd44 <__ssprint_r>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	f040 8621 	bne.w	8009bbc <_svfprintf_r+0x1304>
 8008f7a:	ac25      	add	r4, sp, #148	; 0x94
 8008f7c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8008f80:	b173      	cbz	r3, 8008fa0 <_svfprintf_r+0x6e8>
 8008f82:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 8008f86:	6023      	str	r3, [r4, #0]
 8008f88:	2301      	movs	r3, #1
 8008f8a:	6063      	str	r3, [r4, #4]
 8008f8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f8e:	3301      	adds	r3, #1
 8008f90:	9324      	str	r3, [sp, #144]	; 0x90
 8008f92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f94:	3301      	adds	r3, #1
 8008f96:	2b07      	cmp	r3, #7
 8008f98:	9323      	str	r3, [sp, #140]	; 0x8c
 8008f9a:	f300 82e1 	bgt.w	8009560 <_svfprintf_r+0xca8>
 8008f9e:	3408      	adds	r4, #8
 8008fa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008fa2:	b16b      	cbz	r3, 8008fc0 <_svfprintf_r+0x708>
 8008fa4:	ab1b      	add	r3, sp, #108	; 0x6c
 8008fa6:	6023      	str	r3, [r4, #0]
 8008fa8:	2302      	movs	r3, #2
 8008faa:	6063      	str	r3, [r4, #4]
 8008fac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008fae:	3302      	adds	r3, #2
 8008fb0:	9324      	str	r3, [sp, #144]	; 0x90
 8008fb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	2b07      	cmp	r3, #7
 8008fb8:	9323      	str	r3, [sp, #140]	; 0x8c
 8008fba:	f300 82db 	bgt.w	8009574 <_svfprintf_r+0xcbc>
 8008fbe:	3408      	adds	r4, #8
 8008fc0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008fc2:	2b80      	cmp	r3, #128	; 0x80
 8008fc4:	d11f      	bne.n	8009006 <_svfprintf_r+0x74e>
 8008fc6:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8008fca:	1a9f      	subs	r7, r3, r2
 8008fcc:	2f00      	cmp	r7, #0
 8008fce:	dd1a      	ble.n	8009006 <_svfprintf_r+0x74e>
 8008fd0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8008fd4:	4814      	ldr	r0, [pc, #80]	; (8009028 <_svfprintf_r+0x770>)
 8008fd6:	6020      	str	r0, [r4, #0]
 8008fd8:	2f10      	cmp	r7, #16
 8008fda:	f103 0301 	add.w	r3, r3, #1
 8008fde:	f104 0108 	add.w	r1, r4, #8
 8008fe2:	f300 82d1 	bgt.w	8009588 <_svfprintf_r+0xcd0>
 8008fe6:	6067      	str	r7, [r4, #4]
 8008fe8:	2b07      	cmp	r3, #7
 8008fea:	4417      	add	r7, r2
 8008fec:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8008ff0:	f340 82dd 	ble.w	80095ae <_svfprintf_r+0xcf6>
 8008ff4:	aa22      	add	r2, sp, #136	; 0x88
 8008ff6:	4641      	mov	r1, r8
 8008ff8:	4650      	mov	r0, sl
 8008ffa:	f004 fea3 	bl	800dd44 <__ssprint_r>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	f040 85dc 	bne.w	8009bbc <_svfprintf_r+0x1304>
 8009004:	ac25      	add	r4, sp, #148	; 0x94
 8009006:	9b04      	ldr	r3, [sp, #16]
 8009008:	1af6      	subs	r6, r6, r3
 800900a:	2e00      	cmp	r6, #0
 800900c:	dd28      	ble.n	8009060 <_svfprintf_r+0x7a8>
 800900e:	4f06      	ldr	r7, [pc, #24]	; (8009028 <_svfprintf_r+0x770>)
 8009010:	e00c      	b.n	800902c <_svfprintf_r+0x774>
 8009012:	bf00      	nop
 8009014:	0800ffad 	.word	0x0800ffad
 8009018:	0800ff9c 	.word	0x0800ff9c
 800901c:	40300000 	.word	0x40300000
 8009020:	3fe00000 	.word	0x3fe00000
 8009024:	0800ffc0 	.word	0x0800ffc0
 8009028:	0800ffd0 	.word	0x0800ffd0
 800902c:	6027      	str	r7, [r4, #0]
 800902e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009032:	2e10      	cmp	r6, #16
 8009034:	f103 0301 	add.w	r3, r3, #1
 8009038:	f104 0108 	add.w	r1, r4, #8
 800903c:	f300 82b9 	bgt.w	80095b2 <_svfprintf_r+0xcfa>
 8009040:	6066      	str	r6, [r4, #4]
 8009042:	2b07      	cmp	r3, #7
 8009044:	4416      	add	r6, r2
 8009046:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800904a:	f340 82c5 	ble.w	80095d8 <_svfprintf_r+0xd20>
 800904e:	aa22      	add	r2, sp, #136	; 0x88
 8009050:	4641      	mov	r1, r8
 8009052:	4650      	mov	r0, sl
 8009054:	f004 fe76 	bl	800dd44 <__ssprint_r>
 8009058:	2800      	cmp	r0, #0
 800905a:	f040 85af 	bne.w	8009bbc <_svfprintf_r+0x1304>
 800905e:	ac25      	add	r4, sp, #148	; 0x94
 8009060:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009064:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8009066:	f040 82bd 	bne.w	80095e4 <_svfprintf_r+0xd2c>
 800906a:	9b04      	ldr	r3, [sp, #16]
 800906c:	f8c4 9000 	str.w	r9, [r4]
 8009070:	441e      	add	r6, r3
 8009072:	6063      	str	r3, [r4, #4]
 8009074:	9624      	str	r6, [sp, #144]	; 0x90
 8009076:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009078:	3301      	adds	r3, #1
 800907a:	2b07      	cmp	r3, #7
 800907c:	9323      	str	r3, [sp, #140]	; 0x8c
 800907e:	f300 82f6 	bgt.w	800966e <_svfprintf_r+0xdb6>
 8009082:	3408      	adds	r4, #8
 8009084:	f01b 0f04 	tst.w	fp, #4
 8009088:	f040 857a 	bne.w	8009b80 <_svfprintf_r+0x12c8>
 800908c:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
 8009090:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009092:	428a      	cmp	r2, r1
 8009094:	bfac      	ite	ge
 8009096:	189b      	addge	r3, r3, r2
 8009098:	185b      	addlt	r3, r3, r1
 800909a:	930c      	str	r3, [sp, #48]	; 0x30
 800909c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800909e:	b13b      	cbz	r3, 80090b0 <_svfprintf_r+0x7f8>
 80090a0:	aa22      	add	r2, sp, #136	; 0x88
 80090a2:	4641      	mov	r1, r8
 80090a4:	4650      	mov	r0, sl
 80090a6:	f004 fe4d 	bl	800dd44 <__ssprint_r>
 80090aa:	2800      	cmp	r0, #0
 80090ac:	f040 8586 	bne.w	8009bbc <_svfprintf_r+0x1304>
 80090b0:	2300      	movs	r3, #0
 80090b2:	9323      	str	r3, [sp, #140]	; 0x8c
 80090b4:	9b03      	ldr	r3, [sp, #12]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f040 859c 	bne.w	8009bf4 <_svfprintf_r+0x133c>
 80090bc:	ac25      	add	r4, sp, #148	; 0x94
 80090be:	e0ec      	b.n	800929a <_svfprintf_r+0x9e2>
 80090c0:	9003      	str	r0, [sp, #12]
 80090c2:	e62c      	b.n	8008d1e <_svfprintf_r+0x466>
 80090c4:	9003      	str	r0, [sp, #12]
 80090c6:	2306      	movs	r3, #6
 80090c8:	e61a      	b.n	8008d00 <_svfprintf_r+0x448>
 80090ca:	9003      	str	r0, [sp, #12]
 80090cc:	e627      	b.n	8008d1e <_svfprintf_r+0x466>
 80090ce:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 80090d2:	2300      	movs	r3, #0
 80090d4:	eeb0 8a47 	vmov.f32	s16, s14
 80090d8:	eef0 8a67 	vmov.f32	s17, s15
 80090dc:	e62f      	b.n	8008d3e <_svfprintf_r+0x486>
 80090de:	f802 0c01 	strb.w	r0, [r2, #-1]
 80090e2:	e691      	b.n	8008e08 <_svfprintf_r+0x550>
 80090e4:	f803 0b01 	strb.w	r0, [r3], #1
 80090e8:	1aca      	subs	r2, r1, r3
 80090ea:	2a00      	cmp	r2, #0
 80090ec:	dafa      	bge.n	80090e4 <_svfprintf_r+0x82c>
 80090ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090f2:	3201      	adds	r2, #1
 80090f4:	f103 0301 	add.w	r3, r3, #1
 80090f8:	bfb8      	it	lt
 80090fa:	2300      	movlt	r3, #0
 80090fc:	441d      	add	r5, r3
 80090fe:	e693      	b.n	8008e28 <_svfprintf_r+0x570>
 8009100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009102:	462b      	mov	r3, r5
 8009104:	18a9      	adds	r1, r5, r2
 8009106:	2030      	movs	r0, #48	; 0x30
 8009108:	e7ee      	b.n	80090e8 <_svfprintf_r+0x830>
 800910a:	9b08      	ldr	r3, [sp, #32]
 800910c:	2b46      	cmp	r3, #70	; 0x46
 800910e:	d005      	beq.n	800911c <_svfprintf_r+0x864>
 8009110:	2b45      	cmp	r3, #69	; 0x45
 8009112:	d11b      	bne.n	800914c <_svfprintf_r+0x894>
 8009114:	9b04      	ldr	r3, [sp, #16]
 8009116:	1c5d      	adds	r5, r3, #1
 8009118:	2102      	movs	r1, #2
 800911a:	e001      	b.n	8009120 <_svfprintf_r+0x868>
 800911c:	9d04      	ldr	r5, [sp, #16]
 800911e:	2103      	movs	r1, #3
 8009120:	ab20      	add	r3, sp, #128	; 0x80
 8009122:	9301      	str	r3, [sp, #4]
 8009124:	ab1d      	add	r3, sp, #116	; 0x74
 8009126:	9300      	str	r3, [sp, #0]
 8009128:	462a      	mov	r2, r5
 800912a:	ab1c      	add	r3, sp, #112	; 0x70
 800912c:	4650      	mov	r0, sl
 800912e:	eeb0 0a48 	vmov.f32	s0, s16
 8009132:	eef0 0a68 	vmov.f32	s1, s17
 8009136:	f002 f813 	bl	800b160 <_dtoa_r>
 800913a:	9b08      	ldr	r3, [sp, #32]
 800913c:	2b47      	cmp	r3, #71	; 0x47
 800913e:	4681      	mov	r9, r0
 8009140:	d106      	bne.n	8009150 <_svfprintf_r+0x898>
 8009142:	f01b 0f01 	tst.w	fp, #1
 8009146:	d103      	bne.n	8009150 <_svfprintf_r+0x898>
 8009148:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800914a:	e66d      	b.n	8008e28 <_svfprintf_r+0x570>
 800914c:	9d04      	ldr	r5, [sp, #16]
 800914e:	e7e3      	b.n	8009118 <_svfprintf_r+0x860>
 8009150:	9b08      	ldr	r3, [sp, #32]
 8009152:	2b46      	cmp	r3, #70	; 0x46
 8009154:	eb09 0605 	add.w	r6, r9, r5
 8009158:	d10f      	bne.n	800917a <_svfprintf_r+0x8c2>
 800915a:	f899 3000 	ldrb.w	r3, [r9]
 800915e:	2b30      	cmp	r3, #48	; 0x30
 8009160:	d109      	bne.n	8009176 <_svfprintf_r+0x8be>
 8009162:	ec51 0b18 	vmov	r0, r1, d8
 8009166:	2200      	movs	r2, #0
 8009168:	2300      	movs	r3, #0
 800916a:	f7f7 fcb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800916e:	b910      	cbnz	r0, 8009176 <_svfprintf_r+0x8be>
 8009170:	f1c5 0501 	rsb	r5, r5, #1
 8009174:	951c      	str	r5, [sp, #112]	; 0x70
 8009176:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009178:	441e      	add	r6, r3
 800917a:	ec51 0b18 	vmov	r0, r1, d8
 800917e:	2200      	movs	r2, #0
 8009180:	2300      	movs	r3, #0
 8009182:	f7f7 fca9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009186:	b100      	cbz	r0, 800918a <_svfprintf_r+0x8d2>
 8009188:	9620      	str	r6, [sp, #128]	; 0x80
 800918a:	2230      	movs	r2, #48	; 0x30
 800918c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800918e:	429e      	cmp	r6, r3
 8009190:	d9da      	bls.n	8009148 <_svfprintf_r+0x890>
 8009192:	1c59      	adds	r1, r3, #1
 8009194:	9120      	str	r1, [sp, #128]	; 0x80
 8009196:	701a      	strb	r2, [r3, #0]
 8009198:	e7f8      	b.n	800918c <_svfprintf_r+0x8d4>
 800919a:	9b08      	ldr	r3, [sp, #32]
 800919c:	2b46      	cmp	r3, #70	; 0x46
 800919e:	f47f ae54 	bne.w	8008e4a <_svfprintf_r+0x592>
 80091a2:	9a04      	ldr	r2, [sp, #16]
 80091a4:	f00b 0301 	and.w	r3, fp, #1
 80091a8:	2d00      	cmp	r5, #0
 80091aa:	ea43 0302 	orr.w	r3, r3, r2
 80091ae:	dd1a      	ble.n	80091e6 <_svfprintf_r+0x92e>
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d034      	beq.n	800921e <_svfprintf_r+0x966>
 80091b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091b6:	18eb      	adds	r3, r5, r3
 80091b8:	441a      	add	r2, r3
 80091ba:	9204      	str	r2, [sp, #16]
 80091bc:	2366      	movs	r3, #102	; 0x66
 80091be:	9306      	str	r3, [sp, #24]
 80091c0:	e033      	b.n	800922a <_svfprintf_r+0x972>
 80091c2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80091c6:	f802 6b01 	strb.w	r6, [r2], #1
 80091ca:	e675      	b.n	8008eb8 <_svfprintf_r+0x600>
 80091cc:	b941      	cbnz	r1, 80091e0 <_svfprintf_r+0x928>
 80091ce:	2230      	movs	r2, #48	; 0x30
 80091d0:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 80091d4:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80091d8:	3330      	adds	r3, #48	; 0x30
 80091da:	f802 3b01 	strb.w	r3, [r2], #1
 80091de:	e677      	b.n	8008ed0 <_svfprintf_r+0x618>
 80091e0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80091e4:	e7f8      	b.n	80091d8 <_svfprintf_r+0x920>
 80091e6:	b1e3      	cbz	r3, 8009222 <_svfprintf_r+0x96a>
 80091e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091ea:	9a04      	ldr	r2, [sp, #16]
 80091ec:	3301      	adds	r3, #1
 80091ee:	e7e3      	b.n	80091b8 <_svfprintf_r+0x900>
 80091f0:	9b05      	ldr	r3, [sp, #20]
 80091f2:	429d      	cmp	r5, r3
 80091f4:	db07      	blt.n	8009206 <_svfprintf_r+0x94e>
 80091f6:	f01b 0f01 	tst.w	fp, #1
 80091fa:	d02d      	beq.n	8009258 <_svfprintf_r+0x9a0>
 80091fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091fe:	18eb      	adds	r3, r5, r3
 8009200:	9304      	str	r3, [sp, #16]
 8009202:	2367      	movs	r3, #103	; 0x67
 8009204:	e7db      	b.n	80091be <_svfprintf_r+0x906>
 8009206:	9b05      	ldr	r3, [sp, #20]
 8009208:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800920a:	2d00      	cmp	r5, #0
 800920c:	4413      	add	r3, r2
 800920e:	9304      	str	r3, [sp, #16]
 8009210:	dcf7      	bgt.n	8009202 <_svfprintf_r+0x94a>
 8009212:	9a04      	ldr	r2, [sp, #16]
 8009214:	f1c5 0301 	rsb	r3, r5, #1
 8009218:	441a      	add	r2, r3
 800921a:	9204      	str	r2, [sp, #16]
 800921c:	e7f1      	b.n	8009202 <_svfprintf_r+0x94a>
 800921e:	9504      	str	r5, [sp, #16]
 8009220:	e7cc      	b.n	80091bc <_svfprintf_r+0x904>
 8009222:	2366      	movs	r3, #102	; 0x66
 8009224:	9306      	str	r3, [sp, #24]
 8009226:	2301      	movs	r3, #1
 8009228:	9304      	str	r3, [sp, #16]
 800922a:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 800922e:	9309      	str	r3, [sp, #36]	; 0x24
 8009230:	d025      	beq.n	800927e <_svfprintf_r+0x9c6>
 8009232:	2300      	movs	r3, #0
 8009234:	2d00      	cmp	r5, #0
 8009236:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800923a:	f77f ae61 	ble.w	8008f00 <_svfprintf_r+0x648>
 800923e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	2bff      	cmp	r3, #255	; 0xff
 8009244:	d10a      	bne.n	800925c <_svfprintf_r+0x9a4>
 8009246:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800924a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800924c:	4413      	add	r3, r2
 800924e:	9a04      	ldr	r2, [sp, #16]
 8009250:	fb01 2303 	mla	r3, r1, r3, r2
 8009254:	9304      	str	r3, [sp, #16]
 8009256:	e653      	b.n	8008f00 <_svfprintf_r+0x648>
 8009258:	9504      	str	r5, [sp, #16]
 800925a:	e7d2      	b.n	8009202 <_svfprintf_r+0x94a>
 800925c:	42ab      	cmp	r3, r5
 800925e:	daf2      	bge.n	8009246 <_svfprintf_r+0x98e>
 8009260:	1aed      	subs	r5, r5, r3
 8009262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009264:	785b      	ldrb	r3, [r3, #1]
 8009266:	b133      	cbz	r3, 8009276 <_svfprintf_r+0x9be>
 8009268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800926a:	3301      	adds	r3, #1
 800926c:	9309      	str	r3, [sp, #36]	; 0x24
 800926e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009270:	3301      	adds	r3, #1
 8009272:	930a      	str	r3, [sp, #40]	; 0x28
 8009274:	e7e3      	b.n	800923e <_svfprintf_r+0x986>
 8009276:	9b08      	ldr	r3, [sp, #32]
 8009278:	3301      	adds	r3, #1
 800927a:	9308      	str	r3, [sp, #32]
 800927c:	e7df      	b.n	800923e <_svfprintf_r+0x986>
 800927e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009280:	9308      	str	r3, [sp, #32]
 8009282:	e63d      	b.n	8008f00 <_svfprintf_r+0x648>
 8009284:	1d33      	adds	r3, r6, #4
 8009286:	f01b 0f20 	tst.w	fp, #32
 800928a:	9307      	str	r3, [sp, #28]
 800928c:	d00a      	beq.n	80092a4 <_svfprintf_r+0x9ec>
 800928e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009290:	6833      	ldr	r3, [r6, #0]
 8009292:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009294:	17d2      	asrs	r2, r2, #31
 8009296:	e9c3 1200 	strd	r1, r2, [r3]
 800929a:	9e07      	ldr	r6, [sp, #28]
 800929c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80092a0:	f7ff bb4a 	b.w	8008938 <_svfprintf_r+0x80>
 80092a4:	f01b 0f10 	tst.w	fp, #16
 80092a8:	d003      	beq.n	80092b2 <_svfprintf_r+0x9fa>
 80092aa:	6833      	ldr	r3, [r6, #0]
 80092ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092ae:	601a      	str	r2, [r3, #0]
 80092b0:	e7f3      	b.n	800929a <_svfprintf_r+0x9e2>
 80092b2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80092b6:	d003      	beq.n	80092c0 <_svfprintf_r+0xa08>
 80092b8:	6833      	ldr	r3, [r6, #0]
 80092ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092bc:	801a      	strh	r2, [r3, #0]
 80092be:	e7ec      	b.n	800929a <_svfprintf_r+0x9e2>
 80092c0:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80092c4:	d0f1      	beq.n	80092aa <_svfprintf_r+0x9f2>
 80092c6:	6833      	ldr	r3, [r6, #0]
 80092c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092ca:	701a      	strb	r2, [r3, #0]
 80092cc:	e7e5      	b.n	800929a <_svfprintf_r+0x9e2>
 80092ce:	f04b 0b10 	orr.w	fp, fp, #16
 80092d2:	f01b 0320 	ands.w	r3, fp, #32
 80092d6:	d01f      	beq.n	8009318 <_svfprintf_r+0xa60>
 80092d8:	1df3      	adds	r3, r6, #7
 80092da:	f023 0307 	bic.w	r3, r3, #7
 80092de:	461a      	mov	r2, r3
 80092e0:	685d      	ldr	r5, [r3, #4]
 80092e2:	f852 6b08 	ldr.w	r6, [r2], #8
 80092e6:	9207      	str	r2, [sp, #28]
 80092e8:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 80092ec:	2300      	movs	r3, #0
 80092ee:	2200      	movs	r2, #0
 80092f0:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 80092f4:	9a04      	ldr	r2, [sp, #16]
 80092f6:	3201      	adds	r2, #1
 80092f8:	f000 848d 	beq.w	8009c16 <_svfprintf_r+0x135e>
 80092fc:	ea56 0205 	orrs.w	r2, r6, r5
 8009300:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 8009304:	f040 848c 	bne.w	8009c20 <_svfprintf_r+0x1368>
 8009308:	9a04      	ldr	r2, [sp, #16]
 800930a:	2a00      	cmp	r2, #0
 800930c:	f000 80f9 	beq.w	8009502 <_svfprintf_r+0xc4a>
 8009310:	2b01      	cmp	r3, #1
 8009312:	f040 8488 	bne.w	8009c26 <_svfprintf_r+0x136e>
 8009316:	e09f      	b.n	8009458 <_svfprintf_r+0xba0>
 8009318:	4632      	mov	r2, r6
 800931a:	f01b 0510 	ands.w	r5, fp, #16
 800931e:	f852 6b04 	ldr.w	r6, [r2], #4
 8009322:	9207      	str	r2, [sp, #28]
 8009324:	d001      	beq.n	800932a <_svfprintf_r+0xa72>
 8009326:	461d      	mov	r5, r3
 8009328:	e7de      	b.n	80092e8 <_svfprintf_r+0xa30>
 800932a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800932e:	d001      	beq.n	8009334 <_svfprintf_r+0xa7c>
 8009330:	b2b6      	uxth	r6, r6
 8009332:	e7d9      	b.n	80092e8 <_svfprintf_r+0xa30>
 8009334:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 8009338:	d0d6      	beq.n	80092e8 <_svfprintf_r+0xa30>
 800933a:	b2f6      	uxtb	r6, r6
 800933c:	e7f3      	b.n	8009326 <_svfprintf_r+0xa6e>
 800933e:	4633      	mov	r3, r6
 8009340:	2278      	movs	r2, #120	; 0x78
 8009342:	f853 6b04 	ldr.w	r6, [r3], #4
 8009346:	9307      	str	r3, [sp, #28]
 8009348:	2330      	movs	r3, #48	; 0x30
 800934a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800934e:	4ba3      	ldr	r3, [pc, #652]	; (80095dc <_svfprintf_r+0xd24>)
 8009350:	9316      	str	r3, [sp, #88]	; 0x58
 8009352:	2500      	movs	r5, #0
 8009354:	f04b 0b02 	orr.w	fp, fp, #2
 8009358:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800935c:	2302      	movs	r3, #2
 800935e:	9206      	str	r2, [sp, #24]
 8009360:	e7c5      	b.n	80092ee <_svfprintf_r+0xa36>
 8009362:	4633      	mov	r3, r6
 8009364:	2500      	movs	r5, #0
 8009366:	f853 9b04 	ldr.w	r9, [r3], #4
 800936a:	9307      	str	r3, [sp, #28]
 800936c:	9b04      	ldr	r3, [sp, #16]
 800936e:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8009372:	1c58      	adds	r0, r3, #1
 8009374:	d010      	beq.n	8009398 <_svfprintf_r+0xae0>
 8009376:	461a      	mov	r2, r3
 8009378:	4629      	mov	r1, r5
 800937a:	4648      	mov	r0, r9
 800937c:	f7f6 ff38 	bl	80001f0 <memchr>
 8009380:	9003      	str	r0, [sp, #12]
 8009382:	2800      	cmp	r0, #0
 8009384:	f000 80d4 	beq.w	8009530 <_svfprintf_r+0xc78>
 8009388:	eba0 0309 	sub.w	r3, r0, r9
 800938c:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8009390:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8009394:	462e      	mov	r6, r5
 8009396:	e5bb      	b.n	8008f10 <_svfprintf_r+0x658>
 8009398:	4648      	mov	r0, r9
 800939a:	f7f6 ff21 	bl	80001e0 <strlen>
 800939e:	e9cd 5003 	strd	r5, r0, [sp, #12]
 80093a2:	e45f      	b.n	8008c64 <_svfprintf_r+0x3ac>
 80093a4:	f04b 0b10 	orr.w	fp, fp, #16
 80093a8:	f01b 0320 	ands.w	r3, fp, #32
 80093ac:	d009      	beq.n	80093c2 <_svfprintf_r+0xb0a>
 80093ae:	1df3      	adds	r3, r6, #7
 80093b0:	f023 0307 	bic.w	r3, r3, #7
 80093b4:	461a      	mov	r2, r3
 80093b6:	685d      	ldr	r5, [r3, #4]
 80093b8:	f852 6b08 	ldr.w	r6, [r2], #8
 80093bc:	9207      	str	r2, [sp, #28]
 80093be:	2301      	movs	r3, #1
 80093c0:	e795      	b.n	80092ee <_svfprintf_r+0xa36>
 80093c2:	4632      	mov	r2, r6
 80093c4:	f01b 0510 	ands.w	r5, fp, #16
 80093c8:	f852 6b04 	ldr.w	r6, [r2], #4
 80093cc:	9207      	str	r2, [sp, #28]
 80093ce:	d001      	beq.n	80093d4 <_svfprintf_r+0xb1c>
 80093d0:	461d      	mov	r5, r3
 80093d2:	e7f4      	b.n	80093be <_svfprintf_r+0xb06>
 80093d4:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 80093d8:	d001      	beq.n	80093de <_svfprintf_r+0xb26>
 80093da:	b2b6      	uxth	r6, r6
 80093dc:	e7ef      	b.n	80093be <_svfprintf_r+0xb06>
 80093de:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 80093e2:	d0ec      	beq.n	80093be <_svfprintf_r+0xb06>
 80093e4:	b2f6      	uxtb	r6, r6
 80093e6:	e7f3      	b.n	80093d0 <_svfprintf_r+0xb18>
 80093e8:	4b7d      	ldr	r3, [pc, #500]	; (80095e0 <_svfprintf_r+0xd28>)
 80093ea:	9316      	str	r3, [sp, #88]	; 0x58
 80093ec:	f01b 0320 	ands.w	r3, fp, #32
 80093f0:	d01b      	beq.n	800942a <_svfprintf_r+0xb72>
 80093f2:	1df3      	adds	r3, r6, #7
 80093f4:	f023 0307 	bic.w	r3, r3, #7
 80093f8:	461a      	mov	r2, r3
 80093fa:	685d      	ldr	r5, [r3, #4]
 80093fc:	f852 6b08 	ldr.w	r6, [r2], #8
 8009400:	9207      	str	r2, [sp, #28]
 8009402:	f01b 0f01 	tst.w	fp, #1
 8009406:	d00a      	beq.n	800941e <_svfprintf_r+0xb66>
 8009408:	ea56 0305 	orrs.w	r3, r6, r5
 800940c:	d007      	beq.n	800941e <_svfprintf_r+0xb66>
 800940e:	2330      	movs	r3, #48	; 0x30
 8009410:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8009414:	9b06      	ldr	r3, [sp, #24]
 8009416:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800941a:	f04b 0b02 	orr.w	fp, fp, #2
 800941e:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8009422:	2302      	movs	r3, #2
 8009424:	e763      	b.n	80092ee <_svfprintf_r+0xa36>
 8009426:	4b6d      	ldr	r3, [pc, #436]	; (80095dc <_svfprintf_r+0xd24>)
 8009428:	e7df      	b.n	80093ea <_svfprintf_r+0xb32>
 800942a:	4632      	mov	r2, r6
 800942c:	f01b 0510 	ands.w	r5, fp, #16
 8009430:	f852 6b04 	ldr.w	r6, [r2], #4
 8009434:	9207      	str	r2, [sp, #28]
 8009436:	d001      	beq.n	800943c <_svfprintf_r+0xb84>
 8009438:	461d      	mov	r5, r3
 800943a:	e7e2      	b.n	8009402 <_svfprintf_r+0xb4a>
 800943c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8009440:	d001      	beq.n	8009446 <_svfprintf_r+0xb8e>
 8009442:	b2b6      	uxth	r6, r6
 8009444:	e7dd      	b.n	8009402 <_svfprintf_r+0xb4a>
 8009446:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 800944a:	d0da      	beq.n	8009402 <_svfprintf_r+0xb4a>
 800944c:	b2f6      	uxtb	r6, r6
 800944e:	e7f3      	b.n	8009438 <_svfprintf_r+0xb80>
 8009450:	2e0a      	cmp	r6, #10
 8009452:	f175 0300 	sbcs.w	r3, r5, #0
 8009456:	d205      	bcs.n	8009464 <_svfprintf_r+0xbac>
 8009458:	3630      	adds	r6, #48	; 0x30
 800945a:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 800945e:	f20d 1937 	addw	r9, sp, #311	; 0x137
 8009462:	e3fb      	b.n	8009c5c <_svfprintf_r+0x13a4>
 8009464:	2300      	movs	r3, #0
 8009466:	9305      	str	r3, [sp, #20]
 8009468:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 800946c:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8009470:	9303      	str	r3, [sp, #12]
 8009472:	220a      	movs	r2, #10
 8009474:	2300      	movs	r3, #0
 8009476:	4630      	mov	r0, r6
 8009478:	4629      	mov	r1, r5
 800947a:	f7f7 fc0d 	bl	8000c98 <__aeabi_uldivmod>
 800947e:	9b05      	ldr	r3, [sp, #20]
 8009480:	3301      	adds	r3, #1
 8009482:	9305      	str	r3, [sp, #20]
 8009484:	9b03      	ldr	r3, [sp, #12]
 8009486:	3230      	adds	r2, #48	; 0x30
 8009488:	f10b 39ff 	add.w	r9, fp, #4294967295
 800948c:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8009490:	b1d3      	cbz	r3, 80094c8 <_svfprintf_r+0xc10>
 8009492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009494:	9a05      	ldr	r2, [sp, #20]
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	429a      	cmp	r2, r3
 800949a:	d115      	bne.n	80094c8 <_svfprintf_r+0xc10>
 800949c:	2aff      	cmp	r2, #255	; 0xff
 800949e:	d013      	beq.n	80094c8 <_svfprintf_r+0xc10>
 80094a0:	2e0a      	cmp	r6, #10
 80094a2:	f175 0300 	sbcs.w	r3, r5, #0
 80094a6:	d30f      	bcc.n	80094c8 <_svfprintf_r+0xc10>
 80094a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094aa:	9914      	ldr	r1, [sp, #80]	; 0x50
 80094ac:	eba9 0903 	sub.w	r9, r9, r3
 80094b0:	461a      	mov	r2, r3
 80094b2:	4648      	mov	r0, r9
 80094b4:	f003 fc62 	bl	800cd7c <strncpy>
 80094b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ba:	785b      	ldrb	r3, [r3, #1]
 80094bc:	b11b      	cbz	r3, 80094c6 <_svfprintf_r+0xc0e>
 80094be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094c0:	3301      	adds	r3, #1
 80094c2:	930a      	str	r3, [sp, #40]	; 0x28
 80094c4:	2300      	movs	r3, #0
 80094c6:	9305      	str	r3, [sp, #20]
 80094c8:	2300      	movs	r3, #0
 80094ca:	220a      	movs	r2, #10
 80094cc:	4630      	mov	r0, r6
 80094ce:	4629      	mov	r1, r5
 80094d0:	f7f7 fbe2 	bl	8000c98 <__aeabi_uldivmod>
 80094d4:	2e0a      	cmp	r6, #10
 80094d6:	f175 0300 	sbcs.w	r3, r5, #0
 80094da:	f0c0 83bf 	bcc.w	8009c5c <_svfprintf_r+0x13a4>
 80094de:	4606      	mov	r6, r0
 80094e0:	460d      	mov	r5, r1
 80094e2:	46cb      	mov	fp, r9
 80094e4:	e7c5      	b.n	8009472 <_svfprintf_r+0xbba>
 80094e6:	f006 030f 	and.w	r3, r6, #15
 80094ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80094ec:	0936      	lsrs	r6, r6, #4
 80094ee:	5cd3      	ldrb	r3, [r2, r3]
 80094f0:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80094f4:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 80094f8:	092d      	lsrs	r5, r5, #4
 80094fa:	ea56 0305 	orrs.w	r3, r6, r5
 80094fe:	d1f2      	bne.n	80094e6 <_svfprintf_r+0xc2e>
 8009500:	e3ac      	b.n	8009c5c <_svfprintf_r+0x13a4>
 8009502:	b933      	cbnz	r3, 8009512 <_svfprintf_r+0xc5a>
 8009504:	f01b 0f01 	tst.w	fp, #1
 8009508:	d003      	beq.n	8009512 <_svfprintf_r+0xc5a>
 800950a:	2330      	movs	r3, #48	; 0x30
 800950c:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8009510:	e7a5      	b.n	800945e <_svfprintf_r+0xba6>
 8009512:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 8009516:	e3a1      	b.n	8009c5c <_svfprintf_r+0x13a4>
 8009518:	9b06      	ldr	r3, [sp, #24]
 800951a:	2b00      	cmp	r3, #0
 800951c:	f000 8370 	beq.w	8009c00 <_svfprintf_r+0x1348>
 8009520:	2000      	movs	r0, #0
 8009522:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8009526:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800952a:	9607      	str	r6, [sp, #28]
 800952c:	f7ff bb29 	b.w	8008b82 <_svfprintf_r+0x2ca>
 8009530:	9e03      	ldr	r6, [sp, #12]
 8009532:	f7ff bb98 	b.w	8008c66 <_svfprintf_r+0x3ae>
 8009536:	2010      	movs	r0, #16
 8009538:	4402      	add	r2, r0
 800953a:	2b07      	cmp	r3, #7
 800953c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009540:	6060      	str	r0, [r4, #4]
 8009542:	dd08      	ble.n	8009556 <_svfprintf_r+0xc9e>
 8009544:	aa22      	add	r2, sp, #136	; 0x88
 8009546:	4641      	mov	r1, r8
 8009548:	4650      	mov	r0, sl
 800954a:	f004 fbfb 	bl	800dd44 <__ssprint_r>
 800954e:	2800      	cmp	r0, #0
 8009550:	f040 8334 	bne.w	8009bbc <_svfprintf_r+0x1304>
 8009554:	a925      	add	r1, sp, #148	; 0x94
 8009556:	3f10      	subs	r7, #16
 8009558:	460c      	mov	r4, r1
 800955a:	e4f4      	b.n	8008f46 <_svfprintf_r+0x68e>
 800955c:	460c      	mov	r4, r1
 800955e:	e50d      	b.n	8008f7c <_svfprintf_r+0x6c4>
 8009560:	aa22      	add	r2, sp, #136	; 0x88
 8009562:	4641      	mov	r1, r8
 8009564:	4650      	mov	r0, sl
 8009566:	f004 fbed 	bl	800dd44 <__ssprint_r>
 800956a:	2800      	cmp	r0, #0
 800956c:	f040 8326 	bne.w	8009bbc <_svfprintf_r+0x1304>
 8009570:	ac25      	add	r4, sp, #148	; 0x94
 8009572:	e515      	b.n	8008fa0 <_svfprintf_r+0x6e8>
 8009574:	aa22      	add	r2, sp, #136	; 0x88
 8009576:	4641      	mov	r1, r8
 8009578:	4650      	mov	r0, sl
 800957a:	f004 fbe3 	bl	800dd44 <__ssprint_r>
 800957e:	2800      	cmp	r0, #0
 8009580:	f040 831c 	bne.w	8009bbc <_svfprintf_r+0x1304>
 8009584:	ac25      	add	r4, sp, #148	; 0x94
 8009586:	e51b      	b.n	8008fc0 <_svfprintf_r+0x708>
 8009588:	2010      	movs	r0, #16
 800958a:	4402      	add	r2, r0
 800958c:	2b07      	cmp	r3, #7
 800958e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009592:	6060      	str	r0, [r4, #4]
 8009594:	dd08      	ble.n	80095a8 <_svfprintf_r+0xcf0>
 8009596:	aa22      	add	r2, sp, #136	; 0x88
 8009598:	4641      	mov	r1, r8
 800959a:	4650      	mov	r0, sl
 800959c:	f004 fbd2 	bl	800dd44 <__ssprint_r>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	f040 830b 	bne.w	8009bbc <_svfprintf_r+0x1304>
 80095a6:	a925      	add	r1, sp, #148	; 0x94
 80095a8:	3f10      	subs	r7, #16
 80095aa:	460c      	mov	r4, r1
 80095ac:	e510      	b.n	8008fd0 <_svfprintf_r+0x718>
 80095ae:	460c      	mov	r4, r1
 80095b0:	e529      	b.n	8009006 <_svfprintf_r+0x74e>
 80095b2:	2010      	movs	r0, #16
 80095b4:	4402      	add	r2, r0
 80095b6:	2b07      	cmp	r3, #7
 80095b8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80095bc:	6060      	str	r0, [r4, #4]
 80095be:	dd08      	ble.n	80095d2 <_svfprintf_r+0xd1a>
 80095c0:	aa22      	add	r2, sp, #136	; 0x88
 80095c2:	4641      	mov	r1, r8
 80095c4:	4650      	mov	r0, sl
 80095c6:	f004 fbbd 	bl	800dd44 <__ssprint_r>
 80095ca:	2800      	cmp	r0, #0
 80095cc:	f040 82f6 	bne.w	8009bbc <_svfprintf_r+0x1304>
 80095d0:	a925      	add	r1, sp, #148	; 0x94
 80095d2:	3e10      	subs	r6, #16
 80095d4:	460c      	mov	r4, r1
 80095d6:	e529      	b.n	800902c <_svfprintf_r+0x774>
 80095d8:	460c      	mov	r4, r1
 80095da:	e541      	b.n	8009060 <_svfprintf_r+0x7a8>
 80095dc:	0800ff9c 	.word	0x0800ff9c
 80095e0:	0800ffad 	.word	0x0800ffad
 80095e4:	9b06      	ldr	r3, [sp, #24]
 80095e6:	2b65      	cmp	r3, #101	; 0x65
 80095e8:	f340 8230 	ble.w	8009a4c <_svfprintf_r+0x1194>
 80095ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80095f0:	2200      	movs	r2, #0
 80095f2:	2300      	movs	r3, #0
 80095f4:	f7f7 fa70 	bl	8000ad8 <__aeabi_dcmpeq>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	d068      	beq.n	80096ce <_svfprintf_r+0xe16>
 80095fc:	4b6d      	ldr	r3, [pc, #436]	; (80097b4 <_svfprintf_r+0xefc>)
 80095fe:	6023      	str	r3, [r4, #0]
 8009600:	2301      	movs	r3, #1
 8009602:	441e      	add	r6, r3
 8009604:	6063      	str	r3, [r4, #4]
 8009606:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009608:	9624      	str	r6, [sp, #144]	; 0x90
 800960a:	3301      	adds	r3, #1
 800960c:	2b07      	cmp	r3, #7
 800960e:	9323      	str	r3, [sp, #140]	; 0x8c
 8009610:	dc37      	bgt.n	8009682 <_svfprintf_r+0xdca>
 8009612:	3408      	adds	r4, #8
 8009614:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009616:	9a05      	ldr	r2, [sp, #20]
 8009618:	4293      	cmp	r3, r2
 800961a:	db03      	blt.n	8009624 <_svfprintf_r+0xd6c>
 800961c:	f01b 0f01 	tst.w	fp, #1
 8009620:	f43f ad30 	beq.w	8009084 <_svfprintf_r+0x7cc>
 8009624:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009626:	6023      	str	r3, [r4, #0]
 8009628:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800962a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800962c:	6063      	str	r3, [r4, #4]
 800962e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009630:	4413      	add	r3, r2
 8009632:	9324      	str	r3, [sp, #144]	; 0x90
 8009634:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009636:	3301      	adds	r3, #1
 8009638:	2b07      	cmp	r3, #7
 800963a:	9323      	str	r3, [sp, #140]	; 0x8c
 800963c:	dc2b      	bgt.n	8009696 <_svfprintf_r+0xdde>
 800963e:	3408      	adds	r4, #8
 8009640:	9b05      	ldr	r3, [sp, #20]
 8009642:	1e5d      	subs	r5, r3, #1
 8009644:	2d00      	cmp	r5, #0
 8009646:	f77f ad1d 	ble.w	8009084 <_svfprintf_r+0x7cc>
 800964a:	4e5b      	ldr	r6, [pc, #364]	; (80097b8 <_svfprintf_r+0xf00>)
 800964c:	2710      	movs	r7, #16
 800964e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009652:	2d10      	cmp	r5, #16
 8009654:	f103 0301 	add.w	r3, r3, #1
 8009658:	f104 0108 	add.w	r1, r4, #8
 800965c:	6026      	str	r6, [r4, #0]
 800965e:	dc24      	bgt.n	80096aa <_svfprintf_r+0xdf2>
 8009660:	6065      	str	r5, [r4, #4]
 8009662:	2b07      	cmp	r3, #7
 8009664:	4415      	add	r5, r2
 8009666:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800966a:	f340 8286 	ble.w	8009b7a <_svfprintf_r+0x12c2>
 800966e:	aa22      	add	r2, sp, #136	; 0x88
 8009670:	4641      	mov	r1, r8
 8009672:	4650      	mov	r0, sl
 8009674:	f004 fb66 	bl	800dd44 <__ssprint_r>
 8009678:	2800      	cmp	r0, #0
 800967a:	f040 829f 	bne.w	8009bbc <_svfprintf_r+0x1304>
 800967e:	ac25      	add	r4, sp, #148	; 0x94
 8009680:	e500      	b.n	8009084 <_svfprintf_r+0x7cc>
 8009682:	aa22      	add	r2, sp, #136	; 0x88
 8009684:	4641      	mov	r1, r8
 8009686:	4650      	mov	r0, sl
 8009688:	f004 fb5c 	bl	800dd44 <__ssprint_r>
 800968c:	2800      	cmp	r0, #0
 800968e:	f040 8295 	bne.w	8009bbc <_svfprintf_r+0x1304>
 8009692:	ac25      	add	r4, sp, #148	; 0x94
 8009694:	e7be      	b.n	8009614 <_svfprintf_r+0xd5c>
 8009696:	aa22      	add	r2, sp, #136	; 0x88
 8009698:	4641      	mov	r1, r8
 800969a:	4650      	mov	r0, sl
 800969c:	f004 fb52 	bl	800dd44 <__ssprint_r>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	f040 828b 	bne.w	8009bbc <_svfprintf_r+0x1304>
 80096a6:	ac25      	add	r4, sp, #148	; 0x94
 80096a8:	e7ca      	b.n	8009640 <_svfprintf_r+0xd88>
 80096aa:	3210      	adds	r2, #16
 80096ac:	2b07      	cmp	r3, #7
 80096ae:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80096b2:	6067      	str	r7, [r4, #4]
 80096b4:	dd08      	ble.n	80096c8 <_svfprintf_r+0xe10>
 80096b6:	aa22      	add	r2, sp, #136	; 0x88
 80096b8:	4641      	mov	r1, r8
 80096ba:	4650      	mov	r0, sl
 80096bc:	f004 fb42 	bl	800dd44 <__ssprint_r>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	f040 827b 	bne.w	8009bbc <_svfprintf_r+0x1304>
 80096c6:	a925      	add	r1, sp, #148	; 0x94
 80096c8:	3d10      	subs	r5, #16
 80096ca:	460c      	mov	r4, r1
 80096cc:	e7bf      	b.n	800964e <_svfprintf_r+0xd96>
 80096ce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	dc73      	bgt.n	80097bc <_svfprintf_r+0xf04>
 80096d4:	4b37      	ldr	r3, [pc, #220]	; (80097b4 <_svfprintf_r+0xefc>)
 80096d6:	6023      	str	r3, [r4, #0]
 80096d8:	2301      	movs	r3, #1
 80096da:	441e      	add	r6, r3
 80096dc:	6063      	str	r3, [r4, #4]
 80096de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80096e0:	9624      	str	r6, [sp, #144]	; 0x90
 80096e2:	3301      	adds	r3, #1
 80096e4:	2b07      	cmp	r3, #7
 80096e6:	9323      	str	r3, [sp, #140]	; 0x8c
 80096e8:	dc3d      	bgt.n	8009766 <_svfprintf_r+0xeae>
 80096ea:	3408      	adds	r4, #8
 80096ec:	9905      	ldr	r1, [sp, #20]
 80096ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80096f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80096f2:	430a      	orrs	r2, r1
 80096f4:	f00b 0101 	and.w	r1, fp, #1
 80096f8:	430a      	orrs	r2, r1
 80096fa:	f43f acc3 	beq.w	8009084 <_svfprintf_r+0x7cc>
 80096fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009700:	6022      	str	r2, [r4, #0]
 8009702:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009704:	6062      	str	r2, [r4, #4]
 8009706:	4413      	add	r3, r2
 8009708:	9324      	str	r3, [sp, #144]	; 0x90
 800970a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800970c:	3301      	adds	r3, #1
 800970e:	2b07      	cmp	r3, #7
 8009710:	9323      	str	r3, [sp, #140]	; 0x8c
 8009712:	dc32      	bgt.n	800977a <_svfprintf_r+0xec2>
 8009714:	3408      	adds	r4, #8
 8009716:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8009718:	2d00      	cmp	r5, #0
 800971a:	da1b      	bge.n	8009754 <_svfprintf_r+0xe9c>
 800971c:	4e26      	ldr	r6, [pc, #152]	; (80097b8 <_svfprintf_r+0xf00>)
 800971e:	426d      	negs	r5, r5
 8009720:	4623      	mov	r3, r4
 8009722:	2710      	movs	r7, #16
 8009724:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8009728:	2d10      	cmp	r5, #16
 800972a:	f102 0201 	add.w	r2, r2, #1
 800972e:	f104 0408 	add.w	r4, r4, #8
 8009732:	601e      	str	r6, [r3, #0]
 8009734:	dc2b      	bgt.n	800978e <_svfprintf_r+0xed6>
 8009736:	605d      	str	r5, [r3, #4]
 8009738:	2a07      	cmp	r2, #7
 800973a:	440d      	add	r5, r1
 800973c:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8009740:	dd08      	ble.n	8009754 <_svfprintf_r+0xe9c>
 8009742:	aa22      	add	r2, sp, #136	; 0x88
 8009744:	4641      	mov	r1, r8
 8009746:	4650      	mov	r0, sl
 8009748:	f004 fafc 	bl	800dd44 <__ssprint_r>
 800974c:	2800      	cmp	r0, #0
 800974e:	f040 8235 	bne.w	8009bbc <_svfprintf_r+0x1304>
 8009752:	ac25      	add	r4, sp, #148	; 0x94
 8009754:	9b05      	ldr	r3, [sp, #20]
 8009756:	9a05      	ldr	r2, [sp, #20]
 8009758:	6063      	str	r3, [r4, #4]
 800975a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800975c:	f8c4 9000 	str.w	r9, [r4]
 8009760:	4413      	add	r3, r2
 8009762:	9324      	str	r3, [sp, #144]	; 0x90
 8009764:	e487      	b.n	8009076 <_svfprintf_r+0x7be>
 8009766:	aa22      	add	r2, sp, #136	; 0x88
 8009768:	4641      	mov	r1, r8
 800976a:	4650      	mov	r0, sl
 800976c:	f004 faea 	bl	800dd44 <__ssprint_r>
 8009770:	2800      	cmp	r0, #0
 8009772:	f040 8223 	bne.w	8009bbc <_svfprintf_r+0x1304>
 8009776:	ac25      	add	r4, sp, #148	; 0x94
 8009778:	e7b8      	b.n	80096ec <_svfprintf_r+0xe34>
 800977a:	aa22      	add	r2, sp, #136	; 0x88
 800977c:	4641      	mov	r1, r8
 800977e:	4650      	mov	r0, sl
 8009780:	f004 fae0 	bl	800dd44 <__ssprint_r>
 8009784:	2800      	cmp	r0, #0
 8009786:	f040 8219 	bne.w	8009bbc <_svfprintf_r+0x1304>
 800978a:	ac25      	add	r4, sp, #148	; 0x94
 800978c:	e7c3      	b.n	8009716 <_svfprintf_r+0xe5e>
 800978e:	3110      	adds	r1, #16
 8009790:	2a07      	cmp	r2, #7
 8009792:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8009796:	605f      	str	r7, [r3, #4]
 8009798:	dd08      	ble.n	80097ac <_svfprintf_r+0xef4>
 800979a:	aa22      	add	r2, sp, #136	; 0x88
 800979c:	4641      	mov	r1, r8
 800979e:	4650      	mov	r0, sl
 80097a0:	f004 fad0 	bl	800dd44 <__ssprint_r>
 80097a4:	2800      	cmp	r0, #0
 80097a6:	f040 8209 	bne.w	8009bbc <_svfprintf_r+0x1304>
 80097aa:	ac25      	add	r4, sp, #148	; 0x94
 80097ac:	3d10      	subs	r5, #16
 80097ae:	4623      	mov	r3, r4
 80097b0:	e7b8      	b.n	8009724 <_svfprintf_r+0xe6c>
 80097b2:	bf00      	nop
 80097b4:	0800ffbe 	.word	0x0800ffbe
 80097b8:	0800ffd0 	.word	0x0800ffd0
 80097bc:	9f05      	ldr	r7, [sp, #20]
 80097be:	42af      	cmp	r7, r5
 80097c0:	bfa8      	it	ge
 80097c2:	462f      	movge	r7, r5
 80097c4:	2f00      	cmp	r7, #0
 80097c6:	dd0a      	ble.n	80097de <_svfprintf_r+0xf26>
 80097c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80097ca:	3301      	adds	r3, #1
 80097cc:	443e      	add	r6, r7
 80097ce:	2b07      	cmp	r3, #7
 80097d0:	e9c4 9700 	strd	r9, r7, [r4]
 80097d4:	9624      	str	r6, [sp, #144]	; 0x90
 80097d6:	9323      	str	r3, [sp, #140]	; 0x8c
 80097d8:	f300 8085 	bgt.w	80098e6 <_svfprintf_r+0x102e>
 80097dc:	3408      	adds	r4, #8
 80097de:	2f00      	cmp	r7, #0
 80097e0:	bfac      	ite	ge
 80097e2:	1bee      	subge	r6, r5, r7
 80097e4:	462e      	movlt	r6, r5
 80097e6:	2e00      	cmp	r6, #0
 80097e8:	dd19      	ble.n	800981e <_svfprintf_r+0xf66>
 80097ea:	4f97      	ldr	r7, [pc, #604]	; (8009a48 <_svfprintf_r+0x1190>)
 80097ec:	6027      	str	r7, [r4, #0]
 80097ee:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80097f2:	2e10      	cmp	r6, #16
 80097f4:	f103 0301 	add.w	r3, r3, #1
 80097f8:	f104 0108 	add.w	r1, r4, #8
 80097fc:	dc7d      	bgt.n	80098fa <_svfprintf_r+0x1042>
 80097fe:	6066      	str	r6, [r4, #4]
 8009800:	2b07      	cmp	r3, #7
 8009802:	4416      	add	r6, r2
 8009804:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8009808:	f340 808a 	ble.w	8009920 <_svfprintf_r+0x1068>
 800980c:	aa22      	add	r2, sp, #136	; 0x88
 800980e:	4641      	mov	r1, r8
 8009810:	4650      	mov	r0, sl
 8009812:	f004 fa97 	bl	800dd44 <__ssprint_r>
 8009816:	2800      	cmp	r0, #0
 8009818:	f040 81d0 	bne.w	8009bbc <_svfprintf_r+0x1304>
 800981c:	ac25      	add	r4, sp, #148	; 0x94
 800981e:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8009822:	444d      	add	r5, r9
 8009824:	d00a      	beq.n	800983c <_svfprintf_r+0xf84>
 8009826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009828:	2b00      	cmp	r3, #0
 800982a:	d17b      	bne.n	8009924 <_svfprintf_r+0x106c>
 800982c:	9b08      	ldr	r3, [sp, #32]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d17b      	bne.n	800992a <_svfprintf_r+0x1072>
 8009832:	9b05      	ldr	r3, [sp, #20]
 8009834:	444b      	add	r3, r9
 8009836:	429d      	cmp	r5, r3
 8009838:	bf28      	it	cs
 800983a:	461d      	movcs	r5, r3
 800983c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800983e:	9a05      	ldr	r2, [sp, #20]
 8009840:	4293      	cmp	r3, r2
 8009842:	db02      	blt.n	800984a <_svfprintf_r+0xf92>
 8009844:	f01b 0f01 	tst.w	fp, #1
 8009848:	d00e      	beq.n	8009868 <_svfprintf_r+0xfb0>
 800984a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800984c:	6023      	str	r3, [r4, #0]
 800984e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009850:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009852:	6063      	str	r3, [r4, #4]
 8009854:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009856:	4413      	add	r3, r2
 8009858:	9324      	str	r3, [sp, #144]	; 0x90
 800985a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800985c:	3301      	adds	r3, #1
 800985e:	2b07      	cmp	r3, #7
 8009860:	9323      	str	r3, [sp, #140]	; 0x8c
 8009862:	f300 80dd 	bgt.w	8009a20 <_svfprintf_r+0x1168>
 8009866:	3408      	adds	r4, #8
 8009868:	9b05      	ldr	r3, [sp, #20]
 800986a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800986c:	eb09 0203 	add.w	r2, r9, r3
 8009870:	1b9e      	subs	r6, r3, r6
 8009872:	1b52      	subs	r2, r2, r5
 8009874:	4296      	cmp	r6, r2
 8009876:	bfa8      	it	ge
 8009878:	4616      	movge	r6, r2
 800987a:	2e00      	cmp	r6, #0
 800987c:	dd0b      	ble.n	8009896 <_svfprintf_r+0xfde>
 800987e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009880:	4433      	add	r3, r6
 8009882:	9324      	str	r3, [sp, #144]	; 0x90
 8009884:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009886:	3301      	adds	r3, #1
 8009888:	2b07      	cmp	r3, #7
 800988a:	e9c4 5600 	strd	r5, r6, [r4]
 800988e:	9323      	str	r3, [sp, #140]	; 0x8c
 8009890:	f300 80d0 	bgt.w	8009a34 <_svfprintf_r+0x117c>
 8009894:	3408      	adds	r4, #8
 8009896:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8009898:	9b05      	ldr	r3, [sp, #20]
 800989a:	2e00      	cmp	r6, #0
 800989c:	eba3 0505 	sub.w	r5, r3, r5
 80098a0:	bfa8      	it	ge
 80098a2:	1bad      	subge	r5, r5, r6
 80098a4:	2d00      	cmp	r5, #0
 80098a6:	f77f abed 	ble.w	8009084 <_svfprintf_r+0x7cc>
 80098aa:	4e67      	ldr	r6, [pc, #412]	; (8009a48 <_svfprintf_r+0x1190>)
 80098ac:	2710      	movs	r7, #16
 80098ae:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80098b2:	2d10      	cmp	r5, #16
 80098b4:	f103 0301 	add.w	r3, r3, #1
 80098b8:	f104 0108 	add.w	r1, r4, #8
 80098bc:	6026      	str	r6, [r4, #0]
 80098be:	f77f aecf 	ble.w	8009660 <_svfprintf_r+0xda8>
 80098c2:	3210      	adds	r2, #16
 80098c4:	2b07      	cmp	r3, #7
 80098c6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80098ca:	6067      	str	r7, [r4, #4]
 80098cc:	dd08      	ble.n	80098e0 <_svfprintf_r+0x1028>
 80098ce:	aa22      	add	r2, sp, #136	; 0x88
 80098d0:	4641      	mov	r1, r8
 80098d2:	4650      	mov	r0, sl
 80098d4:	f004 fa36 	bl	800dd44 <__ssprint_r>
 80098d8:	2800      	cmp	r0, #0
 80098da:	f040 816f 	bne.w	8009bbc <_svfprintf_r+0x1304>
 80098de:	a925      	add	r1, sp, #148	; 0x94
 80098e0:	3d10      	subs	r5, #16
 80098e2:	460c      	mov	r4, r1
 80098e4:	e7e3      	b.n	80098ae <_svfprintf_r+0xff6>
 80098e6:	aa22      	add	r2, sp, #136	; 0x88
 80098e8:	4641      	mov	r1, r8
 80098ea:	4650      	mov	r0, sl
 80098ec:	f004 fa2a 	bl	800dd44 <__ssprint_r>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	f040 8163 	bne.w	8009bbc <_svfprintf_r+0x1304>
 80098f6:	ac25      	add	r4, sp, #148	; 0x94
 80098f8:	e771      	b.n	80097de <_svfprintf_r+0xf26>
 80098fa:	2010      	movs	r0, #16
 80098fc:	4402      	add	r2, r0
 80098fe:	2b07      	cmp	r3, #7
 8009900:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009904:	6060      	str	r0, [r4, #4]
 8009906:	dd08      	ble.n	800991a <_svfprintf_r+0x1062>
 8009908:	aa22      	add	r2, sp, #136	; 0x88
 800990a:	4641      	mov	r1, r8
 800990c:	4650      	mov	r0, sl
 800990e:	f004 fa19 	bl	800dd44 <__ssprint_r>
 8009912:	2800      	cmp	r0, #0
 8009914:	f040 8152 	bne.w	8009bbc <_svfprintf_r+0x1304>
 8009918:	a925      	add	r1, sp, #148	; 0x94
 800991a:	3e10      	subs	r6, #16
 800991c:	460c      	mov	r4, r1
 800991e:	e765      	b.n	80097ec <_svfprintf_r+0xf34>
 8009920:	460c      	mov	r4, r1
 8009922:	e77c      	b.n	800981e <_svfprintf_r+0xf66>
 8009924:	9b08      	ldr	r3, [sp, #32]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d04a      	beq.n	80099c0 <_svfprintf_r+0x1108>
 800992a:	9b08      	ldr	r3, [sp, #32]
 800992c:	3b01      	subs	r3, #1
 800992e:	9308      	str	r3, [sp, #32]
 8009930:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009932:	6023      	str	r3, [r4, #0]
 8009934:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009936:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009938:	6063      	str	r3, [r4, #4]
 800993a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800993c:	4413      	add	r3, r2
 800993e:	9324      	str	r3, [sp, #144]	; 0x90
 8009940:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009942:	3301      	adds	r3, #1
 8009944:	2b07      	cmp	r3, #7
 8009946:	9323      	str	r3, [sp, #140]	; 0x8c
 8009948:	dc41      	bgt.n	80099ce <_svfprintf_r+0x1116>
 800994a:	3408      	adds	r4, #8
 800994c:	9b05      	ldr	r3, [sp, #20]
 800994e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009950:	eb09 0703 	add.w	r7, r9, r3
 8009954:	1b7b      	subs	r3, r7, r5
 8009956:	7817      	ldrb	r7, [r2, #0]
 8009958:	429f      	cmp	r7, r3
 800995a:	bfa8      	it	ge
 800995c:	461f      	movge	r7, r3
 800995e:	2f00      	cmp	r7, #0
 8009960:	dd0a      	ble.n	8009978 <_svfprintf_r+0x10c0>
 8009962:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009964:	443b      	add	r3, r7
 8009966:	9324      	str	r3, [sp, #144]	; 0x90
 8009968:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800996a:	3301      	adds	r3, #1
 800996c:	2b07      	cmp	r3, #7
 800996e:	e9c4 5700 	strd	r5, r7, [r4]
 8009972:	9323      	str	r3, [sp, #140]	; 0x8c
 8009974:	dc35      	bgt.n	80099e2 <_svfprintf_r+0x112a>
 8009976:	3408      	adds	r4, #8
 8009978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800997a:	781e      	ldrb	r6, [r3, #0]
 800997c:	2f00      	cmp	r7, #0
 800997e:	bfa8      	it	ge
 8009980:	1bf6      	subge	r6, r6, r7
 8009982:	2e00      	cmp	r6, #0
 8009984:	dd18      	ble.n	80099b8 <_svfprintf_r+0x1100>
 8009986:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800998a:	482f      	ldr	r0, [pc, #188]	; (8009a48 <_svfprintf_r+0x1190>)
 800998c:	6020      	str	r0, [r4, #0]
 800998e:	2e10      	cmp	r6, #16
 8009990:	f103 0301 	add.w	r3, r3, #1
 8009994:	f104 0108 	add.w	r1, r4, #8
 8009998:	dc2d      	bgt.n	80099f6 <_svfprintf_r+0x113e>
 800999a:	4432      	add	r2, r6
 800999c:	2b07      	cmp	r3, #7
 800999e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80099a2:	6066      	str	r6, [r4, #4]
 80099a4:	dd3a      	ble.n	8009a1c <_svfprintf_r+0x1164>
 80099a6:	aa22      	add	r2, sp, #136	; 0x88
 80099a8:	4641      	mov	r1, r8
 80099aa:	4650      	mov	r0, sl
 80099ac:	f004 f9ca 	bl	800dd44 <__ssprint_r>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	f040 8103 	bne.w	8009bbc <_svfprintf_r+0x1304>
 80099b6:	ac25      	add	r4, sp, #148	; 0x94
 80099b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	441d      	add	r5, r3
 80099be:	e732      	b.n	8009826 <_svfprintf_r+0xf6e>
 80099c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099c2:	3b01      	subs	r3, #1
 80099c4:	930a      	str	r3, [sp, #40]	; 0x28
 80099c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c8:	3b01      	subs	r3, #1
 80099ca:	9309      	str	r3, [sp, #36]	; 0x24
 80099cc:	e7b0      	b.n	8009930 <_svfprintf_r+0x1078>
 80099ce:	aa22      	add	r2, sp, #136	; 0x88
 80099d0:	4641      	mov	r1, r8
 80099d2:	4650      	mov	r0, sl
 80099d4:	f004 f9b6 	bl	800dd44 <__ssprint_r>
 80099d8:	2800      	cmp	r0, #0
 80099da:	f040 80ef 	bne.w	8009bbc <_svfprintf_r+0x1304>
 80099de:	ac25      	add	r4, sp, #148	; 0x94
 80099e0:	e7b4      	b.n	800994c <_svfprintf_r+0x1094>
 80099e2:	aa22      	add	r2, sp, #136	; 0x88
 80099e4:	4641      	mov	r1, r8
 80099e6:	4650      	mov	r0, sl
 80099e8:	f004 f9ac 	bl	800dd44 <__ssprint_r>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	f040 80e5 	bne.w	8009bbc <_svfprintf_r+0x1304>
 80099f2:	ac25      	add	r4, sp, #148	; 0x94
 80099f4:	e7c0      	b.n	8009978 <_svfprintf_r+0x10c0>
 80099f6:	2010      	movs	r0, #16
 80099f8:	4402      	add	r2, r0
 80099fa:	2b07      	cmp	r3, #7
 80099fc:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009a00:	6060      	str	r0, [r4, #4]
 8009a02:	dd08      	ble.n	8009a16 <_svfprintf_r+0x115e>
 8009a04:	aa22      	add	r2, sp, #136	; 0x88
 8009a06:	4641      	mov	r1, r8
 8009a08:	4650      	mov	r0, sl
 8009a0a:	f004 f99b 	bl	800dd44 <__ssprint_r>
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	f040 80d4 	bne.w	8009bbc <_svfprintf_r+0x1304>
 8009a14:	a925      	add	r1, sp, #148	; 0x94
 8009a16:	3e10      	subs	r6, #16
 8009a18:	460c      	mov	r4, r1
 8009a1a:	e7b4      	b.n	8009986 <_svfprintf_r+0x10ce>
 8009a1c:	460c      	mov	r4, r1
 8009a1e:	e7cb      	b.n	80099b8 <_svfprintf_r+0x1100>
 8009a20:	aa22      	add	r2, sp, #136	; 0x88
 8009a22:	4641      	mov	r1, r8
 8009a24:	4650      	mov	r0, sl
 8009a26:	f004 f98d 	bl	800dd44 <__ssprint_r>
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	f040 80c6 	bne.w	8009bbc <_svfprintf_r+0x1304>
 8009a30:	ac25      	add	r4, sp, #148	; 0x94
 8009a32:	e719      	b.n	8009868 <_svfprintf_r+0xfb0>
 8009a34:	aa22      	add	r2, sp, #136	; 0x88
 8009a36:	4641      	mov	r1, r8
 8009a38:	4650      	mov	r0, sl
 8009a3a:	f004 f983 	bl	800dd44 <__ssprint_r>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	f040 80bc 	bne.w	8009bbc <_svfprintf_r+0x1304>
 8009a44:	ac25      	add	r4, sp, #148	; 0x94
 8009a46:	e726      	b.n	8009896 <_svfprintf_r+0xfde>
 8009a48:	0800ffd0 	.word	0x0800ffd0
 8009a4c:	9a05      	ldr	r2, [sp, #20]
 8009a4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a50:	2a01      	cmp	r2, #1
 8009a52:	f106 0601 	add.w	r6, r6, #1
 8009a56:	f103 0301 	add.w	r3, r3, #1
 8009a5a:	f104 0508 	add.w	r5, r4, #8
 8009a5e:	dc02      	bgt.n	8009a66 <_svfprintf_r+0x11ae>
 8009a60:	f01b 0f01 	tst.w	fp, #1
 8009a64:	d07e      	beq.n	8009b64 <_svfprintf_r+0x12ac>
 8009a66:	2201      	movs	r2, #1
 8009a68:	2b07      	cmp	r3, #7
 8009a6a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8009a6e:	f8c4 9000 	str.w	r9, [r4]
 8009a72:	6062      	str	r2, [r4, #4]
 8009a74:	dd08      	ble.n	8009a88 <_svfprintf_r+0x11d0>
 8009a76:	aa22      	add	r2, sp, #136	; 0x88
 8009a78:	4641      	mov	r1, r8
 8009a7a:	4650      	mov	r0, sl
 8009a7c:	f004 f962 	bl	800dd44 <__ssprint_r>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	f040 809b 	bne.w	8009bbc <_svfprintf_r+0x1304>
 8009a86:	ad25      	add	r5, sp, #148	; 0x94
 8009a88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a8a:	602b      	str	r3, [r5, #0]
 8009a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a90:	606b      	str	r3, [r5, #4]
 8009a92:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009a94:	4413      	add	r3, r2
 8009a96:	9324      	str	r3, [sp, #144]	; 0x90
 8009a98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	2b07      	cmp	r3, #7
 8009a9e:	9323      	str	r3, [sp, #140]	; 0x8c
 8009aa0:	dc32      	bgt.n	8009b08 <_svfprintf_r+0x1250>
 8009aa2:	3508      	adds	r5, #8
 8009aa4:	9b05      	ldr	r3, [sp, #20]
 8009aa6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009aaa:	1e5c      	subs	r4, r3, #1
 8009aac:	2200      	movs	r2, #0
 8009aae:	2300      	movs	r3, #0
 8009ab0:	f7f7 f812 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	d130      	bne.n	8009b1a <_svfprintf_r+0x1262>
 8009ab8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8009aba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009abc:	9a05      	ldr	r2, [sp, #20]
 8009abe:	3101      	adds	r1, #1
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	f109 0001 	add.w	r0, r9, #1
 8009ac6:	4413      	add	r3, r2
 8009ac8:	2907      	cmp	r1, #7
 8009aca:	e9c5 0400 	strd	r0, r4, [r5]
 8009ace:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 8009ad2:	dd50      	ble.n	8009b76 <_svfprintf_r+0x12be>
 8009ad4:	aa22      	add	r2, sp, #136	; 0x88
 8009ad6:	4641      	mov	r1, r8
 8009ad8:	4650      	mov	r0, sl
 8009ada:	f004 f933 	bl	800dd44 <__ssprint_r>
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	d16c      	bne.n	8009bbc <_svfprintf_r+0x1304>
 8009ae2:	ad25      	add	r5, sp, #148	; 0x94
 8009ae4:	ab1e      	add	r3, sp, #120	; 0x78
 8009ae6:	602b      	str	r3, [r5, #0]
 8009ae8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009aea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009aec:	606b      	str	r3, [r5, #4]
 8009aee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009af0:	4413      	add	r3, r2
 8009af2:	9324      	str	r3, [sp, #144]	; 0x90
 8009af4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009af6:	3301      	adds	r3, #1
 8009af8:	2b07      	cmp	r3, #7
 8009afa:	9323      	str	r3, [sp, #140]	; 0x8c
 8009afc:	f73f adb7 	bgt.w	800966e <_svfprintf_r+0xdb6>
 8009b00:	f105 0408 	add.w	r4, r5, #8
 8009b04:	f7ff babe 	b.w	8009084 <_svfprintf_r+0x7cc>
 8009b08:	aa22      	add	r2, sp, #136	; 0x88
 8009b0a:	4641      	mov	r1, r8
 8009b0c:	4650      	mov	r0, sl
 8009b0e:	f004 f919 	bl	800dd44 <__ssprint_r>
 8009b12:	2800      	cmp	r0, #0
 8009b14:	d152      	bne.n	8009bbc <_svfprintf_r+0x1304>
 8009b16:	ad25      	add	r5, sp, #148	; 0x94
 8009b18:	e7c4      	b.n	8009aa4 <_svfprintf_r+0x11ec>
 8009b1a:	2c00      	cmp	r4, #0
 8009b1c:	dde2      	ble.n	8009ae4 <_svfprintf_r+0x122c>
 8009b1e:	4e56      	ldr	r6, [pc, #344]	; (8009c78 <_svfprintf_r+0x13c0>)
 8009b20:	2710      	movs	r7, #16
 8009b22:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009b26:	2c10      	cmp	r4, #16
 8009b28:	f103 0301 	add.w	r3, r3, #1
 8009b2c:	f105 0108 	add.w	r1, r5, #8
 8009b30:	602e      	str	r6, [r5, #0]
 8009b32:	dc07      	bgt.n	8009b44 <_svfprintf_r+0x128c>
 8009b34:	606c      	str	r4, [r5, #4]
 8009b36:	2b07      	cmp	r3, #7
 8009b38:	4414      	add	r4, r2
 8009b3a:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8009b3e:	dcc9      	bgt.n	8009ad4 <_svfprintf_r+0x121c>
 8009b40:	460d      	mov	r5, r1
 8009b42:	e7cf      	b.n	8009ae4 <_svfprintf_r+0x122c>
 8009b44:	3210      	adds	r2, #16
 8009b46:	2b07      	cmp	r3, #7
 8009b48:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009b4c:	606f      	str	r7, [r5, #4]
 8009b4e:	dd06      	ble.n	8009b5e <_svfprintf_r+0x12a6>
 8009b50:	aa22      	add	r2, sp, #136	; 0x88
 8009b52:	4641      	mov	r1, r8
 8009b54:	4650      	mov	r0, sl
 8009b56:	f004 f8f5 	bl	800dd44 <__ssprint_r>
 8009b5a:	bb78      	cbnz	r0, 8009bbc <_svfprintf_r+0x1304>
 8009b5c:	a925      	add	r1, sp, #148	; 0x94
 8009b5e:	3c10      	subs	r4, #16
 8009b60:	460d      	mov	r5, r1
 8009b62:	e7de      	b.n	8009b22 <_svfprintf_r+0x126a>
 8009b64:	2201      	movs	r2, #1
 8009b66:	2b07      	cmp	r3, #7
 8009b68:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8009b6c:	f8c4 9000 	str.w	r9, [r4]
 8009b70:	6062      	str	r2, [r4, #4]
 8009b72:	ddb7      	ble.n	8009ae4 <_svfprintf_r+0x122c>
 8009b74:	e7ae      	b.n	8009ad4 <_svfprintf_r+0x121c>
 8009b76:	3508      	adds	r5, #8
 8009b78:	e7b4      	b.n	8009ae4 <_svfprintf_r+0x122c>
 8009b7a:	460c      	mov	r4, r1
 8009b7c:	f7ff ba82 	b.w	8009084 <_svfprintf_r+0x7cc>
 8009b80:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8009b84:	1a9d      	subs	r5, r3, r2
 8009b86:	2d00      	cmp	r5, #0
 8009b88:	f77f aa80 	ble.w	800908c <_svfprintf_r+0x7d4>
 8009b8c:	4e3b      	ldr	r6, [pc, #236]	; (8009c7c <_svfprintf_r+0x13c4>)
 8009b8e:	2710      	movs	r7, #16
 8009b90:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009b94:	2d10      	cmp	r5, #16
 8009b96:	f103 0301 	add.w	r3, r3, #1
 8009b9a:	6026      	str	r6, [r4, #0]
 8009b9c:	dc18      	bgt.n	8009bd0 <_svfprintf_r+0x1318>
 8009b9e:	6065      	str	r5, [r4, #4]
 8009ba0:	2b07      	cmp	r3, #7
 8009ba2:	4415      	add	r5, r2
 8009ba4:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8009ba8:	f77f aa70 	ble.w	800908c <_svfprintf_r+0x7d4>
 8009bac:	aa22      	add	r2, sp, #136	; 0x88
 8009bae:	4641      	mov	r1, r8
 8009bb0:	4650      	mov	r0, sl
 8009bb2:	f004 f8c7 	bl	800dd44 <__ssprint_r>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	f43f aa68 	beq.w	800908c <_svfprintf_r+0x7d4>
 8009bbc:	9b03      	ldr	r3, [sp, #12]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	f43f a887 	beq.w	8008cd2 <_svfprintf_r+0x41a>
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	4650      	mov	r0, sl
 8009bc8:	f002 f908 	bl	800bddc <_free_r>
 8009bcc:	f7ff b881 	b.w	8008cd2 <_svfprintf_r+0x41a>
 8009bd0:	3210      	adds	r2, #16
 8009bd2:	2b07      	cmp	r3, #7
 8009bd4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009bd8:	6067      	str	r7, [r4, #4]
 8009bda:	dc02      	bgt.n	8009be2 <_svfprintf_r+0x132a>
 8009bdc:	3408      	adds	r4, #8
 8009bde:	3d10      	subs	r5, #16
 8009be0:	e7d6      	b.n	8009b90 <_svfprintf_r+0x12d8>
 8009be2:	aa22      	add	r2, sp, #136	; 0x88
 8009be4:	4641      	mov	r1, r8
 8009be6:	4650      	mov	r0, sl
 8009be8:	f004 f8ac 	bl	800dd44 <__ssprint_r>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d1e5      	bne.n	8009bbc <_svfprintf_r+0x1304>
 8009bf0:	ac25      	add	r4, sp, #148	; 0x94
 8009bf2:	e7f4      	b.n	8009bde <_svfprintf_r+0x1326>
 8009bf4:	9903      	ldr	r1, [sp, #12]
 8009bf6:	4650      	mov	r0, sl
 8009bf8:	f002 f8f0 	bl	800bddc <_free_r>
 8009bfc:	f7ff ba5e 	b.w	80090bc <_svfprintf_r+0x804>
 8009c00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f43f a865 	beq.w	8008cd2 <_svfprintf_r+0x41a>
 8009c08:	aa22      	add	r2, sp, #136	; 0x88
 8009c0a:	4641      	mov	r1, r8
 8009c0c:	4650      	mov	r0, sl
 8009c0e:	f004 f899 	bl	800dd44 <__ssprint_r>
 8009c12:	f7ff b85e 	b.w	8008cd2 <_svfprintf_r+0x41a>
 8009c16:	ea56 0205 	orrs.w	r2, r6, r5
 8009c1a:	465f      	mov	r7, fp
 8009c1c:	f43f ab78 	beq.w	8009310 <_svfprintf_r+0xa58>
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	f43f ac15 	beq.w	8009450 <_svfprintf_r+0xb98>
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 8009c2c:	f43f ac5b 	beq.w	80094e6 <_svfprintf_r+0xc2e>
 8009c30:	f006 0307 	and.w	r3, r6, #7
 8009c34:	08f6      	lsrs	r6, r6, #3
 8009c36:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 8009c3a:	08ed      	lsrs	r5, r5, #3
 8009c3c:	3330      	adds	r3, #48	; 0x30
 8009c3e:	ea56 0105 	orrs.w	r1, r6, r5
 8009c42:	464a      	mov	r2, r9
 8009c44:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8009c48:	d1f2      	bne.n	8009c30 <_svfprintf_r+0x1378>
 8009c4a:	07f9      	lsls	r1, r7, #31
 8009c4c:	d506      	bpl.n	8009c5c <_svfprintf_r+0x13a4>
 8009c4e:	2b30      	cmp	r3, #48	; 0x30
 8009c50:	d004      	beq.n	8009c5c <_svfprintf_r+0x13a4>
 8009c52:	2330      	movs	r3, #48	; 0x30
 8009c54:	f809 3c01 	strb.w	r3, [r9, #-1]
 8009c58:	f1a2 0902 	sub.w	r9, r2, #2
 8009c5c:	ab4e      	add	r3, sp, #312	; 0x138
 8009c5e:	eba3 0309 	sub.w	r3, r3, r9
 8009c62:	9e04      	ldr	r6, [sp, #16]
 8009c64:	9304      	str	r3, [sp, #16]
 8009c66:	2300      	movs	r3, #0
 8009c68:	46bb      	mov	fp, r7
 8009c6a:	9303      	str	r3, [sp, #12]
 8009c6c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8009c70:	461d      	mov	r5, r3
 8009c72:	f7ff b94d 	b.w	8008f10 <_svfprintf_r+0x658>
 8009c76:	bf00      	nop
 8009c78:	0800ffd0 	.word	0x0800ffd0
 8009c7c:	0800ffc0 	.word	0x0800ffc0

08009c80 <__ssvfscanf_r>:
 8009c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c84:	ed2d 8b02 	vpush	{d8}
 8009c88:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 8009c8c:	461e      	mov	r6, r3
 8009c8e:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8009c92:	af02      	add	r7, sp, #8
 8009c94:	049d      	lsls	r5, r3, #18
 8009c96:	ee08 0a10 	vmov	s16, r0
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	617a      	str	r2, [r7, #20]
 8009c9e:	d406      	bmi.n	8009cae <__ssvfscanf_r+0x2e>
 8009ca0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009ca4:	818b      	strh	r3, [r1, #12]
 8009ca6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8009ca8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cac:	664b      	str	r3, [r1, #100]	; 0x64
 8009cae:	2300      	movs	r3, #0
 8009cb0:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8009cb4:	61bb      	str	r3, [r7, #24]
 8009cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8009cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cba:	627b      	str	r3, [r7, #36]	; 0x24
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009cc2:	617a      	str	r2, [r7, #20]
 8009cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f000 80d6 	beq.w	8009e78 <__ssvfscanf_r+0x1f8>
 8009ccc:	4a85      	ldr	r2, [pc, #532]	; (8009ee4 <__ssvfscanf_r+0x264>)
 8009cce:	f813 8002 	ldrb.w	r8, [r3, r2]
 8009cd2:	f018 0808 	ands.w	r8, r8, #8
 8009cd6:	d019      	beq.n	8009d0c <__ssvfscanf_r+0x8c>
 8009cd8:	6863      	ldr	r3, [r4, #4]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	dd0e      	ble.n	8009cfc <__ssvfscanf_r+0x7c>
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	4980      	ldr	r1, [pc, #512]	; (8009ee4 <__ssvfscanf_r+0x264>)
 8009ce2:	781a      	ldrb	r2, [r3, #0]
 8009ce4:	5c8a      	ldrb	r2, [r1, r2]
 8009ce6:	0710      	lsls	r0, r2, #28
 8009ce8:	d5e8      	bpl.n	8009cbc <__ssvfscanf_r+0x3c>
 8009cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cec:	3201      	adds	r2, #1
 8009cee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009cf0:	6862      	ldr	r2, [r4, #4]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	3a01      	subs	r2, #1
 8009cf6:	6062      	str	r2, [r4, #4]
 8009cf8:	6023      	str	r3, [r4, #0]
 8009cfa:	e7ed      	b.n	8009cd8 <__ssvfscanf_r+0x58>
 8009cfc:	ee18 0a10 	vmov	r0, s16
 8009d00:	4621      	mov	r1, r4
 8009d02:	f004 f8d7 	bl	800deb4 <__ssrefill_r>
 8009d06:	2800      	cmp	r0, #0
 8009d08:	d0e9      	beq.n	8009cde <__ssvfscanf_r+0x5e>
 8009d0a:	e7d7      	b.n	8009cbc <__ssvfscanf_r+0x3c>
 8009d0c:	2b25      	cmp	r3, #37	; 0x25
 8009d0e:	d165      	bne.n	8009ddc <__ssvfscanf_r+0x15c>
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 8009d16:	46c1      	mov	r9, r8
 8009d18:	220a      	movs	r2, #10
 8009d1a:	6979      	ldr	r1, [r7, #20]
 8009d1c:	781d      	ldrb	r5, [r3, #0]
 8009d1e:	3101      	adds	r1, #1
 8009d20:	6179      	str	r1, [r7, #20]
 8009d22:	f1a5 0125 	sub.w	r1, r5, #37	; 0x25
 8009d26:	2955      	cmp	r1, #85	; 0x55
 8009d28:	f200 816e 	bhi.w	800a008 <__ssvfscanf_r+0x388>
 8009d2c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009d30:	016c0056 	.word	0x016c0056
 8009d34:	016c016c 	.word	0x016c016c
 8009d38:	007d016c 	.word	0x007d016c
 8009d3c:	016c016c 	.word	0x016c016c
 8009d40:	016c016c 	.word	0x016c016c
 8009d44:	00ba016c 	.word	0x00ba016c
 8009d48:	00ba00ba 	.word	0x00ba00ba
 8009d4c:	00ba00ba 	.word	0x00ba00ba
 8009d50:	00ba00ba 	.word	0x00ba00ba
 8009d54:	00ba00ba 	.word	0x00ba00ba
 8009d58:	016c00ba 	.word	0x016c00ba
 8009d5c:	016c016c 	.word	0x016c016c
 8009d60:	016c016c 	.word	0x016c016c
 8009d64:	016c016c 	.word	0x016c016c
 8009d68:	016c00e0 	.word	0x016c00e0
 8009d6c:	00c40104 	.word	0x00c40104
 8009d70:	00e000e0 	.word	0x00e000e0
 8009d74:	016c00e0 	.word	0x016c00e0
 8009d78:	016c016c 	.word	0x016c016c
 8009d7c:	00a1016c 	.word	0x00a1016c
 8009d80:	016c016c 	.word	0x016c016c
 8009d84:	016c00c8 	.word	0x016c00c8
 8009d88:	016c016c 	.word	0x016c016c
 8009d8c:	016c00f6 	.word	0x016c00f6
 8009d90:	016c016c 	.word	0x016c016c
 8009d94:	00d4016c 	.word	0x00d4016c
 8009d98:	016c016c 	.word	0x016c016c
 8009d9c:	016c00fa 	.word	0x016c00fa
 8009da0:	016c016c 	.word	0x016c016c
 8009da4:	016c016c 	.word	0x016c016c
 8009da8:	016c00e0 	.word	0x016c00e0
 8009dac:	00c60106 	.word	0x00c60106
 8009db0:	00e000e0 	.word	0x00e000e0
 8009db4:	009400e0 	.word	0x009400e0
 8009db8:	00a1012e 	.word	0x00a1012e
 8009dbc:	0086016c 	.word	0x0086016c
 8009dc0:	010d00ad 	.word	0x010d00ad
 8009dc4:	010a00ca 	.word	0x010a00ca
 8009dc8:	016c016c 	.word	0x016c016c
 8009dcc:	00a900f8 	.word	0x00a900f8
 8009dd0:	016c00d0 	.word	0x016c00d0
 8009dd4:	00d4016c 	.word	0x00d4016c
 8009dd8:	00a9016c 	.word	0x00a9016c
 8009ddc:	6863      	ldr	r3, [r4, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	dd0f      	ble.n	8009e02 <__ssvfscanf_r+0x182>
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	697a      	ldr	r2, [r7, #20]
 8009de6:	7819      	ldrb	r1, [r3, #0]
 8009de8:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8009dec:	4291      	cmp	r1, r2
 8009dee:	d143      	bne.n	8009e78 <__ssvfscanf_r+0x1f8>
 8009df0:	6862      	ldr	r2, [r4, #4]
 8009df2:	3301      	adds	r3, #1
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df8:	3a01      	subs	r2, #1
 8009dfa:	6062      	str	r2, [r4, #4]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e00:	e75c      	b.n	8009cbc <__ssvfscanf_r+0x3c>
 8009e02:	ee18 0a10 	vmov	r0, s16
 8009e06:	4621      	mov	r1, r4
 8009e08:	f004 f854 	bl	800deb4 <__ssrefill_r>
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	d0e8      	beq.n	8009de2 <__ssvfscanf_r+0x162>
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	b113      	cbz	r3, 8009e1a <__ssvfscanf_r+0x19a>
 8009e14:	89a3      	ldrh	r3, [r4, #12]
 8009e16:	065b      	lsls	r3, r3, #25
 8009e18:	d52e      	bpl.n	8009e78 <__ssvfscanf_r+0x1f8>
 8009e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f040 80f8 	bne.w	800a012 <__ssvfscanf_r+0x392>
 8009e22:	f04f 33ff 	mov.w	r3, #4294967295
 8009e26:	627b      	str	r3, [r7, #36]	; 0x24
 8009e28:	e103      	b.n	800a032 <__ssvfscanf_r+0x3b2>
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2c:	ea53 0309 	orrs.w	r3, r3, r9
 8009e30:	633b      	str	r3, [r7, #48]	; 0x30
 8009e32:	d121      	bne.n	8009e78 <__ssvfscanf_r+0x1f8>
 8009e34:	f04f 0910 	mov.w	r9, #16
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	e76e      	b.n	8009d1a <__ssvfscanf_r+0x9a>
 8009e3c:	f019 0f0f 	tst.w	r9, #15
 8009e40:	d11a      	bne.n	8009e78 <__ssvfscanf_r+0x1f8>
 8009e42:	7859      	ldrb	r1, [r3, #1]
 8009e44:	296c      	cmp	r1, #108	; 0x6c
 8009e46:	d104      	bne.n	8009e52 <__ssvfscanf_r+0x1d2>
 8009e48:	3302      	adds	r3, #2
 8009e4a:	617b      	str	r3, [r7, #20]
 8009e4c:	f049 0902 	orr.w	r9, r9, #2
 8009e50:	e7f2      	b.n	8009e38 <__ssvfscanf_r+0x1b8>
 8009e52:	f049 0901 	orr.w	r9, r9, #1
 8009e56:	e7ef      	b.n	8009e38 <__ssvfscanf_r+0x1b8>
 8009e58:	f019 0f0f 	tst.w	r9, #15
 8009e5c:	d10c      	bne.n	8009e78 <__ssvfscanf_r+0x1f8>
 8009e5e:	7859      	ldrb	r1, [r3, #1]
 8009e60:	2968      	cmp	r1, #104	; 0x68
 8009e62:	bf03      	ittte	eq
 8009e64:	3302      	addeq	r3, #2
 8009e66:	617b      	streq	r3, [r7, #20]
 8009e68:	f049 0908 	orreq.w	r9, r9, #8
 8009e6c:	f049 0904 	orrne.w	r9, r9, #4
 8009e70:	e7e2      	b.n	8009e38 <__ssvfscanf_r+0x1b8>
 8009e72:	f019 0f0f 	tst.w	r9, #15
 8009e76:	d0e9      	beq.n	8009e4c <__ssvfscanf_r+0x1cc>
 8009e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f040 80d4 	bne.w	800a028 <__ssvfscanf_r+0x3a8>
 8009e80:	e0d7      	b.n	800a032 <__ssvfscanf_r+0x3b2>
 8009e82:	f019 0f0f 	tst.w	r9, #15
 8009e86:	d0d7      	beq.n	8009e38 <__ssvfscanf_r+0x1b8>
 8009e88:	e7f6      	b.n	8009e78 <__ssvfscanf_r+0x1f8>
 8009e8a:	f019 038f 	ands.w	r3, r9, #143	; 0x8f
 8009e8e:	d1f3      	bne.n	8009e78 <__ssvfscanf_r+0x1f8>
 8009e90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009e92:	b921      	cbnz	r1, 8009e9e <__ssvfscanf_r+0x21e>
 8009e94:	b082      	sub	sp, #8
 8009e96:	a902      	add	r1, sp, #8
 8009e98:	e9c1 3300 	strd	r3, r3, [r1]
 8009e9c:	6379      	str	r1, [r7, #52]	; 0x34
 8009e9e:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 8009ea2:	e7c9      	b.n	8009e38 <__ssvfscanf_r+0x1b8>
 8009ea4:	f019 0f8f 	tst.w	r9, #143	; 0x8f
 8009ea8:	d1e6      	bne.n	8009e78 <__ssvfscanf_r+0x1f8>
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	fb02 5503 	mla	r5, r2, r3, r5
 8009eb0:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009eb4:	633b      	str	r3, [r7, #48]	; 0x30
 8009eb6:	e7bf      	b.n	8009e38 <__ssvfscanf_r+0x1b8>
 8009eb8:	f049 0901 	orr.w	r9, r9, #1
 8009ebc:	4b0a      	ldr	r3, [pc, #40]	; (8009ee8 <__ssvfscanf_r+0x268>)
 8009ebe:	e008      	b.n	8009ed2 <__ssvfscanf_r+0x252>
 8009ec0:	f049 0901 	orr.w	r9, r9, #1
 8009ec4:	4b09      	ldr	r3, [pc, #36]	; (8009eec <__ssvfscanf_r+0x26c>)
 8009ec6:	61bb      	str	r3, [r7, #24]
 8009ec8:	2308      	movs	r3, #8
 8009eca:	61fb      	str	r3, [r7, #28]
 8009ecc:	2503      	movs	r5, #3
 8009ece:	e010      	b.n	8009ef2 <__ssvfscanf_r+0x272>
 8009ed0:	4b06      	ldr	r3, [pc, #24]	; (8009eec <__ssvfscanf_r+0x26c>)
 8009ed2:	61bb      	str	r3, [r7, #24]
 8009ed4:	230a      	movs	r3, #10
 8009ed6:	e7f8      	b.n	8009eca <__ssvfscanf_r+0x24a>
 8009ed8:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 8009edc:	4b03      	ldr	r3, [pc, #12]	; (8009eec <__ssvfscanf_r+0x26c>)
 8009ede:	61bb      	str	r3, [r7, #24]
 8009ee0:	2310      	movs	r3, #16
 8009ee2:	e7f2      	b.n	8009eca <__ssvfscanf_r+0x24a>
 8009ee4:	08010009 	.word	0x08010009
 8009ee8:	080088a1 	.word	0x080088a1
 8009eec:	0800dc0d 	.word	0x0800dc0d
 8009ef0:	2504      	movs	r5, #4
 8009ef2:	6863      	ldr	r3, [r4, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	dd4d      	ble.n	8009f94 <__ssvfscanf_r+0x314>
 8009ef8:	f019 0f40 	tst.w	r9, #64	; 0x40
 8009efc:	d105      	bne.n	8009f0a <__ssvfscanf_r+0x28a>
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	49a9      	ldr	r1, [pc, #676]	; (800a1a8 <__ssvfscanf_r+0x528>)
 8009f02:	781a      	ldrb	r2, [r3, #0]
 8009f04:	5c52      	ldrb	r2, [r2, r1]
 8009f06:	0711      	lsls	r1, r2, #28
 8009f08:	d44c      	bmi.n	8009fa4 <__ssvfscanf_r+0x324>
 8009f0a:	3d01      	subs	r5, #1
 8009f0c:	2d03      	cmp	r5, #3
 8009f0e:	d85c      	bhi.n	8009fca <__ssvfscanf_r+0x34a>
 8009f10:	e8df f015 	tbh	[pc, r5, lsl #1]
 8009f14:	039201d4 	.word	0x039201d4
 8009f18:	062b0538 	.word	0x062b0538
 8009f1c:	f049 0901 	orr.w	r9, r9, #1
 8009f20:	2502      	movs	r5, #2
 8009f22:	e7e6      	b.n	8009ef2 <__ssvfscanf_r+0x272>
 8009f24:	6979      	ldr	r1, [r7, #20]
 8009f26:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8009f2a:	f002 fee9 	bl	800cd00 <__sccl>
 8009f2e:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 8009f32:	6178      	str	r0, [r7, #20]
 8009f34:	2501      	movs	r5, #1
 8009f36:	e7dc      	b.n	8009ef2 <__ssvfscanf_r+0x272>
 8009f38:	f049 0901 	orr.w	r9, r9, #1
 8009f3c:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 8009f40:	2500      	movs	r5, #0
 8009f42:	e7d6      	b.n	8009ef2 <__ssvfscanf_r+0x272>
 8009f44:	f449 7908 	orr.w	r9, r9, #544	; 0x220
 8009f48:	e7c8      	b.n	8009edc <__ssvfscanf_r+0x25c>
 8009f4a:	f019 0f10 	tst.w	r9, #16
 8009f4e:	f47f aeb5 	bne.w	8009cbc <__ssvfscanf_r+0x3c>
 8009f52:	f019 0f08 	tst.w	r9, #8
 8009f56:	f856 3b04 	ldr.w	r3, [r6], #4
 8009f5a:	d002      	beq.n	8009f62 <__ssvfscanf_r+0x2e2>
 8009f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f5e:	701a      	strb	r2, [r3, #0]
 8009f60:	e6ac      	b.n	8009cbc <__ssvfscanf_r+0x3c>
 8009f62:	f019 0f04 	tst.w	r9, #4
 8009f66:	d002      	beq.n	8009f6e <__ssvfscanf_r+0x2ee>
 8009f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f6a:	801a      	strh	r2, [r3, #0]
 8009f6c:	e6a6      	b.n	8009cbc <__ssvfscanf_r+0x3c>
 8009f6e:	f019 0f01 	tst.w	r9, #1
 8009f72:	d002      	beq.n	8009f7a <__ssvfscanf_r+0x2fa>
 8009f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f76:	601a      	str	r2, [r3, #0]
 8009f78:	e6a0      	b.n	8009cbc <__ssvfscanf_r+0x3c>
 8009f7a:	f019 0f02 	tst.w	r9, #2
 8009f7e:	d0f9      	beq.n	8009f74 <__ssvfscanf_r+0x2f4>
 8009f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f84:	17d2      	asrs	r2, r2, #31
 8009f86:	e9c3 1200 	strd	r1, r2, [r3]
 8009f8a:	e697      	b.n	8009cbc <__ssvfscanf_r+0x3c>
 8009f8c:	4b87      	ldr	r3, [pc, #540]	; (800a1ac <__ssvfscanf_r+0x52c>)
 8009f8e:	61bb      	str	r3, [r7, #24]
 8009f90:	2300      	movs	r3, #0
 8009f92:	e79a      	b.n	8009eca <__ssvfscanf_r+0x24a>
 8009f94:	ee18 0a10 	vmov	r0, s16
 8009f98:	4621      	mov	r1, r4
 8009f9a:	f003 ff8b 	bl	800deb4 <__ssrefill_r>
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	d0aa      	beq.n	8009ef8 <__ssvfscanf_r+0x278>
 8009fa2:	e735      	b.n	8009e10 <__ssvfscanf_r+0x190>
 8009fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fa6:	3201      	adds	r2, #1
 8009fa8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009faa:	6862      	ldr	r2, [r4, #4]
 8009fac:	3a01      	subs	r2, #1
 8009fae:	2a00      	cmp	r2, #0
 8009fb0:	6062      	str	r2, [r4, #4]
 8009fb2:	dd02      	ble.n	8009fba <__ssvfscanf_r+0x33a>
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	6023      	str	r3, [r4, #0]
 8009fb8:	e7a1      	b.n	8009efe <__ssvfscanf_r+0x27e>
 8009fba:	ee18 0a10 	vmov	r0, s16
 8009fbe:	4621      	mov	r1, r4
 8009fc0:	f003 ff78 	bl	800deb4 <__ssrefill_r>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d09a      	beq.n	8009efe <__ssvfscanf_r+0x27e>
 8009fc8:	e722      	b.n	8009e10 <__ssvfscanf_r+0x190>
 8009fca:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8009fcc:	2d01      	cmp	r5, #1
 8009fce:	bf38      	it	cc
 8009fd0:	2501      	movcc	r5, #1
 8009fd2:	f019 0801 	ands.w	r8, r9, #1
 8009fd6:	f009 0b10 	and.w	fp, r9, #16
 8009fda:	f000 80f7 	beq.w	800a1cc <__ssvfscanf_r+0x54c>
 8009fde:	f1bb 0f00 	cmp.w	fp, #0
 8009fe2:	f040 80b5 	bne.w	800a150 <__ssvfscanf_r+0x4d0>
 8009fe6:	4633      	mov	r3, r6
 8009fe8:	f019 0f80 	tst.w	r9, #128	; 0x80
 8009fec:	f853 6b04 	ldr.w	r6, [r3], #4
 8009ff0:	633b      	str	r3, [r7, #48]	; 0x30
 8009ff2:	f000 80b4 	beq.w	800a15e <__ssvfscanf_r+0x4de>
 8009ff6:	b13e      	cbz	r6, 800a008 <__ssvfscanf_r+0x388>
 8009ff8:	2080      	movs	r0, #128	; 0x80
 8009ffa:	f7fe f8b9 	bl	8008170 <malloc>
 8009ffe:	4680      	mov	r8, r0
 800a000:	b9f8      	cbnz	r0, 800a042 <__ssvfscanf_r+0x3c2>
 800a002:	f04f 33ff 	mov.w	r3, #4294967295
 800a006:	627b      	str	r3, [r7, #36]	; 0x24
 800a008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a00a:	b193      	cbz	r3, 800a032 <__ssvfscanf_r+0x3b2>
 800a00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00e:	3301      	adds	r3, #1
 800a010:	d10a      	bne.n	800a028 <__ssvfscanf_r+0x3a8>
 800a012:	2400      	movs	r4, #0
 800a014:	4626      	mov	r6, r4
 800a016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a018:	681d      	ldr	r5, [r3, #0]
 800a01a:	88db      	ldrh	r3, [r3, #6]
 800a01c:	42a3      	cmp	r3, r4
 800a01e:	f300 87c4 	bgt.w	800afaa <__ssvfscanf_r+0x132a>
 800a022:	f04f 33ff 	mov.w	r3, #4294967295
 800a026:	627b      	str	r3, [r7, #36]	; 0x24
 800a028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a02a:	6818      	ldr	r0, [r3, #0]
 800a02c:	b108      	cbz	r0, 800a032 <__ssvfscanf_r+0x3b2>
 800a02e:	f7fe f8a7 	bl	8008180 <free>
 800a032:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a034:	f507 772d 	add.w	r7, r7, #692	; 0x2b4
 800a038:	46bd      	mov	sp, r7
 800a03a:	ecbd 8b02 	vpop	{d8}
 800a03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a044:	6030      	str	r0, [r6, #0]
 800a046:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800a04a:	889b      	ldrh	r3, [r3, #4]
 800a04c:	4599      	cmp	r9, r3
 800a04e:	d312      	bcc.n	800a076 <__ssvfscanf_r+0x3f6>
 800a050:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 800a054:	4293      	cmp	r3, r2
 800a056:	d8d4      	bhi.n	800a002 <__ssvfscanf_r+0x382>
 800a058:	3308      	adds	r3, #8
 800a05a:	fa1f fa83 	uxth.w	sl, r3
 800a05e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a060:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800a064:	6818      	ldr	r0, [r3, #0]
 800a066:	f002 fc67 	bl	800c938 <realloc>
 800a06a:	2800      	cmp	r0, #0
 800a06c:	d0c9      	beq.n	800a002 <__ssvfscanf_r+0x382>
 800a06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a070:	6018      	str	r0, [r3, #0]
 800a072:	f8a3 a004 	strh.w	sl, [r3, #4]
 800a076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a078:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f109 0201 	add.w	r2, r9, #1
 800a080:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 800a084:	46b2      	mov	sl, r6
 800a086:	80ca      	strh	r2, [r1, #6]
 800a088:	4646      	mov	r6, r8
 800a08a:	f04f 0920 	mov.w	r9, #32
 800a08e:	2200      	movs	r2, #0
 800a090:	62ba      	str	r2, [r7, #40]	; 0x28
 800a092:	f001 ff71 	bl	800bf78 <__locale_mb_cur_max>
 800a096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a098:	4290      	cmp	r0, r2
 800a09a:	f43f aeb9 	beq.w	8009e10 <__ssvfscanf_r+0x190>
 800a09e:	6821      	ldr	r1, [r4, #0]
 800a0a0:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 800a0a4:	f811 0b01 	ldrb.w	r0, [r1], #1
 800a0a8:	f80c 0002 	strb.w	r0, [ip, r2]
 800a0ac:	1c53      	adds	r3, r2, #1
 800a0ae:	6862      	ldr	r2, [r4, #4]
 800a0b0:	3a01      	subs	r2, #1
 800a0b2:	e9c4 1200 	strd	r1, r2, [r4]
 800a0b6:	6a3a      	ldr	r2, [r7, #32]
 800a0b8:	2a03      	cmp	r2, #3
 800a0ba:	d102      	bne.n	800a0c2 <__ssvfscanf_r+0x442>
 800a0bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0be:	2a04      	cmp	r2, #4
 800a0c0:	d007      	beq.n	800a0d2 <__ssvfscanf_r+0x452>
 800a0c2:	2208      	movs	r2, #8
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800a0ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0cc:	f7fe fa9c 	bl	8008608 <memset>
 800a0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a0d8:	9200      	str	r2, [sp, #0]
 800a0da:	ee18 0a10 	vmov	r0, s16
 800a0de:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800a0e2:	4631      	mov	r1, r6
 800a0e4:	f001 ff68 	bl	800bfb8 <_mbrtowc_r>
 800a0e8:	1c42      	adds	r2, r0, #1
 800a0ea:	6238      	str	r0, [r7, #32]
 800a0ec:	f43f ae90 	beq.w	8009e10 <__ssvfscanf_r+0x190>
 800a0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f2:	2800      	cmp	r0, #0
 800a0f4:	d137      	bne.n	800a166 <__ssvfscanf_r+0x4e6>
 800a0f6:	f1bb 0f00 	cmp.w	fp, #0
 800a0fa:	d101      	bne.n	800a100 <__ssvfscanf_r+0x480>
 800a0fc:	f8c6 b000 	str.w	fp, [r6]
 800a100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a102:	441a      	add	r2, r3
 800a104:	6a3b      	ldr	r3, [r7, #32]
 800a106:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a108:	2b03      	cmp	r3, #3
 800a10a:	d102      	bne.n	800a112 <__ssvfscanf_r+0x492>
 800a10c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a10e:	2b04      	cmp	r3, #4
 800a110:	d000      	beq.n	800a114 <__ssvfscanf_r+0x494>
 800a112:	3d01      	subs	r5, #1
 800a114:	f1bb 0f00 	cmp.w	fp, #0
 800a118:	d118      	bne.n	800a14c <__ssvfscanf_r+0x4cc>
 800a11a:	f1ba 0f00 	cmp.w	sl, #0
 800a11e:	d014      	beq.n	800a14a <__ssvfscanf_r+0x4ca>
 800a120:	eba6 0308 	sub.w	r3, r6, r8
 800a124:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 800a128:	d80f      	bhi.n	800a14a <__ssvfscanf_r+0x4ca>
 800a12a:	4640      	mov	r0, r8
 800a12c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a130:	62bb      	str	r3, [r7, #40]	; 0x28
 800a132:	f002 fc01 	bl	800c938 <realloc>
 800a136:	4680      	mov	r8, r0
 800a138:	2800      	cmp	r0, #0
 800a13a:	f43f af62 	beq.w	800a002 <__ssvfscanf_r+0x382>
 800a13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a140:	f8ca 0000 	str.w	r0, [sl]
 800a144:	18c6      	adds	r6, r0, r3
 800a146:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800a14a:	3604      	adds	r6, #4
 800a14c:	2200      	movs	r2, #0
 800a14e:	e00e      	b.n	800a16e <__ssvfscanf_r+0x4ee>
 800a150:	f04f 0900 	mov.w	r9, #0
 800a154:	633e      	str	r6, [r7, #48]	; 0x30
 800a156:	46c8      	mov	r8, r9
 800a158:	46ca      	mov	sl, r9
 800a15a:	464e      	mov	r6, r9
 800a15c:	e797      	b.n	800a08e <__ssvfscanf_r+0x40e>
 800a15e:	46d9      	mov	r9, fp
 800a160:	46d8      	mov	r8, fp
 800a162:	46da      	mov	sl, fp
 800a164:	e793      	b.n	800a08e <__ssvfscanf_r+0x40e>
 800a166:	6a3a      	ldr	r2, [r7, #32]
 800a168:	3202      	adds	r2, #2
 800a16a:	d1c9      	bne.n	800a100 <__ssvfscanf_r+0x480>
 800a16c:	461a      	mov	r2, r3
 800a16e:	6863      	ldr	r3, [r4, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	dc15      	bgt.n	800a1a0 <__ssvfscanf_r+0x520>
 800a174:	ee18 0a10 	vmov	r0, s16
 800a178:	4621      	mov	r1, r4
 800a17a:	62ba      	str	r2, [r7, #40]	; 0x28
 800a17c:	f003 fe9a 	bl	800deb4 <__ssrefill_r>
 800a180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a182:	b168      	cbz	r0, 800a1a0 <__ssvfscanf_r+0x520>
 800a184:	2a00      	cmp	r2, #0
 800a186:	f47f ae43 	bne.w	8009e10 <__ssvfscanf_r+0x190>
 800a18a:	f1ba 0f00 	cmp.w	sl, #0
 800a18e:	d10f      	bne.n	800a1b0 <__ssvfscanf_r+0x530>
 800a190:	f1bb 0f00 	cmp.w	fp, #0
 800a194:	d102      	bne.n	800a19c <__ssvfscanf_r+0x51c>
 800a196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a198:	3301      	adds	r3, #1
 800a19a:	627b      	str	r3, [r7, #36]	; 0x24
 800a19c:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800a19e:	e58d      	b.n	8009cbc <__ssvfscanf_r+0x3c>
 800a1a0:	2d00      	cmp	r5, #0
 800a1a2:	f47f af75 	bne.w	800a090 <__ssvfscanf_r+0x410>
 800a1a6:	e7f0      	b.n	800a18a <__ssvfscanf_r+0x50a>
 800a1a8:	08010009 	.word	0x08010009
 800a1ac:	080088a1 	.word	0x080088a1
 800a1b0:	eba6 0108 	sub.w	r1, r6, r8
 800a1b4:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 800a1b8:	d9ea      	bls.n	800a190 <__ssvfscanf_r+0x510>
 800a1ba:	f8da 0000 	ldr.w	r0, [sl]
 800a1be:	f002 fbbb 	bl	800c938 <realloc>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	d0e4      	beq.n	800a190 <__ssvfscanf_r+0x510>
 800a1c6:	f8ca 0000 	str.w	r0, [sl]
 800a1ca:	e7e1      	b.n	800a190 <__ssvfscanf_r+0x510>
 800a1cc:	f1bb 0f00 	cmp.w	fp, #0
 800a1d0:	d01b      	beq.n	800a20a <__ssvfscanf_r+0x58a>
 800a1d2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a1d6:	429d      	cmp	r5, r3
 800a1d8:	dd11      	ble.n	800a1fe <__ssvfscanf_r+0x57e>
 800a1da:	4498      	add	r8, r3
 800a1dc:	1aed      	subs	r5, r5, r3
 800a1de:	4413      	add	r3, r2
 800a1e0:	ee18 0a10 	vmov	r0, s16
 800a1e4:	6023      	str	r3, [r4, #0]
 800a1e6:	4621      	mov	r1, r4
 800a1e8:	f003 fe64 	bl	800deb4 <__ssrefill_r>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	d0f0      	beq.n	800a1d2 <__ssvfscanf_r+0x552>
 800a1f0:	f1b8 0f00 	cmp.w	r8, #0
 800a1f4:	f43f ae0c 	beq.w	8009e10 <__ssvfscanf_r+0x190>
 800a1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fa:	4443      	add	r3, r8
 800a1fc:	e5ff      	b.n	8009dfe <__ssvfscanf_r+0x17e>
 800a1fe:	1b5b      	subs	r3, r3, r5
 800a200:	442a      	add	r2, r5
 800a202:	44a8      	add	r8, r5
 800a204:	6063      	str	r3, [r4, #4]
 800a206:	6022      	str	r2, [r4, #0]
 800a208:	e7f6      	b.n	800a1f8 <__ssvfscanf_r+0x578>
 800a20a:	46b0      	mov	r8, r6
 800a20c:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 800a210:	f858 6b04 	ldr.w	r6, [r8], #4
 800a214:	d031      	beq.n	800a27a <__ssvfscanf_r+0x5fa>
 800a216:	2e00      	cmp	r6, #0
 800a218:	f43f ae2e 	beq.w	8009e78 <__ssvfscanf_r+0x1f8>
 800a21c:	4628      	mov	r0, r5
 800a21e:	f7fd ffa7 	bl	8008170 <malloc>
 800a222:	4682      	mov	sl, r0
 800a224:	2800      	cmp	r0, #0
 800a226:	f43f adf8 	beq.w	8009e1a <__ssvfscanf_r+0x19a>
 800a22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a22c:	6030      	str	r0, [r6, #0]
 800a22e:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 800a232:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 800a236:	45cb      	cmp	fp, r9
 800a238:	d315      	bcc.n	800a266 <__ssvfscanf_r+0x5e6>
 800a23a:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800a23e:	4599      	cmp	r9, r3
 800a240:	f63f aee7 	bhi.w	800a012 <__ssvfscanf_r+0x392>
 800a244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a246:	f109 0908 	add.w	r9, r9, #8
 800a24a:	fa1f f989 	uxth.w	r9, r9
 800a24e:	6818      	ldr	r0, [r3, #0]
 800a250:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800a254:	f002 fb70 	bl	800c938 <realloc>
 800a258:	2800      	cmp	r0, #0
 800a25a:	f43f aeda 	beq.w	800a012 <__ssvfscanf_r+0x392>
 800a25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a260:	6018      	str	r0, [r3, #0]
 800a262:	f8a3 9004 	strh.w	r9, [r3, #4]
 800a266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a268:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f10b 0201 	add.w	r2, fp, #1
 800a270:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800a274:	46b1      	mov	r9, r6
 800a276:	80ca      	strh	r2, [r1, #6]
 800a278:	4656      	mov	r6, sl
 800a27a:	4631      	mov	r1, r6
 800a27c:	ee18 0a10 	vmov	r0, s16
 800a280:	9400      	str	r4, [sp, #0]
 800a282:	462b      	mov	r3, r5
 800a284:	2201      	movs	r2, #1
 800a286:	f003 fe32 	bl	800deee <_sfread_r>
 800a28a:	4606      	mov	r6, r0
 800a28c:	2800      	cmp	r0, #0
 800a28e:	f43f adbf 	beq.w	8009e10 <__ssvfscanf_r+0x190>
 800a292:	f1b9 0f00 	cmp.w	r9, #0
 800a296:	d009      	beq.n	800a2ac <__ssvfscanf_r+0x62c>
 800a298:	4285      	cmp	r5, r0
 800a29a:	d907      	bls.n	800a2ac <__ssvfscanf_r+0x62c>
 800a29c:	4601      	mov	r1, r0
 800a29e:	f8d9 0000 	ldr.w	r0, [r9]
 800a2a2:	f002 fb49 	bl	800c938 <realloc>
 800a2a6:	b108      	cbz	r0, 800a2ac <__ssvfscanf_r+0x62c>
 800a2a8:	f8c9 0000 	str.w	r0, [r9]
 800a2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ae:	4433      	add	r3, r6
 800a2b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	627b      	str	r3, [r7, #36]	; 0x24
 800a2b8:	4646      	mov	r6, r8
 800a2ba:	e4ff      	b.n	8009cbc <__ssvfscanf_r+0x3c>
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	bf08      	it	eq
 800a2c2:	f04f 33ff 	moveq.w	r3, #4294967295
 800a2c6:	f019 0501 	ands.w	r5, r9, #1
 800a2ca:	633b      	str	r3, [r7, #48]	; 0x30
 800a2cc:	f009 0b10 	and.w	fp, r9, #16
 800a2d0:	f000 8107 	beq.w	800a4e2 <__ssvfscanf_r+0x862>
 800a2d4:	f1bb 0f00 	cmp.w	fp, #0
 800a2d8:	f040 80a7 	bne.w	800a42a <__ssvfscanf_r+0x7aa>
 800a2dc:	4633      	mov	r3, r6
 800a2de:	f019 0f80 	tst.w	r9, #128	; 0x80
 800a2e2:	f853 5b04 	ldr.w	r5, [r3], #4
 800a2e6:	613b      	str	r3, [r7, #16]
 800a2e8:	f000 80a8 	beq.w	800a43c <__ssvfscanf_r+0x7bc>
 800a2ec:	2d00      	cmp	r5, #0
 800a2ee:	f43f ae8b 	beq.w	800a008 <__ssvfscanf_r+0x388>
 800a2f2:	2080      	movs	r0, #128	; 0x80
 800a2f4:	f7fd ff3c 	bl	8008170 <malloc>
 800a2f8:	4680      	mov	r8, r0
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	f43f ae81 	beq.w	800a002 <__ssvfscanf_r+0x382>
 800a300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a302:	6028      	str	r0, [r5, #0]
 800a304:	88de      	ldrh	r6, [r3, #6]
 800a306:	889b      	ldrh	r3, [r3, #4]
 800a308:	429e      	cmp	r6, r3
 800a30a:	d314      	bcc.n	800a336 <__ssvfscanf_r+0x6b6>
 800a30c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 800a310:	4293      	cmp	r3, r2
 800a312:	f63f ae76 	bhi.w	800a002 <__ssvfscanf_r+0x382>
 800a316:	3308      	adds	r3, #8
 800a318:	fa1f f983 	uxth.w	r9, r3
 800a31c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a31e:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800a322:	6818      	ldr	r0, [r3, #0]
 800a324:	f002 fb08 	bl	800c938 <realloc>
 800a328:	2800      	cmp	r0, #0
 800a32a:	f43f ae6a 	beq.w	800a002 <__ssvfscanf_r+0x382>
 800a32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a330:	6018      	str	r0, [r3, #0]
 800a332:	f8a3 9004 	strh.w	r9, [r3, #4]
 800a336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a338:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	62bd      	str	r5, [r7, #40]	; 0x28
 800a33e:	1c72      	adds	r2, r6, #1
 800a340:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 800a344:	80ca      	strh	r2, [r1, #6]
 800a346:	4645      	mov	r5, r8
 800a348:	f04f 0a20 	mov.w	sl, #32
 800a34c:	2600      	movs	r6, #0
 800a34e:	f001 fe13 	bl	800bf78 <__locale_mb_cur_max>
 800a352:	42b0      	cmp	r0, r6
 800a354:	f43f ad5c 	beq.w	8009e10 <__ssvfscanf_r+0x190>
 800a358:	6823      	ldr	r3, [r4, #0]
 800a35a:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800a35e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a362:	558a      	strb	r2, [r1, r6]
 800a364:	6862      	ldr	r2, [r4, #4]
 800a366:	3a01      	subs	r2, #1
 800a368:	e9c4 3200 	strd	r3, r2, [r4]
 800a36c:	6a3b      	ldr	r3, [r7, #32]
 800a36e:	2b03      	cmp	r3, #3
 800a370:	f106 0901 	add.w	r9, r6, #1
 800a374:	d102      	bne.n	800a37c <__ssvfscanf_r+0x6fc>
 800a376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a378:	2b04      	cmp	r3, #4
 800a37a:	d005      	beq.n	800a388 <__ssvfscanf_r+0x708>
 800a37c:	2208      	movs	r2, #8
 800a37e:	2100      	movs	r1, #0
 800a380:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800a384:	f7fe f940 	bl	8008608 <memset>
 800a388:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	ee18 0a10 	vmov	r0, s16
 800a392:	464b      	mov	r3, r9
 800a394:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800a398:	4629      	mov	r1, r5
 800a39a:	f001 fe0d 	bl	800bfb8 <_mbrtowc_r>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	6238      	str	r0, [r7, #32]
 800a3a2:	1c58      	adds	r0, r3, #1
 800a3a4:	f43f ad34 	beq.w	8009e10 <__ssvfscanf_r+0x190>
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d14c      	bne.n	800a446 <__ssvfscanf_r+0x7c6>
 800a3ac:	602b      	str	r3, [r5, #0]
 800a3ae:	682e      	ldr	r6, [r5, #0]
 800a3b0:	1c71      	adds	r1, r6, #1
 800a3b2:	d059      	beq.n	800a468 <__ssvfscanf_r+0x7e8>
 800a3b4:	2208      	movs	r2, #8
 800a3b6:	2100      	movs	r1, #0
 800a3b8:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800a3bc:	f7fe f924 	bl	8008608 <memset>
 800a3c0:	4b9c      	ldr	r3, [pc, #624]	; (800a634 <__ssvfscanf_r+0x9b4>)
 800a3c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3c6:	60fb      	str	r3, [r7, #12]
 800a3c8:	4632      	mov	r2, r6
 800a3ca:	ee18 0a10 	vmov	r0, s16
 800a3ce:	68fe      	ldr	r6, [r7, #12]
 800a3d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a3d4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a3d8:	47b0      	blx	r6
 800a3da:	2801      	cmp	r0, #1
 800a3dc:	d146      	bne.n	800a46c <__ssvfscanf_r+0x7ec>
 800a3de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a3e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a3e6:	5c9b      	ldrb	r3, [r3, r2]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d14b      	bne.n	800a484 <__ssvfscanf_r+0x804>
 800a3ec:	f507 76a8 	add.w	r6, r7, #336	; 0x150
 800a3f0:	f1b9 0f00 	cmp.w	r9, #0
 800a3f4:	d13c      	bne.n	800a470 <__ssvfscanf_r+0x7f0>
 800a3f6:	f1bb 0f00 	cmp.w	fp, #0
 800a3fa:	d114      	bne.n	800a426 <__ssvfscanf_r+0x7a6>
 800a3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fe:	f8c5 b000 	str.w	fp, [r5]
 800a402:	b16b      	cbz	r3, 800a420 <__ssvfscanf_r+0x7a0>
 800a404:	eba5 0108 	sub.w	r1, r5, r8
 800a408:	108b      	asrs	r3, r1, #2
 800a40a:	3301      	adds	r3, #1
 800a40c:	459a      	cmp	sl, r3
 800a40e:	d907      	bls.n	800a420 <__ssvfscanf_r+0x7a0>
 800a410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a412:	3104      	adds	r1, #4
 800a414:	6818      	ldr	r0, [r3, #0]
 800a416:	f002 fa8f 	bl	800c938 <realloc>
 800a41a:	b108      	cbz	r0, 800a420 <__ssvfscanf_r+0x7a0>
 800a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41e:	6018      	str	r0, [r3, #0]
 800a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a422:	3301      	adds	r3, #1
 800a424:	627b      	str	r3, [r7, #36]	; 0x24
 800a426:	693e      	ldr	r6, [r7, #16]
 800a428:	e448      	b.n	8009cbc <__ssvfscanf_r+0x3c>
 800a42a:	f04f 0a00 	mov.w	sl, #0
 800a42e:	613e      	str	r6, [r7, #16]
 800a430:	46d0      	mov	r8, sl
 800a432:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 800a436:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 800a43a:	e787      	b.n	800a34c <__ssvfscanf_r+0x6cc>
 800a43c:	46da      	mov	sl, fp
 800a43e:	46d8      	mov	r8, fp
 800a440:	f8c7 b028 	str.w	fp, [r7, #40]	; 0x28
 800a444:	e782      	b.n	800a34c <__ssvfscanf_r+0x6cc>
 800a446:	6a3b      	ldr	r3, [r7, #32]
 800a448:	3302      	adds	r3, #2
 800a44a:	d1b0      	bne.n	800a3ae <__ssvfscanf_r+0x72e>
 800a44c:	6863      	ldr	r3, [r4, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	dc42      	bgt.n	800a4d8 <__ssvfscanf_r+0x858>
 800a452:	ee18 0a10 	vmov	r0, s16
 800a456:	4621      	mov	r1, r4
 800a458:	f003 fd2c 	bl	800deb4 <__ssrefill_r>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	d03b      	beq.n	800a4d8 <__ssvfscanf_r+0x858>
 800a460:	f1b9 0f00 	cmp.w	r9, #0
 800a464:	d0c7      	beq.n	800a3f6 <__ssvfscanf_r+0x776>
 800a466:	e4d3      	b.n	8009e10 <__ssvfscanf_r+0x190>
 800a468:	4632      	mov	r2, r6
 800a46a:	e7ba      	b.n	800a3e2 <__ssvfscanf_r+0x762>
 800a46c:	2200      	movs	r2, #0
 800a46e:	e7b8      	b.n	800a3e2 <__ssvfscanf_r+0x762>
 800a470:	f109 39ff 	add.w	r9, r9, #4294967295
 800a474:	ee18 0a10 	vmov	r0, s16
 800a478:	f816 1009 	ldrb.w	r1, [r6, r9]
 800a47c:	4622      	mov	r2, r4
 800a47e:	f003 fcdc 	bl	800de3a <_sungetc_r>
 800a482:	e7b5      	b.n	800a3f0 <__ssvfscanf_r+0x770>
 800a484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a486:	444b      	add	r3, r9
 800a488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a48a:	6a3b      	ldr	r3, [r7, #32]
 800a48c:	2b03      	cmp	r3, #3
 800a48e:	d102      	bne.n	800a496 <__ssvfscanf_r+0x816>
 800a490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a492:	2b04      	cmp	r3, #4
 800a494:	d002      	beq.n	800a49c <__ssvfscanf_r+0x81c>
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	3b01      	subs	r3, #1
 800a49a:	633b      	str	r3, [r7, #48]	; 0x30
 800a49c:	f1bb 0f00 	cmp.w	fp, #0
 800a4a0:	d117      	bne.n	800a4d2 <__ssvfscanf_r+0x852>
 800a4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a4:	3504      	adds	r5, #4
 800a4a6:	b1a3      	cbz	r3, 800a4d2 <__ssvfscanf_r+0x852>
 800a4a8:	eba5 0608 	sub.w	r6, r5, r8
 800a4ac:	ebba 0fa6 	cmp.w	sl, r6, asr #2
 800a4b0:	d80d      	bhi.n	800a4ce <__ssvfscanf_r+0x84e>
 800a4b2:	4640      	mov	r0, r8
 800a4b4:	ea4f 01ca 	mov.w	r1, sl, lsl #3
 800a4b8:	f002 fa3e 	bl	800c938 <realloc>
 800a4bc:	4680      	mov	r8, r0
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	f43f ad9f 	beq.w	800a002 <__ssvfscanf_r+0x382>
 800a4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c6:	1985      	adds	r5, r0, r6
 800a4c8:	6018      	str	r0, [r3, #0]
 800a4ca:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800a4ce:	46d9      	mov	r9, fp
 800a4d0:	e7bc      	b.n	800a44c <__ssvfscanf_r+0x7cc>
 800a4d2:	f04f 0900 	mov.w	r9, #0
 800a4d6:	e7b9      	b.n	800a44c <__ssvfscanf_r+0x7cc>
 800a4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d08b      	beq.n	800a3f6 <__ssvfscanf_r+0x776>
 800a4de:	464e      	mov	r6, r9
 800a4e0:	e735      	b.n	800a34e <__ssvfscanf_r+0x6ce>
 800a4e2:	f1bb 0f00 	cmp.w	fp, #0
 800a4e6:	d01d      	beq.n	800a524 <__ssvfscanf_r+0x8a4>
 800a4e8:	f107 0850 	add.w	r8, r7, #80	; 0x50
 800a4ec:	6823      	ldr	r3, [r4, #0]
 800a4ee:	781a      	ldrb	r2, [r3, #0]
 800a4f0:	f818 2002 	ldrb.w	r2, [r8, r2]
 800a4f4:	b90a      	cbnz	r2, 800a4fa <__ssvfscanf_r+0x87a>
 800a4f6:	b995      	cbnz	r5, 800a51e <__ssvfscanf_r+0x89e>
 800a4f8:	e4be      	b.n	8009e78 <__ssvfscanf_r+0x1f8>
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	6862      	ldr	r2, [r4, #4]
 800a4fe:	6023      	str	r3, [r4, #0]
 800a500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a502:	3501      	adds	r5, #1
 800a504:	3a01      	subs	r2, #1
 800a506:	42ab      	cmp	r3, r5
 800a508:	6062      	str	r2, [r4, #4]
 800a50a:	d008      	beq.n	800a51e <__ssvfscanf_r+0x89e>
 800a50c:	2a00      	cmp	r2, #0
 800a50e:	dced      	bgt.n	800a4ec <__ssvfscanf_r+0x86c>
 800a510:	ee18 0a10 	vmov	r0, s16
 800a514:	4621      	mov	r1, r4
 800a516:	f003 fccd 	bl	800deb4 <__ssrefill_r>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	d0e6      	beq.n	800a4ec <__ssvfscanf_r+0x86c>
 800a51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a520:	442b      	add	r3, r5
 800a522:	e46c      	b.n	8009dfe <__ssvfscanf_r+0x17e>
 800a524:	46b3      	mov	fp, r6
 800a526:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 800a52a:	f85b 6b04 	ldr.w	r6, [fp], #4
 800a52e:	d07f      	beq.n	800a630 <__ssvfscanf_r+0x9b0>
 800a530:	2e00      	cmp	r6, #0
 800a532:	f43f aca1 	beq.w	8009e78 <__ssvfscanf_r+0x1f8>
 800a536:	2020      	movs	r0, #32
 800a538:	f7fd fe1a 	bl	8008170 <malloc>
 800a53c:	4680      	mov	r8, r0
 800a53e:	2800      	cmp	r0, #0
 800a540:	f43f ac6b 	beq.w	8009e1a <__ssvfscanf_r+0x19a>
 800a544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a546:	6030      	str	r0, [r6, #0]
 800a548:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800a54c:	889d      	ldrh	r5, [r3, #4]
 800a54e:	45a9      	cmp	r9, r5
 800a550:	d311      	bcc.n	800a576 <__ssvfscanf_r+0x8f6>
 800a552:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800a556:	429d      	cmp	r5, r3
 800a558:	f63f ad5b 	bhi.w	800a012 <__ssvfscanf_r+0x392>
 800a55c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a55e:	3508      	adds	r5, #8
 800a560:	b2ad      	uxth	r5, r5
 800a562:	6818      	ldr	r0, [r3, #0]
 800a564:	00a9      	lsls	r1, r5, #2
 800a566:	f002 f9e7 	bl	800c938 <realloc>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	f43f ad51 	beq.w	800a012 <__ssvfscanf_r+0x392>
 800a570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a572:	6018      	str	r0, [r3, #0]
 800a574:	809d      	strh	r5, [r3, #4]
 800a576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a578:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f109 0201 	add.w	r2, r9, #1
 800a580:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 800a584:	46b2      	mov	sl, r6
 800a586:	80ca      	strh	r2, [r1, #6]
 800a588:	4646      	mov	r6, r8
 800a58a:	f04f 0920 	mov.w	r9, #32
 800a58e:	4635      	mov	r5, r6
 800a590:	f107 0850 	add.w	r8, r7, #80	; 0x50
 800a594:	6823      	ldr	r3, [r4, #0]
 800a596:	781a      	ldrb	r2, [r3, #0]
 800a598:	f818 2002 	ldrb.w	r2, [r8, r2]
 800a59c:	b36a      	cbz	r2, 800a5fa <__ssvfscanf_r+0x97a>
 800a59e:	6862      	ldr	r2, [r4, #4]
 800a5a0:	3a01      	subs	r2, #1
 800a5a2:	6062      	str	r2, [r4, #4]
 800a5a4:	1c5a      	adds	r2, r3, #1
 800a5a6:	6022      	str	r2, [r4, #0]
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	f806 3b01 	strb.w	r3, [r6], #1
 800a5ae:	f1ba 0f00 	cmp.w	sl, #0
 800a5b2:	d011      	beq.n	800a5d8 <__ssvfscanf_r+0x958>
 800a5b4:	1b73      	subs	r3, r6, r5
 800a5b6:	454b      	cmp	r3, r9
 800a5b8:	d30e      	bcc.n	800a5d8 <__ssvfscanf_r+0x958>
 800a5ba:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800a5be:	4628      	mov	r0, r5
 800a5c0:	4649      	mov	r1, r9
 800a5c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5c4:	f002 f9b8 	bl	800c938 <realloc>
 800a5c8:	4605      	mov	r5, r0
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	f43f ac25 	beq.w	8009e1a <__ssvfscanf_r+0x19a>
 800a5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d2:	f8ca 0000 	str.w	r0, [sl]
 800a5d6:	18c6      	adds	r6, r0, r3
 800a5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	633b      	str	r3, [r7, #48]	; 0x30
 800a5de:	d00c      	beq.n	800a5fa <__ssvfscanf_r+0x97a>
 800a5e0:	6863      	ldr	r3, [r4, #4]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	dcd6      	bgt.n	800a594 <__ssvfscanf_r+0x914>
 800a5e6:	ee18 0a10 	vmov	r0, s16
 800a5ea:	4621      	mov	r1, r4
 800a5ec:	f003 fc62 	bl	800deb4 <__ssrefill_r>
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	d0cf      	beq.n	800a594 <__ssvfscanf_r+0x914>
 800a5f4:	42ae      	cmp	r6, r5
 800a5f6:	f43f ac0b 	beq.w	8009e10 <__ssvfscanf_r+0x190>
 800a5fa:	1b75      	subs	r5, r6, r5
 800a5fc:	f43f ac3c 	beq.w	8009e78 <__ssvfscanf_r+0x1f8>
 800a600:	2300      	movs	r3, #0
 800a602:	7033      	strb	r3, [r6, #0]
 800a604:	f1ba 0f00 	cmp.w	sl, #0
 800a608:	d009      	beq.n	800a61e <__ssvfscanf_r+0x99e>
 800a60a:	1c69      	adds	r1, r5, #1
 800a60c:	4589      	cmp	r9, r1
 800a60e:	d906      	bls.n	800a61e <__ssvfscanf_r+0x99e>
 800a610:	f8da 0000 	ldr.w	r0, [sl]
 800a614:	f002 f990 	bl	800c938 <realloc>
 800a618:	b108      	cbz	r0, 800a61e <__ssvfscanf_r+0x99e>
 800a61a:	f8ca 0000 	str.w	r0, [sl]
 800a61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a620:	3301      	adds	r3, #1
 800a622:	627b      	str	r3, [r7, #36]	; 0x24
 800a624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a626:	442b      	add	r3, r5
 800a628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a62a:	465e      	mov	r6, fp
 800a62c:	f7ff bb46 	b.w	8009cbc <__ssvfscanf_r+0x3c>
 800a630:	46ca      	mov	sl, r9
 800a632:	e7ac      	b.n	800a58e <__ssvfscanf_r+0x90e>
 800a634:	20000854 	.word	0x20000854
 800a638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	bf08      	it	eq
 800a63e:	f04f 33ff 	moveq.w	r3, #4294967295
 800a642:	f019 0501 	ands.w	r5, r9, #1
 800a646:	633b      	str	r3, [r7, #48]	; 0x30
 800a648:	f009 0810 	and.w	r8, r9, #16
 800a64c:	f000 80fb 	beq.w	800a846 <__ssvfscanf_r+0xbc6>
 800a650:	f1b8 0f00 	cmp.w	r8, #0
 800a654:	f040 80a0 	bne.w	800a798 <__ssvfscanf_r+0xb18>
 800a658:	4633      	mov	r3, r6
 800a65a:	f019 0f80 	tst.w	r9, #128	; 0x80
 800a65e:	f853 6b04 	ldr.w	r6, [r3], #4
 800a662:	62bb      	str	r3, [r7, #40]	; 0x28
 800a664:	f000 80a0 	beq.w	800a7a8 <__ssvfscanf_r+0xb28>
 800a668:	2e00      	cmp	r6, #0
 800a66a:	f43f accd 	beq.w	800a008 <__ssvfscanf_r+0x388>
 800a66e:	2080      	movs	r0, #128	; 0x80
 800a670:	f7fd fd7e 	bl	8008170 <malloc>
 800a674:	4605      	mov	r5, r0
 800a676:	2800      	cmp	r0, #0
 800a678:	f43f acc3 	beq.w	800a002 <__ssvfscanf_r+0x382>
 800a67c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a67e:	6030      	str	r0, [r6, #0]
 800a680:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800a684:	889b      	ldrh	r3, [r3, #4]
 800a686:	4599      	cmp	r9, r3
 800a688:	d314      	bcc.n	800a6b4 <__ssvfscanf_r+0xa34>
 800a68a:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 800a68e:	4293      	cmp	r3, r2
 800a690:	f63f acb7 	bhi.w	800a002 <__ssvfscanf_r+0x382>
 800a694:	3308      	adds	r3, #8
 800a696:	fa1f fa83 	uxth.w	sl, r3
 800a69a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a69c:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800a6a0:	6818      	ldr	r0, [r3, #0]
 800a6a2:	f002 f949 	bl	800c938 <realloc>
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	f43f acab 	beq.w	800a002 <__ssvfscanf_r+0x382>
 800a6ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ae:	6018      	str	r0, [r3, #0]
 800a6b0:	f8a3 a004 	strh.w	sl, [r3, #4]
 800a6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f109 0201 	add.w	r2, r9, #1
 800a6be:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 800a6c2:	46b2      	mov	sl, r6
 800a6c4:	80ca      	strh	r2, [r1, #6]
 800a6c6:	462e      	mov	r6, r5
 800a6c8:	f04f 0920 	mov.w	r9, #32
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f107 0b48 	add.w	fp, r7, #72	; 0x48
 800a6d2:	6823      	ldr	r3, [r4, #0]
 800a6d4:	49aa      	ldr	r1, [pc, #680]	; (800a980 <__ssvfscanf_r+0xd00>)
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	5c5b      	ldrb	r3, [r3, r1]
 800a6da:	0718      	lsls	r0, r3, #28
 800a6dc:	d441      	bmi.n	800a762 <__ssvfscanf_r+0xae2>
 800a6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d03e      	beq.n	800a762 <__ssvfscanf_r+0xae2>
 800a6e4:	613a      	str	r2, [r7, #16]
 800a6e6:	f001 fc47 	bl	800bf78 <__locale_mb_cur_max>
 800a6ea:	693a      	ldr	r2, [r7, #16]
 800a6ec:	4290      	cmp	r0, r2
 800a6ee:	f43f ab8f 	beq.w	8009e10 <__ssvfscanf_r+0x190>
 800a6f2:	6821      	ldr	r1, [r4, #0]
 800a6f4:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 800a6f8:	f811 0b01 	ldrb.w	r0, [r1], #1
 800a6fc:	f80c 0002 	strb.w	r0, [ip, r2]
 800a700:	1c53      	adds	r3, r2, #1
 800a702:	6862      	ldr	r2, [r4, #4]
 800a704:	3a01      	subs	r2, #1
 800a706:	e9c4 1200 	strd	r1, r2, [r4]
 800a70a:	6a3a      	ldr	r2, [r7, #32]
 800a70c:	2a03      	cmp	r2, #3
 800a70e:	d103      	bne.n	800a718 <__ssvfscanf_r+0xa98>
 800a710:	f8db 2000 	ldr.w	r2, [fp]
 800a714:	2a04      	cmp	r2, #4
 800a716:	d006      	beq.n	800a726 <__ssvfscanf_r+0xaa6>
 800a718:	2208      	movs	r2, #8
 800a71a:	2100      	movs	r1, #0
 800a71c:	4658      	mov	r0, fp
 800a71e:	623b      	str	r3, [r7, #32]
 800a720:	f7fd ff72 	bl	8008608 <memset>
 800a724:	6a3b      	ldr	r3, [r7, #32]
 800a726:	f8cd b000 	str.w	fp, [sp]
 800a72a:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800a72e:	ee18 0a10 	vmov	r0, s16
 800a732:	4631      	mov	r1, r6
 800a734:	613b      	str	r3, [r7, #16]
 800a736:	f001 fc3f 	bl	800bfb8 <_mbrtowc_r>
 800a73a:	1c42      	adds	r2, r0, #1
 800a73c:	6238      	str	r0, [r7, #32]
 800a73e:	f43f ab67 	beq.w	8009e10 <__ssvfscanf_r+0x190>
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	2800      	cmp	r0, #0
 800a746:	d133      	bne.n	800a7b0 <__ssvfscanf_r+0xb30>
 800a748:	6030      	str	r0, [r6, #0]
 800a74a:	6830      	ldr	r0, [r6, #0]
 800a74c:	613b      	str	r3, [r7, #16]
 800a74e:	f001 fc05 	bl	800bf5c <iswspace>
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	4602      	mov	r2, r0
 800a756:	2800      	cmp	r0, #0
 800a758:	d049      	beq.n	800a7ee <__ssvfscanf_r+0xb6e>
 800a75a:	f507 7ba8 	add.w	fp, r7, #336	; 0x150
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d13a      	bne.n	800a7d8 <__ssvfscanf_r+0xb58>
 800a762:	f1b8 0f00 	cmp.w	r8, #0
 800a766:	d114      	bne.n	800a792 <__ssvfscanf_r+0xb12>
 800a768:	f8c6 8000 	str.w	r8, [r6]
 800a76c:	f1ba 0f00 	cmp.w	sl, #0
 800a770:	d00c      	beq.n	800a78c <__ssvfscanf_r+0xb0c>
 800a772:	1b71      	subs	r1, r6, r5
 800a774:	108b      	asrs	r3, r1, #2
 800a776:	3301      	adds	r3, #1
 800a778:	4599      	cmp	r9, r3
 800a77a:	d907      	bls.n	800a78c <__ssvfscanf_r+0xb0c>
 800a77c:	f8da 0000 	ldr.w	r0, [sl]
 800a780:	3104      	adds	r1, #4
 800a782:	f002 f8d9 	bl	800c938 <realloc>
 800a786:	b108      	cbz	r0, 800a78c <__ssvfscanf_r+0xb0c>
 800a788:	f8ca 0000 	str.w	r0, [sl]
 800a78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78e:	3301      	adds	r3, #1
 800a790:	627b      	str	r3, [r7, #36]	; 0x24
 800a792:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800a794:	f7ff ba92 	b.w	8009cbc <__ssvfscanf_r+0x3c>
 800a798:	f04f 0900 	mov.w	r9, #0
 800a79c:	62be      	str	r6, [r7, #40]	; 0x28
 800a79e:	464d      	mov	r5, r9
 800a7a0:	46ca      	mov	sl, r9
 800a7a2:	f107 063c 	add.w	r6, r7, #60	; 0x3c
 800a7a6:	e791      	b.n	800a6cc <__ssvfscanf_r+0xa4c>
 800a7a8:	46c1      	mov	r9, r8
 800a7aa:	4645      	mov	r5, r8
 800a7ac:	46c2      	mov	sl, r8
 800a7ae:	e78d      	b.n	800a6cc <__ssvfscanf_r+0xa4c>
 800a7b0:	6a3a      	ldr	r2, [r7, #32]
 800a7b2:	3202      	adds	r2, #2
 800a7b4:	d1c9      	bne.n	800a74a <__ssvfscanf_r+0xaca>
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	6863      	ldr	r3, [r4, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	dc89      	bgt.n	800a6d2 <__ssvfscanf_r+0xa52>
 800a7be:	ee18 0a10 	vmov	r0, s16
 800a7c2:	4621      	mov	r1, r4
 800a7c4:	613a      	str	r2, [r7, #16]
 800a7c6:	f003 fb75 	bl	800deb4 <__ssrefill_r>
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	d080      	beq.n	800a6d2 <__ssvfscanf_r+0xa52>
 800a7d0:	2a00      	cmp	r2, #0
 800a7d2:	f47f ab1d 	bne.w	8009e10 <__ssvfscanf_r+0x190>
 800a7d6:	e7c4      	b.n	800a762 <__ssvfscanf_r+0xae2>
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	ee18 0a10 	vmov	r0, s16
 800a7de:	f81b 1003 	ldrb.w	r1, [fp, r3]
 800a7e2:	633b      	str	r3, [r7, #48]	; 0x30
 800a7e4:	4622      	mov	r2, r4
 800a7e6:	f003 fb28 	bl	800de3a <_sungetc_r>
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ec:	e7b7      	b.n	800a75e <__ssvfscanf_r+0xade>
 800a7ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7f0:	4419      	add	r1, r3
 800a7f2:	6a3b      	ldr	r3, [r7, #32]
 800a7f4:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a7f6:	2b03      	cmp	r3, #3
 800a7f8:	d103      	bne.n	800a802 <__ssvfscanf_r+0xb82>
 800a7fa:	f8db 3000 	ldr.w	r3, [fp]
 800a7fe:	2b04      	cmp	r3, #4
 800a800:	d002      	beq.n	800a808 <__ssvfscanf_r+0xb88>
 800a802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a804:	3b01      	subs	r3, #1
 800a806:	633b      	str	r3, [r7, #48]	; 0x30
 800a808:	f1b8 0f00 	cmp.w	r8, #0
 800a80c:	d1d4      	bne.n	800a7b8 <__ssvfscanf_r+0xb38>
 800a80e:	3604      	adds	r6, #4
 800a810:	f1ba 0f00 	cmp.w	sl, #0
 800a814:	d015      	beq.n	800a842 <__ssvfscanf_r+0xbc2>
 800a816:	1b73      	subs	r3, r6, r5
 800a818:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 800a81c:	d80f      	bhi.n	800a83e <__ssvfscanf_r+0xbbe>
 800a81e:	4628      	mov	r0, r5
 800a820:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a824:	613b      	str	r3, [r7, #16]
 800a826:	f002 f887 	bl	800c938 <realloc>
 800a82a:	4605      	mov	r5, r0
 800a82c:	2800      	cmp	r0, #0
 800a82e:	f43f abe8 	beq.w	800a002 <__ssvfscanf_r+0x382>
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	f8ca 0000 	str.w	r0, [sl]
 800a838:	18c6      	adds	r6, r0, r3
 800a83a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800a83e:	4642      	mov	r2, r8
 800a840:	e7ba      	b.n	800a7b8 <__ssvfscanf_r+0xb38>
 800a842:	4652      	mov	r2, sl
 800a844:	e7b8      	b.n	800a7b8 <__ssvfscanf_r+0xb38>
 800a846:	f1b8 0f00 	cmp.w	r8, #0
 800a84a:	d01a      	beq.n	800a882 <__ssvfscanf_r+0xc02>
 800a84c:	6823      	ldr	r3, [r4, #0]
 800a84e:	494c      	ldr	r1, [pc, #304]	; (800a980 <__ssvfscanf_r+0xd00>)
 800a850:	781a      	ldrb	r2, [r3, #0]
 800a852:	5c52      	ldrb	r2, [r2, r1]
 800a854:	0711      	lsls	r1, r2, #28
 800a856:	f53f ae62 	bmi.w	800a51e <__ssvfscanf_r+0x89e>
 800a85a:	3301      	adds	r3, #1
 800a85c:	6862      	ldr	r2, [r4, #4]
 800a85e:	6023      	str	r3, [r4, #0]
 800a860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a862:	3501      	adds	r5, #1
 800a864:	3a01      	subs	r2, #1
 800a866:	429d      	cmp	r5, r3
 800a868:	6062      	str	r2, [r4, #4]
 800a86a:	f43f ae58 	beq.w	800a51e <__ssvfscanf_r+0x89e>
 800a86e:	2a00      	cmp	r2, #0
 800a870:	dcec      	bgt.n	800a84c <__ssvfscanf_r+0xbcc>
 800a872:	ee18 0a10 	vmov	r0, s16
 800a876:	4621      	mov	r1, r4
 800a878:	f003 fb1c 	bl	800deb4 <__ssrefill_r>
 800a87c:	2800      	cmp	r0, #0
 800a87e:	d0e5      	beq.n	800a84c <__ssvfscanf_r+0xbcc>
 800a880:	e64d      	b.n	800a51e <__ssvfscanf_r+0x89e>
 800a882:	46b3      	mov	fp, r6
 800a884:	f019 0580 	ands.w	r5, r9, #128	; 0x80
 800a888:	f85b 6b04 	ldr.w	r6, [fp], #4
 800a88c:	d076      	beq.n	800a97c <__ssvfscanf_r+0xcfc>
 800a88e:	2e00      	cmp	r6, #0
 800a890:	f43f aaf2 	beq.w	8009e78 <__ssvfscanf_r+0x1f8>
 800a894:	2020      	movs	r0, #32
 800a896:	f7fd fc6b 	bl	8008170 <malloc>
 800a89a:	4680      	mov	r8, r0
 800a89c:	2800      	cmp	r0, #0
 800a89e:	f43f aabc 	beq.w	8009e1a <__ssvfscanf_r+0x19a>
 800a8a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a4:	6030      	str	r0, [r6, #0]
 800a8a6:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800a8aa:	889d      	ldrh	r5, [r3, #4]
 800a8ac:	45a9      	cmp	r9, r5
 800a8ae:	d311      	bcc.n	800a8d4 <__ssvfscanf_r+0xc54>
 800a8b0:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800a8b4:	429d      	cmp	r5, r3
 800a8b6:	f63f abac 	bhi.w	800a012 <__ssvfscanf_r+0x392>
 800a8ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8bc:	3508      	adds	r5, #8
 800a8be:	b2ad      	uxth	r5, r5
 800a8c0:	6818      	ldr	r0, [r3, #0]
 800a8c2:	00a9      	lsls	r1, r5, #2
 800a8c4:	f002 f838 	bl	800c938 <realloc>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	f43f aba2 	beq.w	800a012 <__ssvfscanf_r+0x392>
 800a8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d0:	6018      	str	r0, [r3, #0]
 800a8d2:	809d      	strh	r5, [r3, #4]
 800a8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f109 0201 	add.w	r2, r9, #1
 800a8de:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 800a8e2:	80ca      	strh	r2, [r1, #6]
 800a8e4:	46b1      	mov	r9, r6
 800a8e6:	2520      	movs	r5, #32
 800a8e8:	4646      	mov	r6, r8
 800a8ea:	46b0      	mov	r8, r6
 800a8ec:	6823      	ldr	r3, [r4, #0]
 800a8ee:	4924      	ldr	r1, [pc, #144]	; (800a980 <__ssvfscanf_r+0xd00>)
 800a8f0:	781a      	ldrb	r2, [r3, #0]
 800a8f2:	5c52      	ldrb	r2, [r2, r1]
 800a8f4:	0712      	lsls	r2, r2, #28
 800a8f6:	d429      	bmi.n	800a94c <__ssvfscanf_r+0xccc>
 800a8f8:	6862      	ldr	r2, [r4, #4]
 800a8fa:	3a01      	subs	r2, #1
 800a8fc:	6062      	str	r2, [r4, #4]
 800a8fe:	1c5a      	adds	r2, r3, #1
 800a900:	6022      	str	r2, [r4, #0]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	f806 3b01 	strb.w	r3, [r6], #1
 800a908:	f1b9 0f00 	cmp.w	r9, #0
 800a90c:	d010      	beq.n	800a930 <__ssvfscanf_r+0xcb0>
 800a90e:	eba6 0a08 	sub.w	sl, r6, r8
 800a912:	45aa      	cmp	sl, r5
 800a914:	d30c      	bcc.n	800a930 <__ssvfscanf_r+0xcb0>
 800a916:	006d      	lsls	r5, r5, #1
 800a918:	4640      	mov	r0, r8
 800a91a:	4629      	mov	r1, r5
 800a91c:	f002 f80c 	bl	800c938 <realloc>
 800a920:	4680      	mov	r8, r0
 800a922:	2800      	cmp	r0, #0
 800a924:	f43f aa79 	beq.w	8009e1a <__ssvfscanf_r+0x19a>
 800a928:	eb00 060a 	add.w	r6, r0, sl
 800a92c:	f8c9 0000 	str.w	r0, [r9]
 800a930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a932:	3b01      	subs	r3, #1
 800a934:	633b      	str	r3, [r7, #48]	; 0x30
 800a936:	d009      	beq.n	800a94c <__ssvfscanf_r+0xccc>
 800a938:	6863      	ldr	r3, [r4, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	dcd6      	bgt.n	800a8ec <__ssvfscanf_r+0xc6c>
 800a93e:	ee18 0a10 	vmov	r0, s16
 800a942:	4621      	mov	r1, r4
 800a944:	f003 fab6 	bl	800deb4 <__ssrefill_r>
 800a948:	2800      	cmp	r0, #0
 800a94a:	d0cf      	beq.n	800a8ec <__ssvfscanf_r+0xc6c>
 800a94c:	2300      	movs	r3, #0
 800a94e:	7033      	strb	r3, [r6, #0]
 800a950:	eba6 0608 	sub.w	r6, r6, r8
 800a954:	f1b9 0f00 	cmp.w	r9, #0
 800a958:	d009      	beq.n	800a96e <__ssvfscanf_r+0xcee>
 800a95a:	1c71      	adds	r1, r6, #1
 800a95c:	428d      	cmp	r5, r1
 800a95e:	d906      	bls.n	800a96e <__ssvfscanf_r+0xcee>
 800a960:	f8d9 0000 	ldr.w	r0, [r9]
 800a964:	f001 ffe8 	bl	800c938 <realloc>
 800a968:	b108      	cbz	r0, 800a96e <__ssvfscanf_r+0xcee>
 800a96a:	f8c9 0000 	str.w	r0, [r9]
 800a96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a970:	4433      	add	r3, r6
 800a972:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a976:	3301      	adds	r3, #1
 800a978:	627b      	str	r3, [r7, #36]	; 0x24
 800a97a:	e656      	b.n	800a62a <__ssvfscanf_r+0x9aa>
 800a97c:	46a9      	mov	r9, r5
 800a97e:	e7b4      	b.n	800a8ea <__ssvfscanf_r+0xc6a>
 800a980:	08010009 	.word	0x08010009
 800a984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a986:	3b01      	subs	r3, #1
 800a988:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800a98c:	bf81      	itttt	hi
 800a98e:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 800a990:	f46f 7cae 	mvnhi.w	ip, #348	; 0x15c
 800a994:	eb03 0b0c 	addhi.w	fp, r3, ip
 800a998:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a99c:	bf88      	it	hi
 800a99e:	633b      	strhi	r3, [r7, #48]	; 0x30
 800a9a0:	f449 6358 	orr.w	r3, r9, #3456	; 0xd80
 800a9a4:	f8df 9414 	ldr.w	r9, [pc, #1044]	; 800adbc <__ssvfscanf_r+0x113c>
 800a9a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9aa:	bf98      	it	ls
 800a9ac:	f04f 0b00 	movls.w	fp, #0
 800a9b0:	f04f 0a00 	mov.w	sl, #0
 800a9b4:	f507 78a8 	add.w	r8, r7, #336	; 0x150
 800a9b8:	6822      	ldr	r2, [r4, #0]
 800a9ba:	7813      	ldrb	r3, [r2, #0]
 800a9bc:	2b39      	cmp	r3, #57	; 0x39
 800a9be:	d80f      	bhi.n	800a9e0 <__ssvfscanf_r+0xd60>
 800a9c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a9c2:	d91a      	bls.n	800a9fa <__ssvfscanf_r+0xd7a>
 800a9c4:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a9c8:	290e      	cmp	r1, #14
 800a9ca:	d816      	bhi.n	800a9fa <__ssvfscanf_r+0xd7a>
 800a9cc:	e8df f001 	tbb	[pc, r1]
 800a9d0:	157f157f 	.word	0x157f157f
 800a9d4:	70704215 	.word	0x70704215
 800a9d8:	70707070 	.word	0x70707070
 800a9dc:	7870      	.short	0x7870
 800a9de:	78          	.byte	0x78
 800a9df:	00          	.byte	0x00
 800a9e0:	2b66      	cmp	r3, #102	; 0x66
 800a9e2:	d835      	bhi.n	800aa50 <__ssvfscanf_r+0xdd0>
 800a9e4:	2b60      	cmp	r3, #96	; 0x60
 800a9e6:	d803      	bhi.n	800a9f0 <__ssvfscanf_r+0xd70>
 800a9e8:	2b46      	cmp	r3, #70	; 0x46
 800a9ea:	d804      	bhi.n	800a9f6 <__ssvfscanf_r+0xd76>
 800a9ec:	2b40      	cmp	r3, #64	; 0x40
 800a9ee:	d904      	bls.n	800a9fa <__ssvfscanf_r+0xd7a>
 800a9f0:	69f9      	ldr	r1, [r7, #28]
 800a9f2:	290a      	cmp	r1, #10
 800a9f4:	e069      	b.n	800aaca <__ssvfscanf_r+0xe4a>
 800a9f6:	2b58      	cmp	r3, #88	; 0x58
 800a9f8:	d06f      	beq.n	800aada <__ssvfscanf_r+0xe5a>
 800a9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fc:	05d8      	lsls	r0, r3, #23
 800a9fe:	d512      	bpl.n	800aa26 <__ssvfscanf_r+0xda6>
 800aa00:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800aa04:	4598      	cmp	r8, r3
 800aa06:	d909      	bls.n	800aa1c <__ssvfscanf_r+0xd9c>
 800aa08:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 800aa0c:	ee18 0a10 	vmov	r0, s16
 800aa10:	4622      	mov	r2, r4
 800aa12:	f003 fa12 	bl	800de3a <_sungetc_r>
 800aa16:	f108 39ff 	add.w	r9, r8, #4294967295
 800aa1a:	46c8      	mov	r8, r9
 800aa1c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800aa20:	4598      	cmp	r8, r3
 800aa22:	f43f aa29 	beq.w	8009e78 <__ssvfscanf_r+0x1f8>
 800aa26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa28:	f013 0210 	ands.w	r2, r3, #16
 800aa2c:	d175      	bne.n	800ab1a <__ssvfscanf_r+0xe9a>
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	69bd      	ldr	r5, [r7, #24]
 800aa32:	f888 2000 	strb.w	r2, [r8]
 800aa36:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800aa3a:	ee18 0a10 	vmov	r0, s16
 800aa3e:	47a8      	blx	r5
 800aa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa42:	0699      	lsls	r1, r3, #26
 800aa44:	f106 0904 	add.w	r9, r6, #4
 800aa48:	d55e      	bpl.n	800ab08 <__ssvfscanf_r+0xe88>
 800aa4a:	6833      	ldr	r3, [r6, #0]
 800aa4c:	6018      	str	r0, [r3, #0]
 800aa4e:	e060      	b.n	800ab12 <__ssvfscanf_r+0xe92>
 800aa50:	2b78      	cmp	r3, #120	; 0x78
 800aa52:	e7d1      	b.n	800a9f8 <__ssvfscanf_r+0xd78>
 800aa54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa56:	050d      	lsls	r5, r1, #20
 800aa58:	d50d      	bpl.n	800aa76 <__ssvfscanf_r+0xdf6>
 800aa5a:	69f9      	ldr	r1, [r7, #28]
 800aa5c:	b929      	cbnz	r1, 800aa6a <__ssvfscanf_r+0xdea>
 800aa5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa60:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800aa64:	62b9      	str	r1, [r7, #40]	; 0x28
 800aa66:	2108      	movs	r1, #8
 800aa68:	61f9      	str	r1, [r7, #28]
 800aa6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa6c:	0548      	lsls	r0, r1, #21
 800aa6e:	d505      	bpl.n	800aa7c <__ssvfscanf_r+0xdfc>
 800aa70:	f421 61b0 	bic.w	r1, r1, #1408	; 0x580
 800aa74:	62b9      	str	r1, [r7, #40]	; 0x28
 800aa76:	f808 3b01 	strb.w	r3, [r8], #1
 800aa7a:	e00d      	b.n	800aa98 <__ssvfscanf_r+0xe18>
 800aa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7e:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 800aa82:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa84:	f1bb 0f00 	cmp.w	fp, #0
 800aa88:	d004      	beq.n	800aa94 <__ssvfscanf_r+0xe14>
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa92:	633b      	str	r3, [r7, #48]	; 0x30
 800aa94:	f10a 0a01 	add.w	sl, sl, #1
 800aa98:	6863      	ldr	r3, [r4, #4]
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	6063      	str	r3, [r4, #4]
 800aaa0:	dd2a      	ble.n	800aaf8 <__ssvfscanf_r+0xe78>
 800aaa2:	3201      	adds	r2, #1
 800aaa4:	6022      	str	r2, [r4, #0]
 800aaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa8:	3b01      	subs	r3, #1
 800aaaa:	633b      	str	r3, [r7, #48]	; 0x30
 800aaac:	d184      	bne.n	800a9b8 <__ssvfscanf_r+0xd38>
 800aaae:	e7a4      	b.n	800a9fa <__ssvfscanf_r+0xd7a>
 800aab0:	69f9      	ldr	r1, [r7, #28]
 800aab2:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 800aab6:	61f9      	str	r1, [r7, #28]
 800aab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aaba:	f421 6138 	bic.w	r1, r1, #2944	; 0xb80
 800aabe:	e7d9      	b.n	800aa74 <__ssvfscanf_r+0xdf4>
 800aac0:	69f9      	ldr	r1, [r7, #28]
 800aac2:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 800aac6:	61f9      	str	r1, [r7, #28]
 800aac8:	2908      	cmp	r1, #8
 800aaca:	dcf5      	bgt.n	800aab8 <__ssvfscanf_r+0xe38>
 800aacc:	e795      	b.n	800a9fa <__ssvfscanf_r+0xd7a>
 800aace:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aad0:	060d      	lsls	r5, r1, #24
 800aad2:	d592      	bpl.n	800a9fa <__ssvfscanf_r+0xd7a>
 800aad4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800aad8:	e7cc      	b.n	800aa74 <__ssvfscanf_r+0xdf4>
 800aada:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aadc:	f401 61c0 	and.w	r1, r1, #1536	; 0x600
 800aae0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800aae4:	d189      	bne.n	800a9fa <__ssvfscanf_r+0xd7a>
 800aae6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aae8:	f421 7500 	bic.w	r5, r1, #512	; 0x200
 800aaec:	f445 61a0 	orr.w	r1, r5, #1280	; 0x500
 800aaf0:	62b9      	str	r1, [r7, #40]	; 0x28
 800aaf2:	2110      	movs	r1, #16
 800aaf4:	61f9      	str	r1, [r7, #28]
 800aaf6:	e7be      	b.n	800aa76 <__ssvfscanf_r+0xdf6>
 800aaf8:	ee18 0a10 	vmov	r0, s16
 800aafc:	4621      	mov	r1, r4
 800aafe:	f003 f9d9 	bl	800deb4 <__ssrefill_r>
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d0cf      	beq.n	800aaa6 <__ssvfscanf_r+0xe26>
 800ab06:	e778      	b.n	800a9fa <__ssvfscanf_r+0xd7a>
 800ab08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0a:	071a      	lsls	r2, r3, #28
 800ab0c:	d50e      	bpl.n	800ab2c <__ssvfscanf_r+0xeac>
 800ab0e:	6833      	ldr	r3, [r6, #0]
 800ab10:	7018      	strb	r0, [r3, #0]
 800ab12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab14:	3301      	adds	r3, #1
 800ab16:	627b      	str	r3, [r7, #36]	; 0x24
 800ab18:	464e      	mov	r6, r9
 800ab1a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800ab1e:	eba8 0803 	sub.w	r8, r8, r3
 800ab22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab24:	44c2      	add	sl, r8
 800ab26:	4453      	add	r3, sl
 800ab28:	f7ff b969 	b.w	8009dfe <__ssvfscanf_r+0x17e>
 800ab2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2e:	075b      	lsls	r3, r3, #29
 800ab30:	d502      	bpl.n	800ab38 <__ssvfscanf_r+0xeb8>
 800ab32:	6833      	ldr	r3, [r6, #0]
 800ab34:	8018      	strh	r0, [r3, #0]
 800ab36:	e7ec      	b.n	800ab12 <__ssvfscanf_r+0xe92>
 800ab38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3a:	f013 0201 	ands.w	r2, r3, #1
 800ab3e:	d184      	bne.n	800aa4a <__ssvfscanf_r+0xdca>
 800ab40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab42:	079d      	lsls	r5, r3, #30
 800ab44:	d581      	bpl.n	800aa4a <__ssvfscanf_r+0xdca>
 800ab46:	4b9c      	ldr	r3, [pc, #624]	; (800adb8 <__ssvfscanf_r+0x1138>)
 800ab48:	69b9      	ldr	r1, [r7, #24]
 800ab4a:	4299      	cmp	r1, r3
 800ab4c:	ee18 0a10 	vmov	r0, s16
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800ab56:	d105      	bne.n	800ab64 <__ssvfscanf_r+0xee4>
 800ab58:	f003 f8f2 	bl	800dd40 <_strtoull_r>
 800ab5c:	6833      	ldr	r3, [r6, #0]
 800ab5e:	e9c3 0100 	strd	r0, r1, [r3]
 800ab62:	e7d6      	b.n	800ab12 <__ssvfscanf_r+0xe92>
 800ab64:	f002 ffde 	bl	800db24 <_strtoll_r>
 800ab68:	e7f8      	b.n	800ab5c <__ssvfscanf_r+0xedc>
 800ab6a:	ee18 0a10 	vmov	r0, s16
 800ab6e:	f001 fa09 	bl	800bf84 <_localeconv_r>
 800ab72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab74:	6802      	ldr	r2, [r0, #0]
 800ab76:	3b01      	subs	r3, #1
 800ab78:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800ab7c:	f04f 0b00 	mov.w	fp, #0
 800ab80:	bf88      	it	hi
 800ab82:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 800ab84:	f8c7 b028 	str.w	fp, [r7, #40]	; 0x28
 800ab88:	e9c7 bb03 	strd	fp, fp, [r7, #12]
 800ab8c:	bf84      	itt	hi
 800ab8e:	f46f 70ae 	mvnhi.w	r0, #348	; 0x15c
 800ab92:	f240 115d 	movwhi	r1, #349	; 0x15d
 800ab96:	f449 65f0 	orr.w	r5, r9, #1920	; 0x780
 800ab9a:	bf86      	itte	hi
 800ab9c:	181b      	addhi	r3, r3, r0
 800ab9e:	6339      	strhi	r1, [r7, #48]	; 0x30
 800aba0:	2300      	movls	r3, #0
 800aba2:	46da      	mov	sl, fp
 800aba4:	f507 79a8 	add.w	r9, r7, #336	; 0x150
 800aba8:	f8d4 e000 	ldr.w	lr, [r4]
 800abac:	f89e 0000 	ldrb.w	r0, [lr]
 800abb0:	f1a0 0c2b 	sub.w	ip, r0, #43	; 0x2b
 800abb4:	f1bc 0f4e 	cmp.w	ip, #78	; 0x4e
 800abb8:	f200 811e 	bhi.w	800adf8 <__ssvfscanf_r+0x1178>
 800abbc:	e8df f01c 	tbh	[pc, ip, lsl #1]
 800abc0:	011c0087 	.word	0x011c0087
 800abc4:	011c0087 	.word	0x011c0087
 800abc8:	004f011c 	.word	0x004f011c
 800abcc:	006f006f 	.word	0x006f006f
 800abd0:	006f006f 	.word	0x006f006f
 800abd4:	006f006f 	.word	0x006f006f
 800abd8:	006f006f 	.word	0x006f006f
 800abdc:	011c006f 	.word	0x011c006f
 800abe0:	011c011c 	.word	0x011c011c
 800abe4:	011c011c 	.word	0x011c011c
 800abe8:	011c011c 	.word	0x011c011c
 800abec:	006d00ad 	.word	0x006d00ad
 800abf0:	006d006d 	.word	0x006d006d
 800abf4:	00e50119 	.word	0x00e50119
 800abf8:	011c011c 	.word	0x011c011c
 800abfc:	011c00cf 	.word	0x011c00cf
 800ac00:	011c011c 	.word	0x011c011c
 800ac04:	008e011c 	.word	0x008e011c
 800ac08:	0100011c 	.word	0x0100011c
 800ac0c:	011c011c 	.word	0x011c011c
 800ac10:	00f0011c 	.word	0x00f0011c
 800ac14:	011c011c 	.word	0x011c011c
 800ac18:	0073011c 	.word	0x0073011c
 800ac1c:	011c00f6 	.word	0x011c00f6
 800ac20:	011c011c 	.word	0x011c011c
 800ac24:	011c011c 	.word	0x011c011c
 800ac28:	011c011c 	.word	0x011c011c
 800ac2c:	006d00ad 	.word	0x006d00ad
 800ac30:	006d006d 	.word	0x006d006d
 800ac34:	00e50119 	.word	0x00e50119
 800ac38:	011c011c 	.word	0x011c011c
 800ac3c:	011c00cf 	.word	0x011c00cf
 800ac40:	011c011c 	.word	0x011c011c
 800ac44:	008e011c 	.word	0x008e011c
 800ac48:	0100011c 	.word	0x0100011c
 800ac4c:	011c011c 	.word	0x011c011c
 800ac50:	00f0011c 	.word	0x00f0011c
 800ac54:	011c011c 	.word	0x011c011c
 800ac58:	0073011c 	.word	0x0073011c
 800ac5c:	00f6      	.short	0x00f6
 800ac5e:	05e9      	lsls	r1, r5, #23
 800ac60:	d51d      	bpl.n	800ac9e <__ssvfscanf_r+0x101e>
 800ac62:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800ac66:	f10a 0a01 	add.w	sl, sl, #1
 800ac6a:	b11b      	cbz	r3, 800ac74 <__ssvfscanf_r+0xff4>
 800ac6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac6e:	3001      	adds	r0, #1
 800ac70:	3b01      	subs	r3, #1
 800ac72:	6338      	str	r0, [r7, #48]	; 0x30
 800ac74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac78:	3001      	adds	r0, #1
 800ac7a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ac7c:	6860      	ldr	r0, [r4, #4]
 800ac7e:	3801      	subs	r0, #1
 800ac80:	3901      	subs	r1, #1
 800ac82:	2800      	cmp	r0, #0
 800ac84:	6339      	str	r1, [r7, #48]	; 0x30
 800ac86:	6060      	str	r0, [r4, #4]
 800ac88:	f340 80c7 	ble.w	800ae1a <__ssvfscanf_r+0x119a>
 800ac8c:	f10e 0101 	add.w	r1, lr, #1
 800ac90:	6021      	str	r1, [r4, #0]
 800ac92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac94:	2900      	cmp	r1, #0
 800ac96:	d187      	bne.n	800aba8 <__ssvfscanf_r+0xf28>
 800ac98:	e04a      	b.n	800ad30 <__ssvfscanf_r+0x10b0>
 800ac9a:	0529      	lsls	r1, r5, #20
 800ac9c:	d548      	bpl.n	800ad30 <__ssvfscanf_r+0x10b0>
 800ac9e:	eb1b 0f08 	cmn.w	fp, r8
 800aca2:	d03f      	beq.n	800ad24 <__ssvfscanf_r+0x10a4>
 800aca4:	e044      	b.n	800ad30 <__ssvfscanf_r+0x10b0>
 800aca6:	f405 6c18 	and.w	ip, r5, #2432	; 0x980
 800acaa:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 800acae:	d13f      	bne.n	800ad30 <__ssvfscanf_r+0x10b0>
 800acb0:	f1ba 0f01 	cmp.w	sl, #1
 800acb4:	d13c      	bne.n	800ad30 <__ssvfscanf_r+0x10b0>
 800acb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800acb8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800acbc:	3901      	subs	r1, #1
 800acbe:	f809 cb01 	strb.w	ip, [r9], #1
 800acc2:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 800acc6:	6339      	str	r1, [r7, #48]	; 0x30
 800acc8:	f04f 0a00 	mov.w	sl, #0
 800accc:	e003      	b.n	800acd6 <__ssvfscanf_r+0x1056>
 800acce:	0629      	lsls	r1, r5, #24
 800acd0:	d52e      	bpl.n	800ad30 <__ssvfscanf_r+0x10b0>
 800acd2:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800acd6:	f809 0b01 	strb.w	r0, [r9], #1
 800acda:	e7cb      	b.n	800ac74 <__ssvfscanf_r+0xff4>
 800acdc:	f1bb 0f00 	cmp.w	fp, #0
 800ace0:	d10c      	bne.n	800acfc <__ssvfscanf_r+0x107c>
 800ace2:	f1ba 0f00 	cmp.w	sl, #0
 800ace6:	d10d      	bne.n	800ad04 <__ssvfscanf_r+0x1084>
 800ace8:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 800acec:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 800acf0:	d108      	bne.n	800ad04 <__ssvfscanf_r+0x1084>
 800acf2:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 800acf6:	f04f 0b01 	mov.w	fp, #1
 800acfa:	e7ec      	b.n	800acd6 <__ssvfscanf_r+0x1056>
 800acfc:	f1bb 0f02 	cmp.w	fp, #2
 800ad00:	f000 8085 	beq.w	800ae0e <__ssvfscanf_r+0x118e>
 800ad04:	f1b8 0f01 	cmp.w	r8, #1
 800ad08:	d002      	beq.n	800ad10 <__ssvfscanf_r+0x1090>
 800ad0a:	f1b8 0f04 	cmp.w	r8, #4
 800ad0e:	d10f      	bne.n	800ad30 <__ssvfscanf_r+0x10b0>
 800ad10:	f108 0801 	add.w	r8, r8, #1
 800ad14:	fa5f f888 	uxtb.w	r8, r8
 800ad18:	e7dd      	b.n	800acd6 <__ssvfscanf_r+0x1056>
 800ad1a:	0529      	lsls	r1, r5, #20
 800ad1c:	d505      	bpl.n	800ad2a <__ssvfscanf_r+0x10aa>
 800ad1e:	eb1b 0f08 	cmn.w	fp, r8
 800ad22:	d102      	bne.n	800ad2a <__ssvfscanf_r+0x10aa>
 800ad24:	f425 75c0 	bic.w	r5, r5, #384	; 0x180
 800ad28:	e7d5      	b.n	800acd6 <__ssvfscanf_r+0x1056>
 800ad2a:	f1bb 0f01 	cmp.w	fp, #1
 800ad2e:	d071      	beq.n	800ae14 <__ssvfscanf_r+0x1194>
 800ad30:	f1ba 0f00 	cmp.w	sl, #0
 800ad34:	d001      	beq.n	800ad3a <__ssvfscanf_r+0x10ba>
 800ad36:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800ad3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ad3e:	f1bb 0f01 	cmp.w	fp, #1
 800ad42:	d877      	bhi.n	800ae34 <__ssvfscanf_r+0x11b4>
 800ad44:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 800ad48:	45a9      	cmp	r9, r5
 800ad4a:	f67f a895 	bls.w	8009e78 <__ssvfscanf_r+0x1f8>
 800ad4e:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800ad52:	ee18 0a10 	vmov	r0, s16
 800ad56:	4622      	mov	r2, r4
 800ad58:	f003 f86f 	bl	800de3a <_sungetc_r>
 800ad5c:	e7f4      	b.n	800ad48 <__ssvfscanf_r+0x10c8>
 800ad5e:	f1b8 0f00 	cmp.w	r8, #0
 800ad62:	d10c      	bne.n	800ad7e <__ssvfscanf_r+0x10fe>
 800ad64:	f1ba 0f00 	cmp.w	sl, #0
 800ad68:	d1e5      	bne.n	800ad36 <__ssvfscanf_r+0x10b6>
 800ad6a:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 800ad6e:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 800ad72:	d1e2      	bne.n	800ad3a <__ssvfscanf_r+0x10ba>
 800ad74:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 800ad78:	f04f 0801 	mov.w	r8, #1
 800ad7c:	e7ab      	b.n	800acd6 <__ssvfscanf_r+0x1056>
 800ad7e:	f1b8 0f03 	cmp.w	r8, #3
 800ad82:	d0c5      	beq.n	800ad10 <__ssvfscanf_r+0x1090>
 800ad84:	f1b8 0f05 	cmp.w	r8, #5
 800ad88:	e7c1      	b.n	800ad0e <__ssvfscanf_r+0x108e>
 800ad8a:	0529      	lsls	r1, r5, #20
 800ad8c:	d502      	bpl.n	800ad94 <__ssvfscanf_r+0x1114>
 800ad8e:	eb1b 0f08 	cmn.w	fp, r8
 800ad92:	d0c7      	beq.n	800ad24 <__ssvfscanf_r+0x10a4>
 800ad94:	f1b8 0f02 	cmp.w	r8, #2
 800ad98:	d1ca      	bne.n	800ad30 <__ssvfscanf_r+0x10b0>
 800ad9a:	f04f 0803 	mov.w	r8, #3
 800ad9e:	e79a      	b.n	800acd6 <__ssvfscanf_r+0x1056>
 800ada0:	f1b8 0f06 	cmp.w	r8, #6
 800ada4:	d1c4      	bne.n	800ad30 <__ssvfscanf_r+0x10b0>
 800ada6:	f04f 0807 	mov.w	r8, #7
 800adaa:	e794      	b.n	800acd6 <__ssvfscanf_r+0x1056>
 800adac:	f1b8 0f07 	cmp.w	r8, #7
 800adb0:	d1be      	bne.n	800ad30 <__ssvfscanf_r+0x10b0>
 800adb2:	f04f 0808 	mov.w	r8, #8
 800adb6:	e78e      	b.n	800acd6 <__ssvfscanf_r+0x1056>
 800adb8:	0800dc0d 	.word	0x0800dc0d
 800adbc:	0800ffe6 	.word	0x0800ffe6
 800adc0:	0529      	lsls	r1, r5, #20
 800adc2:	d5b5      	bpl.n	800ad30 <__ssvfscanf_r+0x10b0>
 800adc4:	f405 6ca0 	and.w	ip, r5, #1280	; 0x500
 800adc8:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800adcc:	d004      	beq.n	800add8 <__ssvfscanf_r+0x1158>
 800adce:	0569      	lsls	r1, r5, #21
 800add0:	d5ae      	bpl.n	800ad30 <__ssvfscanf_r+0x10b0>
 800add2:	f1ba 0f00 	cmp.w	sl, #0
 800add6:	d0b0      	beq.n	800ad3a <__ssvfscanf_r+0x10ba>
 800add8:	05a9      	lsls	r1, r5, #22
 800adda:	bf58      	it	pl
 800addc:	6ab9      	ldrpl	r1, [r7, #40]	; 0x28
 800adde:	f425 6578 	bic.w	r5, r5, #3968	; 0xf80
 800ade2:	bf5c      	itt	pl
 800ade4:	ebaa 0101 	subpl.w	r1, sl, r1
 800ade8:	e9c7 9103 	strdpl	r9, r1, [r7, #12]
 800adec:	f445 75c0 	orr.w	r5, r5, #384	; 0x180
 800adf0:	e76a      	b.n	800acc8 <__ssvfscanf_r+0x1048>
 800adf2:	0529      	lsls	r1, r5, #20
 800adf4:	d5e6      	bpl.n	800adc4 <__ssvfscanf_r+0x1144>
 800adf6:	e752      	b.n	800ac9e <__ssvfscanf_r+0x101e>
 800adf8:	f892 c000 	ldrb.w	ip, [r2]
 800adfc:	4584      	cmp	ip, r0
 800adfe:	d197      	bne.n	800ad30 <__ssvfscanf_r+0x10b0>
 800ae00:	05a9      	lsls	r1, r5, #22
 800ae02:	d595      	bpl.n	800ad30 <__ssvfscanf_r+0x10b0>
 800ae04:	f425 7520 	bic.w	r5, r5, #640	; 0x280
 800ae08:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 800ae0c:	e763      	b.n	800acd6 <__ssvfscanf_r+0x1056>
 800ae0e:	f04f 0b03 	mov.w	fp, #3
 800ae12:	e760      	b.n	800acd6 <__ssvfscanf_r+0x1056>
 800ae14:	f04f 0b02 	mov.w	fp, #2
 800ae18:	e75d      	b.n	800acd6 <__ssvfscanf_r+0x1056>
 800ae1a:	ee18 0a10 	vmov	r0, s16
 800ae1e:	4621      	mov	r1, r4
 800ae20:	e9c7 2301 	strd	r2, r3, [r7, #4]
 800ae24:	f003 f846 	bl	800deb4 <__ssrefill_r>
 800ae28:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	f43f af30 	beq.w	800ac92 <__ssvfscanf_r+0x1012>
 800ae32:	e77d      	b.n	800ad30 <__ssvfscanf_r+0x10b0>
 800ae34:	f108 33ff 	add.w	r3, r8, #4294967295
 800ae38:	2b06      	cmp	r3, #6
 800ae3a:	d829      	bhi.n	800ae90 <__ssvfscanf_r+0x1210>
 800ae3c:	f1b8 0f02 	cmp.w	r8, #2
 800ae40:	d837      	bhi.n	800aeb2 <__ssvfscanf_r+0x1232>
 800ae42:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 800ae46:	45a9      	cmp	r9, r5
 800ae48:	f67f a816 	bls.w	8009e78 <__ssvfscanf_r+0x1f8>
 800ae4c:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800ae50:	ee18 0a10 	vmov	r0, s16
 800ae54:	4622      	mov	r2, r4
 800ae56:	f002 fff0 	bl	800de3a <_sungetc_r>
 800ae5a:	e7f4      	b.n	800ae46 <__ssvfscanf_r+0x11c6>
 800ae5c:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800ae60:	633b      	str	r3, [r7, #48]	; 0x30
 800ae62:	ee18 0a10 	vmov	r0, s16
 800ae66:	4622      	mov	r2, r4
 800ae68:	f002 ffe7 	bl	800de3a <_sungetc_r>
 800ae6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae72:	fa5f fb8b 	uxtb.w	fp, fp
 800ae76:	f1bb 0f02 	cmp.w	fp, #2
 800ae7a:	d1ef      	bne.n	800ae5c <__ssvfscanf_r+0x11dc>
 800ae7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7e:	f1a8 0803 	sub.w	r8, r8, #3
 800ae82:	fa5f f888 	uxtb.w	r8, r8
 800ae86:	eba3 0308 	sub.w	r3, r3, r8
 800ae8a:	eba9 0908 	sub.w	r9, r9, r8
 800ae8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae90:	05eb      	lsls	r3, r5, #23
 800ae92:	d530      	bpl.n	800aef6 <__ssvfscanf_r+0x1276>
 800ae94:	0568      	lsls	r0, r5, #21
 800ae96:	d50f      	bpl.n	800aeb8 <__ssvfscanf_r+0x1238>
 800ae98:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 800ae9c:	45a9      	cmp	r9, r5
 800ae9e:	f67e afeb 	bls.w	8009e78 <__ssvfscanf_r+0x1f8>
 800aea2:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800aea6:	ee18 0a10 	vmov	r0, s16
 800aeaa:	4622      	mov	r2, r4
 800aeac:	f002 ffc5 	bl	800de3a <_sungetc_r>
 800aeb0:	e7f4      	b.n	800ae9c <__ssvfscanf_r+0x121c>
 800aeb2:	46c3      	mov	fp, r8
 800aeb4:	464b      	mov	r3, r9
 800aeb6:	e7da      	b.n	800ae6e <__ssvfscanf_r+0x11ee>
 800aeb8:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 800aebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aebe:	2965      	cmp	r1, #101	; 0x65
 800aec0:	f109 38ff 	add.w	r8, r9, #4294967295
 800aec4:	f103 3bff 	add.w	fp, r3, #4294967295
 800aec8:	d00d      	beq.n	800aee6 <__ssvfscanf_r+0x1266>
 800aeca:	2945      	cmp	r1, #69	; 0x45
 800aecc:	d00b      	beq.n	800aee6 <__ssvfscanf_r+0x1266>
 800aece:	ee18 0a10 	vmov	r0, s16
 800aed2:	4622      	mov	r2, r4
 800aed4:	f002 ffb1 	bl	800de3a <_sungetc_r>
 800aed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeda:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 800aede:	f1a9 0802 	sub.w	r8, r9, #2
 800aee2:	f1a3 0b02 	sub.w	fp, r3, #2
 800aee6:	ee18 0a10 	vmov	r0, s16
 800aeea:	4622      	mov	r2, r4
 800aeec:	f002 ffa5 	bl	800de3a <_sungetc_r>
 800aef0:	46c1      	mov	r9, r8
 800aef2:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 800aef6:	f015 0210 	ands.w	r2, r5, #16
 800aefa:	f47e aedf 	bne.w	8009cbc <__ssvfscanf_r+0x3c>
 800aefe:	f405 63c0 	and.w	r3, r5, #1536	; 0x600
 800af02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af06:	f889 2000 	strb.w	r2, [r9]
 800af0a:	d11a      	bne.n	800af42 <__ssvfscanf_r+0x12c2>
 800af0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0e:	4553      	cmp	r3, sl
 800af10:	eba3 020a 	sub.w	r2, r3, sl
 800af14:	d123      	bne.n	800af5e <__ssvfscanf_r+0x12de>
 800af16:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800af1a:	ee18 0a10 	vmov	r0, s16
 800af1e:	2200      	movs	r2, #0
 800af20:	f002 fd64 	bl	800d9ec <_strtod_r>
 800af24:	07e9      	lsls	r1, r5, #31
 800af26:	ec59 8b10 	vmov	r8, r9, d0
 800af2a:	f106 0a04 	add.w	sl, r6, #4
 800af2e:	d521      	bpl.n	800af74 <__ssvfscanf_r+0x12f4>
 800af30:	6833      	ldr	r3, [r6, #0]
 800af32:	ed83 0b00 	vstr	d0, [r3]
 800af36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af38:	3301      	adds	r3, #1
 800af3a:	627b      	str	r3, [r7, #36]	; 0x24
 800af3c:	4656      	mov	r6, sl
 800af3e:	f7fe bebd 	b.w	8009cbc <__ssvfscanf_r+0x3c>
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d0e6      	beq.n	800af16 <__ssvfscanf_r+0x1296>
 800af48:	68f9      	ldr	r1, [r7, #12]
 800af4a:	230a      	movs	r3, #10
 800af4c:	ee18 0a10 	vmov	r0, s16
 800af50:	3101      	adds	r1, #1
 800af52:	f7fd fca5 	bl	80088a0 <_strtol_r>
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	f8d7 900c 	ldr.w	r9, [r7, #12]
 800af5c:	1ac2      	subs	r2, r0, r3
 800af5e:	f207 23a3 	addw	r3, r7, #675	; 0x2a3
 800af62:	4599      	cmp	r9, r3
 800af64:	bf28      	it	cs
 800af66:	f207 29a2 	addwcs	r9, r7, #674	; 0x2a2
 800af6a:	4915      	ldr	r1, [pc, #84]	; (800afc0 <__ssvfscanf_r+0x1340>)
 800af6c:	4648      	mov	r0, r9
 800af6e:	f7fd fb6f 	bl	8008650 <sprintf>
 800af72:	e7d0      	b.n	800af16 <__ssvfscanf_r+0x1296>
 800af74:	07aa      	lsls	r2, r5, #30
 800af76:	6836      	ldr	r6, [r6, #0]
 800af78:	d502      	bpl.n	800af80 <__ssvfscanf_r+0x1300>
 800af7a:	ed86 0b00 	vstr	d0, [r6]
 800af7e:	e7da      	b.n	800af36 <__ssvfscanf_r+0x12b6>
 800af80:	ee10 2a10 	vmov	r2, s0
 800af84:	ee10 0a10 	vmov	r0, s0
 800af88:	464b      	mov	r3, r9
 800af8a:	4649      	mov	r1, r9
 800af8c:	f7f5 fdd6 	bl	8000b3c <__aeabi_dcmpun>
 800af90:	b128      	cbz	r0, 800af9e <__ssvfscanf_r+0x131e>
 800af92:	480c      	ldr	r0, [pc, #48]	; (800afc4 <__ssvfscanf_r+0x1344>)
 800af94:	f001 feec 	bl	800cd70 <nanf>
 800af98:	ed86 0a00 	vstr	s0, [r6]
 800af9c:	e7cb      	b.n	800af36 <__ssvfscanf_r+0x12b6>
 800af9e:	4640      	mov	r0, r8
 800afa0:	4649      	mov	r1, r9
 800afa2:	f7f5 fe29 	bl	8000bf8 <__aeabi_d2f>
 800afa6:	6030      	str	r0, [r6, #0]
 800afa8:	e7c5      	b.n	800af36 <__ssvfscanf_r+0x12b6>
 800afaa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800afae:	6818      	ldr	r0, [r3, #0]
 800afb0:	f7fd f8e6 	bl	8008180 <free>
 800afb4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800afb8:	3401      	adds	r4, #1
 800afba:	601e      	str	r6, [r3, #0]
 800afbc:	f7ff b82b 	b.w	800a016 <__ssvfscanf_r+0x396>
 800afc0:	0800ffe0 	.word	0x0800ffe0
 800afc4:	08010373 	.word	0x08010373

0800afc8 <sysconf>:
 800afc8:	2808      	cmp	r0, #8
 800afca:	b508      	push	{r3, lr}
 800afcc:	d006      	beq.n	800afdc <sysconf+0x14>
 800afce:	f7fd f8a5 	bl	800811c <__errno>
 800afd2:	2316      	movs	r3, #22
 800afd4:	6003      	str	r3, [r0, #0]
 800afd6:	f04f 30ff 	mov.w	r0, #4294967295
 800afda:	bd08      	pop	{r3, pc}
 800afdc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800afe0:	e7fb      	b.n	800afda <sysconf+0x12>
	...

0800afe4 <_write_r>:
 800afe4:	b538      	push	{r3, r4, r5, lr}
 800afe6:	4d07      	ldr	r5, [pc, #28]	; (800b004 <_write_r+0x20>)
 800afe8:	4604      	mov	r4, r0
 800afea:	4608      	mov	r0, r1
 800afec:	4611      	mov	r1, r2
 800afee:	2200      	movs	r2, #0
 800aff0:	602a      	str	r2, [r5, #0]
 800aff2:	461a      	mov	r2, r3
 800aff4:	f7f8 fd0d 	bl	8003a12 <_write>
 800aff8:	1c43      	adds	r3, r0, #1
 800affa:	d102      	bne.n	800b002 <_write_r+0x1e>
 800affc:	682b      	ldr	r3, [r5, #0]
 800affe:	b103      	cbz	r3, 800b002 <_write_r+0x1e>
 800b000:	6023      	str	r3, [r4, #0]
 800b002:	bd38      	pop	{r3, r4, r5, pc}
 800b004:	200011a8 	.word	0x200011a8

0800b008 <register_fini>:
 800b008:	4b02      	ldr	r3, [pc, #8]	; (800b014 <register_fini+0xc>)
 800b00a:	b113      	cbz	r3, 800b012 <register_fini+0xa>
 800b00c:	4802      	ldr	r0, [pc, #8]	; (800b018 <register_fini+0x10>)
 800b00e:	f000 b805 	b.w	800b01c <atexit>
 800b012:	4770      	bx	lr
 800b014:	00000000 	.word	0x00000000
 800b018:	0800bd0d 	.word	0x0800bd0d

0800b01c <atexit>:
 800b01c:	2300      	movs	r3, #0
 800b01e:	4601      	mov	r1, r0
 800b020:	461a      	mov	r2, r3
 800b022:	4618      	mov	r0, r3
 800b024:	f002 bfe2 	b.w	800dfec <__register_exitproc>

0800b028 <_close_r>:
 800b028:	b538      	push	{r3, r4, r5, lr}
 800b02a:	4d06      	ldr	r5, [pc, #24]	; (800b044 <_close_r+0x1c>)
 800b02c:	2300      	movs	r3, #0
 800b02e:	4604      	mov	r4, r0
 800b030:	4608      	mov	r0, r1
 800b032:	602b      	str	r3, [r5, #0]
 800b034:	f7f8 fd09 	bl	8003a4a <_close>
 800b038:	1c43      	adds	r3, r0, #1
 800b03a:	d102      	bne.n	800b042 <_close_r+0x1a>
 800b03c:	682b      	ldr	r3, [r5, #0]
 800b03e:	b103      	cbz	r3, 800b042 <_close_r+0x1a>
 800b040:	6023      	str	r3, [r4, #0]
 800b042:	bd38      	pop	{r3, r4, r5, pc}
 800b044:	200011a8 	.word	0x200011a8

0800b048 <quorem>:
 800b048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04c:	6903      	ldr	r3, [r0, #16]
 800b04e:	690c      	ldr	r4, [r1, #16]
 800b050:	42a3      	cmp	r3, r4
 800b052:	4607      	mov	r7, r0
 800b054:	f2c0 8081 	blt.w	800b15a <quorem+0x112>
 800b058:	3c01      	subs	r4, #1
 800b05a:	f101 0814 	add.w	r8, r1, #20
 800b05e:	f100 0514 	add.w	r5, r0, #20
 800b062:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b066:	9301      	str	r3, [sp, #4]
 800b068:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b06c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b070:	3301      	adds	r3, #1
 800b072:	429a      	cmp	r2, r3
 800b074:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b078:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b07c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b080:	d331      	bcc.n	800b0e6 <quorem+0x9e>
 800b082:	f04f 0e00 	mov.w	lr, #0
 800b086:	4640      	mov	r0, r8
 800b088:	46ac      	mov	ip, r5
 800b08a:	46f2      	mov	sl, lr
 800b08c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b090:	b293      	uxth	r3, r2
 800b092:	fb06 e303 	mla	r3, r6, r3, lr
 800b096:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	ebaa 0303 	sub.w	r3, sl, r3
 800b0a0:	f8dc a000 	ldr.w	sl, [ip]
 800b0a4:	0c12      	lsrs	r2, r2, #16
 800b0a6:	fa13 f38a 	uxtah	r3, r3, sl
 800b0aa:	fb06 e202 	mla	r2, r6, r2, lr
 800b0ae:	9300      	str	r3, [sp, #0]
 800b0b0:	9b00      	ldr	r3, [sp, #0]
 800b0b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b0b6:	b292      	uxth	r2, r2
 800b0b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b0bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0c0:	f8bd 3000 	ldrh.w	r3, [sp]
 800b0c4:	4581      	cmp	r9, r0
 800b0c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0ca:	f84c 3b04 	str.w	r3, [ip], #4
 800b0ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b0d2:	d2db      	bcs.n	800b08c <quorem+0x44>
 800b0d4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b0d8:	b92b      	cbnz	r3, 800b0e6 <quorem+0x9e>
 800b0da:	9b01      	ldr	r3, [sp, #4]
 800b0dc:	3b04      	subs	r3, #4
 800b0de:	429d      	cmp	r5, r3
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	d32e      	bcc.n	800b142 <quorem+0xfa>
 800b0e4:	613c      	str	r4, [r7, #16]
 800b0e6:	4638      	mov	r0, r7
 800b0e8:	f001 fa1e 	bl	800c528 <__mcmp>
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	db24      	blt.n	800b13a <quorem+0xf2>
 800b0f0:	3601      	adds	r6, #1
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	f04f 0c00 	mov.w	ip, #0
 800b0f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b0fc:	f8d0 e000 	ldr.w	lr, [r0]
 800b100:	b293      	uxth	r3, r2
 800b102:	ebac 0303 	sub.w	r3, ip, r3
 800b106:	0c12      	lsrs	r2, r2, #16
 800b108:	fa13 f38e 	uxtah	r3, r3, lr
 800b10c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b110:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b114:	b29b      	uxth	r3, r3
 800b116:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b11a:	45c1      	cmp	r9, r8
 800b11c:	f840 3b04 	str.w	r3, [r0], #4
 800b120:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b124:	d2e8      	bcs.n	800b0f8 <quorem+0xb0>
 800b126:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b12a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b12e:	b922      	cbnz	r2, 800b13a <quorem+0xf2>
 800b130:	3b04      	subs	r3, #4
 800b132:	429d      	cmp	r5, r3
 800b134:	461a      	mov	r2, r3
 800b136:	d30a      	bcc.n	800b14e <quorem+0x106>
 800b138:	613c      	str	r4, [r7, #16]
 800b13a:	4630      	mov	r0, r6
 800b13c:	b003      	add	sp, #12
 800b13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b142:	6812      	ldr	r2, [r2, #0]
 800b144:	3b04      	subs	r3, #4
 800b146:	2a00      	cmp	r2, #0
 800b148:	d1cc      	bne.n	800b0e4 <quorem+0x9c>
 800b14a:	3c01      	subs	r4, #1
 800b14c:	e7c7      	b.n	800b0de <quorem+0x96>
 800b14e:	6812      	ldr	r2, [r2, #0]
 800b150:	3b04      	subs	r3, #4
 800b152:	2a00      	cmp	r2, #0
 800b154:	d1f0      	bne.n	800b138 <quorem+0xf0>
 800b156:	3c01      	subs	r4, #1
 800b158:	e7eb      	b.n	800b132 <quorem+0xea>
 800b15a:	2000      	movs	r0, #0
 800b15c:	e7ee      	b.n	800b13c <quorem+0xf4>
	...

0800b160 <_dtoa_r>:
 800b160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b164:	ed2d 8b04 	vpush	{d8-d9}
 800b168:	b093      	sub	sp, #76	; 0x4c
 800b16a:	ec57 6b10 	vmov	r6, r7, d0
 800b16e:	9106      	str	r1, [sp, #24]
 800b170:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800b172:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800b174:	9209      	str	r2, [sp, #36]	; 0x24
 800b176:	ee10 aa10 	vmov	sl, s0
 800b17a:	4604      	mov	r4, r0
 800b17c:	930c      	str	r3, [sp, #48]	; 0x30
 800b17e:	46bb      	mov	fp, r7
 800b180:	b141      	cbz	r1, 800b194 <_dtoa_r+0x34>
 800b182:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b184:	604a      	str	r2, [r1, #4]
 800b186:	2301      	movs	r3, #1
 800b188:	4093      	lsls	r3, r2
 800b18a:	608b      	str	r3, [r1, #8]
 800b18c:	f000 ff73 	bl	800c076 <_Bfree>
 800b190:	2300      	movs	r3, #0
 800b192:	6423      	str	r3, [r4, #64]	; 0x40
 800b194:	1e3b      	subs	r3, r7, #0
 800b196:	bfaa      	itet	ge
 800b198:	2300      	movge	r3, #0
 800b19a:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b19e:	602b      	strge	r3, [r5, #0]
 800b1a0:	4ba3      	ldr	r3, [pc, #652]	; (800b430 <_dtoa_r+0x2d0>)
 800b1a2:	bfbc      	itt	lt
 800b1a4:	2201      	movlt	r2, #1
 800b1a6:	602a      	strlt	r2, [r5, #0]
 800b1a8:	ea33 030b 	bics.w	r3, r3, fp
 800b1ac:	d11b      	bne.n	800b1e6 <_dtoa_r+0x86>
 800b1ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1b0:	f242 730f 	movw	r3, #9999	; 0x270f
 800b1b4:	6013      	str	r3, [r2, #0]
 800b1b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1ba:	4333      	orrs	r3, r6
 800b1bc:	f000 8590 	beq.w	800bce0 <_dtoa_r+0xb80>
 800b1c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1c2:	b90b      	cbnz	r3, 800b1c8 <_dtoa_r+0x68>
 800b1c4:	4b9b      	ldr	r3, [pc, #620]	; (800b434 <_dtoa_r+0x2d4>)
 800b1c6:	e022      	b.n	800b20e <_dtoa_r+0xae>
 800b1c8:	4b9a      	ldr	r3, [pc, #616]	; (800b434 <_dtoa_r+0x2d4>)
 800b1ca:	9301      	str	r3, [sp, #4]
 800b1cc:	3303      	adds	r3, #3
 800b1ce:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b1d0:	6013      	str	r3, [r2, #0]
 800b1d2:	9801      	ldr	r0, [sp, #4]
 800b1d4:	b013      	add	sp, #76	; 0x4c
 800b1d6:	ecbd 8b04 	vpop	{d8-d9}
 800b1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1de:	4b96      	ldr	r3, [pc, #600]	; (800b438 <_dtoa_r+0x2d8>)
 800b1e0:	9301      	str	r3, [sp, #4]
 800b1e2:	3308      	adds	r3, #8
 800b1e4:	e7f3      	b.n	800b1ce <_dtoa_r+0x6e>
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	4650      	mov	r0, sl
 800b1ec:	4659      	mov	r1, fp
 800b1ee:	f7f5 fc73 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1f2:	ec4b ab19 	vmov	d9, sl, fp
 800b1f6:	4680      	mov	r8, r0
 800b1f8:	b158      	cbz	r0, 800b212 <_dtoa_r+0xb2>
 800b1fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	6013      	str	r3, [r2, #0]
 800b200:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b202:	2b00      	cmp	r3, #0
 800b204:	f000 8569 	beq.w	800bcda <_dtoa_r+0xb7a>
 800b208:	488c      	ldr	r0, [pc, #560]	; (800b43c <_dtoa_r+0x2dc>)
 800b20a:	6018      	str	r0, [r3, #0]
 800b20c:	1e43      	subs	r3, r0, #1
 800b20e:	9301      	str	r3, [sp, #4]
 800b210:	e7df      	b.n	800b1d2 <_dtoa_r+0x72>
 800b212:	ec4b ab10 	vmov	d0, sl, fp
 800b216:	aa10      	add	r2, sp, #64	; 0x40
 800b218:	a911      	add	r1, sp, #68	; 0x44
 800b21a:	4620      	mov	r0, r4
 800b21c:	f001 faa6 	bl	800c76c <__d2b>
 800b220:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b224:	ee08 0a10 	vmov	s16, r0
 800b228:	2d00      	cmp	r5, #0
 800b22a:	f000 8082 	beq.w	800b332 <_dtoa_r+0x1d2>
 800b22e:	ee19 3a90 	vmov	r3, s19
 800b232:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b236:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b23a:	4656      	mov	r6, sl
 800b23c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b240:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b244:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b248:	4b7d      	ldr	r3, [pc, #500]	; (800b440 <_dtoa_r+0x2e0>)
 800b24a:	2200      	movs	r2, #0
 800b24c:	4630      	mov	r0, r6
 800b24e:	4639      	mov	r1, r7
 800b250:	f7f5 f822 	bl	8000298 <__aeabi_dsub>
 800b254:	a370      	add	r3, pc, #448	; (adr r3, 800b418 <_dtoa_r+0x2b8>)
 800b256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25a:	f7f5 f9d5 	bl	8000608 <__aeabi_dmul>
 800b25e:	a370      	add	r3, pc, #448	; (adr r3, 800b420 <_dtoa_r+0x2c0>)
 800b260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b264:	f7f5 f81a 	bl	800029c <__adddf3>
 800b268:	4606      	mov	r6, r0
 800b26a:	4628      	mov	r0, r5
 800b26c:	460f      	mov	r7, r1
 800b26e:	f7f5 f961 	bl	8000534 <__aeabi_i2d>
 800b272:	a36d      	add	r3, pc, #436	; (adr r3, 800b428 <_dtoa_r+0x2c8>)
 800b274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b278:	f7f5 f9c6 	bl	8000608 <__aeabi_dmul>
 800b27c:	4602      	mov	r2, r0
 800b27e:	460b      	mov	r3, r1
 800b280:	4630      	mov	r0, r6
 800b282:	4639      	mov	r1, r7
 800b284:	f7f5 f80a 	bl	800029c <__adddf3>
 800b288:	4606      	mov	r6, r0
 800b28a:	460f      	mov	r7, r1
 800b28c:	f7f5 fc6c 	bl	8000b68 <__aeabi_d2iz>
 800b290:	2200      	movs	r2, #0
 800b292:	9000      	str	r0, [sp, #0]
 800b294:	2300      	movs	r3, #0
 800b296:	4630      	mov	r0, r6
 800b298:	4639      	mov	r1, r7
 800b29a:	f7f5 fc27 	bl	8000aec <__aeabi_dcmplt>
 800b29e:	b150      	cbz	r0, 800b2b6 <_dtoa_r+0x156>
 800b2a0:	9800      	ldr	r0, [sp, #0]
 800b2a2:	f7f5 f947 	bl	8000534 <__aeabi_i2d>
 800b2a6:	4632      	mov	r2, r6
 800b2a8:	463b      	mov	r3, r7
 800b2aa:	f7f5 fc15 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2ae:	b910      	cbnz	r0, 800b2b6 <_dtoa_r+0x156>
 800b2b0:	9b00      	ldr	r3, [sp, #0]
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	9300      	str	r3, [sp, #0]
 800b2b6:	9b00      	ldr	r3, [sp, #0]
 800b2b8:	2b16      	cmp	r3, #22
 800b2ba:	d858      	bhi.n	800b36e <_dtoa_r+0x20e>
 800b2bc:	9a00      	ldr	r2, [sp, #0]
 800b2be:	4b61      	ldr	r3, [pc, #388]	; (800b444 <_dtoa_r+0x2e4>)
 800b2c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c8:	ec51 0b19 	vmov	r0, r1, d9
 800b2cc:	f7f5 fc0e 	bl	8000aec <__aeabi_dcmplt>
 800b2d0:	2800      	cmp	r0, #0
 800b2d2:	d04e      	beq.n	800b372 <_dtoa_r+0x212>
 800b2d4:	9b00      	ldr	r3, [sp, #0]
 800b2d6:	3b01      	subs	r3, #1
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	2300      	movs	r3, #0
 800b2dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2e0:	1b5d      	subs	r5, r3, r5
 800b2e2:	1e6b      	subs	r3, r5, #1
 800b2e4:	9305      	str	r3, [sp, #20]
 800b2e6:	bf45      	ittet	mi
 800b2e8:	f1c5 0301 	rsbmi	r3, r5, #1
 800b2ec:	9304      	strmi	r3, [sp, #16]
 800b2ee:	2300      	movpl	r3, #0
 800b2f0:	2300      	movmi	r3, #0
 800b2f2:	bf4c      	ite	mi
 800b2f4:	9305      	strmi	r3, [sp, #20]
 800b2f6:	9304      	strpl	r3, [sp, #16]
 800b2f8:	9b00      	ldr	r3, [sp, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	db3b      	blt.n	800b376 <_dtoa_r+0x216>
 800b2fe:	9b05      	ldr	r3, [sp, #20]
 800b300:	9a00      	ldr	r2, [sp, #0]
 800b302:	920a      	str	r2, [sp, #40]	; 0x28
 800b304:	4413      	add	r3, r2
 800b306:	9305      	str	r3, [sp, #20]
 800b308:	2300      	movs	r3, #0
 800b30a:	9307      	str	r3, [sp, #28]
 800b30c:	9b06      	ldr	r3, [sp, #24]
 800b30e:	2b09      	cmp	r3, #9
 800b310:	d869      	bhi.n	800b3e6 <_dtoa_r+0x286>
 800b312:	2b05      	cmp	r3, #5
 800b314:	bfc4      	itt	gt
 800b316:	3b04      	subgt	r3, #4
 800b318:	9306      	strgt	r3, [sp, #24]
 800b31a:	9b06      	ldr	r3, [sp, #24]
 800b31c:	f1a3 0302 	sub.w	r3, r3, #2
 800b320:	bfcc      	ite	gt
 800b322:	2500      	movgt	r5, #0
 800b324:	2501      	movle	r5, #1
 800b326:	2b03      	cmp	r3, #3
 800b328:	d868      	bhi.n	800b3fc <_dtoa_r+0x29c>
 800b32a:	e8df f003 	tbb	[pc, r3]
 800b32e:	3a2d      	.short	0x3a2d
 800b330:	5a38      	.short	0x5a38
 800b332:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b336:	441d      	add	r5, r3
 800b338:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b33c:	2b20      	cmp	r3, #32
 800b33e:	bfc1      	itttt	gt
 800b340:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b344:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b348:	fa0b f303 	lslgt.w	r3, fp, r3
 800b34c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b350:	bfda      	itte	le
 800b352:	f1c3 0320 	rsble	r3, r3, #32
 800b356:	fa06 f003 	lslle.w	r0, r6, r3
 800b35a:	4318      	orrgt	r0, r3
 800b35c:	f7f5 f8da 	bl	8000514 <__aeabi_ui2d>
 800b360:	2301      	movs	r3, #1
 800b362:	4606      	mov	r6, r0
 800b364:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b368:	3d01      	subs	r5, #1
 800b36a:	930e      	str	r3, [sp, #56]	; 0x38
 800b36c:	e76c      	b.n	800b248 <_dtoa_r+0xe8>
 800b36e:	2301      	movs	r3, #1
 800b370:	e7b4      	b.n	800b2dc <_dtoa_r+0x17c>
 800b372:	900b      	str	r0, [sp, #44]	; 0x2c
 800b374:	e7b3      	b.n	800b2de <_dtoa_r+0x17e>
 800b376:	9b04      	ldr	r3, [sp, #16]
 800b378:	9a00      	ldr	r2, [sp, #0]
 800b37a:	1a9b      	subs	r3, r3, r2
 800b37c:	9304      	str	r3, [sp, #16]
 800b37e:	4253      	negs	r3, r2
 800b380:	9307      	str	r3, [sp, #28]
 800b382:	2300      	movs	r3, #0
 800b384:	930a      	str	r3, [sp, #40]	; 0x28
 800b386:	e7c1      	b.n	800b30c <_dtoa_r+0x1ac>
 800b388:	2300      	movs	r3, #0
 800b38a:	9308      	str	r3, [sp, #32]
 800b38c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b38e:	2b00      	cmp	r3, #0
 800b390:	dc37      	bgt.n	800b402 <_dtoa_r+0x2a2>
 800b392:	2301      	movs	r3, #1
 800b394:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b398:	461a      	mov	r2, r3
 800b39a:	9209      	str	r2, [sp, #36]	; 0x24
 800b39c:	e00c      	b.n	800b3b8 <_dtoa_r+0x258>
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e7f3      	b.n	800b38a <_dtoa_r+0x22a>
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3a6:	9308      	str	r3, [sp, #32]
 800b3a8:	9b00      	ldr	r3, [sp, #0]
 800b3aa:	4413      	add	r3, r2
 800b3ac:	9302      	str	r3, [sp, #8]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	9303      	str	r3, [sp, #12]
 800b3b4:	bfb8      	it	lt
 800b3b6:	2301      	movlt	r3, #1
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	6462      	str	r2, [r4, #68]	; 0x44
 800b3bc:	2204      	movs	r2, #4
 800b3be:	f102 0014 	add.w	r0, r2, #20
 800b3c2:	4298      	cmp	r0, r3
 800b3c4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b3c6:	d920      	bls.n	800b40a <_dtoa_r+0x2aa>
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f000 fe2f 	bl	800c02c <_Balloc>
 800b3ce:	9001      	str	r0, [sp, #4]
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	d13d      	bne.n	800b450 <_dtoa_r+0x2f0>
 800b3d4:	4b1c      	ldr	r3, [pc, #112]	; (800b448 <_dtoa_r+0x2e8>)
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b3dc:	481b      	ldr	r0, [pc, #108]	; (800b44c <_dtoa_r+0x2ec>)
 800b3de:	f002 fe47 	bl	800e070 <__assert_func>
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e7de      	b.n	800b3a4 <_dtoa_r+0x244>
 800b3e6:	2501      	movs	r5, #1
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	9306      	str	r3, [sp, #24]
 800b3ec:	9508      	str	r5, [sp, #32]
 800b3ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b3f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	2312      	movs	r3, #18
 800b3fa:	e7ce      	b.n	800b39a <_dtoa_r+0x23a>
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	9308      	str	r3, [sp, #32]
 800b400:	e7f5      	b.n	800b3ee <_dtoa_r+0x28e>
 800b402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b404:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b408:	e7d6      	b.n	800b3b8 <_dtoa_r+0x258>
 800b40a:	3101      	adds	r1, #1
 800b40c:	6461      	str	r1, [r4, #68]	; 0x44
 800b40e:	0052      	lsls	r2, r2, #1
 800b410:	e7d5      	b.n	800b3be <_dtoa_r+0x25e>
 800b412:	bf00      	nop
 800b414:	f3af 8000 	nop.w
 800b418:	636f4361 	.word	0x636f4361
 800b41c:	3fd287a7 	.word	0x3fd287a7
 800b420:	8b60c8b3 	.word	0x8b60c8b3
 800b424:	3fc68a28 	.word	0x3fc68a28
 800b428:	509f79fb 	.word	0x509f79fb
 800b42c:	3fd34413 	.word	0x3fd34413
 800b430:	7ff00000 	.word	0x7ff00000
 800b434:	08010109 	.word	0x08010109
 800b438:	0801010d 	.word	0x0801010d
 800b43c:	0800ffbf 	.word	0x0800ffbf
 800b440:	3ff80000 	.word	0x3ff80000
 800b444:	08010210 	.word	0x08010210
 800b448:	08010116 	.word	0x08010116
 800b44c:	08010127 	.word	0x08010127
 800b450:	9b01      	ldr	r3, [sp, #4]
 800b452:	6423      	str	r3, [r4, #64]	; 0x40
 800b454:	9b03      	ldr	r3, [sp, #12]
 800b456:	2b0e      	cmp	r3, #14
 800b458:	f200 809d 	bhi.w	800b596 <_dtoa_r+0x436>
 800b45c:	2d00      	cmp	r5, #0
 800b45e:	f000 809a 	beq.w	800b596 <_dtoa_r+0x436>
 800b462:	9b00      	ldr	r3, [sp, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	dd32      	ble.n	800b4ce <_dtoa_r+0x36e>
 800b468:	4ab7      	ldr	r2, [pc, #732]	; (800b748 <_dtoa_r+0x5e8>)
 800b46a:	f003 030f 	and.w	r3, r3, #15
 800b46e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b472:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b476:	9b00      	ldr	r3, [sp, #0]
 800b478:	05d8      	lsls	r0, r3, #23
 800b47a:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b47e:	d516      	bpl.n	800b4ae <_dtoa_r+0x34e>
 800b480:	4bb2      	ldr	r3, [pc, #712]	; (800b74c <_dtoa_r+0x5ec>)
 800b482:	ec51 0b19 	vmov	r0, r1, d9
 800b486:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b48a:	f7f5 f9e7 	bl	800085c <__aeabi_ddiv>
 800b48e:	f007 070f 	and.w	r7, r7, #15
 800b492:	4682      	mov	sl, r0
 800b494:	468b      	mov	fp, r1
 800b496:	2503      	movs	r5, #3
 800b498:	4eac      	ldr	r6, [pc, #688]	; (800b74c <_dtoa_r+0x5ec>)
 800b49a:	b957      	cbnz	r7, 800b4b2 <_dtoa_r+0x352>
 800b49c:	4642      	mov	r2, r8
 800b49e:	464b      	mov	r3, r9
 800b4a0:	4650      	mov	r0, sl
 800b4a2:	4659      	mov	r1, fp
 800b4a4:	f7f5 f9da 	bl	800085c <__aeabi_ddiv>
 800b4a8:	4682      	mov	sl, r0
 800b4aa:	468b      	mov	fp, r1
 800b4ac:	e028      	b.n	800b500 <_dtoa_r+0x3a0>
 800b4ae:	2502      	movs	r5, #2
 800b4b0:	e7f2      	b.n	800b498 <_dtoa_r+0x338>
 800b4b2:	07f9      	lsls	r1, r7, #31
 800b4b4:	d508      	bpl.n	800b4c8 <_dtoa_r+0x368>
 800b4b6:	4640      	mov	r0, r8
 800b4b8:	4649      	mov	r1, r9
 800b4ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b4be:	f7f5 f8a3 	bl	8000608 <__aeabi_dmul>
 800b4c2:	3501      	adds	r5, #1
 800b4c4:	4680      	mov	r8, r0
 800b4c6:	4689      	mov	r9, r1
 800b4c8:	107f      	asrs	r7, r7, #1
 800b4ca:	3608      	adds	r6, #8
 800b4cc:	e7e5      	b.n	800b49a <_dtoa_r+0x33a>
 800b4ce:	f000 809b 	beq.w	800b608 <_dtoa_r+0x4a8>
 800b4d2:	9b00      	ldr	r3, [sp, #0]
 800b4d4:	4f9d      	ldr	r7, [pc, #628]	; (800b74c <_dtoa_r+0x5ec>)
 800b4d6:	425e      	negs	r6, r3
 800b4d8:	4b9b      	ldr	r3, [pc, #620]	; (800b748 <_dtoa_r+0x5e8>)
 800b4da:	f006 020f 	and.w	r2, r6, #15
 800b4de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e6:	ec51 0b19 	vmov	r0, r1, d9
 800b4ea:	f7f5 f88d 	bl	8000608 <__aeabi_dmul>
 800b4ee:	1136      	asrs	r6, r6, #4
 800b4f0:	4682      	mov	sl, r0
 800b4f2:	468b      	mov	fp, r1
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	2502      	movs	r5, #2
 800b4f8:	2e00      	cmp	r6, #0
 800b4fa:	d17a      	bne.n	800b5f2 <_dtoa_r+0x492>
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d1d3      	bne.n	800b4a8 <_dtoa_r+0x348>
 800b500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b502:	2b00      	cmp	r3, #0
 800b504:	f000 8082 	beq.w	800b60c <_dtoa_r+0x4ac>
 800b508:	4b91      	ldr	r3, [pc, #580]	; (800b750 <_dtoa_r+0x5f0>)
 800b50a:	2200      	movs	r2, #0
 800b50c:	4650      	mov	r0, sl
 800b50e:	4659      	mov	r1, fp
 800b510:	f7f5 faec 	bl	8000aec <__aeabi_dcmplt>
 800b514:	2800      	cmp	r0, #0
 800b516:	d079      	beq.n	800b60c <_dtoa_r+0x4ac>
 800b518:	9b03      	ldr	r3, [sp, #12]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d076      	beq.n	800b60c <_dtoa_r+0x4ac>
 800b51e:	9b02      	ldr	r3, [sp, #8]
 800b520:	2b00      	cmp	r3, #0
 800b522:	dd36      	ble.n	800b592 <_dtoa_r+0x432>
 800b524:	9b00      	ldr	r3, [sp, #0]
 800b526:	4650      	mov	r0, sl
 800b528:	4659      	mov	r1, fp
 800b52a:	1e5f      	subs	r7, r3, #1
 800b52c:	2200      	movs	r2, #0
 800b52e:	4b89      	ldr	r3, [pc, #548]	; (800b754 <_dtoa_r+0x5f4>)
 800b530:	f7f5 f86a 	bl	8000608 <__aeabi_dmul>
 800b534:	9e02      	ldr	r6, [sp, #8]
 800b536:	4682      	mov	sl, r0
 800b538:	468b      	mov	fp, r1
 800b53a:	3501      	adds	r5, #1
 800b53c:	4628      	mov	r0, r5
 800b53e:	f7f4 fff9 	bl	8000534 <__aeabi_i2d>
 800b542:	4652      	mov	r2, sl
 800b544:	465b      	mov	r3, fp
 800b546:	f7f5 f85f 	bl	8000608 <__aeabi_dmul>
 800b54a:	4b83      	ldr	r3, [pc, #524]	; (800b758 <_dtoa_r+0x5f8>)
 800b54c:	2200      	movs	r2, #0
 800b54e:	f7f4 fea5 	bl	800029c <__adddf3>
 800b552:	46d0      	mov	r8, sl
 800b554:	46d9      	mov	r9, fp
 800b556:	4682      	mov	sl, r0
 800b558:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b55c:	2e00      	cmp	r6, #0
 800b55e:	d158      	bne.n	800b612 <_dtoa_r+0x4b2>
 800b560:	4b7e      	ldr	r3, [pc, #504]	; (800b75c <_dtoa_r+0x5fc>)
 800b562:	2200      	movs	r2, #0
 800b564:	4640      	mov	r0, r8
 800b566:	4649      	mov	r1, r9
 800b568:	f7f4 fe96 	bl	8000298 <__aeabi_dsub>
 800b56c:	4652      	mov	r2, sl
 800b56e:	465b      	mov	r3, fp
 800b570:	4680      	mov	r8, r0
 800b572:	4689      	mov	r9, r1
 800b574:	f7f5 fad8 	bl	8000b28 <__aeabi_dcmpgt>
 800b578:	2800      	cmp	r0, #0
 800b57a:	f040 8296 	bne.w	800baaa <_dtoa_r+0x94a>
 800b57e:	4652      	mov	r2, sl
 800b580:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b584:	4640      	mov	r0, r8
 800b586:	4649      	mov	r1, r9
 800b588:	f7f5 fab0 	bl	8000aec <__aeabi_dcmplt>
 800b58c:	2800      	cmp	r0, #0
 800b58e:	f040 828a 	bne.w	800baa6 <_dtoa_r+0x946>
 800b592:	ec5b ab19 	vmov	sl, fp, d9
 800b596:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b598:	2b00      	cmp	r3, #0
 800b59a:	f2c0 8149 	blt.w	800b830 <_dtoa_r+0x6d0>
 800b59e:	9a00      	ldr	r2, [sp, #0]
 800b5a0:	2a0e      	cmp	r2, #14
 800b5a2:	f300 8145 	bgt.w	800b830 <_dtoa_r+0x6d0>
 800b5a6:	4b68      	ldr	r3, [pc, #416]	; (800b748 <_dtoa_r+0x5e8>)
 800b5a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b5b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	f280 80d6 	bge.w	800b764 <_dtoa_r+0x604>
 800b5b8:	9b03      	ldr	r3, [sp, #12]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	f300 80d2 	bgt.w	800b764 <_dtoa_r+0x604>
 800b5c0:	f040 8270 	bne.w	800baa4 <_dtoa_r+0x944>
 800b5c4:	4b65      	ldr	r3, [pc, #404]	; (800b75c <_dtoa_r+0x5fc>)
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	4640      	mov	r0, r8
 800b5ca:	4649      	mov	r1, r9
 800b5cc:	f7f5 f81c 	bl	8000608 <__aeabi_dmul>
 800b5d0:	4652      	mov	r2, sl
 800b5d2:	465b      	mov	r3, fp
 800b5d4:	f7f5 fa9e 	bl	8000b14 <__aeabi_dcmpge>
 800b5d8:	9e03      	ldr	r6, [sp, #12]
 800b5da:	4637      	mov	r7, r6
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	f040 8246 	bne.w	800ba6e <_dtoa_r+0x90e>
 800b5e2:	9d01      	ldr	r5, [sp, #4]
 800b5e4:	2331      	movs	r3, #49	; 0x31
 800b5e6:	f805 3b01 	strb.w	r3, [r5], #1
 800b5ea:	9b00      	ldr	r3, [sp, #0]
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	9300      	str	r3, [sp, #0]
 800b5f0:	e241      	b.n	800ba76 <_dtoa_r+0x916>
 800b5f2:	07f2      	lsls	r2, r6, #31
 800b5f4:	d505      	bpl.n	800b602 <_dtoa_r+0x4a2>
 800b5f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5fa:	f7f5 f805 	bl	8000608 <__aeabi_dmul>
 800b5fe:	3501      	adds	r5, #1
 800b600:	2301      	movs	r3, #1
 800b602:	1076      	asrs	r6, r6, #1
 800b604:	3708      	adds	r7, #8
 800b606:	e777      	b.n	800b4f8 <_dtoa_r+0x398>
 800b608:	2502      	movs	r5, #2
 800b60a:	e779      	b.n	800b500 <_dtoa_r+0x3a0>
 800b60c:	9f00      	ldr	r7, [sp, #0]
 800b60e:	9e03      	ldr	r6, [sp, #12]
 800b610:	e794      	b.n	800b53c <_dtoa_r+0x3dc>
 800b612:	9901      	ldr	r1, [sp, #4]
 800b614:	4b4c      	ldr	r3, [pc, #304]	; (800b748 <_dtoa_r+0x5e8>)
 800b616:	4431      	add	r1, r6
 800b618:	910d      	str	r1, [sp, #52]	; 0x34
 800b61a:	9908      	ldr	r1, [sp, #32]
 800b61c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b620:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b624:	2900      	cmp	r1, #0
 800b626:	d043      	beq.n	800b6b0 <_dtoa_r+0x550>
 800b628:	494d      	ldr	r1, [pc, #308]	; (800b760 <_dtoa_r+0x600>)
 800b62a:	2000      	movs	r0, #0
 800b62c:	f7f5 f916 	bl	800085c <__aeabi_ddiv>
 800b630:	4652      	mov	r2, sl
 800b632:	465b      	mov	r3, fp
 800b634:	f7f4 fe30 	bl	8000298 <__aeabi_dsub>
 800b638:	9d01      	ldr	r5, [sp, #4]
 800b63a:	4682      	mov	sl, r0
 800b63c:	468b      	mov	fp, r1
 800b63e:	4649      	mov	r1, r9
 800b640:	4640      	mov	r0, r8
 800b642:	f7f5 fa91 	bl	8000b68 <__aeabi_d2iz>
 800b646:	4606      	mov	r6, r0
 800b648:	f7f4 ff74 	bl	8000534 <__aeabi_i2d>
 800b64c:	4602      	mov	r2, r0
 800b64e:	460b      	mov	r3, r1
 800b650:	4640      	mov	r0, r8
 800b652:	4649      	mov	r1, r9
 800b654:	f7f4 fe20 	bl	8000298 <__aeabi_dsub>
 800b658:	3630      	adds	r6, #48	; 0x30
 800b65a:	f805 6b01 	strb.w	r6, [r5], #1
 800b65e:	4652      	mov	r2, sl
 800b660:	465b      	mov	r3, fp
 800b662:	4680      	mov	r8, r0
 800b664:	4689      	mov	r9, r1
 800b666:	f7f5 fa41 	bl	8000aec <__aeabi_dcmplt>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d163      	bne.n	800b736 <_dtoa_r+0x5d6>
 800b66e:	4642      	mov	r2, r8
 800b670:	464b      	mov	r3, r9
 800b672:	4937      	ldr	r1, [pc, #220]	; (800b750 <_dtoa_r+0x5f0>)
 800b674:	2000      	movs	r0, #0
 800b676:	f7f4 fe0f 	bl	8000298 <__aeabi_dsub>
 800b67a:	4652      	mov	r2, sl
 800b67c:	465b      	mov	r3, fp
 800b67e:	f7f5 fa35 	bl	8000aec <__aeabi_dcmplt>
 800b682:	2800      	cmp	r0, #0
 800b684:	f040 80b6 	bne.w	800b7f4 <_dtoa_r+0x694>
 800b688:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b68a:	429d      	cmp	r5, r3
 800b68c:	d081      	beq.n	800b592 <_dtoa_r+0x432>
 800b68e:	4b31      	ldr	r3, [pc, #196]	; (800b754 <_dtoa_r+0x5f4>)
 800b690:	2200      	movs	r2, #0
 800b692:	4650      	mov	r0, sl
 800b694:	4659      	mov	r1, fp
 800b696:	f7f4 ffb7 	bl	8000608 <__aeabi_dmul>
 800b69a:	4b2e      	ldr	r3, [pc, #184]	; (800b754 <_dtoa_r+0x5f4>)
 800b69c:	4682      	mov	sl, r0
 800b69e:	468b      	mov	fp, r1
 800b6a0:	4640      	mov	r0, r8
 800b6a2:	4649      	mov	r1, r9
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f7f4 ffaf 	bl	8000608 <__aeabi_dmul>
 800b6aa:	4680      	mov	r8, r0
 800b6ac:	4689      	mov	r9, r1
 800b6ae:	e7c6      	b.n	800b63e <_dtoa_r+0x4de>
 800b6b0:	4650      	mov	r0, sl
 800b6b2:	4659      	mov	r1, fp
 800b6b4:	f7f4 ffa8 	bl	8000608 <__aeabi_dmul>
 800b6b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6ba:	9d01      	ldr	r5, [sp, #4]
 800b6bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6be:	4682      	mov	sl, r0
 800b6c0:	468b      	mov	fp, r1
 800b6c2:	4649      	mov	r1, r9
 800b6c4:	4640      	mov	r0, r8
 800b6c6:	f7f5 fa4f 	bl	8000b68 <__aeabi_d2iz>
 800b6ca:	4606      	mov	r6, r0
 800b6cc:	f7f4 ff32 	bl	8000534 <__aeabi_i2d>
 800b6d0:	3630      	adds	r6, #48	; 0x30
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	4640      	mov	r0, r8
 800b6d8:	4649      	mov	r1, r9
 800b6da:	f7f4 fddd 	bl	8000298 <__aeabi_dsub>
 800b6de:	f805 6b01 	strb.w	r6, [r5], #1
 800b6e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6e4:	429d      	cmp	r5, r3
 800b6e6:	4680      	mov	r8, r0
 800b6e8:	4689      	mov	r9, r1
 800b6ea:	f04f 0200 	mov.w	r2, #0
 800b6ee:	d124      	bne.n	800b73a <_dtoa_r+0x5da>
 800b6f0:	4b1b      	ldr	r3, [pc, #108]	; (800b760 <_dtoa_r+0x600>)
 800b6f2:	4650      	mov	r0, sl
 800b6f4:	4659      	mov	r1, fp
 800b6f6:	f7f4 fdd1 	bl	800029c <__adddf3>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	4640      	mov	r0, r8
 800b700:	4649      	mov	r1, r9
 800b702:	f7f5 fa11 	bl	8000b28 <__aeabi_dcmpgt>
 800b706:	2800      	cmp	r0, #0
 800b708:	d174      	bne.n	800b7f4 <_dtoa_r+0x694>
 800b70a:	4652      	mov	r2, sl
 800b70c:	465b      	mov	r3, fp
 800b70e:	4914      	ldr	r1, [pc, #80]	; (800b760 <_dtoa_r+0x600>)
 800b710:	2000      	movs	r0, #0
 800b712:	f7f4 fdc1 	bl	8000298 <__aeabi_dsub>
 800b716:	4602      	mov	r2, r0
 800b718:	460b      	mov	r3, r1
 800b71a:	4640      	mov	r0, r8
 800b71c:	4649      	mov	r1, r9
 800b71e:	f7f5 f9e5 	bl	8000aec <__aeabi_dcmplt>
 800b722:	2800      	cmp	r0, #0
 800b724:	f43f af35 	beq.w	800b592 <_dtoa_r+0x432>
 800b728:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b72a:	1e6b      	subs	r3, r5, #1
 800b72c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b72e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b732:	2b30      	cmp	r3, #48	; 0x30
 800b734:	d0f8      	beq.n	800b728 <_dtoa_r+0x5c8>
 800b736:	9700      	str	r7, [sp, #0]
 800b738:	e04a      	b.n	800b7d0 <_dtoa_r+0x670>
 800b73a:	4b06      	ldr	r3, [pc, #24]	; (800b754 <_dtoa_r+0x5f4>)
 800b73c:	f7f4 ff64 	bl	8000608 <__aeabi_dmul>
 800b740:	4680      	mov	r8, r0
 800b742:	4689      	mov	r9, r1
 800b744:	e7bd      	b.n	800b6c2 <_dtoa_r+0x562>
 800b746:	bf00      	nop
 800b748:	08010210 	.word	0x08010210
 800b74c:	080101e8 	.word	0x080101e8
 800b750:	3ff00000 	.word	0x3ff00000
 800b754:	40240000 	.word	0x40240000
 800b758:	401c0000 	.word	0x401c0000
 800b75c:	40140000 	.word	0x40140000
 800b760:	3fe00000 	.word	0x3fe00000
 800b764:	9d01      	ldr	r5, [sp, #4]
 800b766:	4656      	mov	r6, sl
 800b768:	465f      	mov	r7, fp
 800b76a:	4642      	mov	r2, r8
 800b76c:	464b      	mov	r3, r9
 800b76e:	4630      	mov	r0, r6
 800b770:	4639      	mov	r1, r7
 800b772:	f7f5 f873 	bl	800085c <__aeabi_ddiv>
 800b776:	f7f5 f9f7 	bl	8000b68 <__aeabi_d2iz>
 800b77a:	4682      	mov	sl, r0
 800b77c:	f7f4 feda 	bl	8000534 <__aeabi_i2d>
 800b780:	4642      	mov	r2, r8
 800b782:	464b      	mov	r3, r9
 800b784:	f7f4 ff40 	bl	8000608 <__aeabi_dmul>
 800b788:	4602      	mov	r2, r0
 800b78a:	460b      	mov	r3, r1
 800b78c:	4630      	mov	r0, r6
 800b78e:	4639      	mov	r1, r7
 800b790:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b794:	f7f4 fd80 	bl	8000298 <__aeabi_dsub>
 800b798:	f805 6b01 	strb.w	r6, [r5], #1
 800b79c:	9e01      	ldr	r6, [sp, #4]
 800b79e:	9f03      	ldr	r7, [sp, #12]
 800b7a0:	1bae      	subs	r6, r5, r6
 800b7a2:	42b7      	cmp	r7, r6
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	d135      	bne.n	800b816 <_dtoa_r+0x6b6>
 800b7aa:	f7f4 fd77 	bl	800029c <__adddf3>
 800b7ae:	4642      	mov	r2, r8
 800b7b0:	464b      	mov	r3, r9
 800b7b2:	4606      	mov	r6, r0
 800b7b4:	460f      	mov	r7, r1
 800b7b6:	f7f5 f9b7 	bl	8000b28 <__aeabi_dcmpgt>
 800b7ba:	b9d0      	cbnz	r0, 800b7f2 <_dtoa_r+0x692>
 800b7bc:	4642      	mov	r2, r8
 800b7be:	464b      	mov	r3, r9
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	4639      	mov	r1, r7
 800b7c4:	f7f5 f988 	bl	8000ad8 <__aeabi_dcmpeq>
 800b7c8:	b110      	cbz	r0, 800b7d0 <_dtoa_r+0x670>
 800b7ca:	f01a 0f01 	tst.w	sl, #1
 800b7ce:	d110      	bne.n	800b7f2 <_dtoa_r+0x692>
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	ee18 1a10 	vmov	r1, s16
 800b7d6:	f000 fc4e 	bl	800c076 <_Bfree>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	9800      	ldr	r0, [sp, #0]
 800b7de:	702b      	strb	r3, [r5, #0]
 800b7e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7e2:	3001      	adds	r0, #1
 800b7e4:	6018      	str	r0, [r3, #0]
 800b7e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	f43f acf2 	beq.w	800b1d2 <_dtoa_r+0x72>
 800b7ee:	601d      	str	r5, [r3, #0]
 800b7f0:	e4ef      	b.n	800b1d2 <_dtoa_r+0x72>
 800b7f2:	9f00      	ldr	r7, [sp, #0]
 800b7f4:	462b      	mov	r3, r5
 800b7f6:	461d      	mov	r5, r3
 800b7f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7fc:	2a39      	cmp	r2, #57	; 0x39
 800b7fe:	d106      	bne.n	800b80e <_dtoa_r+0x6ae>
 800b800:	9a01      	ldr	r2, [sp, #4]
 800b802:	429a      	cmp	r2, r3
 800b804:	d1f7      	bne.n	800b7f6 <_dtoa_r+0x696>
 800b806:	9901      	ldr	r1, [sp, #4]
 800b808:	2230      	movs	r2, #48	; 0x30
 800b80a:	3701      	adds	r7, #1
 800b80c:	700a      	strb	r2, [r1, #0]
 800b80e:	781a      	ldrb	r2, [r3, #0]
 800b810:	3201      	adds	r2, #1
 800b812:	701a      	strb	r2, [r3, #0]
 800b814:	e78f      	b.n	800b736 <_dtoa_r+0x5d6>
 800b816:	4ba6      	ldr	r3, [pc, #664]	; (800bab0 <_dtoa_r+0x950>)
 800b818:	2200      	movs	r2, #0
 800b81a:	f7f4 fef5 	bl	8000608 <__aeabi_dmul>
 800b81e:	2200      	movs	r2, #0
 800b820:	2300      	movs	r3, #0
 800b822:	4606      	mov	r6, r0
 800b824:	460f      	mov	r7, r1
 800b826:	f7f5 f957 	bl	8000ad8 <__aeabi_dcmpeq>
 800b82a:	2800      	cmp	r0, #0
 800b82c:	d09d      	beq.n	800b76a <_dtoa_r+0x60a>
 800b82e:	e7cf      	b.n	800b7d0 <_dtoa_r+0x670>
 800b830:	9a08      	ldr	r2, [sp, #32]
 800b832:	2a00      	cmp	r2, #0
 800b834:	f000 80d7 	beq.w	800b9e6 <_dtoa_r+0x886>
 800b838:	9a06      	ldr	r2, [sp, #24]
 800b83a:	2a01      	cmp	r2, #1
 800b83c:	f300 80ba 	bgt.w	800b9b4 <_dtoa_r+0x854>
 800b840:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b842:	2a00      	cmp	r2, #0
 800b844:	f000 80b2 	beq.w	800b9ac <_dtoa_r+0x84c>
 800b848:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b84c:	9e07      	ldr	r6, [sp, #28]
 800b84e:	9d04      	ldr	r5, [sp, #16]
 800b850:	9a04      	ldr	r2, [sp, #16]
 800b852:	441a      	add	r2, r3
 800b854:	9204      	str	r2, [sp, #16]
 800b856:	9a05      	ldr	r2, [sp, #20]
 800b858:	2101      	movs	r1, #1
 800b85a:	441a      	add	r2, r3
 800b85c:	4620      	mov	r0, r4
 800b85e:	9205      	str	r2, [sp, #20]
 800b860:	f000 fcf2 	bl	800c248 <__i2b>
 800b864:	4607      	mov	r7, r0
 800b866:	2d00      	cmp	r5, #0
 800b868:	dd0c      	ble.n	800b884 <_dtoa_r+0x724>
 800b86a:	9b05      	ldr	r3, [sp, #20]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	dd09      	ble.n	800b884 <_dtoa_r+0x724>
 800b870:	42ab      	cmp	r3, r5
 800b872:	9a04      	ldr	r2, [sp, #16]
 800b874:	bfa8      	it	ge
 800b876:	462b      	movge	r3, r5
 800b878:	1ad2      	subs	r2, r2, r3
 800b87a:	9204      	str	r2, [sp, #16]
 800b87c:	9a05      	ldr	r2, [sp, #20]
 800b87e:	1aed      	subs	r5, r5, r3
 800b880:	1ad3      	subs	r3, r2, r3
 800b882:	9305      	str	r3, [sp, #20]
 800b884:	9b07      	ldr	r3, [sp, #28]
 800b886:	b31b      	cbz	r3, 800b8d0 <_dtoa_r+0x770>
 800b888:	9b08      	ldr	r3, [sp, #32]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f000 80af 	beq.w	800b9ee <_dtoa_r+0x88e>
 800b890:	2e00      	cmp	r6, #0
 800b892:	dd13      	ble.n	800b8bc <_dtoa_r+0x75c>
 800b894:	4639      	mov	r1, r7
 800b896:	4632      	mov	r2, r6
 800b898:	4620      	mov	r0, r4
 800b89a:	f000 fd95 	bl	800c3c8 <__pow5mult>
 800b89e:	ee18 2a10 	vmov	r2, s16
 800b8a2:	4601      	mov	r1, r0
 800b8a4:	4607      	mov	r7, r0
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	f000 fce4 	bl	800c274 <__multiply>
 800b8ac:	ee18 1a10 	vmov	r1, s16
 800b8b0:	4680      	mov	r8, r0
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f000 fbdf 	bl	800c076 <_Bfree>
 800b8b8:	ee08 8a10 	vmov	s16, r8
 800b8bc:	9b07      	ldr	r3, [sp, #28]
 800b8be:	1b9a      	subs	r2, r3, r6
 800b8c0:	d006      	beq.n	800b8d0 <_dtoa_r+0x770>
 800b8c2:	ee18 1a10 	vmov	r1, s16
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f000 fd7e 	bl	800c3c8 <__pow5mult>
 800b8cc:	ee08 0a10 	vmov	s16, r0
 800b8d0:	2101      	movs	r1, #1
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f000 fcb8 	bl	800c248 <__i2b>
 800b8d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	4606      	mov	r6, r0
 800b8de:	f340 8088 	ble.w	800b9f2 <_dtoa_r+0x892>
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	4601      	mov	r1, r0
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f000 fd6e 	bl	800c3c8 <__pow5mult>
 800b8ec:	9b06      	ldr	r3, [sp, #24]
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	4606      	mov	r6, r0
 800b8f2:	f340 8081 	ble.w	800b9f8 <_dtoa_r+0x898>
 800b8f6:	f04f 0800 	mov.w	r8, #0
 800b8fa:	6933      	ldr	r3, [r6, #16]
 800b8fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b900:	6918      	ldr	r0, [r3, #16]
 800b902:	f000 fc51 	bl	800c1a8 <__hi0bits>
 800b906:	f1c0 0020 	rsb	r0, r0, #32
 800b90a:	9b05      	ldr	r3, [sp, #20]
 800b90c:	4418      	add	r0, r3
 800b90e:	f010 001f 	ands.w	r0, r0, #31
 800b912:	f000 8092 	beq.w	800ba3a <_dtoa_r+0x8da>
 800b916:	f1c0 0320 	rsb	r3, r0, #32
 800b91a:	2b04      	cmp	r3, #4
 800b91c:	f340 808a 	ble.w	800ba34 <_dtoa_r+0x8d4>
 800b920:	f1c0 001c 	rsb	r0, r0, #28
 800b924:	9b04      	ldr	r3, [sp, #16]
 800b926:	4403      	add	r3, r0
 800b928:	9304      	str	r3, [sp, #16]
 800b92a:	9b05      	ldr	r3, [sp, #20]
 800b92c:	4403      	add	r3, r0
 800b92e:	4405      	add	r5, r0
 800b930:	9305      	str	r3, [sp, #20]
 800b932:	9b04      	ldr	r3, [sp, #16]
 800b934:	2b00      	cmp	r3, #0
 800b936:	dd07      	ble.n	800b948 <_dtoa_r+0x7e8>
 800b938:	ee18 1a10 	vmov	r1, s16
 800b93c:	461a      	mov	r2, r3
 800b93e:	4620      	mov	r0, r4
 800b940:	f000 fd82 	bl	800c448 <__lshift>
 800b944:	ee08 0a10 	vmov	s16, r0
 800b948:	9b05      	ldr	r3, [sp, #20]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	dd05      	ble.n	800b95a <_dtoa_r+0x7fa>
 800b94e:	4631      	mov	r1, r6
 800b950:	461a      	mov	r2, r3
 800b952:	4620      	mov	r0, r4
 800b954:	f000 fd78 	bl	800c448 <__lshift>
 800b958:	4606      	mov	r6, r0
 800b95a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d06e      	beq.n	800ba3e <_dtoa_r+0x8de>
 800b960:	ee18 0a10 	vmov	r0, s16
 800b964:	4631      	mov	r1, r6
 800b966:	f000 fddf 	bl	800c528 <__mcmp>
 800b96a:	2800      	cmp	r0, #0
 800b96c:	da67      	bge.n	800ba3e <_dtoa_r+0x8de>
 800b96e:	9b00      	ldr	r3, [sp, #0]
 800b970:	3b01      	subs	r3, #1
 800b972:	ee18 1a10 	vmov	r1, s16
 800b976:	9300      	str	r3, [sp, #0]
 800b978:	220a      	movs	r2, #10
 800b97a:	2300      	movs	r3, #0
 800b97c:	4620      	mov	r0, r4
 800b97e:	f000 fb83 	bl	800c088 <__multadd>
 800b982:	9b08      	ldr	r3, [sp, #32]
 800b984:	ee08 0a10 	vmov	s16, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f000 81b0 	beq.w	800bcee <_dtoa_r+0xb8e>
 800b98e:	2300      	movs	r3, #0
 800b990:	4639      	mov	r1, r7
 800b992:	220a      	movs	r2, #10
 800b994:	4620      	mov	r0, r4
 800b996:	f000 fb77 	bl	800c088 <__multadd>
 800b99a:	9b02      	ldr	r3, [sp, #8]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	4607      	mov	r7, r0
 800b9a0:	f300 808e 	bgt.w	800bac0 <_dtoa_r+0x960>
 800b9a4:	9b06      	ldr	r3, [sp, #24]
 800b9a6:	2b02      	cmp	r3, #2
 800b9a8:	dc51      	bgt.n	800ba4e <_dtoa_r+0x8ee>
 800b9aa:	e089      	b.n	800bac0 <_dtoa_r+0x960>
 800b9ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b9b2:	e74b      	b.n	800b84c <_dtoa_r+0x6ec>
 800b9b4:	9b03      	ldr	r3, [sp, #12]
 800b9b6:	1e5e      	subs	r6, r3, #1
 800b9b8:	9b07      	ldr	r3, [sp, #28]
 800b9ba:	42b3      	cmp	r3, r6
 800b9bc:	bfbf      	itttt	lt
 800b9be:	9b07      	ldrlt	r3, [sp, #28]
 800b9c0:	9607      	strlt	r6, [sp, #28]
 800b9c2:	1af2      	sublt	r2, r6, r3
 800b9c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b9c6:	bfb6      	itet	lt
 800b9c8:	189b      	addlt	r3, r3, r2
 800b9ca:	1b9e      	subge	r6, r3, r6
 800b9cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b9ce:	9b03      	ldr	r3, [sp, #12]
 800b9d0:	bfb8      	it	lt
 800b9d2:	2600      	movlt	r6, #0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	bfb7      	itett	lt
 800b9d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b9dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b9e0:	1a9d      	sublt	r5, r3, r2
 800b9e2:	2300      	movlt	r3, #0
 800b9e4:	e734      	b.n	800b850 <_dtoa_r+0x6f0>
 800b9e6:	9e07      	ldr	r6, [sp, #28]
 800b9e8:	9d04      	ldr	r5, [sp, #16]
 800b9ea:	9f08      	ldr	r7, [sp, #32]
 800b9ec:	e73b      	b.n	800b866 <_dtoa_r+0x706>
 800b9ee:	9a07      	ldr	r2, [sp, #28]
 800b9f0:	e767      	b.n	800b8c2 <_dtoa_r+0x762>
 800b9f2:	9b06      	ldr	r3, [sp, #24]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	dc18      	bgt.n	800ba2a <_dtoa_r+0x8ca>
 800b9f8:	f1ba 0f00 	cmp.w	sl, #0
 800b9fc:	d115      	bne.n	800ba2a <_dtoa_r+0x8ca>
 800b9fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba02:	b993      	cbnz	r3, 800ba2a <_dtoa_r+0x8ca>
 800ba04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ba08:	0d1b      	lsrs	r3, r3, #20
 800ba0a:	051b      	lsls	r3, r3, #20
 800ba0c:	b183      	cbz	r3, 800ba30 <_dtoa_r+0x8d0>
 800ba0e:	9b04      	ldr	r3, [sp, #16]
 800ba10:	3301      	adds	r3, #1
 800ba12:	9304      	str	r3, [sp, #16]
 800ba14:	9b05      	ldr	r3, [sp, #20]
 800ba16:	3301      	adds	r3, #1
 800ba18:	9305      	str	r3, [sp, #20]
 800ba1a:	f04f 0801 	mov.w	r8, #1
 800ba1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	f47f af6a 	bne.w	800b8fa <_dtoa_r+0x79a>
 800ba26:	2001      	movs	r0, #1
 800ba28:	e76f      	b.n	800b90a <_dtoa_r+0x7aa>
 800ba2a:	f04f 0800 	mov.w	r8, #0
 800ba2e:	e7f6      	b.n	800ba1e <_dtoa_r+0x8be>
 800ba30:	4698      	mov	r8, r3
 800ba32:	e7f4      	b.n	800ba1e <_dtoa_r+0x8be>
 800ba34:	f43f af7d 	beq.w	800b932 <_dtoa_r+0x7d2>
 800ba38:	4618      	mov	r0, r3
 800ba3a:	301c      	adds	r0, #28
 800ba3c:	e772      	b.n	800b924 <_dtoa_r+0x7c4>
 800ba3e:	9b03      	ldr	r3, [sp, #12]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	dc37      	bgt.n	800bab4 <_dtoa_r+0x954>
 800ba44:	9b06      	ldr	r3, [sp, #24]
 800ba46:	2b02      	cmp	r3, #2
 800ba48:	dd34      	ble.n	800bab4 <_dtoa_r+0x954>
 800ba4a:	9b03      	ldr	r3, [sp, #12]
 800ba4c:	9302      	str	r3, [sp, #8]
 800ba4e:	9b02      	ldr	r3, [sp, #8]
 800ba50:	b96b      	cbnz	r3, 800ba6e <_dtoa_r+0x90e>
 800ba52:	4631      	mov	r1, r6
 800ba54:	2205      	movs	r2, #5
 800ba56:	4620      	mov	r0, r4
 800ba58:	f000 fb16 	bl	800c088 <__multadd>
 800ba5c:	4601      	mov	r1, r0
 800ba5e:	4606      	mov	r6, r0
 800ba60:	ee18 0a10 	vmov	r0, s16
 800ba64:	f000 fd60 	bl	800c528 <__mcmp>
 800ba68:	2800      	cmp	r0, #0
 800ba6a:	f73f adba 	bgt.w	800b5e2 <_dtoa_r+0x482>
 800ba6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba70:	9d01      	ldr	r5, [sp, #4]
 800ba72:	43db      	mvns	r3, r3
 800ba74:	9300      	str	r3, [sp, #0]
 800ba76:	f04f 0800 	mov.w	r8, #0
 800ba7a:	4631      	mov	r1, r6
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	f000 fafa 	bl	800c076 <_Bfree>
 800ba82:	2f00      	cmp	r7, #0
 800ba84:	f43f aea4 	beq.w	800b7d0 <_dtoa_r+0x670>
 800ba88:	f1b8 0f00 	cmp.w	r8, #0
 800ba8c:	d005      	beq.n	800ba9a <_dtoa_r+0x93a>
 800ba8e:	45b8      	cmp	r8, r7
 800ba90:	d003      	beq.n	800ba9a <_dtoa_r+0x93a>
 800ba92:	4641      	mov	r1, r8
 800ba94:	4620      	mov	r0, r4
 800ba96:	f000 faee 	bl	800c076 <_Bfree>
 800ba9a:	4639      	mov	r1, r7
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	f000 faea 	bl	800c076 <_Bfree>
 800baa2:	e695      	b.n	800b7d0 <_dtoa_r+0x670>
 800baa4:	2600      	movs	r6, #0
 800baa6:	4637      	mov	r7, r6
 800baa8:	e7e1      	b.n	800ba6e <_dtoa_r+0x90e>
 800baaa:	9700      	str	r7, [sp, #0]
 800baac:	4637      	mov	r7, r6
 800baae:	e598      	b.n	800b5e2 <_dtoa_r+0x482>
 800bab0:	40240000 	.word	0x40240000
 800bab4:	9b08      	ldr	r3, [sp, #32]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f000 80c9 	beq.w	800bc4e <_dtoa_r+0xaee>
 800babc:	9b03      	ldr	r3, [sp, #12]
 800babe:	9302      	str	r3, [sp, #8]
 800bac0:	2d00      	cmp	r5, #0
 800bac2:	dd05      	ble.n	800bad0 <_dtoa_r+0x970>
 800bac4:	4639      	mov	r1, r7
 800bac6:	462a      	mov	r2, r5
 800bac8:	4620      	mov	r0, r4
 800baca:	f000 fcbd 	bl	800c448 <__lshift>
 800bace:	4607      	mov	r7, r0
 800bad0:	f1b8 0f00 	cmp.w	r8, #0
 800bad4:	d05a      	beq.n	800bb8c <_dtoa_r+0xa2c>
 800bad6:	6879      	ldr	r1, [r7, #4]
 800bad8:	4620      	mov	r0, r4
 800bada:	f000 faa7 	bl	800c02c <_Balloc>
 800bade:	4605      	mov	r5, r0
 800bae0:	b920      	cbnz	r0, 800baec <_dtoa_r+0x98c>
 800bae2:	4b87      	ldr	r3, [pc, #540]	; (800bd00 <_dtoa_r+0xba0>)
 800bae4:	4602      	mov	r2, r0
 800bae6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800baea:	e477      	b.n	800b3dc <_dtoa_r+0x27c>
 800baec:	693a      	ldr	r2, [r7, #16]
 800baee:	3202      	adds	r2, #2
 800baf0:	0092      	lsls	r2, r2, #2
 800baf2:	f107 010c 	add.w	r1, r7, #12
 800baf6:	300c      	adds	r0, #12
 800baf8:	f000 fa8a 	bl	800c010 <memcpy>
 800bafc:	2201      	movs	r2, #1
 800bafe:	4629      	mov	r1, r5
 800bb00:	4620      	mov	r0, r4
 800bb02:	f000 fca1 	bl	800c448 <__lshift>
 800bb06:	9b01      	ldr	r3, [sp, #4]
 800bb08:	f103 0901 	add.w	r9, r3, #1
 800bb0c:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bb10:	4413      	add	r3, r2
 800bb12:	9305      	str	r3, [sp, #20]
 800bb14:	f00a 0301 	and.w	r3, sl, #1
 800bb18:	46b8      	mov	r8, r7
 800bb1a:	9304      	str	r3, [sp, #16]
 800bb1c:	4607      	mov	r7, r0
 800bb1e:	4631      	mov	r1, r6
 800bb20:	ee18 0a10 	vmov	r0, s16
 800bb24:	f7ff fa90 	bl	800b048 <quorem>
 800bb28:	4641      	mov	r1, r8
 800bb2a:	9002      	str	r0, [sp, #8]
 800bb2c:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bb30:	ee18 0a10 	vmov	r0, s16
 800bb34:	f000 fcf8 	bl	800c528 <__mcmp>
 800bb38:	463a      	mov	r2, r7
 800bb3a:	9003      	str	r0, [sp, #12]
 800bb3c:	4631      	mov	r1, r6
 800bb3e:	4620      	mov	r0, r4
 800bb40:	f000 fd0e 	bl	800c560 <__mdiff>
 800bb44:	68c2      	ldr	r2, [r0, #12]
 800bb46:	f109 3bff 	add.w	fp, r9, #4294967295
 800bb4a:	4605      	mov	r5, r0
 800bb4c:	bb02      	cbnz	r2, 800bb90 <_dtoa_r+0xa30>
 800bb4e:	4601      	mov	r1, r0
 800bb50:	ee18 0a10 	vmov	r0, s16
 800bb54:	f000 fce8 	bl	800c528 <__mcmp>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	4629      	mov	r1, r5
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	9207      	str	r2, [sp, #28]
 800bb60:	f000 fa89 	bl	800c076 <_Bfree>
 800bb64:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bb68:	ea43 0102 	orr.w	r1, r3, r2
 800bb6c:	9b04      	ldr	r3, [sp, #16]
 800bb6e:	430b      	orrs	r3, r1
 800bb70:	464d      	mov	r5, r9
 800bb72:	d10f      	bne.n	800bb94 <_dtoa_r+0xa34>
 800bb74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb78:	d02a      	beq.n	800bbd0 <_dtoa_r+0xa70>
 800bb7a:	9b03      	ldr	r3, [sp, #12]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	dd02      	ble.n	800bb86 <_dtoa_r+0xa26>
 800bb80:	9b02      	ldr	r3, [sp, #8]
 800bb82:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bb86:	f88b a000 	strb.w	sl, [fp]
 800bb8a:	e776      	b.n	800ba7a <_dtoa_r+0x91a>
 800bb8c:	4638      	mov	r0, r7
 800bb8e:	e7ba      	b.n	800bb06 <_dtoa_r+0x9a6>
 800bb90:	2201      	movs	r2, #1
 800bb92:	e7e2      	b.n	800bb5a <_dtoa_r+0x9fa>
 800bb94:	9b03      	ldr	r3, [sp, #12]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	db04      	blt.n	800bba4 <_dtoa_r+0xa44>
 800bb9a:	9906      	ldr	r1, [sp, #24]
 800bb9c:	430b      	orrs	r3, r1
 800bb9e:	9904      	ldr	r1, [sp, #16]
 800bba0:	430b      	orrs	r3, r1
 800bba2:	d122      	bne.n	800bbea <_dtoa_r+0xa8a>
 800bba4:	2a00      	cmp	r2, #0
 800bba6:	ddee      	ble.n	800bb86 <_dtoa_r+0xa26>
 800bba8:	ee18 1a10 	vmov	r1, s16
 800bbac:	2201      	movs	r2, #1
 800bbae:	4620      	mov	r0, r4
 800bbb0:	f000 fc4a 	bl	800c448 <__lshift>
 800bbb4:	4631      	mov	r1, r6
 800bbb6:	ee08 0a10 	vmov	s16, r0
 800bbba:	f000 fcb5 	bl	800c528 <__mcmp>
 800bbbe:	2800      	cmp	r0, #0
 800bbc0:	dc03      	bgt.n	800bbca <_dtoa_r+0xa6a>
 800bbc2:	d1e0      	bne.n	800bb86 <_dtoa_r+0xa26>
 800bbc4:	f01a 0f01 	tst.w	sl, #1
 800bbc8:	d0dd      	beq.n	800bb86 <_dtoa_r+0xa26>
 800bbca:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bbce:	d1d7      	bne.n	800bb80 <_dtoa_r+0xa20>
 800bbd0:	2339      	movs	r3, #57	; 0x39
 800bbd2:	f88b 3000 	strb.w	r3, [fp]
 800bbd6:	462b      	mov	r3, r5
 800bbd8:	461d      	mov	r5, r3
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bbe0:	2a39      	cmp	r2, #57	; 0x39
 800bbe2:	d071      	beq.n	800bcc8 <_dtoa_r+0xb68>
 800bbe4:	3201      	adds	r2, #1
 800bbe6:	701a      	strb	r2, [r3, #0]
 800bbe8:	e747      	b.n	800ba7a <_dtoa_r+0x91a>
 800bbea:	2a00      	cmp	r2, #0
 800bbec:	dd07      	ble.n	800bbfe <_dtoa_r+0xa9e>
 800bbee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bbf2:	d0ed      	beq.n	800bbd0 <_dtoa_r+0xa70>
 800bbf4:	f10a 0301 	add.w	r3, sl, #1
 800bbf8:	f88b 3000 	strb.w	r3, [fp]
 800bbfc:	e73d      	b.n	800ba7a <_dtoa_r+0x91a>
 800bbfe:	9b05      	ldr	r3, [sp, #20]
 800bc00:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bc04:	4599      	cmp	r9, r3
 800bc06:	d047      	beq.n	800bc98 <_dtoa_r+0xb38>
 800bc08:	ee18 1a10 	vmov	r1, s16
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	220a      	movs	r2, #10
 800bc10:	4620      	mov	r0, r4
 800bc12:	f000 fa39 	bl	800c088 <__multadd>
 800bc16:	45b8      	cmp	r8, r7
 800bc18:	ee08 0a10 	vmov	s16, r0
 800bc1c:	f04f 0300 	mov.w	r3, #0
 800bc20:	f04f 020a 	mov.w	r2, #10
 800bc24:	4641      	mov	r1, r8
 800bc26:	4620      	mov	r0, r4
 800bc28:	d106      	bne.n	800bc38 <_dtoa_r+0xad8>
 800bc2a:	f000 fa2d 	bl	800c088 <__multadd>
 800bc2e:	4680      	mov	r8, r0
 800bc30:	4607      	mov	r7, r0
 800bc32:	f109 0901 	add.w	r9, r9, #1
 800bc36:	e772      	b.n	800bb1e <_dtoa_r+0x9be>
 800bc38:	f000 fa26 	bl	800c088 <__multadd>
 800bc3c:	4639      	mov	r1, r7
 800bc3e:	4680      	mov	r8, r0
 800bc40:	2300      	movs	r3, #0
 800bc42:	220a      	movs	r2, #10
 800bc44:	4620      	mov	r0, r4
 800bc46:	f000 fa1f 	bl	800c088 <__multadd>
 800bc4a:	4607      	mov	r7, r0
 800bc4c:	e7f1      	b.n	800bc32 <_dtoa_r+0xad2>
 800bc4e:	9b03      	ldr	r3, [sp, #12]
 800bc50:	9302      	str	r3, [sp, #8]
 800bc52:	9d01      	ldr	r5, [sp, #4]
 800bc54:	ee18 0a10 	vmov	r0, s16
 800bc58:	4631      	mov	r1, r6
 800bc5a:	f7ff f9f5 	bl	800b048 <quorem>
 800bc5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bc62:	9b01      	ldr	r3, [sp, #4]
 800bc64:	f805 ab01 	strb.w	sl, [r5], #1
 800bc68:	1aea      	subs	r2, r5, r3
 800bc6a:	9b02      	ldr	r3, [sp, #8]
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	dd09      	ble.n	800bc84 <_dtoa_r+0xb24>
 800bc70:	ee18 1a10 	vmov	r1, s16
 800bc74:	2300      	movs	r3, #0
 800bc76:	220a      	movs	r2, #10
 800bc78:	4620      	mov	r0, r4
 800bc7a:	f000 fa05 	bl	800c088 <__multadd>
 800bc7e:	ee08 0a10 	vmov	s16, r0
 800bc82:	e7e7      	b.n	800bc54 <_dtoa_r+0xaf4>
 800bc84:	9b02      	ldr	r3, [sp, #8]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	bfc8      	it	gt
 800bc8a:	461d      	movgt	r5, r3
 800bc8c:	9b01      	ldr	r3, [sp, #4]
 800bc8e:	bfd8      	it	le
 800bc90:	2501      	movle	r5, #1
 800bc92:	441d      	add	r5, r3
 800bc94:	f04f 0800 	mov.w	r8, #0
 800bc98:	ee18 1a10 	vmov	r1, s16
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	4620      	mov	r0, r4
 800bca0:	f000 fbd2 	bl	800c448 <__lshift>
 800bca4:	4631      	mov	r1, r6
 800bca6:	ee08 0a10 	vmov	s16, r0
 800bcaa:	f000 fc3d 	bl	800c528 <__mcmp>
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	dc91      	bgt.n	800bbd6 <_dtoa_r+0xa76>
 800bcb2:	d102      	bne.n	800bcba <_dtoa_r+0xb5a>
 800bcb4:	f01a 0f01 	tst.w	sl, #1
 800bcb8:	d18d      	bne.n	800bbd6 <_dtoa_r+0xa76>
 800bcba:	462b      	mov	r3, r5
 800bcbc:	461d      	mov	r5, r3
 800bcbe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcc2:	2a30      	cmp	r2, #48	; 0x30
 800bcc4:	d0fa      	beq.n	800bcbc <_dtoa_r+0xb5c>
 800bcc6:	e6d8      	b.n	800ba7a <_dtoa_r+0x91a>
 800bcc8:	9a01      	ldr	r2, [sp, #4]
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d184      	bne.n	800bbd8 <_dtoa_r+0xa78>
 800bcce:	9b00      	ldr	r3, [sp, #0]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	2331      	movs	r3, #49	; 0x31
 800bcd6:	7013      	strb	r3, [r2, #0]
 800bcd8:	e6cf      	b.n	800ba7a <_dtoa_r+0x91a>
 800bcda:	4b0a      	ldr	r3, [pc, #40]	; (800bd04 <_dtoa_r+0xba4>)
 800bcdc:	f7ff ba97 	b.w	800b20e <_dtoa_r+0xae>
 800bce0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	f47f aa7b 	bne.w	800b1de <_dtoa_r+0x7e>
 800bce8:	4b07      	ldr	r3, [pc, #28]	; (800bd08 <_dtoa_r+0xba8>)
 800bcea:	f7ff ba90 	b.w	800b20e <_dtoa_r+0xae>
 800bcee:	9b02      	ldr	r3, [sp, #8]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	dcae      	bgt.n	800bc52 <_dtoa_r+0xaf2>
 800bcf4:	9b06      	ldr	r3, [sp, #24]
 800bcf6:	2b02      	cmp	r3, #2
 800bcf8:	f73f aea9 	bgt.w	800ba4e <_dtoa_r+0x8ee>
 800bcfc:	e7a9      	b.n	800bc52 <_dtoa_r+0xaf2>
 800bcfe:	bf00      	nop
 800bd00:	08010116 	.word	0x08010116
 800bd04:	0800ffbe 	.word	0x0800ffbe
 800bd08:	0801010d 	.word	0x0801010d

0800bd0c <__libc_fini_array>:
 800bd0c:	b538      	push	{r3, r4, r5, lr}
 800bd0e:	4d07      	ldr	r5, [pc, #28]	; (800bd2c <__libc_fini_array+0x20>)
 800bd10:	4c07      	ldr	r4, [pc, #28]	; (800bd30 <__libc_fini_array+0x24>)
 800bd12:	1b64      	subs	r4, r4, r5
 800bd14:	10a4      	asrs	r4, r4, #2
 800bd16:	b91c      	cbnz	r4, 800bd20 <__libc_fini_array+0x14>
 800bd18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd1c:	f003 bf8e 	b.w	800fc3c <_fini>
 800bd20:	3c01      	subs	r4, #1
 800bd22:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800bd26:	4798      	blx	r3
 800bd28:	e7f5      	b.n	800bd16 <__libc_fini_array+0xa>
 800bd2a:	bf00      	nop
 800bd2c:	08010414 	.word	0x08010414
 800bd30:	08010418 	.word	0x08010418

0800bd34 <_malloc_trim_r>:
 800bd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd38:	4606      	mov	r6, r0
 800bd3a:	2008      	movs	r0, #8
 800bd3c:	460c      	mov	r4, r1
 800bd3e:	f7ff f943 	bl	800afc8 <sysconf>
 800bd42:	4f23      	ldr	r7, [pc, #140]	; (800bdd0 <_malloc_trim_r+0x9c>)
 800bd44:	4680      	mov	r8, r0
 800bd46:	4630      	mov	r0, r6
 800bd48:	f7fc fc66 	bl	8008618 <__malloc_lock>
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	685d      	ldr	r5, [r3, #4]
 800bd50:	f025 0503 	bic.w	r5, r5, #3
 800bd54:	1b2c      	subs	r4, r5, r4
 800bd56:	3c11      	subs	r4, #17
 800bd58:	4444      	add	r4, r8
 800bd5a:	fbb4 f4f8 	udiv	r4, r4, r8
 800bd5e:	3c01      	subs	r4, #1
 800bd60:	fb08 f404 	mul.w	r4, r8, r4
 800bd64:	45a0      	cmp	r8, r4
 800bd66:	dd05      	ble.n	800bd74 <_malloc_trim_r+0x40>
 800bd68:	4630      	mov	r0, r6
 800bd6a:	f7fc fc5b 	bl	8008624 <__malloc_unlock>
 800bd6e:	2000      	movs	r0, #0
 800bd70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd74:	2100      	movs	r1, #0
 800bd76:	4630      	mov	r0, r6
 800bd78:	f7fc fc5a 	bl	8008630 <_sbrk_r>
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	442b      	add	r3, r5
 800bd80:	4298      	cmp	r0, r3
 800bd82:	d1f1      	bne.n	800bd68 <_malloc_trim_r+0x34>
 800bd84:	4261      	negs	r1, r4
 800bd86:	4630      	mov	r0, r6
 800bd88:	f7fc fc52 	bl	8008630 <_sbrk_r>
 800bd8c:	3001      	adds	r0, #1
 800bd8e:	d110      	bne.n	800bdb2 <_malloc_trim_r+0x7e>
 800bd90:	2100      	movs	r1, #0
 800bd92:	4630      	mov	r0, r6
 800bd94:	f7fc fc4c 	bl	8008630 <_sbrk_r>
 800bd98:	68ba      	ldr	r2, [r7, #8]
 800bd9a:	1a83      	subs	r3, r0, r2
 800bd9c:	2b0f      	cmp	r3, #15
 800bd9e:	dde3      	ble.n	800bd68 <_malloc_trim_r+0x34>
 800bda0:	490c      	ldr	r1, [pc, #48]	; (800bdd4 <_malloc_trim_r+0xa0>)
 800bda2:	6809      	ldr	r1, [r1, #0]
 800bda4:	1a40      	subs	r0, r0, r1
 800bda6:	490c      	ldr	r1, [pc, #48]	; (800bdd8 <_malloc_trim_r+0xa4>)
 800bda8:	f043 0301 	orr.w	r3, r3, #1
 800bdac:	6008      	str	r0, [r1, #0]
 800bdae:	6053      	str	r3, [r2, #4]
 800bdb0:	e7da      	b.n	800bd68 <_malloc_trim_r+0x34>
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	4a08      	ldr	r2, [pc, #32]	; (800bdd8 <_malloc_trim_r+0xa4>)
 800bdb6:	1b2d      	subs	r5, r5, r4
 800bdb8:	f045 0501 	orr.w	r5, r5, #1
 800bdbc:	605d      	str	r5, [r3, #4]
 800bdbe:	6813      	ldr	r3, [r2, #0]
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	1b1b      	subs	r3, r3, r4
 800bdc4:	6013      	str	r3, [r2, #0]
 800bdc6:	f7fc fc2d 	bl	8008624 <__malloc_unlock>
 800bdca:	2001      	movs	r0, #1
 800bdcc:	e7d0      	b.n	800bd70 <_malloc_trim_r+0x3c>
 800bdce:	bf00      	nop
 800bdd0:	20000440 	.word	0x20000440
 800bdd4:	20000848 	.word	0x20000848
 800bdd8:	20001170 	.word	0x20001170

0800bddc <_free_r>:
 800bddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdde:	4605      	mov	r5, r0
 800bde0:	460f      	mov	r7, r1
 800bde2:	2900      	cmp	r1, #0
 800bde4:	f000 80b1 	beq.w	800bf4a <_free_r+0x16e>
 800bde8:	f7fc fc16 	bl	8008618 <__malloc_lock>
 800bdec:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800bdf0:	4856      	ldr	r0, [pc, #344]	; (800bf4c <_free_r+0x170>)
 800bdf2:	f022 0401 	bic.w	r4, r2, #1
 800bdf6:	f1a7 0308 	sub.w	r3, r7, #8
 800bdfa:	eb03 0c04 	add.w	ip, r3, r4
 800bdfe:	6881      	ldr	r1, [r0, #8]
 800be00:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800be04:	4561      	cmp	r1, ip
 800be06:	f026 0603 	bic.w	r6, r6, #3
 800be0a:	f002 0201 	and.w	r2, r2, #1
 800be0e:	d11b      	bne.n	800be48 <_free_r+0x6c>
 800be10:	4434      	add	r4, r6
 800be12:	b93a      	cbnz	r2, 800be24 <_free_r+0x48>
 800be14:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800be18:	1a9b      	subs	r3, r3, r2
 800be1a:	4414      	add	r4, r2
 800be1c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800be20:	60ca      	str	r2, [r1, #12]
 800be22:	6091      	str	r1, [r2, #8]
 800be24:	f044 0201 	orr.w	r2, r4, #1
 800be28:	605a      	str	r2, [r3, #4]
 800be2a:	6083      	str	r3, [r0, #8]
 800be2c:	4b48      	ldr	r3, [pc, #288]	; (800bf50 <_free_r+0x174>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	42a3      	cmp	r3, r4
 800be32:	d804      	bhi.n	800be3e <_free_r+0x62>
 800be34:	4b47      	ldr	r3, [pc, #284]	; (800bf54 <_free_r+0x178>)
 800be36:	4628      	mov	r0, r5
 800be38:	6819      	ldr	r1, [r3, #0]
 800be3a:	f7ff ff7b 	bl	800bd34 <_malloc_trim_r>
 800be3e:	4628      	mov	r0, r5
 800be40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800be44:	f7fc bbee 	b.w	8008624 <__malloc_unlock>
 800be48:	f8cc 6004 	str.w	r6, [ip, #4]
 800be4c:	2a00      	cmp	r2, #0
 800be4e:	d138      	bne.n	800bec2 <_free_r+0xe6>
 800be50:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800be54:	1a5b      	subs	r3, r3, r1
 800be56:	440c      	add	r4, r1
 800be58:	6899      	ldr	r1, [r3, #8]
 800be5a:	f100 0708 	add.w	r7, r0, #8
 800be5e:	42b9      	cmp	r1, r7
 800be60:	d031      	beq.n	800bec6 <_free_r+0xea>
 800be62:	68df      	ldr	r7, [r3, #12]
 800be64:	60cf      	str	r7, [r1, #12]
 800be66:	60b9      	str	r1, [r7, #8]
 800be68:	eb0c 0106 	add.w	r1, ip, r6
 800be6c:	6849      	ldr	r1, [r1, #4]
 800be6e:	07c9      	lsls	r1, r1, #31
 800be70:	d40b      	bmi.n	800be8a <_free_r+0xae>
 800be72:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800be76:	4434      	add	r4, r6
 800be78:	bb3a      	cbnz	r2, 800beca <_free_r+0xee>
 800be7a:	4e37      	ldr	r6, [pc, #220]	; (800bf58 <_free_r+0x17c>)
 800be7c:	42b1      	cmp	r1, r6
 800be7e:	d124      	bne.n	800beca <_free_r+0xee>
 800be80:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be84:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800be88:	2201      	movs	r2, #1
 800be8a:	f044 0101 	orr.w	r1, r4, #1
 800be8e:	6059      	str	r1, [r3, #4]
 800be90:	511c      	str	r4, [r3, r4]
 800be92:	2a00      	cmp	r2, #0
 800be94:	d1d3      	bne.n	800be3e <_free_r+0x62>
 800be96:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800be9a:	d21b      	bcs.n	800bed4 <_free_r+0xf8>
 800be9c:	0961      	lsrs	r1, r4, #5
 800be9e:	08e2      	lsrs	r2, r4, #3
 800bea0:	2401      	movs	r4, #1
 800bea2:	408c      	lsls	r4, r1
 800bea4:	6841      	ldr	r1, [r0, #4]
 800bea6:	3201      	adds	r2, #1
 800bea8:	430c      	orrs	r4, r1
 800beaa:	6044      	str	r4, [r0, #4]
 800beac:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800beb0:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800beb4:	3908      	subs	r1, #8
 800beb6:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800beba:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800bebe:	60e3      	str	r3, [r4, #12]
 800bec0:	e7bd      	b.n	800be3e <_free_r+0x62>
 800bec2:	2200      	movs	r2, #0
 800bec4:	e7d0      	b.n	800be68 <_free_r+0x8c>
 800bec6:	2201      	movs	r2, #1
 800bec8:	e7ce      	b.n	800be68 <_free_r+0x8c>
 800beca:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800bece:	60ce      	str	r6, [r1, #12]
 800bed0:	60b1      	str	r1, [r6, #8]
 800bed2:	e7da      	b.n	800be8a <_free_r+0xae>
 800bed4:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800bed8:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800bedc:	d214      	bcs.n	800bf08 <_free_r+0x12c>
 800bede:	09a2      	lsrs	r2, r4, #6
 800bee0:	3238      	adds	r2, #56	; 0x38
 800bee2:	1c51      	adds	r1, r2, #1
 800bee4:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800bee8:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800beec:	428e      	cmp	r6, r1
 800beee:	d125      	bne.n	800bf3c <_free_r+0x160>
 800bef0:	2401      	movs	r4, #1
 800bef2:	1092      	asrs	r2, r2, #2
 800bef4:	fa04 f202 	lsl.w	r2, r4, r2
 800bef8:	6844      	ldr	r4, [r0, #4]
 800befa:	4322      	orrs	r2, r4
 800befc:	6042      	str	r2, [r0, #4]
 800befe:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800bf02:	60b3      	str	r3, [r6, #8]
 800bf04:	60cb      	str	r3, [r1, #12]
 800bf06:	e79a      	b.n	800be3e <_free_r+0x62>
 800bf08:	2a14      	cmp	r2, #20
 800bf0a:	d801      	bhi.n	800bf10 <_free_r+0x134>
 800bf0c:	325b      	adds	r2, #91	; 0x5b
 800bf0e:	e7e8      	b.n	800bee2 <_free_r+0x106>
 800bf10:	2a54      	cmp	r2, #84	; 0x54
 800bf12:	d802      	bhi.n	800bf1a <_free_r+0x13e>
 800bf14:	0b22      	lsrs	r2, r4, #12
 800bf16:	326e      	adds	r2, #110	; 0x6e
 800bf18:	e7e3      	b.n	800bee2 <_free_r+0x106>
 800bf1a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800bf1e:	d802      	bhi.n	800bf26 <_free_r+0x14a>
 800bf20:	0be2      	lsrs	r2, r4, #15
 800bf22:	3277      	adds	r2, #119	; 0x77
 800bf24:	e7dd      	b.n	800bee2 <_free_r+0x106>
 800bf26:	f240 5154 	movw	r1, #1364	; 0x554
 800bf2a:	428a      	cmp	r2, r1
 800bf2c:	bf9a      	itte	ls
 800bf2e:	0ca2      	lsrls	r2, r4, #18
 800bf30:	327c      	addls	r2, #124	; 0x7c
 800bf32:	227e      	movhi	r2, #126	; 0x7e
 800bf34:	e7d5      	b.n	800bee2 <_free_r+0x106>
 800bf36:	6889      	ldr	r1, [r1, #8]
 800bf38:	428e      	cmp	r6, r1
 800bf3a:	d004      	beq.n	800bf46 <_free_r+0x16a>
 800bf3c:	684a      	ldr	r2, [r1, #4]
 800bf3e:	f022 0203 	bic.w	r2, r2, #3
 800bf42:	42a2      	cmp	r2, r4
 800bf44:	d8f7      	bhi.n	800bf36 <_free_r+0x15a>
 800bf46:	68ce      	ldr	r6, [r1, #12]
 800bf48:	e7d9      	b.n	800befe <_free_r+0x122>
 800bf4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf4c:	20000440 	.word	0x20000440
 800bf50:	2000084c 	.word	0x2000084c
 800bf54:	200011a0 	.word	0x200011a0
 800bf58:	20000448 	.word	0x20000448

0800bf5c <iswspace>:
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	f000 b801 	b.w	800bf64 <iswspace_l>
	...

0800bf64 <iswspace_l>:
 800bf64:	28ff      	cmp	r0, #255	; 0xff
 800bf66:	bf9d      	ittte	ls
 800bf68:	4b02      	ldrls	r3, [pc, #8]	; (800bf74 <iswspace_l+0x10>)
 800bf6a:	5cc0      	ldrbls	r0, [r0, r3]
 800bf6c:	f000 0008 	andls.w	r0, r0, #8
 800bf70:	2000      	movhi	r0, #0
 800bf72:	4770      	bx	lr
 800bf74:	08010009 	.word	0x08010009

0800bf78 <__locale_mb_cur_max>:
 800bf78:	4b01      	ldr	r3, [pc, #4]	; (800bf80 <__locale_mb_cur_max+0x8>)
 800bf7a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800bf7e:	4770      	bx	lr
 800bf80:	20000854 	.word	0x20000854

0800bf84 <_localeconv_r>:
 800bf84:	4800      	ldr	r0, [pc, #0]	; (800bf88 <_localeconv_r+0x4>)
 800bf86:	4770      	bx	lr
 800bf88:	20000944 	.word	0x20000944

0800bf8c <__retarget_lock_init_recursive>:
 800bf8c:	4770      	bx	lr

0800bf8e <__retarget_lock_close_recursive>:
 800bf8e:	4770      	bx	lr

0800bf90 <__retarget_lock_acquire_recursive>:
 800bf90:	4770      	bx	lr

0800bf92 <__retarget_lock_release_recursive>:
 800bf92:	4770      	bx	lr

0800bf94 <_lseek_r>:
 800bf94:	b538      	push	{r3, r4, r5, lr}
 800bf96:	4d07      	ldr	r5, [pc, #28]	; (800bfb4 <_lseek_r+0x20>)
 800bf98:	4604      	mov	r4, r0
 800bf9a:	4608      	mov	r0, r1
 800bf9c:	4611      	mov	r1, r2
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	602a      	str	r2, [r5, #0]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	f7f7 fd78 	bl	8003a98 <_lseek>
 800bfa8:	1c43      	adds	r3, r0, #1
 800bfaa:	d102      	bne.n	800bfb2 <_lseek_r+0x1e>
 800bfac:	682b      	ldr	r3, [r5, #0]
 800bfae:	b103      	cbz	r3, 800bfb2 <_lseek_r+0x1e>
 800bfb0:	6023      	str	r3, [r4, #0]
 800bfb2:	bd38      	pop	{r3, r4, r5, pc}
 800bfb4:	200011a8 	.word	0x200011a8

0800bfb8 <_mbrtowc_r>:
 800bfb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfba:	4c0a      	ldr	r4, [pc, #40]	; (800bfe4 <_mbrtowc_r+0x2c>)
 800bfbc:	9e08      	ldr	r6, [sp, #32]
 800bfbe:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 800bfc2:	9600      	str	r6, [sp, #0]
 800bfc4:	4605      	mov	r5, r0
 800bfc6:	4614      	mov	r4, r2
 800bfc8:	b912      	cbnz	r2, 800bfd0 <_mbrtowc_r+0x18>
 800bfca:	4a07      	ldr	r2, [pc, #28]	; (800bfe8 <_mbrtowc_r+0x30>)
 800bfcc:	2301      	movs	r3, #1
 800bfce:	4621      	mov	r1, r4
 800bfd0:	47b8      	blx	r7
 800bfd2:	1c43      	adds	r3, r0, #1
 800bfd4:	bf01      	itttt	eq
 800bfd6:	2300      	moveq	r3, #0
 800bfd8:	6033      	streq	r3, [r6, #0]
 800bfda:	238a      	moveq	r3, #138	; 0x8a
 800bfdc:	602b      	streq	r3, [r5, #0]
 800bfde:	b003      	add	sp, #12
 800bfe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	20000854 	.word	0x20000854
 800bfe8:	08010373 	.word	0x08010373

0800bfec <__ascii_mbtowc>:
 800bfec:	b082      	sub	sp, #8
 800bfee:	b901      	cbnz	r1, 800bff2 <__ascii_mbtowc+0x6>
 800bff0:	a901      	add	r1, sp, #4
 800bff2:	b142      	cbz	r2, 800c006 <__ascii_mbtowc+0x1a>
 800bff4:	b14b      	cbz	r3, 800c00a <__ascii_mbtowc+0x1e>
 800bff6:	7813      	ldrb	r3, [r2, #0]
 800bff8:	600b      	str	r3, [r1, #0]
 800bffa:	7812      	ldrb	r2, [r2, #0]
 800bffc:	1e10      	subs	r0, r2, #0
 800bffe:	bf18      	it	ne
 800c000:	2001      	movne	r0, #1
 800c002:	b002      	add	sp, #8
 800c004:	4770      	bx	lr
 800c006:	4610      	mov	r0, r2
 800c008:	e7fb      	b.n	800c002 <__ascii_mbtowc+0x16>
 800c00a:	f06f 0001 	mvn.w	r0, #1
 800c00e:	e7f8      	b.n	800c002 <__ascii_mbtowc+0x16>

0800c010 <memcpy>:
 800c010:	440a      	add	r2, r1
 800c012:	4291      	cmp	r1, r2
 800c014:	f100 33ff 	add.w	r3, r0, #4294967295
 800c018:	d100      	bne.n	800c01c <memcpy+0xc>
 800c01a:	4770      	bx	lr
 800c01c:	b510      	push	{r4, lr}
 800c01e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c022:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c026:	4291      	cmp	r1, r2
 800c028:	d1f9      	bne.n	800c01e <memcpy+0xe>
 800c02a:	bd10      	pop	{r4, pc}

0800c02c <_Balloc>:
 800c02c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800c02e:	b570      	push	{r4, r5, r6, lr}
 800c030:	4605      	mov	r5, r0
 800c032:	460c      	mov	r4, r1
 800c034:	b17b      	cbz	r3, 800c056 <_Balloc+0x2a>
 800c036:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800c038:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c03c:	b9a0      	cbnz	r0, 800c068 <_Balloc+0x3c>
 800c03e:	2101      	movs	r1, #1
 800c040:	fa01 f604 	lsl.w	r6, r1, r4
 800c044:	1d72      	adds	r2, r6, #5
 800c046:	0092      	lsls	r2, r2, #2
 800c048:	4628      	mov	r0, r5
 800c04a:	f002 f82f 	bl	800e0ac <_calloc_r>
 800c04e:	b148      	cbz	r0, 800c064 <_Balloc+0x38>
 800c050:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800c054:	e00b      	b.n	800c06e <_Balloc+0x42>
 800c056:	2221      	movs	r2, #33	; 0x21
 800c058:	2104      	movs	r1, #4
 800c05a:	f002 f827 	bl	800e0ac <_calloc_r>
 800c05e:	64e8      	str	r0, [r5, #76]	; 0x4c
 800c060:	2800      	cmp	r0, #0
 800c062:	d1e8      	bne.n	800c036 <_Balloc+0xa>
 800c064:	2000      	movs	r0, #0
 800c066:	bd70      	pop	{r4, r5, r6, pc}
 800c068:	6802      	ldr	r2, [r0, #0]
 800c06a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800c06e:	2300      	movs	r3, #0
 800c070:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c074:	e7f7      	b.n	800c066 <_Balloc+0x3a>

0800c076 <_Bfree>:
 800c076:	b131      	cbz	r1, 800c086 <_Bfree+0x10>
 800c078:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800c07a:	684a      	ldr	r2, [r1, #4]
 800c07c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c080:	6008      	str	r0, [r1, #0]
 800c082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c086:	4770      	bx	lr

0800c088 <__multadd>:
 800c088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c08c:	690d      	ldr	r5, [r1, #16]
 800c08e:	4607      	mov	r7, r0
 800c090:	460c      	mov	r4, r1
 800c092:	461e      	mov	r6, r3
 800c094:	f101 0c14 	add.w	ip, r1, #20
 800c098:	2000      	movs	r0, #0
 800c09a:	f8dc 3000 	ldr.w	r3, [ip]
 800c09e:	b299      	uxth	r1, r3
 800c0a0:	fb02 6101 	mla	r1, r2, r1, r6
 800c0a4:	0c1e      	lsrs	r6, r3, #16
 800c0a6:	0c0b      	lsrs	r3, r1, #16
 800c0a8:	fb02 3306 	mla	r3, r2, r6, r3
 800c0ac:	b289      	uxth	r1, r1
 800c0ae:	3001      	adds	r0, #1
 800c0b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c0b4:	4285      	cmp	r5, r0
 800c0b6:	f84c 1b04 	str.w	r1, [ip], #4
 800c0ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c0be:	dcec      	bgt.n	800c09a <__multadd+0x12>
 800c0c0:	b30e      	cbz	r6, 800c106 <__multadd+0x7e>
 800c0c2:	68a3      	ldr	r3, [r4, #8]
 800c0c4:	42ab      	cmp	r3, r5
 800c0c6:	dc19      	bgt.n	800c0fc <__multadd+0x74>
 800c0c8:	6861      	ldr	r1, [r4, #4]
 800c0ca:	4638      	mov	r0, r7
 800c0cc:	3101      	adds	r1, #1
 800c0ce:	f7ff ffad 	bl	800c02c <_Balloc>
 800c0d2:	4680      	mov	r8, r0
 800c0d4:	b928      	cbnz	r0, 800c0e2 <__multadd+0x5a>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	4b0c      	ldr	r3, [pc, #48]	; (800c10c <__multadd+0x84>)
 800c0da:	480d      	ldr	r0, [pc, #52]	; (800c110 <__multadd+0x88>)
 800c0dc:	21b5      	movs	r1, #181	; 0xb5
 800c0de:	f001 ffc7 	bl	800e070 <__assert_func>
 800c0e2:	6922      	ldr	r2, [r4, #16]
 800c0e4:	3202      	adds	r2, #2
 800c0e6:	f104 010c 	add.w	r1, r4, #12
 800c0ea:	0092      	lsls	r2, r2, #2
 800c0ec:	300c      	adds	r0, #12
 800c0ee:	f7ff ff8f 	bl	800c010 <memcpy>
 800c0f2:	4621      	mov	r1, r4
 800c0f4:	4638      	mov	r0, r7
 800c0f6:	f7ff ffbe 	bl	800c076 <_Bfree>
 800c0fa:	4644      	mov	r4, r8
 800c0fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c100:	3501      	adds	r5, #1
 800c102:	615e      	str	r6, [r3, #20]
 800c104:	6125      	str	r5, [r4, #16]
 800c106:	4620      	mov	r0, r4
 800c108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c10c:	08010116 	.word	0x08010116
 800c110:	0801018c 	.word	0x0801018c

0800c114 <__s2b>:
 800c114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c118:	460c      	mov	r4, r1
 800c11a:	4615      	mov	r5, r2
 800c11c:	461f      	mov	r7, r3
 800c11e:	2209      	movs	r2, #9
 800c120:	3308      	adds	r3, #8
 800c122:	4606      	mov	r6, r0
 800c124:	fb93 f3f2 	sdiv	r3, r3, r2
 800c128:	2100      	movs	r1, #0
 800c12a:	2201      	movs	r2, #1
 800c12c:	429a      	cmp	r2, r3
 800c12e:	db09      	blt.n	800c144 <__s2b+0x30>
 800c130:	4630      	mov	r0, r6
 800c132:	f7ff ff7b 	bl	800c02c <_Balloc>
 800c136:	b940      	cbnz	r0, 800c14a <__s2b+0x36>
 800c138:	4602      	mov	r2, r0
 800c13a:	4b19      	ldr	r3, [pc, #100]	; (800c1a0 <__s2b+0x8c>)
 800c13c:	4819      	ldr	r0, [pc, #100]	; (800c1a4 <__s2b+0x90>)
 800c13e:	21ce      	movs	r1, #206	; 0xce
 800c140:	f001 ff96 	bl	800e070 <__assert_func>
 800c144:	0052      	lsls	r2, r2, #1
 800c146:	3101      	adds	r1, #1
 800c148:	e7f0      	b.n	800c12c <__s2b+0x18>
 800c14a:	9b08      	ldr	r3, [sp, #32]
 800c14c:	6143      	str	r3, [r0, #20]
 800c14e:	2d09      	cmp	r5, #9
 800c150:	f04f 0301 	mov.w	r3, #1
 800c154:	6103      	str	r3, [r0, #16]
 800c156:	dd16      	ble.n	800c186 <__s2b+0x72>
 800c158:	f104 0909 	add.w	r9, r4, #9
 800c15c:	46c8      	mov	r8, r9
 800c15e:	442c      	add	r4, r5
 800c160:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c164:	4601      	mov	r1, r0
 800c166:	3b30      	subs	r3, #48	; 0x30
 800c168:	220a      	movs	r2, #10
 800c16a:	4630      	mov	r0, r6
 800c16c:	f7ff ff8c 	bl	800c088 <__multadd>
 800c170:	45a0      	cmp	r8, r4
 800c172:	d1f5      	bne.n	800c160 <__s2b+0x4c>
 800c174:	f1a5 0408 	sub.w	r4, r5, #8
 800c178:	444c      	add	r4, r9
 800c17a:	1b2d      	subs	r5, r5, r4
 800c17c:	1963      	adds	r3, r4, r5
 800c17e:	42bb      	cmp	r3, r7
 800c180:	db04      	blt.n	800c18c <__s2b+0x78>
 800c182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c186:	340a      	adds	r4, #10
 800c188:	2509      	movs	r5, #9
 800c18a:	e7f6      	b.n	800c17a <__s2b+0x66>
 800c18c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c190:	4601      	mov	r1, r0
 800c192:	3b30      	subs	r3, #48	; 0x30
 800c194:	220a      	movs	r2, #10
 800c196:	4630      	mov	r0, r6
 800c198:	f7ff ff76 	bl	800c088 <__multadd>
 800c19c:	e7ee      	b.n	800c17c <__s2b+0x68>
 800c19e:	bf00      	nop
 800c1a0:	08010116 	.word	0x08010116
 800c1a4:	0801018c 	.word	0x0801018c

0800c1a8 <__hi0bits>:
 800c1a8:	0c03      	lsrs	r3, r0, #16
 800c1aa:	041b      	lsls	r3, r3, #16
 800c1ac:	b9d3      	cbnz	r3, 800c1e4 <__hi0bits+0x3c>
 800c1ae:	0400      	lsls	r0, r0, #16
 800c1b0:	2310      	movs	r3, #16
 800c1b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c1b6:	bf04      	itt	eq
 800c1b8:	0200      	lsleq	r0, r0, #8
 800c1ba:	3308      	addeq	r3, #8
 800c1bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c1c0:	bf04      	itt	eq
 800c1c2:	0100      	lsleq	r0, r0, #4
 800c1c4:	3304      	addeq	r3, #4
 800c1c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c1ca:	bf04      	itt	eq
 800c1cc:	0080      	lsleq	r0, r0, #2
 800c1ce:	3302      	addeq	r3, #2
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	db05      	blt.n	800c1e0 <__hi0bits+0x38>
 800c1d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c1d8:	f103 0301 	add.w	r3, r3, #1
 800c1dc:	bf08      	it	eq
 800c1de:	2320      	moveq	r3, #32
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	4770      	bx	lr
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	e7e4      	b.n	800c1b2 <__hi0bits+0xa>

0800c1e8 <__lo0bits>:
 800c1e8:	6803      	ldr	r3, [r0, #0]
 800c1ea:	f013 0207 	ands.w	r2, r3, #7
 800c1ee:	4601      	mov	r1, r0
 800c1f0:	d00b      	beq.n	800c20a <__lo0bits+0x22>
 800c1f2:	07da      	lsls	r2, r3, #31
 800c1f4:	d423      	bmi.n	800c23e <__lo0bits+0x56>
 800c1f6:	0798      	lsls	r0, r3, #30
 800c1f8:	bf49      	itett	mi
 800c1fa:	085b      	lsrmi	r3, r3, #1
 800c1fc:	089b      	lsrpl	r3, r3, #2
 800c1fe:	2001      	movmi	r0, #1
 800c200:	600b      	strmi	r3, [r1, #0]
 800c202:	bf5c      	itt	pl
 800c204:	600b      	strpl	r3, [r1, #0]
 800c206:	2002      	movpl	r0, #2
 800c208:	4770      	bx	lr
 800c20a:	b298      	uxth	r0, r3
 800c20c:	b9a8      	cbnz	r0, 800c23a <__lo0bits+0x52>
 800c20e:	0c1b      	lsrs	r3, r3, #16
 800c210:	2010      	movs	r0, #16
 800c212:	b2da      	uxtb	r2, r3
 800c214:	b90a      	cbnz	r2, 800c21a <__lo0bits+0x32>
 800c216:	3008      	adds	r0, #8
 800c218:	0a1b      	lsrs	r3, r3, #8
 800c21a:	071a      	lsls	r2, r3, #28
 800c21c:	bf04      	itt	eq
 800c21e:	091b      	lsreq	r3, r3, #4
 800c220:	3004      	addeq	r0, #4
 800c222:	079a      	lsls	r2, r3, #30
 800c224:	bf04      	itt	eq
 800c226:	089b      	lsreq	r3, r3, #2
 800c228:	3002      	addeq	r0, #2
 800c22a:	07da      	lsls	r2, r3, #31
 800c22c:	d403      	bmi.n	800c236 <__lo0bits+0x4e>
 800c22e:	085b      	lsrs	r3, r3, #1
 800c230:	f100 0001 	add.w	r0, r0, #1
 800c234:	d005      	beq.n	800c242 <__lo0bits+0x5a>
 800c236:	600b      	str	r3, [r1, #0]
 800c238:	4770      	bx	lr
 800c23a:	4610      	mov	r0, r2
 800c23c:	e7e9      	b.n	800c212 <__lo0bits+0x2a>
 800c23e:	2000      	movs	r0, #0
 800c240:	4770      	bx	lr
 800c242:	2020      	movs	r0, #32
 800c244:	4770      	bx	lr
	...

0800c248 <__i2b>:
 800c248:	b510      	push	{r4, lr}
 800c24a:	460c      	mov	r4, r1
 800c24c:	2101      	movs	r1, #1
 800c24e:	f7ff feed 	bl	800c02c <_Balloc>
 800c252:	4602      	mov	r2, r0
 800c254:	b928      	cbnz	r0, 800c262 <__i2b+0x1a>
 800c256:	4b05      	ldr	r3, [pc, #20]	; (800c26c <__i2b+0x24>)
 800c258:	4805      	ldr	r0, [pc, #20]	; (800c270 <__i2b+0x28>)
 800c25a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c25e:	f001 ff07 	bl	800e070 <__assert_func>
 800c262:	2301      	movs	r3, #1
 800c264:	6144      	str	r4, [r0, #20]
 800c266:	6103      	str	r3, [r0, #16]
 800c268:	bd10      	pop	{r4, pc}
 800c26a:	bf00      	nop
 800c26c:	08010116 	.word	0x08010116
 800c270:	0801018c 	.word	0x0801018c

0800c274 <__multiply>:
 800c274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c278:	4691      	mov	r9, r2
 800c27a:	690a      	ldr	r2, [r1, #16]
 800c27c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c280:	429a      	cmp	r2, r3
 800c282:	bfb8      	it	lt
 800c284:	460b      	movlt	r3, r1
 800c286:	460c      	mov	r4, r1
 800c288:	bfbc      	itt	lt
 800c28a:	464c      	movlt	r4, r9
 800c28c:	4699      	movlt	r9, r3
 800c28e:	6927      	ldr	r7, [r4, #16]
 800c290:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c294:	68a3      	ldr	r3, [r4, #8]
 800c296:	6861      	ldr	r1, [r4, #4]
 800c298:	eb07 060a 	add.w	r6, r7, sl
 800c29c:	42b3      	cmp	r3, r6
 800c29e:	b085      	sub	sp, #20
 800c2a0:	bfb8      	it	lt
 800c2a2:	3101      	addlt	r1, #1
 800c2a4:	f7ff fec2 	bl	800c02c <_Balloc>
 800c2a8:	b930      	cbnz	r0, 800c2b8 <__multiply+0x44>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	4b44      	ldr	r3, [pc, #272]	; (800c3c0 <__multiply+0x14c>)
 800c2ae:	4845      	ldr	r0, [pc, #276]	; (800c3c4 <__multiply+0x150>)
 800c2b0:	f240 115d 	movw	r1, #349	; 0x15d
 800c2b4:	f001 fedc 	bl	800e070 <__assert_func>
 800c2b8:	f100 0514 	add.w	r5, r0, #20
 800c2bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c2c0:	462b      	mov	r3, r5
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	4543      	cmp	r3, r8
 800c2c6:	d321      	bcc.n	800c30c <__multiply+0x98>
 800c2c8:	f104 0314 	add.w	r3, r4, #20
 800c2cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c2d0:	f109 0314 	add.w	r3, r9, #20
 800c2d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c2d8:	9202      	str	r2, [sp, #8]
 800c2da:	1b3a      	subs	r2, r7, r4
 800c2dc:	3a15      	subs	r2, #21
 800c2de:	f022 0203 	bic.w	r2, r2, #3
 800c2e2:	3204      	adds	r2, #4
 800c2e4:	f104 0115 	add.w	r1, r4, #21
 800c2e8:	428f      	cmp	r7, r1
 800c2ea:	bf38      	it	cc
 800c2ec:	2204      	movcc	r2, #4
 800c2ee:	9201      	str	r2, [sp, #4]
 800c2f0:	9a02      	ldr	r2, [sp, #8]
 800c2f2:	9303      	str	r3, [sp, #12]
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d80c      	bhi.n	800c312 <__multiply+0x9e>
 800c2f8:	2e00      	cmp	r6, #0
 800c2fa:	dd03      	ble.n	800c304 <__multiply+0x90>
 800c2fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c300:	2b00      	cmp	r3, #0
 800c302:	d05a      	beq.n	800c3ba <__multiply+0x146>
 800c304:	6106      	str	r6, [r0, #16]
 800c306:	b005      	add	sp, #20
 800c308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c30c:	f843 2b04 	str.w	r2, [r3], #4
 800c310:	e7d8      	b.n	800c2c4 <__multiply+0x50>
 800c312:	f8b3 a000 	ldrh.w	sl, [r3]
 800c316:	f1ba 0f00 	cmp.w	sl, #0
 800c31a:	d024      	beq.n	800c366 <__multiply+0xf2>
 800c31c:	f104 0e14 	add.w	lr, r4, #20
 800c320:	46a9      	mov	r9, r5
 800c322:	f04f 0c00 	mov.w	ip, #0
 800c326:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c32a:	f8d9 1000 	ldr.w	r1, [r9]
 800c32e:	fa1f fb82 	uxth.w	fp, r2
 800c332:	b289      	uxth	r1, r1
 800c334:	fb0a 110b 	mla	r1, sl, fp, r1
 800c338:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c33c:	f8d9 2000 	ldr.w	r2, [r9]
 800c340:	4461      	add	r1, ip
 800c342:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c346:	fb0a c20b 	mla	r2, sl, fp, ip
 800c34a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c34e:	b289      	uxth	r1, r1
 800c350:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c354:	4577      	cmp	r7, lr
 800c356:	f849 1b04 	str.w	r1, [r9], #4
 800c35a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c35e:	d8e2      	bhi.n	800c326 <__multiply+0xb2>
 800c360:	9a01      	ldr	r2, [sp, #4]
 800c362:	f845 c002 	str.w	ip, [r5, r2]
 800c366:	9a03      	ldr	r2, [sp, #12]
 800c368:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c36c:	3304      	adds	r3, #4
 800c36e:	f1b9 0f00 	cmp.w	r9, #0
 800c372:	d020      	beq.n	800c3b6 <__multiply+0x142>
 800c374:	6829      	ldr	r1, [r5, #0]
 800c376:	f104 0c14 	add.w	ip, r4, #20
 800c37a:	46ae      	mov	lr, r5
 800c37c:	f04f 0a00 	mov.w	sl, #0
 800c380:	f8bc b000 	ldrh.w	fp, [ip]
 800c384:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c388:	fb09 220b 	mla	r2, r9, fp, r2
 800c38c:	4492      	add	sl, r2
 800c38e:	b289      	uxth	r1, r1
 800c390:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c394:	f84e 1b04 	str.w	r1, [lr], #4
 800c398:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c39c:	f8be 1000 	ldrh.w	r1, [lr]
 800c3a0:	0c12      	lsrs	r2, r2, #16
 800c3a2:	fb09 1102 	mla	r1, r9, r2, r1
 800c3a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c3aa:	4567      	cmp	r7, ip
 800c3ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c3b0:	d8e6      	bhi.n	800c380 <__multiply+0x10c>
 800c3b2:	9a01      	ldr	r2, [sp, #4]
 800c3b4:	50a9      	str	r1, [r5, r2]
 800c3b6:	3504      	adds	r5, #4
 800c3b8:	e79a      	b.n	800c2f0 <__multiply+0x7c>
 800c3ba:	3e01      	subs	r6, #1
 800c3bc:	e79c      	b.n	800c2f8 <__multiply+0x84>
 800c3be:	bf00      	nop
 800c3c0:	08010116 	.word	0x08010116
 800c3c4:	0801018c 	.word	0x0801018c

0800c3c8 <__pow5mult>:
 800c3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3cc:	4615      	mov	r5, r2
 800c3ce:	f012 0203 	ands.w	r2, r2, #3
 800c3d2:	4606      	mov	r6, r0
 800c3d4:	460f      	mov	r7, r1
 800c3d6:	d007      	beq.n	800c3e8 <__pow5mult+0x20>
 800c3d8:	4c1a      	ldr	r4, [pc, #104]	; (800c444 <__pow5mult+0x7c>)
 800c3da:	3a01      	subs	r2, #1
 800c3dc:	2300      	movs	r3, #0
 800c3de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c3e2:	f7ff fe51 	bl	800c088 <__multadd>
 800c3e6:	4607      	mov	r7, r0
 800c3e8:	10ad      	asrs	r5, r5, #2
 800c3ea:	d027      	beq.n	800c43c <__pow5mult+0x74>
 800c3ec:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800c3ee:	b944      	cbnz	r4, 800c402 <__pow5mult+0x3a>
 800c3f0:	f240 2171 	movw	r1, #625	; 0x271
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	f7ff ff27 	bl	800c248 <__i2b>
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	64b0      	str	r0, [r6, #72]	; 0x48
 800c3fe:	4604      	mov	r4, r0
 800c400:	6003      	str	r3, [r0, #0]
 800c402:	f04f 0900 	mov.w	r9, #0
 800c406:	07eb      	lsls	r3, r5, #31
 800c408:	d50a      	bpl.n	800c420 <__pow5mult+0x58>
 800c40a:	4639      	mov	r1, r7
 800c40c:	4622      	mov	r2, r4
 800c40e:	4630      	mov	r0, r6
 800c410:	f7ff ff30 	bl	800c274 <__multiply>
 800c414:	4639      	mov	r1, r7
 800c416:	4680      	mov	r8, r0
 800c418:	4630      	mov	r0, r6
 800c41a:	f7ff fe2c 	bl	800c076 <_Bfree>
 800c41e:	4647      	mov	r7, r8
 800c420:	106d      	asrs	r5, r5, #1
 800c422:	d00b      	beq.n	800c43c <__pow5mult+0x74>
 800c424:	6820      	ldr	r0, [r4, #0]
 800c426:	b938      	cbnz	r0, 800c438 <__pow5mult+0x70>
 800c428:	4622      	mov	r2, r4
 800c42a:	4621      	mov	r1, r4
 800c42c:	4630      	mov	r0, r6
 800c42e:	f7ff ff21 	bl	800c274 <__multiply>
 800c432:	6020      	str	r0, [r4, #0]
 800c434:	f8c0 9000 	str.w	r9, [r0]
 800c438:	4604      	mov	r4, r0
 800c43a:	e7e4      	b.n	800c406 <__pow5mult+0x3e>
 800c43c:	4638      	mov	r0, r7
 800c43e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c442:	bf00      	nop
 800c444:	080102d8 	.word	0x080102d8

0800c448 <__lshift>:
 800c448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c44c:	460c      	mov	r4, r1
 800c44e:	6849      	ldr	r1, [r1, #4]
 800c450:	6923      	ldr	r3, [r4, #16]
 800c452:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c456:	68a3      	ldr	r3, [r4, #8]
 800c458:	4607      	mov	r7, r0
 800c45a:	4691      	mov	r9, r2
 800c45c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c460:	f108 0601 	add.w	r6, r8, #1
 800c464:	42b3      	cmp	r3, r6
 800c466:	db0b      	blt.n	800c480 <__lshift+0x38>
 800c468:	4638      	mov	r0, r7
 800c46a:	f7ff fddf 	bl	800c02c <_Balloc>
 800c46e:	4605      	mov	r5, r0
 800c470:	b948      	cbnz	r0, 800c486 <__lshift+0x3e>
 800c472:	4602      	mov	r2, r0
 800c474:	4b2a      	ldr	r3, [pc, #168]	; (800c520 <__lshift+0xd8>)
 800c476:	482b      	ldr	r0, [pc, #172]	; (800c524 <__lshift+0xdc>)
 800c478:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c47c:	f001 fdf8 	bl	800e070 <__assert_func>
 800c480:	3101      	adds	r1, #1
 800c482:	005b      	lsls	r3, r3, #1
 800c484:	e7ee      	b.n	800c464 <__lshift+0x1c>
 800c486:	2300      	movs	r3, #0
 800c488:	f100 0114 	add.w	r1, r0, #20
 800c48c:	f100 0210 	add.w	r2, r0, #16
 800c490:	4618      	mov	r0, r3
 800c492:	4553      	cmp	r3, sl
 800c494:	db37      	blt.n	800c506 <__lshift+0xbe>
 800c496:	6920      	ldr	r0, [r4, #16]
 800c498:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c49c:	f104 0314 	add.w	r3, r4, #20
 800c4a0:	f019 091f 	ands.w	r9, r9, #31
 800c4a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c4a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c4ac:	d02f      	beq.n	800c50e <__lshift+0xc6>
 800c4ae:	f1c9 0e20 	rsb	lr, r9, #32
 800c4b2:	468a      	mov	sl, r1
 800c4b4:	f04f 0c00 	mov.w	ip, #0
 800c4b8:	681a      	ldr	r2, [r3, #0]
 800c4ba:	fa02 f209 	lsl.w	r2, r2, r9
 800c4be:	ea42 020c 	orr.w	r2, r2, ip
 800c4c2:	f84a 2b04 	str.w	r2, [sl], #4
 800c4c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4ca:	4298      	cmp	r0, r3
 800c4cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c4d0:	d8f2      	bhi.n	800c4b8 <__lshift+0x70>
 800c4d2:	1b03      	subs	r3, r0, r4
 800c4d4:	3b15      	subs	r3, #21
 800c4d6:	f023 0303 	bic.w	r3, r3, #3
 800c4da:	3304      	adds	r3, #4
 800c4dc:	f104 0215 	add.w	r2, r4, #21
 800c4e0:	4290      	cmp	r0, r2
 800c4e2:	bf38      	it	cc
 800c4e4:	2304      	movcc	r3, #4
 800c4e6:	f841 c003 	str.w	ip, [r1, r3]
 800c4ea:	f1bc 0f00 	cmp.w	ip, #0
 800c4ee:	d001      	beq.n	800c4f4 <__lshift+0xac>
 800c4f0:	f108 0602 	add.w	r6, r8, #2
 800c4f4:	3e01      	subs	r6, #1
 800c4f6:	4638      	mov	r0, r7
 800c4f8:	612e      	str	r6, [r5, #16]
 800c4fa:	4621      	mov	r1, r4
 800c4fc:	f7ff fdbb 	bl	800c076 <_Bfree>
 800c500:	4628      	mov	r0, r5
 800c502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c506:	f842 0f04 	str.w	r0, [r2, #4]!
 800c50a:	3301      	adds	r3, #1
 800c50c:	e7c1      	b.n	800c492 <__lshift+0x4a>
 800c50e:	3904      	subs	r1, #4
 800c510:	f853 2b04 	ldr.w	r2, [r3], #4
 800c514:	f841 2f04 	str.w	r2, [r1, #4]!
 800c518:	4298      	cmp	r0, r3
 800c51a:	d8f9      	bhi.n	800c510 <__lshift+0xc8>
 800c51c:	e7ea      	b.n	800c4f4 <__lshift+0xac>
 800c51e:	bf00      	nop
 800c520:	08010116 	.word	0x08010116
 800c524:	0801018c 	.word	0x0801018c

0800c528 <__mcmp>:
 800c528:	b530      	push	{r4, r5, lr}
 800c52a:	6902      	ldr	r2, [r0, #16]
 800c52c:	690c      	ldr	r4, [r1, #16]
 800c52e:	1b12      	subs	r2, r2, r4
 800c530:	d10e      	bne.n	800c550 <__mcmp+0x28>
 800c532:	f100 0314 	add.w	r3, r0, #20
 800c536:	3114      	adds	r1, #20
 800c538:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c53c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c540:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c544:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c548:	42a5      	cmp	r5, r4
 800c54a:	d003      	beq.n	800c554 <__mcmp+0x2c>
 800c54c:	d305      	bcc.n	800c55a <__mcmp+0x32>
 800c54e:	2201      	movs	r2, #1
 800c550:	4610      	mov	r0, r2
 800c552:	bd30      	pop	{r4, r5, pc}
 800c554:	4283      	cmp	r3, r0
 800c556:	d3f3      	bcc.n	800c540 <__mcmp+0x18>
 800c558:	e7fa      	b.n	800c550 <__mcmp+0x28>
 800c55a:	f04f 32ff 	mov.w	r2, #4294967295
 800c55e:	e7f7      	b.n	800c550 <__mcmp+0x28>

0800c560 <__mdiff>:
 800c560:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c564:	460c      	mov	r4, r1
 800c566:	4606      	mov	r6, r0
 800c568:	4611      	mov	r1, r2
 800c56a:	4620      	mov	r0, r4
 800c56c:	4690      	mov	r8, r2
 800c56e:	f7ff ffdb 	bl	800c528 <__mcmp>
 800c572:	1e05      	subs	r5, r0, #0
 800c574:	d110      	bne.n	800c598 <__mdiff+0x38>
 800c576:	4629      	mov	r1, r5
 800c578:	4630      	mov	r0, r6
 800c57a:	f7ff fd57 	bl	800c02c <_Balloc>
 800c57e:	b930      	cbnz	r0, 800c58e <__mdiff+0x2e>
 800c580:	4b3a      	ldr	r3, [pc, #232]	; (800c66c <__mdiff+0x10c>)
 800c582:	4602      	mov	r2, r0
 800c584:	f240 2132 	movw	r1, #562	; 0x232
 800c588:	4839      	ldr	r0, [pc, #228]	; (800c670 <__mdiff+0x110>)
 800c58a:	f001 fd71 	bl	800e070 <__assert_func>
 800c58e:	2301      	movs	r3, #1
 800c590:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c594:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c598:	bfa4      	itt	ge
 800c59a:	4643      	movge	r3, r8
 800c59c:	46a0      	movge	r8, r4
 800c59e:	4630      	mov	r0, r6
 800c5a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c5a4:	bfa6      	itte	ge
 800c5a6:	461c      	movge	r4, r3
 800c5a8:	2500      	movge	r5, #0
 800c5aa:	2501      	movlt	r5, #1
 800c5ac:	f7ff fd3e 	bl	800c02c <_Balloc>
 800c5b0:	b920      	cbnz	r0, 800c5bc <__mdiff+0x5c>
 800c5b2:	4b2e      	ldr	r3, [pc, #184]	; (800c66c <__mdiff+0x10c>)
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c5ba:	e7e5      	b.n	800c588 <__mdiff+0x28>
 800c5bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c5c0:	6926      	ldr	r6, [r4, #16]
 800c5c2:	60c5      	str	r5, [r0, #12]
 800c5c4:	f104 0914 	add.w	r9, r4, #20
 800c5c8:	f108 0514 	add.w	r5, r8, #20
 800c5cc:	f100 0e14 	add.w	lr, r0, #20
 800c5d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c5d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c5d8:	f108 0210 	add.w	r2, r8, #16
 800c5dc:	46f2      	mov	sl, lr
 800c5de:	2100      	movs	r1, #0
 800c5e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800c5e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c5e8:	fa1f f883 	uxth.w	r8, r3
 800c5ec:	fa11 f18b 	uxtah	r1, r1, fp
 800c5f0:	0c1b      	lsrs	r3, r3, #16
 800c5f2:	eba1 0808 	sub.w	r8, r1, r8
 800c5f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c5fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c5fe:	fa1f f888 	uxth.w	r8, r8
 800c602:	1419      	asrs	r1, r3, #16
 800c604:	454e      	cmp	r6, r9
 800c606:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c60a:	f84a 3b04 	str.w	r3, [sl], #4
 800c60e:	d8e7      	bhi.n	800c5e0 <__mdiff+0x80>
 800c610:	1b33      	subs	r3, r6, r4
 800c612:	3b15      	subs	r3, #21
 800c614:	f023 0303 	bic.w	r3, r3, #3
 800c618:	3304      	adds	r3, #4
 800c61a:	3415      	adds	r4, #21
 800c61c:	42a6      	cmp	r6, r4
 800c61e:	bf38      	it	cc
 800c620:	2304      	movcc	r3, #4
 800c622:	441d      	add	r5, r3
 800c624:	4473      	add	r3, lr
 800c626:	469e      	mov	lr, r3
 800c628:	462e      	mov	r6, r5
 800c62a:	4566      	cmp	r6, ip
 800c62c:	d30e      	bcc.n	800c64c <__mdiff+0xec>
 800c62e:	f10c 0203 	add.w	r2, ip, #3
 800c632:	1b52      	subs	r2, r2, r5
 800c634:	f022 0203 	bic.w	r2, r2, #3
 800c638:	3d03      	subs	r5, #3
 800c63a:	45ac      	cmp	ip, r5
 800c63c:	bf38      	it	cc
 800c63e:	2200      	movcc	r2, #0
 800c640:	441a      	add	r2, r3
 800c642:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c646:	b17b      	cbz	r3, 800c668 <__mdiff+0x108>
 800c648:	6107      	str	r7, [r0, #16]
 800c64a:	e7a3      	b.n	800c594 <__mdiff+0x34>
 800c64c:	f856 8b04 	ldr.w	r8, [r6], #4
 800c650:	fa11 f288 	uxtah	r2, r1, r8
 800c654:	1414      	asrs	r4, r2, #16
 800c656:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c65a:	b292      	uxth	r2, r2
 800c65c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c660:	f84e 2b04 	str.w	r2, [lr], #4
 800c664:	1421      	asrs	r1, r4, #16
 800c666:	e7e0      	b.n	800c62a <__mdiff+0xca>
 800c668:	3f01      	subs	r7, #1
 800c66a:	e7ea      	b.n	800c642 <__mdiff+0xe2>
 800c66c:	08010116 	.word	0x08010116
 800c670:	0801018c 	.word	0x0801018c

0800c674 <__ulp>:
 800c674:	b082      	sub	sp, #8
 800c676:	ed8d 0b00 	vstr	d0, [sp]
 800c67a:	9b01      	ldr	r3, [sp, #4]
 800c67c:	4912      	ldr	r1, [pc, #72]	; (800c6c8 <__ulp+0x54>)
 800c67e:	4019      	ands	r1, r3
 800c680:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c684:	2900      	cmp	r1, #0
 800c686:	dd05      	ble.n	800c694 <__ulp+0x20>
 800c688:	2200      	movs	r2, #0
 800c68a:	460b      	mov	r3, r1
 800c68c:	ec43 2b10 	vmov	d0, r2, r3
 800c690:	b002      	add	sp, #8
 800c692:	4770      	bx	lr
 800c694:	4249      	negs	r1, r1
 800c696:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c69a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c69e:	f04f 0200 	mov.w	r2, #0
 800c6a2:	f04f 0300 	mov.w	r3, #0
 800c6a6:	da04      	bge.n	800c6b2 <__ulp+0x3e>
 800c6a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c6ac:	fa41 f300 	asr.w	r3, r1, r0
 800c6b0:	e7ec      	b.n	800c68c <__ulp+0x18>
 800c6b2:	f1a0 0114 	sub.w	r1, r0, #20
 800c6b6:	291e      	cmp	r1, #30
 800c6b8:	bfda      	itte	le
 800c6ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c6be:	fa20 f101 	lsrle.w	r1, r0, r1
 800c6c2:	2101      	movgt	r1, #1
 800c6c4:	460a      	mov	r2, r1
 800c6c6:	e7e1      	b.n	800c68c <__ulp+0x18>
 800c6c8:	7ff00000 	.word	0x7ff00000

0800c6cc <__b2d>:
 800c6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ce:	6905      	ldr	r5, [r0, #16]
 800c6d0:	f100 0714 	add.w	r7, r0, #20
 800c6d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c6d8:	1f2e      	subs	r6, r5, #4
 800c6da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c6de:	4620      	mov	r0, r4
 800c6e0:	f7ff fd62 	bl	800c1a8 <__hi0bits>
 800c6e4:	f1c0 0320 	rsb	r3, r0, #32
 800c6e8:	280a      	cmp	r0, #10
 800c6ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c768 <__b2d+0x9c>
 800c6ee:	600b      	str	r3, [r1, #0]
 800c6f0:	dc14      	bgt.n	800c71c <__b2d+0x50>
 800c6f2:	f1c0 0e0b 	rsb	lr, r0, #11
 800c6f6:	fa24 f10e 	lsr.w	r1, r4, lr
 800c6fa:	42b7      	cmp	r7, r6
 800c6fc:	ea41 030c 	orr.w	r3, r1, ip
 800c700:	bf34      	ite	cc
 800c702:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c706:	2100      	movcs	r1, #0
 800c708:	3015      	adds	r0, #21
 800c70a:	fa04 f000 	lsl.w	r0, r4, r0
 800c70e:	fa21 f10e 	lsr.w	r1, r1, lr
 800c712:	ea40 0201 	orr.w	r2, r0, r1
 800c716:	ec43 2b10 	vmov	d0, r2, r3
 800c71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c71c:	42b7      	cmp	r7, r6
 800c71e:	bf3a      	itte	cc
 800c720:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c724:	f1a5 0608 	subcc.w	r6, r5, #8
 800c728:	2100      	movcs	r1, #0
 800c72a:	380b      	subs	r0, #11
 800c72c:	d017      	beq.n	800c75e <__b2d+0x92>
 800c72e:	f1c0 0c20 	rsb	ip, r0, #32
 800c732:	fa04 f500 	lsl.w	r5, r4, r0
 800c736:	42be      	cmp	r6, r7
 800c738:	fa21 f40c 	lsr.w	r4, r1, ip
 800c73c:	ea45 0504 	orr.w	r5, r5, r4
 800c740:	bf8c      	ite	hi
 800c742:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c746:	2400      	movls	r4, #0
 800c748:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c74c:	fa01 f000 	lsl.w	r0, r1, r0
 800c750:	fa24 f40c 	lsr.w	r4, r4, ip
 800c754:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c758:	ea40 0204 	orr.w	r2, r0, r4
 800c75c:	e7db      	b.n	800c716 <__b2d+0x4a>
 800c75e:	ea44 030c 	orr.w	r3, r4, ip
 800c762:	460a      	mov	r2, r1
 800c764:	e7d7      	b.n	800c716 <__b2d+0x4a>
 800c766:	bf00      	nop
 800c768:	3ff00000 	.word	0x3ff00000

0800c76c <__d2b>:
 800c76c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c770:	4689      	mov	r9, r1
 800c772:	2101      	movs	r1, #1
 800c774:	ec57 6b10 	vmov	r6, r7, d0
 800c778:	4690      	mov	r8, r2
 800c77a:	f7ff fc57 	bl	800c02c <_Balloc>
 800c77e:	4604      	mov	r4, r0
 800c780:	b930      	cbnz	r0, 800c790 <__d2b+0x24>
 800c782:	4602      	mov	r2, r0
 800c784:	4b25      	ldr	r3, [pc, #148]	; (800c81c <__d2b+0xb0>)
 800c786:	4826      	ldr	r0, [pc, #152]	; (800c820 <__d2b+0xb4>)
 800c788:	f240 310a 	movw	r1, #778	; 0x30a
 800c78c:	f001 fc70 	bl	800e070 <__assert_func>
 800c790:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c794:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c798:	bb35      	cbnz	r5, 800c7e8 <__d2b+0x7c>
 800c79a:	2e00      	cmp	r6, #0
 800c79c:	9301      	str	r3, [sp, #4]
 800c79e:	d028      	beq.n	800c7f2 <__d2b+0x86>
 800c7a0:	4668      	mov	r0, sp
 800c7a2:	9600      	str	r6, [sp, #0]
 800c7a4:	f7ff fd20 	bl	800c1e8 <__lo0bits>
 800c7a8:	9900      	ldr	r1, [sp, #0]
 800c7aa:	b300      	cbz	r0, 800c7ee <__d2b+0x82>
 800c7ac:	9a01      	ldr	r2, [sp, #4]
 800c7ae:	f1c0 0320 	rsb	r3, r0, #32
 800c7b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c7b6:	430b      	orrs	r3, r1
 800c7b8:	40c2      	lsrs	r2, r0
 800c7ba:	6163      	str	r3, [r4, #20]
 800c7bc:	9201      	str	r2, [sp, #4]
 800c7be:	9b01      	ldr	r3, [sp, #4]
 800c7c0:	61a3      	str	r3, [r4, #24]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	bf14      	ite	ne
 800c7c6:	2202      	movne	r2, #2
 800c7c8:	2201      	moveq	r2, #1
 800c7ca:	6122      	str	r2, [r4, #16]
 800c7cc:	b1d5      	cbz	r5, 800c804 <__d2b+0x98>
 800c7ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c7d2:	4405      	add	r5, r0
 800c7d4:	f8c9 5000 	str.w	r5, [r9]
 800c7d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c7dc:	f8c8 0000 	str.w	r0, [r8]
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	b003      	add	sp, #12
 800c7e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c7ec:	e7d5      	b.n	800c79a <__d2b+0x2e>
 800c7ee:	6161      	str	r1, [r4, #20]
 800c7f0:	e7e5      	b.n	800c7be <__d2b+0x52>
 800c7f2:	a801      	add	r0, sp, #4
 800c7f4:	f7ff fcf8 	bl	800c1e8 <__lo0bits>
 800c7f8:	9b01      	ldr	r3, [sp, #4]
 800c7fa:	6163      	str	r3, [r4, #20]
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	6122      	str	r2, [r4, #16]
 800c800:	3020      	adds	r0, #32
 800c802:	e7e3      	b.n	800c7cc <__d2b+0x60>
 800c804:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c808:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c80c:	f8c9 0000 	str.w	r0, [r9]
 800c810:	6918      	ldr	r0, [r3, #16]
 800c812:	f7ff fcc9 	bl	800c1a8 <__hi0bits>
 800c816:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c81a:	e7df      	b.n	800c7dc <__d2b+0x70>
 800c81c:	08010116 	.word	0x08010116
 800c820:	0801018c 	.word	0x0801018c

0800c824 <__ratio>:
 800c824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c828:	4688      	mov	r8, r1
 800c82a:	4669      	mov	r1, sp
 800c82c:	4681      	mov	r9, r0
 800c82e:	f7ff ff4d 	bl	800c6cc <__b2d>
 800c832:	a901      	add	r1, sp, #4
 800c834:	4640      	mov	r0, r8
 800c836:	ec55 4b10 	vmov	r4, r5, d0
 800c83a:	f7ff ff47 	bl	800c6cc <__b2d>
 800c83e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c842:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c846:	eba3 0c02 	sub.w	ip, r3, r2
 800c84a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c84e:	1a9b      	subs	r3, r3, r2
 800c850:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c854:	ec51 0b10 	vmov	r0, r1, d0
 800c858:	2b00      	cmp	r3, #0
 800c85a:	bfd6      	itet	le
 800c85c:	460a      	movle	r2, r1
 800c85e:	462a      	movgt	r2, r5
 800c860:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c864:	468b      	mov	fp, r1
 800c866:	462f      	mov	r7, r5
 800c868:	bfd4      	ite	le
 800c86a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c86e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c872:	4620      	mov	r0, r4
 800c874:	ee10 2a10 	vmov	r2, s0
 800c878:	465b      	mov	r3, fp
 800c87a:	4639      	mov	r1, r7
 800c87c:	f7f3 ffee 	bl	800085c <__aeabi_ddiv>
 800c880:	ec41 0b10 	vmov	d0, r0, r1
 800c884:	b003      	add	sp, #12
 800c886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c88a <__copybits>:
 800c88a:	3901      	subs	r1, #1
 800c88c:	b570      	push	{r4, r5, r6, lr}
 800c88e:	1149      	asrs	r1, r1, #5
 800c890:	6914      	ldr	r4, [r2, #16]
 800c892:	3101      	adds	r1, #1
 800c894:	f102 0314 	add.w	r3, r2, #20
 800c898:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c89c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c8a0:	1f05      	subs	r5, r0, #4
 800c8a2:	42a3      	cmp	r3, r4
 800c8a4:	d30c      	bcc.n	800c8c0 <__copybits+0x36>
 800c8a6:	1aa3      	subs	r3, r4, r2
 800c8a8:	3b11      	subs	r3, #17
 800c8aa:	f023 0303 	bic.w	r3, r3, #3
 800c8ae:	3211      	adds	r2, #17
 800c8b0:	42a2      	cmp	r2, r4
 800c8b2:	bf88      	it	hi
 800c8b4:	2300      	movhi	r3, #0
 800c8b6:	4418      	add	r0, r3
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	4288      	cmp	r0, r1
 800c8bc:	d305      	bcc.n	800c8ca <__copybits+0x40>
 800c8be:	bd70      	pop	{r4, r5, r6, pc}
 800c8c0:	f853 6b04 	ldr.w	r6, [r3], #4
 800c8c4:	f845 6f04 	str.w	r6, [r5, #4]!
 800c8c8:	e7eb      	b.n	800c8a2 <__copybits+0x18>
 800c8ca:	f840 3b04 	str.w	r3, [r0], #4
 800c8ce:	e7f4      	b.n	800c8ba <__copybits+0x30>

0800c8d0 <__any_on>:
 800c8d0:	f100 0214 	add.w	r2, r0, #20
 800c8d4:	6900      	ldr	r0, [r0, #16]
 800c8d6:	114b      	asrs	r3, r1, #5
 800c8d8:	4298      	cmp	r0, r3
 800c8da:	b510      	push	{r4, lr}
 800c8dc:	db11      	blt.n	800c902 <__any_on+0x32>
 800c8de:	dd0a      	ble.n	800c8f6 <__any_on+0x26>
 800c8e0:	f011 011f 	ands.w	r1, r1, #31
 800c8e4:	d007      	beq.n	800c8f6 <__any_on+0x26>
 800c8e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c8ea:	fa24 f001 	lsr.w	r0, r4, r1
 800c8ee:	fa00 f101 	lsl.w	r1, r0, r1
 800c8f2:	428c      	cmp	r4, r1
 800c8f4:	d10b      	bne.n	800c90e <__any_on+0x3e>
 800c8f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d803      	bhi.n	800c906 <__any_on+0x36>
 800c8fe:	2000      	movs	r0, #0
 800c900:	bd10      	pop	{r4, pc}
 800c902:	4603      	mov	r3, r0
 800c904:	e7f7      	b.n	800c8f6 <__any_on+0x26>
 800c906:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c90a:	2900      	cmp	r1, #0
 800c90c:	d0f5      	beq.n	800c8fa <__any_on+0x2a>
 800c90e:	2001      	movs	r0, #1
 800c910:	e7f6      	b.n	800c900 <__any_on+0x30>
	...

0800c914 <_read_r>:
 800c914:	b538      	push	{r3, r4, r5, lr}
 800c916:	4d07      	ldr	r5, [pc, #28]	; (800c934 <_read_r+0x20>)
 800c918:	4604      	mov	r4, r0
 800c91a:	4608      	mov	r0, r1
 800c91c:	4611      	mov	r1, r2
 800c91e:	2200      	movs	r2, #0
 800c920:	602a      	str	r2, [r5, #0]
 800c922:	461a      	mov	r2, r3
 800c924:	f7f7 f858 	bl	80039d8 <_read>
 800c928:	1c43      	adds	r3, r0, #1
 800c92a:	d102      	bne.n	800c932 <_read_r+0x1e>
 800c92c:	682b      	ldr	r3, [r5, #0]
 800c92e:	b103      	cbz	r3, 800c932 <_read_r+0x1e>
 800c930:	6023      	str	r3, [r4, #0]
 800c932:	bd38      	pop	{r3, r4, r5, pc}
 800c934:	200011a8 	.word	0x200011a8

0800c938 <realloc>:
 800c938:	4b02      	ldr	r3, [pc, #8]	; (800c944 <realloc+0xc>)
 800c93a:	460a      	mov	r2, r1
 800c93c:	4601      	mov	r1, r0
 800c93e:	6818      	ldr	r0, [r3, #0]
 800c940:	f000 b802 	b.w	800c948 <_realloc_r>
 800c944:	20000010 	.word	0x20000010

0800c948 <_realloc_r>:
 800c948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c94c:	4681      	mov	r9, r0
 800c94e:	460c      	mov	r4, r1
 800c950:	b929      	cbnz	r1, 800c95e <_realloc_r+0x16>
 800c952:	4611      	mov	r1, r2
 800c954:	b003      	add	sp, #12
 800c956:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c95a:	f7fb bc19 	b.w	8008190 <_malloc_r>
 800c95e:	9201      	str	r2, [sp, #4]
 800c960:	f7fb fe5a 	bl	8008618 <__malloc_lock>
 800c964:	9a01      	ldr	r2, [sp, #4]
 800c966:	f102 080b 	add.w	r8, r2, #11
 800c96a:	f1b8 0f16 	cmp.w	r8, #22
 800c96e:	d90b      	bls.n	800c988 <_realloc_r+0x40>
 800c970:	f038 0807 	bics.w	r8, r8, #7
 800c974:	d50a      	bpl.n	800c98c <_realloc_r+0x44>
 800c976:	230c      	movs	r3, #12
 800c978:	f8c9 3000 	str.w	r3, [r9]
 800c97c:	f04f 0b00 	mov.w	fp, #0
 800c980:	4658      	mov	r0, fp
 800c982:	b003      	add	sp, #12
 800c984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c988:	f04f 0810 	mov.w	r8, #16
 800c98c:	4590      	cmp	r8, r2
 800c98e:	d3f2      	bcc.n	800c976 <_realloc_r+0x2e>
 800c990:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800c994:	f025 0603 	bic.w	r6, r5, #3
 800c998:	45b0      	cmp	r8, r6
 800c99a:	f1a4 0a08 	sub.w	sl, r4, #8
 800c99e:	f340 816e 	ble.w	800cc7e <_realloc_r+0x336>
 800c9a2:	499b      	ldr	r1, [pc, #620]	; (800cc10 <_realloc_r+0x2c8>)
 800c9a4:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800c9a8:	eb0a 0306 	add.w	r3, sl, r6
 800c9ac:	459c      	cmp	ip, r3
 800c9ae:	6859      	ldr	r1, [r3, #4]
 800c9b0:	d005      	beq.n	800c9be <_realloc_r+0x76>
 800c9b2:	f021 0001 	bic.w	r0, r1, #1
 800c9b6:	4418      	add	r0, r3
 800c9b8:	6840      	ldr	r0, [r0, #4]
 800c9ba:	07c7      	lsls	r7, r0, #31
 800c9bc:	d427      	bmi.n	800ca0e <_realloc_r+0xc6>
 800c9be:	f021 0103 	bic.w	r1, r1, #3
 800c9c2:	459c      	cmp	ip, r3
 800c9c4:	eb06 0701 	add.w	r7, r6, r1
 800c9c8:	d119      	bne.n	800c9fe <_realloc_r+0xb6>
 800c9ca:	f108 0010 	add.w	r0, r8, #16
 800c9ce:	42b8      	cmp	r0, r7
 800c9d0:	dc1f      	bgt.n	800ca12 <_realloc_r+0xca>
 800c9d2:	eb0a 0308 	add.w	r3, sl, r8
 800c9d6:	4a8e      	ldr	r2, [pc, #568]	; (800cc10 <_realloc_r+0x2c8>)
 800c9d8:	eba7 0708 	sub.w	r7, r7, r8
 800c9dc:	f047 0701 	orr.w	r7, r7, #1
 800c9e0:	6093      	str	r3, [r2, #8]
 800c9e2:	605f      	str	r7, [r3, #4]
 800c9e4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c9e8:	f003 0301 	and.w	r3, r3, #1
 800c9ec:	ea43 0308 	orr.w	r3, r3, r8
 800c9f0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9f4:	4648      	mov	r0, r9
 800c9f6:	f7fb fe15 	bl	8008624 <__malloc_unlock>
 800c9fa:	46a3      	mov	fp, r4
 800c9fc:	e7c0      	b.n	800c980 <_realloc_r+0x38>
 800c9fe:	45b8      	cmp	r8, r7
 800ca00:	dc07      	bgt.n	800ca12 <_realloc_r+0xca>
 800ca02:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800ca06:	60da      	str	r2, [r3, #12]
 800ca08:	6093      	str	r3, [r2, #8]
 800ca0a:	4655      	mov	r5, sl
 800ca0c:	e07f      	b.n	800cb0e <_realloc_r+0x1c6>
 800ca0e:	2100      	movs	r1, #0
 800ca10:	460b      	mov	r3, r1
 800ca12:	07e8      	lsls	r0, r5, #31
 800ca14:	f100 80e5 	bmi.w	800cbe2 <_realloc_r+0x29a>
 800ca18:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800ca1c:	ebaa 0505 	sub.w	r5, sl, r5
 800ca20:	6868      	ldr	r0, [r5, #4]
 800ca22:	f020 0003 	bic.w	r0, r0, #3
 800ca26:	eb00 0b06 	add.w	fp, r0, r6
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	f000 80a5 	beq.w	800cb7a <_realloc_r+0x232>
 800ca30:	459c      	cmp	ip, r3
 800ca32:	eb01 070b 	add.w	r7, r1, fp
 800ca36:	d14a      	bne.n	800cace <_realloc_r+0x186>
 800ca38:	f108 0310 	add.w	r3, r8, #16
 800ca3c:	42bb      	cmp	r3, r7
 800ca3e:	f300 809c 	bgt.w	800cb7a <_realloc_r+0x232>
 800ca42:	46ab      	mov	fp, r5
 800ca44:	68eb      	ldr	r3, [r5, #12]
 800ca46:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800ca4a:	60d3      	str	r3, [r2, #12]
 800ca4c:	609a      	str	r2, [r3, #8]
 800ca4e:	1f32      	subs	r2, r6, #4
 800ca50:	2a24      	cmp	r2, #36	; 0x24
 800ca52:	d837      	bhi.n	800cac4 <_realloc_r+0x17c>
 800ca54:	2a13      	cmp	r2, #19
 800ca56:	d933      	bls.n	800cac0 <_realloc_r+0x178>
 800ca58:	6823      	ldr	r3, [r4, #0]
 800ca5a:	60ab      	str	r3, [r5, #8]
 800ca5c:	6863      	ldr	r3, [r4, #4]
 800ca5e:	60eb      	str	r3, [r5, #12]
 800ca60:	2a1b      	cmp	r2, #27
 800ca62:	d81b      	bhi.n	800ca9c <_realloc_r+0x154>
 800ca64:	3408      	adds	r4, #8
 800ca66:	f105 0310 	add.w	r3, r5, #16
 800ca6a:	6822      	ldr	r2, [r4, #0]
 800ca6c:	601a      	str	r2, [r3, #0]
 800ca6e:	6862      	ldr	r2, [r4, #4]
 800ca70:	605a      	str	r2, [r3, #4]
 800ca72:	68a2      	ldr	r2, [r4, #8]
 800ca74:	609a      	str	r2, [r3, #8]
 800ca76:	eb05 0308 	add.w	r3, r5, r8
 800ca7a:	4a65      	ldr	r2, [pc, #404]	; (800cc10 <_realloc_r+0x2c8>)
 800ca7c:	eba7 0708 	sub.w	r7, r7, r8
 800ca80:	f047 0701 	orr.w	r7, r7, #1
 800ca84:	6093      	str	r3, [r2, #8]
 800ca86:	605f      	str	r7, [r3, #4]
 800ca88:	686b      	ldr	r3, [r5, #4]
 800ca8a:	f003 0301 	and.w	r3, r3, #1
 800ca8e:	ea43 0308 	orr.w	r3, r3, r8
 800ca92:	606b      	str	r3, [r5, #4]
 800ca94:	4648      	mov	r0, r9
 800ca96:	f7fb fdc5 	bl	8008624 <__malloc_unlock>
 800ca9a:	e771      	b.n	800c980 <_realloc_r+0x38>
 800ca9c:	68a3      	ldr	r3, [r4, #8]
 800ca9e:	612b      	str	r3, [r5, #16]
 800caa0:	68e3      	ldr	r3, [r4, #12]
 800caa2:	616b      	str	r3, [r5, #20]
 800caa4:	2a24      	cmp	r2, #36	; 0x24
 800caa6:	bf01      	itttt	eq
 800caa8:	6923      	ldreq	r3, [r4, #16]
 800caaa:	61ab      	streq	r3, [r5, #24]
 800caac:	6962      	ldreq	r2, [r4, #20]
 800caae:	61ea      	streq	r2, [r5, #28]
 800cab0:	bf19      	ittee	ne
 800cab2:	3410      	addne	r4, #16
 800cab4:	f105 0318 	addne.w	r3, r5, #24
 800cab8:	f105 0320 	addeq.w	r3, r5, #32
 800cabc:	3418      	addeq	r4, #24
 800cabe:	e7d4      	b.n	800ca6a <_realloc_r+0x122>
 800cac0:	465b      	mov	r3, fp
 800cac2:	e7d2      	b.n	800ca6a <_realloc_r+0x122>
 800cac4:	4621      	mov	r1, r4
 800cac6:	4658      	mov	r0, fp
 800cac8:	f001 ffe8 	bl	800ea9c <memmove>
 800cacc:	e7d3      	b.n	800ca76 <_realloc_r+0x12e>
 800cace:	45b8      	cmp	r8, r7
 800cad0:	dc53      	bgt.n	800cb7a <_realloc_r+0x232>
 800cad2:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800cad6:	4628      	mov	r0, r5
 800cad8:	60da      	str	r2, [r3, #12]
 800cada:	6093      	str	r3, [r2, #8]
 800cadc:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800cae0:	68eb      	ldr	r3, [r5, #12]
 800cae2:	60d3      	str	r3, [r2, #12]
 800cae4:	609a      	str	r2, [r3, #8]
 800cae6:	1f32      	subs	r2, r6, #4
 800cae8:	2a24      	cmp	r2, #36	; 0x24
 800caea:	d842      	bhi.n	800cb72 <_realloc_r+0x22a>
 800caec:	2a13      	cmp	r2, #19
 800caee:	d908      	bls.n	800cb02 <_realloc_r+0x1ba>
 800caf0:	6823      	ldr	r3, [r4, #0]
 800caf2:	60ab      	str	r3, [r5, #8]
 800caf4:	6863      	ldr	r3, [r4, #4]
 800caf6:	60eb      	str	r3, [r5, #12]
 800caf8:	2a1b      	cmp	r2, #27
 800cafa:	d828      	bhi.n	800cb4e <_realloc_r+0x206>
 800cafc:	3408      	adds	r4, #8
 800cafe:	f105 0010 	add.w	r0, r5, #16
 800cb02:	6823      	ldr	r3, [r4, #0]
 800cb04:	6003      	str	r3, [r0, #0]
 800cb06:	6863      	ldr	r3, [r4, #4]
 800cb08:	6043      	str	r3, [r0, #4]
 800cb0a:	68a3      	ldr	r3, [r4, #8]
 800cb0c:	6083      	str	r3, [r0, #8]
 800cb0e:	686b      	ldr	r3, [r5, #4]
 800cb10:	eba7 0008 	sub.w	r0, r7, r8
 800cb14:	280f      	cmp	r0, #15
 800cb16:	f003 0301 	and.w	r3, r3, #1
 800cb1a:	eb05 0207 	add.w	r2, r5, r7
 800cb1e:	f240 80b0 	bls.w	800cc82 <_realloc_r+0x33a>
 800cb22:	eb05 0108 	add.w	r1, r5, r8
 800cb26:	ea48 0303 	orr.w	r3, r8, r3
 800cb2a:	f040 0001 	orr.w	r0, r0, #1
 800cb2e:	606b      	str	r3, [r5, #4]
 800cb30:	6048      	str	r0, [r1, #4]
 800cb32:	6853      	ldr	r3, [r2, #4]
 800cb34:	f043 0301 	orr.w	r3, r3, #1
 800cb38:	6053      	str	r3, [r2, #4]
 800cb3a:	3108      	adds	r1, #8
 800cb3c:	4648      	mov	r0, r9
 800cb3e:	f7ff f94d 	bl	800bddc <_free_r>
 800cb42:	4648      	mov	r0, r9
 800cb44:	f7fb fd6e 	bl	8008624 <__malloc_unlock>
 800cb48:	f105 0b08 	add.w	fp, r5, #8
 800cb4c:	e718      	b.n	800c980 <_realloc_r+0x38>
 800cb4e:	68a3      	ldr	r3, [r4, #8]
 800cb50:	612b      	str	r3, [r5, #16]
 800cb52:	68e3      	ldr	r3, [r4, #12]
 800cb54:	616b      	str	r3, [r5, #20]
 800cb56:	2a24      	cmp	r2, #36	; 0x24
 800cb58:	bf01      	itttt	eq
 800cb5a:	6923      	ldreq	r3, [r4, #16]
 800cb5c:	61ab      	streq	r3, [r5, #24]
 800cb5e:	6963      	ldreq	r3, [r4, #20]
 800cb60:	61eb      	streq	r3, [r5, #28]
 800cb62:	bf19      	ittee	ne
 800cb64:	3410      	addne	r4, #16
 800cb66:	f105 0018 	addne.w	r0, r5, #24
 800cb6a:	f105 0020 	addeq.w	r0, r5, #32
 800cb6e:	3418      	addeq	r4, #24
 800cb70:	e7c7      	b.n	800cb02 <_realloc_r+0x1ba>
 800cb72:	4621      	mov	r1, r4
 800cb74:	f001 ff92 	bl	800ea9c <memmove>
 800cb78:	e7c9      	b.n	800cb0e <_realloc_r+0x1c6>
 800cb7a:	45d8      	cmp	r8, fp
 800cb7c:	dc31      	bgt.n	800cbe2 <_realloc_r+0x29a>
 800cb7e:	4628      	mov	r0, r5
 800cb80:	68eb      	ldr	r3, [r5, #12]
 800cb82:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800cb86:	60d3      	str	r3, [r2, #12]
 800cb88:	609a      	str	r2, [r3, #8]
 800cb8a:	1f32      	subs	r2, r6, #4
 800cb8c:	2a24      	cmp	r2, #36	; 0x24
 800cb8e:	d824      	bhi.n	800cbda <_realloc_r+0x292>
 800cb90:	2a13      	cmp	r2, #19
 800cb92:	d908      	bls.n	800cba6 <_realloc_r+0x25e>
 800cb94:	6823      	ldr	r3, [r4, #0]
 800cb96:	60ab      	str	r3, [r5, #8]
 800cb98:	6863      	ldr	r3, [r4, #4]
 800cb9a:	60eb      	str	r3, [r5, #12]
 800cb9c:	2a1b      	cmp	r2, #27
 800cb9e:	d80a      	bhi.n	800cbb6 <_realloc_r+0x26e>
 800cba0:	3408      	adds	r4, #8
 800cba2:	f105 0010 	add.w	r0, r5, #16
 800cba6:	6823      	ldr	r3, [r4, #0]
 800cba8:	6003      	str	r3, [r0, #0]
 800cbaa:	6863      	ldr	r3, [r4, #4]
 800cbac:	6043      	str	r3, [r0, #4]
 800cbae:	68a3      	ldr	r3, [r4, #8]
 800cbb0:	6083      	str	r3, [r0, #8]
 800cbb2:	465f      	mov	r7, fp
 800cbb4:	e7ab      	b.n	800cb0e <_realloc_r+0x1c6>
 800cbb6:	68a3      	ldr	r3, [r4, #8]
 800cbb8:	612b      	str	r3, [r5, #16]
 800cbba:	68e3      	ldr	r3, [r4, #12]
 800cbbc:	616b      	str	r3, [r5, #20]
 800cbbe:	2a24      	cmp	r2, #36	; 0x24
 800cbc0:	bf01      	itttt	eq
 800cbc2:	6923      	ldreq	r3, [r4, #16]
 800cbc4:	61ab      	streq	r3, [r5, #24]
 800cbc6:	6963      	ldreq	r3, [r4, #20]
 800cbc8:	61eb      	streq	r3, [r5, #28]
 800cbca:	bf19      	ittee	ne
 800cbcc:	3410      	addne	r4, #16
 800cbce:	f105 0018 	addne.w	r0, r5, #24
 800cbd2:	f105 0020 	addeq.w	r0, r5, #32
 800cbd6:	3418      	addeq	r4, #24
 800cbd8:	e7e5      	b.n	800cba6 <_realloc_r+0x25e>
 800cbda:	4621      	mov	r1, r4
 800cbdc:	f001 ff5e 	bl	800ea9c <memmove>
 800cbe0:	e7e7      	b.n	800cbb2 <_realloc_r+0x26a>
 800cbe2:	4611      	mov	r1, r2
 800cbe4:	4648      	mov	r0, r9
 800cbe6:	f7fb fad3 	bl	8008190 <_malloc_r>
 800cbea:	4683      	mov	fp, r0
 800cbec:	2800      	cmp	r0, #0
 800cbee:	f43f af51 	beq.w	800ca94 <_realloc_r+0x14c>
 800cbf2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800cbf6:	f023 0301 	bic.w	r3, r3, #1
 800cbfa:	4453      	add	r3, sl
 800cbfc:	f1a0 0208 	sub.w	r2, r0, #8
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d107      	bne.n	800cc14 <_realloc_r+0x2cc>
 800cc04:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800cc08:	f027 0703 	bic.w	r7, r7, #3
 800cc0c:	4437      	add	r7, r6
 800cc0e:	e6fc      	b.n	800ca0a <_realloc_r+0xc2>
 800cc10:	20000440 	.word	0x20000440
 800cc14:	1f32      	subs	r2, r6, #4
 800cc16:	2a24      	cmp	r2, #36	; 0x24
 800cc18:	d82d      	bhi.n	800cc76 <_realloc_r+0x32e>
 800cc1a:	2a13      	cmp	r2, #19
 800cc1c:	d928      	bls.n	800cc70 <_realloc_r+0x328>
 800cc1e:	6823      	ldr	r3, [r4, #0]
 800cc20:	6003      	str	r3, [r0, #0]
 800cc22:	6863      	ldr	r3, [r4, #4]
 800cc24:	6043      	str	r3, [r0, #4]
 800cc26:	2a1b      	cmp	r2, #27
 800cc28:	d80e      	bhi.n	800cc48 <_realloc_r+0x300>
 800cc2a:	f104 0208 	add.w	r2, r4, #8
 800cc2e:	f100 0308 	add.w	r3, r0, #8
 800cc32:	6811      	ldr	r1, [r2, #0]
 800cc34:	6019      	str	r1, [r3, #0]
 800cc36:	6851      	ldr	r1, [r2, #4]
 800cc38:	6059      	str	r1, [r3, #4]
 800cc3a:	6892      	ldr	r2, [r2, #8]
 800cc3c:	609a      	str	r2, [r3, #8]
 800cc3e:	4621      	mov	r1, r4
 800cc40:	4648      	mov	r0, r9
 800cc42:	f7ff f8cb 	bl	800bddc <_free_r>
 800cc46:	e725      	b.n	800ca94 <_realloc_r+0x14c>
 800cc48:	68a3      	ldr	r3, [r4, #8]
 800cc4a:	6083      	str	r3, [r0, #8]
 800cc4c:	68e3      	ldr	r3, [r4, #12]
 800cc4e:	60c3      	str	r3, [r0, #12]
 800cc50:	2a24      	cmp	r2, #36	; 0x24
 800cc52:	bf01      	itttt	eq
 800cc54:	6923      	ldreq	r3, [r4, #16]
 800cc56:	6103      	streq	r3, [r0, #16]
 800cc58:	6961      	ldreq	r1, [r4, #20]
 800cc5a:	6141      	streq	r1, [r0, #20]
 800cc5c:	bf19      	ittee	ne
 800cc5e:	f104 0210 	addne.w	r2, r4, #16
 800cc62:	f100 0310 	addne.w	r3, r0, #16
 800cc66:	f104 0218 	addeq.w	r2, r4, #24
 800cc6a:	f100 0318 	addeq.w	r3, r0, #24
 800cc6e:	e7e0      	b.n	800cc32 <_realloc_r+0x2ea>
 800cc70:	4603      	mov	r3, r0
 800cc72:	4622      	mov	r2, r4
 800cc74:	e7dd      	b.n	800cc32 <_realloc_r+0x2ea>
 800cc76:	4621      	mov	r1, r4
 800cc78:	f001 ff10 	bl	800ea9c <memmove>
 800cc7c:	e7df      	b.n	800cc3e <_realloc_r+0x2f6>
 800cc7e:	4637      	mov	r7, r6
 800cc80:	e6c3      	b.n	800ca0a <_realloc_r+0xc2>
 800cc82:	431f      	orrs	r7, r3
 800cc84:	606f      	str	r7, [r5, #4]
 800cc86:	6853      	ldr	r3, [r2, #4]
 800cc88:	f043 0301 	orr.w	r3, r3, #1
 800cc8c:	6053      	str	r3, [r2, #4]
 800cc8e:	e758      	b.n	800cb42 <_realloc_r+0x1fa>

0800cc90 <frexp>:
 800cc90:	b570      	push	{r4, r5, r6, lr}
 800cc92:	2100      	movs	r1, #0
 800cc94:	ec55 4b10 	vmov	r4, r5, d0
 800cc98:	6001      	str	r1, [r0, #0]
 800cc9a:	4916      	ldr	r1, [pc, #88]	; (800ccf4 <frexp+0x64>)
 800cc9c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800cca0:	428a      	cmp	r2, r1
 800cca2:	4606      	mov	r6, r0
 800cca4:	462b      	mov	r3, r5
 800cca6:	dc22      	bgt.n	800ccee <frexp+0x5e>
 800cca8:	ee10 1a10 	vmov	r1, s0
 800ccac:	4311      	orrs	r1, r2
 800ccae:	d01e      	beq.n	800ccee <frexp+0x5e>
 800ccb0:	4911      	ldr	r1, [pc, #68]	; (800ccf8 <frexp+0x68>)
 800ccb2:	4029      	ands	r1, r5
 800ccb4:	b969      	cbnz	r1, 800ccd2 <frexp+0x42>
 800ccb6:	4b11      	ldr	r3, [pc, #68]	; (800ccfc <frexp+0x6c>)
 800ccb8:	2200      	movs	r2, #0
 800ccba:	ee10 0a10 	vmov	r0, s0
 800ccbe:	4629      	mov	r1, r5
 800ccc0:	f7f3 fca2 	bl	8000608 <__aeabi_dmul>
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ccca:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800ccce:	4604      	mov	r4, r0
 800ccd0:	6031      	str	r1, [r6, #0]
 800ccd2:	6831      	ldr	r1, [r6, #0]
 800ccd4:	1512      	asrs	r2, r2, #20
 800ccd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ccda:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800ccde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cce2:	440a      	add	r2, r1
 800cce4:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800cce8:	6032      	str	r2, [r6, #0]
 800ccea:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800ccee:	ec45 4b10 	vmov	d0, r4, r5
 800ccf2:	bd70      	pop	{r4, r5, r6, pc}
 800ccf4:	7fefffff 	.word	0x7fefffff
 800ccf8:	7ff00000 	.word	0x7ff00000
 800ccfc:	43500000 	.word	0x43500000

0800cd00 <__sccl>:
 800cd00:	b570      	push	{r4, r5, r6, lr}
 800cd02:	780b      	ldrb	r3, [r1, #0]
 800cd04:	4604      	mov	r4, r0
 800cd06:	2b5e      	cmp	r3, #94	; 0x5e
 800cd08:	bf0b      	itete	eq
 800cd0a:	784b      	ldrbeq	r3, [r1, #1]
 800cd0c:	1c48      	addne	r0, r1, #1
 800cd0e:	1c88      	addeq	r0, r1, #2
 800cd10:	2200      	movne	r2, #0
 800cd12:	bf08      	it	eq
 800cd14:	2201      	moveq	r2, #1
 800cd16:	1e61      	subs	r1, r4, #1
 800cd18:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cd1c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800cd20:	42a9      	cmp	r1, r5
 800cd22:	d1fb      	bne.n	800cd1c <__sccl+0x1c>
 800cd24:	b90b      	cbnz	r3, 800cd2a <__sccl+0x2a>
 800cd26:	3801      	subs	r0, #1
 800cd28:	bd70      	pop	{r4, r5, r6, pc}
 800cd2a:	f082 0201 	eor.w	r2, r2, #1
 800cd2e:	54e2      	strb	r2, [r4, r3]
 800cd30:	4605      	mov	r5, r0
 800cd32:	4628      	mov	r0, r5
 800cd34:	f810 1b01 	ldrb.w	r1, [r0], #1
 800cd38:	292d      	cmp	r1, #45	; 0x2d
 800cd3a:	d006      	beq.n	800cd4a <__sccl+0x4a>
 800cd3c:	295d      	cmp	r1, #93	; 0x5d
 800cd3e:	d0f3      	beq.n	800cd28 <__sccl+0x28>
 800cd40:	b909      	cbnz	r1, 800cd46 <__sccl+0x46>
 800cd42:	4628      	mov	r0, r5
 800cd44:	e7f0      	b.n	800cd28 <__sccl+0x28>
 800cd46:	460b      	mov	r3, r1
 800cd48:	e7f1      	b.n	800cd2e <__sccl+0x2e>
 800cd4a:	786e      	ldrb	r6, [r5, #1]
 800cd4c:	2e5d      	cmp	r6, #93	; 0x5d
 800cd4e:	d0fa      	beq.n	800cd46 <__sccl+0x46>
 800cd50:	42b3      	cmp	r3, r6
 800cd52:	dcf8      	bgt.n	800cd46 <__sccl+0x46>
 800cd54:	3502      	adds	r5, #2
 800cd56:	4619      	mov	r1, r3
 800cd58:	3101      	adds	r1, #1
 800cd5a:	428e      	cmp	r6, r1
 800cd5c:	5462      	strb	r2, [r4, r1]
 800cd5e:	dcfb      	bgt.n	800cd58 <__sccl+0x58>
 800cd60:	1af1      	subs	r1, r6, r3
 800cd62:	3901      	subs	r1, #1
 800cd64:	1c58      	adds	r0, r3, #1
 800cd66:	42b3      	cmp	r3, r6
 800cd68:	bfa8      	it	ge
 800cd6a:	2100      	movge	r1, #0
 800cd6c:	1843      	adds	r3, r0, r1
 800cd6e:	e7e0      	b.n	800cd32 <__sccl+0x32>

0800cd70 <nanf>:
 800cd70:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cd78 <nanf+0x8>
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	7fc00000 	.word	0x7fc00000

0800cd7c <strncpy>:
 800cd7c:	b510      	push	{r4, lr}
 800cd7e:	3901      	subs	r1, #1
 800cd80:	4603      	mov	r3, r0
 800cd82:	b132      	cbz	r2, 800cd92 <strncpy+0x16>
 800cd84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cd88:	f803 4b01 	strb.w	r4, [r3], #1
 800cd8c:	3a01      	subs	r2, #1
 800cd8e:	2c00      	cmp	r4, #0
 800cd90:	d1f7      	bne.n	800cd82 <strncpy+0x6>
 800cd92:	441a      	add	r2, r3
 800cd94:	2100      	movs	r1, #0
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d100      	bne.n	800cd9c <strncpy+0x20>
 800cd9a:	bd10      	pop	{r4, pc}
 800cd9c:	f803 1b01 	strb.w	r1, [r3], #1
 800cda0:	e7f9      	b.n	800cd96 <strncpy+0x1a>

0800cda2 <sulp>:
 800cda2:	b570      	push	{r4, r5, r6, lr}
 800cda4:	4604      	mov	r4, r0
 800cda6:	460d      	mov	r5, r1
 800cda8:	ec45 4b10 	vmov	d0, r4, r5
 800cdac:	4616      	mov	r6, r2
 800cdae:	f7ff fc61 	bl	800c674 <__ulp>
 800cdb2:	ec51 0b10 	vmov	r0, r1, d0
 800cdb6:	b17e      	cbz	r6, 800cdd8 <sulp+0x36>
 800cdb8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cdbc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	dd09      	ble.n	800cdd8 <sulp+0x36>
 800cdc4:	051b      	lsls	r3, r3, #20
 800cdc6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cdca:	2400      	movs	r4, #0
 800cdcc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cdd0:	4622      	mov	r2, r4
 800cdd2:	462b      	mov	r3, r5
 800cdd4:	f7f3 fc18 	bl	8000608 <__aeabi_dmul>
 800cdd8:	bd70      	pop	{r4, r5, r6, pc}
 800cdda:	0000      	movs	r0, r0
 800cddc:	0000      	movs	r0, r0
	...

0800cde0 <_strtod_l>:
 800cde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde4:	ed2d 8b02 	vpush	{d8}
 800cde8:	b09d      	sub	sp, #116	; 0x74
 800cdea:	461f      	mov	r7, r3
 800cdec:	2300      	movs	r3, #0
 800cdee:	9318      	str	r3, [sp, #96]	; 0x60
 800cdf0:	4ba2      	ldr	r3, [pc, #648]	; (800d07c <_strtod_l+0x29c>)
 800cdf2:	9213      	str	r2, [sp, #76]	; 0x4c
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	9305      	str	r3, [sp, #20]
 800cdf8:	4604      	mov	r4, r0
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	4688      	mov	r8, r1
 800cdfe:	f7f3 f9ef 	bl	80001e0 <strlen>
 800ce02:	f04f 0a00 	mov.w	sl, #0
 800ce06:	4605      	mov	r5, r0
 800ce08:	f04f 0b00 	mov.w	fp, #0
 800ce0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ce10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce12:	781a      	ldrb	r2, [r3, #0]
 800ce14:	2a2b      	cmp	r2, #43	; 0x2b
 800ce16:	d04e      	beq.n	800ceb6 <_strtod_l+0xd6>
 800ce18:	d83b      	bhi.n	800ce92 <_strtod_l+0xb2>
 800ce1a:	2a0d      	cmp	r2, #13
 800ce1c:	d834      	bhi.n	800ce88 <_strtod_l+0xa8>
 800ce1e:	2a08      	cmp	r2, #8
 800ce20:	d834      	bhi.n	800ce8c <_strtod_l+0xac>
 800ce22:	2a00      	cmp	r2, #0
 800ce24:	d03e      	beq.n	800cea4 <_strtod_l+0xc4>
 800ce26:	2300      	movs	r3, #0
 800ce28:	930a      	str	r3, [sp, #40]	; 0x28
 800ce2a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ce2c:	7833      	ldrb	r3, [r6, #0]
 800ce2e:	2b30      	cmp	r3, #48	; 0x30
 800ce30:	f040 80b0 	bne.w	800cf94 <_strtod_l+0x1b4>
 800ce34:	7873      	ldrb	r3, [r6, #1]
 800ce36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ce3a:	2b58      	cmp	r3, #88	; 0x58
 800ce3c:	d168      	bne.n	800cf10 <_strtod_l+0x130>
 800ce3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce40:	9301      	str	r3, [sp, #4]
 800ce42:	ab18      	add	r3, sp, #96	; 0x60
 800ce44:	9702      	str	r7, [sp, #8]
 800ce46:	9300      	str	r3, [sp, #0]
 800ce48:	4a8d      	ldr	r2, [pc, #564]	; (800d080 <_strtod_l+0x2a0>)
 800ce4a:	ab19      	add	r3, sp, #100	; 0x64
 800ce4c:	a917      	add	r1, sp, #92	; 0x5c
 800ce4e:	4620      	mov	r0, r4
 800ce50:	f001 fb1c 	bl	800e48c <__gethex>
 800ce54:	f010 0707 	ands.w	r7, r0, #7
 800ce58:	4605      	mov	r5, r0
 800ce5a:	d005      	beq.n	800ce68 <_strtod_l+0x88>
 800ce5c:	2f06      	cmp	r7, #6
 800ce5e:	d12c      	bne.n	800ceba <_strtod_l+0xda>
 800ce60:	3601      	adds	r6, #1
 800ce62:	2300      	movs	r3, #0
 800ce64:	9617      	str	r6, [sp, #92]	; 0x5c
 800ce66:	930a      	str	r3, [sp, #40]	; 0x28
 800ce68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	f040 8590 	bne.w	800d990 <_strtod_l+0xbb0>
 800ce70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce72:	b1eb      	cbz	r3, 800ceb0 <_strtod_l+0xd0>
 800ce74:	4652      	mov	r2, sl
 800ce76:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ce7a:	ec43 2b10 	vmov	d0, r2, r3
 800ce7e:	b01d      	add	sp, #116	; 0x74
 800ce80:	ecbd 8b02 	vpop	{d8}
 800ce84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce88:	2a20      	cmp	r2, #32
 800ce8a:	d1cc      	bne.n	800ce26 <_strtod_l+0x46>
 800ce8c:	3301      	adds	r3, #1
 800ce8e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce90:	e7be      	b.n	800ce10 <_strtod_l+0x30>
 800ce92:	2a2d      	cmp	r2, #45	; 0x2d
 800ce94:	d1c7      	bne.n	800ce26 <_strtod_l+0x46>
 800ce96:	2201      	movs	r2, #1
 800ce98:	920a      	str	r2, [sp, #40]	; 0x28
 800ce9a:	1c5a      	adds	r2, r3, #1
 800ce9c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce9e:	785b      	ldrb	r3, [r3, #1]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d1c2      	bne.n	800ce2a <_strtod_l+0x4a>
 800cea4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cea6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	f040 856e 	bne.w	800d98c <_strtod_l+0xbac>
 800ceb0:	4652      	mov	r2, sl
 800ceb2:	465b      	mov	r3, fp
 800ceb4:	e7e1      	b.n	800ce7a <_strtod_l+0x9a>
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	e7ee      	b.n	800ce98 <_strtod_l+0xb8>
 800ceba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cebc:	b13a      	cbz	r2, 800cece <_strtod_l+0xee>
 800cebe:	2135      	movs	r1, #53	; 0x35
 800cec0:	a81a      	add	r0, sp, #104	; 0x68
 800cec2:	f7ff fce2 	bl	800c88a <__copybits>
 800cec6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cec8:	4620      	mov	r0, r4
 800ceca:	f7ff f8d4 	bl	800c076 <_Bfree>
 800cece:	3f01      	subs	r7, #1
 800ced0:	2f04      	cmp	r7, #4
 800ced2:	d806      	bhi.n	800cee2 <_strtod_l+0x102>
 800ced4:	e8df f007 	tbb	[pc, r7]
 800ced8:	1714030a 	.word	0x1714030a
 800cedc:	0a          	.byte	0x0a
 800cedd:	00          	.byte	0x00
 800cede:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800cee2:	0728      	lsls	r0, r5, #28
 800cee4:	d5c0      	bpl.n	800ce68 <_strtod_l+0x88>
 800cee6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ceea:	e7bd      	b.n	800ce68 <_strtod_l+0x88>
 800ceec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800cef0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cef2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cef6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cefa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cefe:	e7f0      	b.n	800cee2 <_strtod_l+0x102>
 800cf00:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d084 <_strtod_l+0x2a4>
 800cf04:	e7ed      	b.n	800cee2 <_strtod_l+0x102>
 800cf06:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cf0a:	f04f 3aff 	mov.w	sl, #4294967295
 800cf0e:	e7e8      	b.n	800cee2 <_strtod_l+0x102>
 800cf10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf12:	1c5a      	adds	r2, r3, #1
 800cf14:	9217      	str	r2, [sp, #92]	; 0x5c
 800cf16:	785b      	ldrb	r3, [r3, #1]
 800cf18:	2b30      	cmp	r3, #48	; 0x30
 800cf1a:	d0f9      	beq.n	800cf10 <_strtod_l+0x130>
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d0a3      	beq.n	800ce68 <_strtod_l+0x88>
 800cf20:	2301      	movs	r3, #1
 800cf22:	f04f 0900 	mov.w	r9, #0
 800cf26:	9304      	str	r3, [sp, #16]
 800cf28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf2a:	9308      	str	r3, [sp, #32]
 800cf2c:	f8cd 901c 	str.w	r9, [sp, #28]
 800cf30:	464f      	mov	r7, r9
 800cf32:	220a      	movs	r2, #10
 800cf34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cf36:	7806      	ldrb	r6, [r0, #0]
 800cf38:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cf3c:	b2d9      	uxtb	r1, r3
 800cf3e:	2909      	cmp	r1, #9
 800cf40:	d92a      	bls.n	800cf98 <_strtod_l+0x1b8>
 800cf42:	9905      	ldr	r1, [sp, #20]
 800cf44:	462a      	mov	r2, r5
 800cf46:	f7fb fc14 	bl	8008772 <strncmp>
 800cf4a:	b398      	cbz	r0, 800cfb4 <_strtod_l+0x1d4>
 800cf4c:	2000      	movs	r0, #0
 800cf4e:	4632      	mov	r2, r6
 800cf50:	463d      	mov	r5, r7
 800cf52:	9005      	str	r0, [sp, #20]
 800cf54:	4603      	mov	r3, r0
 800cf56:	2a65      	cmp	r2, #101	; 0x65
 800cf58:	d001      	beq.n	800cf5e <_strtod_l+0x17e>
 800cf5a:	2a45      	cmp	r2, #69	; 0x45
 800cf5c:	d118      	bne.n	800cf90 <_strtod_l+0x1b0>
 800cf5e:	b91d      	cbnz	r5, 800cf68 <_strtod_l+0x188>
 800cf60:	9a04      	ldr	r2, [sp, #16]
 800cf62:	4302      	orrs	r2, r0
 800cf64:	d09e      	beq.n	800cea4 <_strtod_l+0xc4>
 800cf66:	2500      	movs	r5, #0
 800cf68:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800cf6c:	f108 0201 	add.w	r2, r8, #1
 800cf70:	9217      	str	r2, [sp, #92]	; 0x5c
 800cf72:	f898 2001 	ldrb.w	r2, [r8, #1]
 800cf76:	2a2b      	cmp	r2, #43	; 0x2b
 800cf78:	d075      	beq.n	800d066 <_strtod_l+0x286>
 800cf7a:	2a2d      	cmp	r2, #45	; 0x2d
 800cf7c:	d07b      	beq.n	800d076 <_strtod_l+0x296>
 800cf7e:	f04f 0c00 	mov.w	ip, #0
 800cf82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cf86:	2909      	cmp	r1, #9
 800cf88:	f240 8082 	bls.w	800d090 <_strtod_l+0x2b0>
 800cf8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cf90:	2600      	movs	r6, #0
 800cf92:	e09d      	b.n	800d0d0 <_strtod_l+0x2f0>
 800cf94:	2300      	movs	r3, #0
 800cf96:	e7c4      	b.n	800cf22 <_strtod_l+0x142>
 800cf98:	2f08      	cmp	r7, #8
 800cf9a:	bfd8      	it	le
 800cf9c:	9907      	ldrle	r1, [sp, #28]
 800cf9e:	f100 0001 	add.w	r0, r0, #1
 800cfa2:	bfda      	itte	le
 800cfa4:	fb02 3301 	mlale	r3, r2, r1, r3
 800cfa8:	9307      	strle	r3, [sp, #28]
 800cfaa:	fb02 3909 	mlagt	r9, r2, r9, r3
 800cfae:	3701      	adds	r7, #1
 800cfb0:	9017      	str	r0, [sp, #92]	; 0x5c
 800cfb2:	e7bf      	b.n	800cf34 <_strtod_l+0x154>
 800cfb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfb6:	195a      	adds	r2, r3, r5
 800cfb8:	9217      	str	r2, [sp, #92]	; 0x5c
 800cfba:	5d5a      	ldrb	r2, [r3, r5]
 800cfbc:	2f00      	cmp	r7, #0
 800cfbe:	d037      	beq.n	800d030 <_strtod_l+0x250>
 800cfc0:	9005      	str	r0, [sp, #20]
 800cfc2:	463d      	mov	r5, r7
 800cfc4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800cfc8:	2b09      	cmp	r3, #9
 800cfca:	d912      	bls.n	800cff2 <_strtod_l+0x212>
 800cfcc:	2301      	movs	r3, #1
 800cfce:	e7c2      	b.n	800cf56 <_strtod_l+0x176>
 800cfd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfd2:	1c5a      	adds	r2, r3, #1
 800cfd4:	9217      	str	r2, [sp, #92]	; 0x5c
 800cfd6:	785a      	ldrb	r2, [r3, #1]
 800cfd8:	3001      	adds	r0, #1
 800cfda:	2a30      	cmp	r2, #48	; 0x30
 800cfdc:	d0f8      	beq.n	800cfd0 <_strtod_l+0x1f0>
 800cfde:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800cfe2:	2b08      	cmp	r3, #8
 800cfe4:	f200 84d9 	bhi.w	800d99a <_strtod_l+0xbba>
 800cfe8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfea:	9005      	str	r0, [sp, #20]
 800cfec:	2000      	movs	r0, #0
 800cfee:	9308      	str	r3, [sp, #32]
 800cff0:	4605      	mov	r5, r0
 800cff2:	3a30      	subs	r2, #48	; 0x30
 800cff4:	f100 0301 	add.w	r3, r0, #1
 800cff8:	d014      	beq.n	800d024 <_strtod_l+0x244>
 800cffa:	9905      	ldr	r1, [sp, #20]
 800cffc:	4419      	add	r1, r3
 800cffe:	9105      	str	r1, [sp, #20]
 800d000:	462b      	mov	r3, r5
 800d002:	eb00 0e05 	add.w	lr, r0, r5
 800d006:	210a      	movs	r1, #10
 800d008:	4573      	cmp	r3, lr
 800d00a:	d113      	bne.n	800d034 <_strtod_l+0x254>
 800d00c:	182b      	adds	r3, r5, r0
 800d00e:	2b08      	cmp	r3, #8
 800d010:	f105 0501 	add.w	r5, r5, #1
 800d014:	4405      	add	r5, r0
 800d016:	dc1c      	bgt.n	800d052 <_strtod_l+0x272>
 800d018:	9907      	ldr	r1, [sp, #28]
 800d01a:	230a      	movs	r3, #10
 800d01c:	fb03 2301 	mla	r3, r3, r1, r2
 800d020:	9307      	str	r3, [sp, #28]
 800d022:	2300      	movs	r3, #0
 800d024:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d026:	1c51      	adds	r1, r2, #1
 800d028:	9117      	str	r1, [sp, #92]	; 0x5c
 800d02a:	7852      	ldrb	r2, [r2, #1]
 800d02c:	4618      	mov	r0, r3
 800d02e:	e7c9      	b.n	800cfc4 <_strtod_l+0x1e4>
 800d030:	4638      	mov	r0, r7
 800d032:	e7d2      	b.n	800cfda <_strtod_l+0x1fa>
 800d034:	2b08      	cmp	r3, #8
 800d036:	dc04      	bgt.n	800d042 <_strtod_l+0x262>
 800d038:	9e07      	ldr	r6, [sp, #28]
 800d03a:	434e      	muls	r6, r1
 800d03c:	9607      	str	r6, [sp, #28]
 800d03e:	3301      	adds	r3, #1
 800d040:	e7e2      	b.n	800d008 <_strtod_l+0x228>
 800d042:	f103 0c01 	add.w	ip, r3, #1
 800d046:	f1bc 0f10 	cmp.w	ip, #16
 800d04a:	bfd8      	it	le
 800d04c:	fb01 f909 	mulle.w	r9, r1, r9
 800d050:	e7f5      	b.n	800d03e <_strtod_l+0x25e>
 800d052:	2d10      	cmp	r5, #16
 800d054:	bfdc      	itt	le
 800d056:	230a      	movle	r3, #10
 800d058:	fb03 2909 	mlale	r9, r3, r9, r2
 800d05c:	e7e1      	b.n	800d022 <_strtod_l+0x242>
 800d05e:	2300      	movs	r3, #0
 800d060:	9305      	str	r3, [sp, #20]
 800d062:	2301      	movs	r3, #1
 800d064:	e77c      	b.n	800cf60 <_strtod_l+0x180>
 800d066:	f04f 0c00 	mov.w	ip, #0
 800d06a:	f108 0202 	add.w	r2, r8, #2
 800d06e:	9217      	str	r2, [sp, #92]	; 0x5c
 800d070:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d074:	e785      	b.n	800cf82 <_strtod_l+0x1a2>
 800d076:	f04f 0c01 	mov.w	ip, #1
 800d07a:	e7f6      	b.n	800d06a <_strtod_l+0x28a>
 800d07c:	080103d8 	.word	0x080103d8
 800d080:	080102e4 	.word	0x080102e4
 800d084:	7ff00000 	.word	0x7ff00000
 800d088:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d08a:	1c51      	adds	r1, r2, #1
 800d08c:	9117      	str	r1, [sp, #92]	; 0x5c
 800d08e:	7852      	ldrb	r2, [r2, #1]
 800d090:	2a30      	cmp	r2, #48	; 0x30
 800d092:	d0f9      	beq.n	800d088 <_strtod_l+0x2a8>
 800d094:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d098:	2908      	cmp	r1, #8
 800d09a:	f63f af79 	bhi.w	800cf90 <_strtod_l+0x1b0>
 800d09e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d0a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d0a4:	9206      	str	r2, [sp, #24]
 800d0a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d0a8:	1c51      	adds	r1, r2, #1
 800d0aa:	9117      	str	r1, [sp, #92]	; 0x5c
 800d0ac:	7852      	ldrb	r2, [r2, #1]
 800d0ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d0b2:	2e09      	cmp	r6, #9
 800d0b4:	d937      	bls.n	800d126 <_strtod_l+0x346>
 800d0b6:	9e06      	ldr	r6, [sp, #24]
 800d0b8:	1b89      	subs	r1, r1, r6
 800d0ba:	2908      	cmp	r1, #8
 800d0bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d0c0:	dc02      	bgt.n	800d0c8 <_strtod_l+0x2e8>
 800d0c2:	4576      	cmp	r6, lr
 800d0c4:	bfa8      	it	ge
 800d0c6:	4676      	movge	r6, lr
 800d0c8:	f1bc 0f00 	cmp.w	ip, #0
 800d0cc:	d000      	beq.n	800d0d0 <_strtod_l+0x2f0>
 800d0ce:	4276      	negs	r6, r6
 800d0d0:	2d00      	cmp	r5, #0
 800d0d2:	d14d      	bne.n	800d170 <_strtod_l+0x390>
 800d0d4:	9904      	ldr	r1, [sp, #16]
 800d0d6:	4301      	orrs	r1, r0
 800d0d8:	f47f aec6 	bne.w	800ce68 <_strtod_l+0x88>
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	f47f aee1 	bne.w	800cea4 <_strtod_l+0xc4>
 800d0e2:	2a69      	cmp	r2, #105	; 0x69
 800d0e4:	d027      	beq.n	800d136 <_strtod_l+0x356>
 800d0e6:	dc24      	bgt.n	800d132 <_strtod_l+0x352>
 800d0e8:	2a49      	cmp	r2, #73	; 0x49
 800d0ea:	d024      	beq.n	800d136 <_strtod_l+0x356>
 800d0ec:	2a4e      	cmp	r2, #78	; 0x4e
 800d0ee:	f47f aed9 	bne.w	800cea4 <_strtod_l+0xc4>
 800d0f2:	499f      	ldr	r1, [pc, #636]	; (800d370 <_strtod_l+0x590>)
 800d0f4:	a817      	add	r0, sp, #92	; 0x5c
 800d0f6:	f001 fc21 	bl	800e93c <__match>
 800d0fa:	2800      	cmp	r0, #0
 800d0fc:	f43f aed2 	beq.w	800cea4 <_strtod_l+0xc4>
 800d100:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	2b28      	cmp	r3, #40	; 0x28
 800d106:	d12d      	bne.n	800d164 <_strtod_l+0x384>
 800d108:	499a      	ldr	r1, [pc, #616]	; (800d374 <_strtod_l+0x594>)
 800d10a:	aa1a      	add	r2, sp, #104	; 0x68
 800d10c:	a817      	add	r0, sp, #92	; 0x5c
 800d10e:	f001 fc29 	bl	800e964 <__hexnan>
 800d112:	2805      	cmp	r0, #5
 800d114:	d126      	bne.n	800d164 <_strtod_l+0x384>
 800d116:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d118:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d11c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d120:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d124:	e6a0      	b.n	800ce68 <_strtod_l+0x88>
 800d126:	210a      	movs	r1, #10
 800d128:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d12c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d130:	e7b9      	b.n	800d0a6 <_strtod_l+0x2c6>
 800d132:	2a6e      	cmp	r2, #110	; 0x6e
 800d134:	e7db      	b.n	800d0ee <_strtod_l+0x30e>
 800d136:	4990      	ldr	r1, [pc, #576]	; (800d378 <_strtod_l+0x598>)
 800d138:	a817      	add	r0, sp, #92	; 0x5c
 800d13a:	f001 fbff 	bl	800e93c <__match>
 800d13e:	2800      	cmp	r0, #0
 800d140:	f43f aeb0 	beq.w	800cea4 <_strtod_l+0xc4>
 800d144:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d146:	498d      	ldr	r1, [pc, #564]	; (800d37c <_strtod_l+0x59c>)
 800d148:	3b01      	subs	r3, #1
 800d14a:	a817      	add	r0, sp, #92	; 0x5c
 800d14c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d14e:	f001 fbf5 	bl	800e93c <__match>
 800d152:	b910      	cbnz	r0, 800d15a <_strtod_l+0x37a>
 800d154:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d156:	3301      	adds	r3, #1
 800d158:	9317      	str	r3, [sp, #92]	; 0x5c
 800d15a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d38c <_strtod_l+0x5ac>
 800d15e:	f04f 0a00 	mov.w	sl, #0
 800d162:	e681      	b.n	800ce68 <_strtod_l+0x88>
 800d164:	4886      	ldr	r0, [pc, #536]	; (800d380 <_strtod_l+0x5a0>)
 800d166:	f001 fcb3 	bl	800ead0 <nan>
 800d16a:	ec5b ab10 	vmov	sl, fp, d0
 800d16e:	e67b      	b.n	800ce68 <_strtod_l+0x88>
 800d170:	9b05      	ldr	r3, [sp, #20]
 800d172:	9807      	ldr	r0, [sp, #28]
 800d174:	1af3      	subs	r3, r6, r3
 800d176:	2f00      	cmp	r7, #0
 800d178:	bf08      	it	eq
 800d17a:	462f      	moveq	r7, r5
 800d17c:	2d10      	cmp	r5, #16
 800d17e:	9306      	str	r3, [sp, #24]
 800d180:	46a8      	mov	r8, r5
 800d182:	bfa8      	it	ge
 800d184:	f04f 0810 	movge.w	r8, #16
 800d188:	f7f3 f9c4 	bl	8000514 <__aeabi_ui2d>
 800d18c:	2d09      	cmp	r5, #9
 800d18e:	4682      	mov	sl, r0
 800d190:	468b      	mov	fp, r1
 800d192:	dd13      	ble.n	800d1bc <_strtod_l+0x3dc>
 800d194:	4b7b      	ldr	r3, [pc, #492]	; (800d384 <_strtod_l+0x5a4>)
 800d196:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d19a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d19e:	f7f3 fa33 	bl	8000608 <__aeabi_dmul>
 800d1a2:	4682      	mov	sl, r0
 800d1a4:	4648      	mov	r0, r9
 800d1a6:	468b      	mov	fp, r1
 800d1a8:	f7f3 f9b4 	bl	8000514 <__aeabi_ui2d>
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	4650      	mov	r0, sl
 800d1b2:	4659      	mov	r1, fp
 800d1b4:	f7f3 f872 	bl	800029c <__adddf3>
 800d1b8:	4682      	mov	sl, r0
 800d1ba:	468b      	mov	fp, r1
 800d1bc:	2d0f      	cmp	r5, #15
 800d1be:	dc38      	bgt.n	800d232 <_strtod_l+0x452>
 800d1c0:	9b06      	ldr	r3, [sp, #24]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	f43f ae50 	beq.w	800ce68 <_strtod_l+0x88>
 800d1c8:	dd24      	ble.n	800d214 <_strtod_l+0x434>
 800d1ca:	2b16      	cmp	r3, #22
 800d1cc:	dc0b      	bgt.n	800d1e6 <_strtod_l+0x406>
 800d1ce:	496d      	ldr	r1, [pc, #436]	; (800d384 <_strtod_l+0x5a4>)
 800d1d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d1d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1d8:	4652      	mov	r2, sl
 800d1da:	465b      	mov	r3, fp
 800d1dc:	f7f3 fa14 	bl	8000608 <__aeabi_dmul>
 800d1e0:	4682      	mov	sl, r0
 800d1e2:	468b      	mov	fp, r1
 800d1e4:	e640      	b.n	800ce68 <_strtod_l+0x88>
 800d1e6:	9a06      	ldr	r2, [sp, #24]
 800d1e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	db20      	blt.n	800d232 <_strtod_l+0x452>
 800d1f0:	4c64      	ldr	r4, [pc, #400]	; (800d384 <_strtod_l+0x5a4>)
 800d1f2:	f1c5 050f 	rsb	r5, r5, #15
 800d1f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d1fa:	4652      	mov	r2, sl
 800d1fc:	465b      	mov	r3, fp
 800d1fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d202:	f7f3 fa01 	bl	8000608 <__aeabi_dmul>
 800d206:	9b06      	ldr	r3, [sp, #24]
 800d208:	1b5d      	subs	r5, r3, r5
 800d20a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d20e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d212:	e7e3      	b.n	800d1dc <_strtod_l+0x3fc>
 800d214:	9b06      	ldr	r3, [sp, #24]
 800d216:	3316      	adds	r3, #22
 800d218:	db0b      	blt.n	800d232 <_strtod_l+0x452>
 800d21a:	9b05      	ldr	r3, [sp, #20]
 800d21c:	1b9e      	subs	r6, r3, r6
 800d21e:	4b59      	ldr	r3, [pc, #356]	; (800d384 <_strtod_l+0x5a4>)
 800d220:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d224:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d228:	4650      	mov	r0, sl
 800d22a:	4659      	mov	r1, fp
 800d22c:	f7f3 fb16 	bl	800085c <__aeabi_ddiv>
 800d230:	e7d6      	b.n	800d1e0 <_strtod_l+0x400>
 800d232:	9b06      	ldr	r3, [sp, #24]
 800d234:	eba5 0808 	sub.w	r8, r5, r8
 800d238:	4498      	add	r8, r3
 800d23a:	f1b8 0f00 	cmp.w	r8, #0
 800d23e:	dd74      	ble.n	800d32a <_strtod_l+0x54a>
 800d240:	f018 030f 	ands.w	r3, r8, #15
 800d244:	d00a      	beq.n	800d25c <_strtod_l+0x47c>
 800d246:	494f      	ldr	r1, [pc, #316]	; (800d384 <_strtod_l+0x5a4>)
 800d248:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d24c:	4652      	mov	r2, sl
 800d24e:	465b      	mov	r3, fp
 800d250:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d254:	f7f3 f9d8 	bl	8000608 <__aeabi_dmul>
 800d258:	4682      	mov	sl, r0
 800d25a:	468b      	mov	fp, r1
 800d25c:	f038 080f 	bics.w	r8, r8, #15
 800d260:	d04f      	beq.n	800d302 <_strtod_l+0x522>
 800d262:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d266:	dd22      	ble.n	800d2ae <_strtod_l+0x4ce>
 800d268:	2500      	movs	r5, #0
 800d26a:	462e      	mov	r6, r5
 800d26c:	9507      	str	r5, [sp, #28]
 800d26e:	9505      	str	r5, [sp, #20]
 800d270:	2322      	movs	r3, #34	; 0x22
 800d272:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d38c <_strtod_l+0x5ac>
 800d276:	6023      	str	r3, [r4, #0]
 800d278:	f04f 0a00 	mov.w	sl, #0
 800d27c:	9b07      	ldr	r3, [sp, #28]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	f43f adf2 	beq.w	800ce68 <_strtod_l+0x88>
 800d284:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d286:	4620      	mov	r0, r4
 800d288:	f7fe fef5 	bl	800c076 <_Bfree>
 800d28c:	9905      	ldr	r1, [sp, #20]
 800d28e:	4620      	mov	r0, r4
 800d290:	f7fe fef1 	bl	800c076 <_Bfree>
 800d294:	4631      	mov	r1, r6
 800d296:	4620      	mov	r0, r4
 800d298:	f7fe feed 	bl	800c076 <_Bfree>
 800d29c:	9907      	ldr	r1, [sp, #28]
 800d29e:	4620      	mov	r0, r4
 800d2a0:	f7fe fee9 	bl	800c076 <_Bfree>
 800d2a4:	4629      	mov	r1, r5
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	f7fe fee5 	bl	800c076 <_Bfree>
 800d2ac:	e5dc      	b.n	800ce68 <_strtod_l+0x88>
 800d2ae:	4b36      	ldr	r3, [pc, #216]	; (800d388 <_strtod_l+0x5a8>)
 800d2b0:	9304      	str	r3, [sp, #16]
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d2b8:	4650      	mov	r0, sl
 800d2ba:	4659      	mov	r1, fp
 800d2bc:	4699      	mov	r9, r3
 800d2be:	f1b8 0f01 	cmp.w	r8, #1
 800d2c2:	dc21      	bgt.n	800d308 <_strtod_l+0x528>
 800d2c4:	b10b      	cbz	r3, 800d2ca <_strtod_l+0x4ea>
 800d2c6:	4682      	mov	sl, r0
 800d2c8:	468b      	mov	fp, r1
 800d2ca:	4b2f      	ldr	r3, [pc, #188]	; (800d388 <_strtod_l+0x5a8>)
 800d2cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d2d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d2d4:	4652      	mov	r2, sl
 800d2d6:	465b      	mov	r3, fp
 800d2d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d2dc:	f7f3 f994 	bl	8000608 <__aeabi_dmul>
 800d2e0:	4b2a      	ldr	r3, [pc, #168]	; (800d38c <_strtod_l+0x5ac>)
 800d2e2:	460a      	mov	r2, r1
 800d2e4:	400b      	ands	r3, r1
 800d2e6:	492a      	ldr	r1, [pc, #168]	; (800d390 <_strtod_l+0x5b0>)
 800d2e8:	428b      	cmp	r3, r1
 800d2ea:	4682      	mov	sl, r0
 800d2ec:	d8bc      	bhi.n	800d268 <_strtod_l+0x488>
 800d2ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d2f2:	428b      	cmp	r3, r1
 800d2f4:	bf86      	itte	hi
 800d2f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d394 <_strtod_l+0x5b4>
 800d2fa:	f04f 3aff 	movhi.w	sl, #4294967295
 800d2fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d302:	2300      	movs	r3, #0
 800d304:	9304      	str	r3, [sp, #16]
 800d306:	e084      	b.n	800d412 <_strtod_l+0x632>
 800d308:	f018 0f01 	tst.w	r8, #1
 800d30c:	d005      	beq.n	800d31a <_strtod_l+0x53a>
 800d30e:	9b04      	ldr	r3, [sp, #16]
 800d310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d314:	f7f3 f978 	bl	8000608 <__aeabi_dmul>
 800d318:	2301      	movs	r3, #1
 800d31a:	9a04      	ldr	r2, [sp, #16]
 800d31c:	3208      	adds	r2, #8
 800d31e:	f109 0901 	add.w	r9, r9, #1
 800d322:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d326:	9204      	str	r2, [sp, #16]
 800d328:	e7c9      	b.n	800d2be <_strtod_l+0x4de>
 800d32a:	d0ea      	beq.n	800d302 <_strtod_l+0x522>
 800d32c:	f1c8 0800 	rsb	r8, r8, #0
 800d330:	f018 020f 	ands.w	r2, r8, #15
 800d334:	d00a      	beq.n	800d34c <_strtod_l+0x56c>
 800d336:	4b13      	ldr	r3, [pc, #76]	; (800d384 <_strtod_l+0x5a4>)
 800d338:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d33c:	4650      	mov	r0, sl
 800d33e:	4659      	mov	r1, fp
 800d340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d344:	f7f3 fa8a 	bl	800085c <__aeabi_ddiv>
 800d348:	4682      	mov	sl, r0
 800d34a:	468b      	mov	fp, r1
 800d34c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d350:	d0d7      	beq.n	800d302 <_strtod_l+0x522>
 800d352:	f1b8 0f1f 	cmp.w	r8, #31
 800d356:	dd1f      	ble.n	800d398 <_strtod_l+0x5b8>
 800d358:	2500      	movs	r5, #0
 800d35a:	462e      	mov	r6, r5
 800d35c:	9507      	str	r5, [sp, #28]
 800d35e:	9505      	str	r5, [sp, #20]
 800d360:	2322      	movs	r3, #34	; 0x22
 800d362:	f04f 0a00 	mov.w	sl, #0
 800d366:	f04f 0b00 	mov.w	fp, #0
 800d36a:	6023      	str	r3, [r4, #0]
 800d36c:	e786      	b.n	800d27c <_strtod_l+0x49c>
 800d36e:	bf00      	nop
 800d370:	0800ff99 	.word	0x0800ff99
 800d374:	080102f8 	.word	0x080102f8
 800d378:	0800ff91 	.word	0x0800ff91
 800d37c:	08010110 	.word	0x08010110
 800d380:	08010373 	.word	0x08010373
 800d384:	08010210 	.word	0x08010210
 800d388:	080101e8 	.word	0x080101e8
 800d38c:	7ff00000 	.word	0x7ff00000
 800d390:	7ca00000 	.word	0x7ca00000
 800d394:	7fefffff 	.word	0x7fefffff
 800d398:	f018 0310 	ands.w	r3, r8, #16
 800d39c:	bf18      	it	ne
 800d39e:	236a      	movne	r3, #106	; 0x6a
 800d3a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d750 <_strtod_l+0x970>
 800d3a4:	9304      	str	r3, [sp, #16]
 800d3a6:	4650      	mov	r0, sl
 800d3a8:	4659      	mov	r1, fp
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	f018 0f01 	tst.w	r8, #1
 800d3b0:	d004      	beq.n	800d3bc <_strtod_l+0x5dc>
 800d3b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d3b6:	f7f3 f927 	bl	8000608 <__aeabi_dmul>
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d3c0:	f109 0908 	add.w	r9, r9, #8
 800d3c4:	d1f2      	bne.n	800d3ac <_strtod_l+0x5cc>
 800d3c6:	b10b      	cbz	r3, 800d3cc <_strtod_l+0x5ec>
 800d3c8:	4682      	mov	sl, r0
 800d3ca:	468b      	mov	fp, r1
 800d3cc:	9b04      	ldr	r3, [sp, #16]
 800d3ce:	b1c3      	cbz	r3, 800d402 <_strtod_l+0x622>
 800d3d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d3d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	4659      	mov	r1, fp
 800d3dc:	dd11      	ble.n	800d402 <_strtod_l+0x622>
 800d3de:	2b1f      	cmp	r3, #31
 800d3e0:	f340 8124 	ble.w	800d62c <_strtod_l+0x84c>
 800d3e4:	2b34      	cmp	r3, #52	; 0x34
 800d3e6:	bfde      	ittt	le
 800d3e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d3ec:	f04f 33ff 	movle.w	r3, #4294967295
 800d3f0:	fa03 f202 	lslle.w	r2, r3, r2
 800d3f4:	f04f 0a00 	mov.w	sl, #0
 800d3f8:	bfcc      	ite	gt
 800d3fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d3fe:	ea02 0b01 	andle.w	fp, r2, r1
 800d402:	2200      	movs	r2, #0
 800d404:	2300      	movs	r3, #0
 800d406:	4650      	mov	r0, sl
 800d408:	4659      	mov	r1, fp
 800d40a:	f7f3 fb65 	bl	8000ad8 <__aeabi_dcmpeq>
 800d40e:	2800      	cmp	r0, #0
 800d410:	d1a2      	bne.n	800d358 <_strtod_l+0x578>
 800d412:	9b07      	ldr	r3, [sp, #28]
 800d414:	9300      	str	r3, [sp, #0]
 800d416:	9908      	ldr	r1, [sp, #32]
 800d418:	462b      	mov	r3, r5
 800d41a:	463a      	mov	r2, r7
 800d41c:	4620      	mov	r0, r4
 800d41e:	f7fe fe79 	bl	800c114 <__s2b>
 800d422:	9007      	str	r0, [sp, #28]
 800d424:	2800      	cmp	r0, #0
 800d426:	f43f af1f 	beq.w	800d268 <_strtod_l+0x488>
 800d42a:	9b05      	ldr	r3, [sp, #20]
 800d42c:	1b9e      	subs	r6, r3, r6
 800d42e:	9b06      	ldr	r3, [sp, #24]
 800d430:	2b00      	cmp	r3, #0
 800d432:	bfb4      	ite	lt
 800d434:	4633      	movlt	r3, r6
 800d436:	2300      	movge	r3, #0
 800d438:	930c      	str	r3, [sp, #48]	; 0x30
 800d43a:	9b06      	ldr	r3, [sp, #24]
 800d43c:	2500      	movs	r5, #0
 800d43e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d442:	9312      	str	r3, [sp, #72]	; 0x48
 800d444:	462e      	mov	r6, r5
 800d446:	9b07      	ldr	r3, [sp, #28]
 800d448:	4620      	mov	r0, r4
 800d44a:	6859      	ldr	r1, [r3, #4]
 800d44c:	f7fe fdee 	bl	800c02c <_Balloc>
 800d450:	9005      	str	r0, [sp, #20]
 800d452:	2800      	cmp	r0, #0
 800d454:	f43f af0c 	beq.w	800d270 <_strtod_l+0x490>
 800d458:	9b07      	ldr	r3, [sp, #28]
 800d45a:	691a      	ldr	r2, [r3, #16]
 800d45c:	3202      	adds	r2, #2
 800d45e:	f103 010c 	add.w	r1, r3, #12
 800d462:	0092      	lsls	r2, r2, #2
 800d464:	300c      	adds	r0, #12
 800d466:	f7fe fdd3 	bl	800c010 <memcpy>
 800d46a:	ec4b ab10 	vmov	d0, sl, fp
 800d46e:	aa1a      	add	r2, sp, #104	; 0x68
 800d470:	a919      	add	r1, sp, #100	; 0x64
 800d472:	4620      	mov	r0, r4
 800d474:	f7ff f97a 	bl	800c76c <__d2b>
 800d478:	ec4b ab18 	vmov	d8, sl, fp
 800d47c:	9018      	str	r0, [sp, #96]	; 0x60
 800d47e:	2800      	cmp	r0, #0
 800d480:	f43f aef6 	beq.w	800d270 <_strtod_l+0x490>
 800d484:	2101      	movs	r1, #1
 800d486:	4620      	mov	r0, r4
 800d488:	f7fe fede 	bl	800c248 <__i2b>
 800d48c:	4606      	mov	r6, r0
 800d48e:	2800      	cmp	r0, #0
 800d490:	f43f aeee 	beq.w	800d270 <_strtod_l+0x490>
 800d494:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d496:	9904      	ldr	r1, [sp, #16]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	bfab      	itete	ge
 800d49c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d49e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d4a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d4a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d4a6:	bfac      	ite	ge
 800d4a8:	eb03 0902 	addge.w	r9, r3, r2
 800d4ac:	1ad7      	sublt	r7, r2, r3
 800d4ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d4b0:	eba3 0801 	sub.w	r8, r3, r1
 800d4b4:	4490      	add	r8, r2
 800d4b6:	4ba1      	ldr	r3, [pc, #644]	; (800d73c <_strtod_l+0x95c>)
 800d4b8:	f108 38ff 	add.w	r8, r8, #4294967295
 800d4bc:	4598      	cmp	r8, r3
 800d4be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d4c2:	f280 80c7 	bge.w	800d654 <_strtod_l+0x874>
 800d4c6:	eba3 0308 	sub.w	r3, r3, r8
 800d4ca:	2b1f      	cmp	r3, #31
 800d4cc:	eba2 0203 	sub.w	r2, r2, r3
 800d4d0:	f04f 0101 	mov.w	r1, #1
 800d4d4:	f300 80b1 	bgt.w	800d63a <_strtod_l+0x85a>
 800d4d8:	fa01 f303 	lsl.w	r3, r1, r3
 800d4dc:	930d      	str	r3, [sp, #52]	; 0x34
 800d4de:	2300      	movs	r3, #0
 800d4e0:	9308      	str	r3, [sp, #32]
 800d4e2:	eb09 0802 	add.w	r8, r9, r2
 800d4e6:	9b04      	ldr	r3, [sp, #16]
 800d4e8:	45c1      	cmp	r9, r8
 800d4ea:	4417      	add	r7, r2
 800d4ec:	441f      	add	r7, r3
 800d4ee:	464b      	mov	r3, r9
 800d4f0:	bfa8      	it	ge
 800d4f2:	4643      	movge	r3, r8
 800d4f4:	42bb      	cmp	r3, r7
 800d4f6:	bfa8      	it	ge
 800d4f8:	463b      	movge	r3, r7
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	bfc2      	ittt	gt
 800d4fe:	eba8 0803 	subgt.w	r8, r8, r3
 800d502:	1aff      	subgt	r7, r7, r3
 800d504:	eba9 0903 	subgt.w	r9, r9, r3
 800d508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	dd17      	ble.n	800d53e <_strtod_l+0x75e>
 800d50e:	4631      	mov	r1, r6
 800d510:	461a      	mov	r2, r3
 800d512:	4620      	mov	r0, r4
 800d514:	f7fe ff58 	bl	800c3c8 <__pow5mult>
 800d518:	4606      	mov	r6, r0
 800d51a:	2800      	cmp	r0, #0
 800d51c:	f43f aea8 	beq.w	800d270 <_strtod_l+0x490>
 800d520:	4601      	mov	r1, r0
 800d522:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d524:	4620      	mov	r0, r4
 800d526:	f7fe fea5 	bl	800c274 <__multiply>
 800d52a:	900b      	str	r0, [sp, #44]	; 0x2c
 800d52c:	2800      	cmp	r0, #0
 800d52e:	f43f ae9f 	beq.w	800d270 <_strtod_l+0x490>
 800d532:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d534:	4620      	mov	r0, r4
 800d536:	f7fe fd9e 	bl	800c076 <_Bfree>
 800d53a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d53c:	9318      	str	r3, [sp, #96]	; 0x60
 800d53e:	f1b8 0f00 	cmp.w	r8, #0
 800d542:	f300 808c 	bgt.w	800d65e <_strtod_l+0x87e>
 800d546:	9b06      	ldr	r3, [sp, #24]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	dd08      	ble.n	800d55e <_strtod_l+0x77e>
 800d54c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d54e:	9905      	ldr	r1, [sp, #20]
 800d550:	4620      	mov	r0, r4
 800d552:	f7fe ff39 	bl	800c3c8 <__pow5mult>
 800d556:	9005      	str	r0, [sp, #20]
 800d558:	2800      	cmp	r0, #0
 800d55a:	f43f ae89 	beq.w	800d270 <_strtod_l+0x490>
 800d55e:	2f00      	cmp	r7, #0
 800d560:	dd08      	ble.n	800d574 <_strtod_l+0x794>
 800d562:	9905      	ldr	r1, [sp, #20]
 800d564:	463a      	mov	r2, r7
 800d566:	4620      	mov	r0, r4
 800d568:	f7fe ff6e 	bl	800c448 <__lshift>
 800d56c:	9005      	str	r0, [sp, #20]
 800d56e:	2800      	cmp	r0, #0
 800d570:	f43f ae7e 	beq.w	800d270 <_strtod_l+0x490>
 800d574:	f1b9 0f00 	cmp.w	r9, #0
 800d578:	dd08      	ble.n	800d58c <_strtod_l+0x7ac>
 800d57a:	4631      	mov	r1, r6
 800d57c:	464a      	mov	r2, r9
 800d57e:	4620      	mov	r0, r4
 800d580:	f7fe ff62 	bl	800c448 <__lshift>
 800d584:	4606      	mov	r6, r0
 800d586:	2800      	cmp	r0, #0
 800d588:	f43f ae72 	beq.w	800d270 <_strtod_l+0x490>
 800d58c:	9a05      	ldr	r2, [sp, #20]
 800d58e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d590:	4620      	mov	r0, r4
 800d592:	f7fe ffe5 	bl	800c560 <__mdiff>
 800d596:	4605      	mov	r5, r0
 800d598:	2800      	cmp	r0, #0
 800d59a:	f43f ae69 	beq.w	800d270 <_strtod_l+0x490>
 800d59e:	68c3      	ldr	r3, [r0, #12]
 800d5a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	60c3      	str	r3, [r0, #12]
 800d5a6:	4631      	mov	r1, r6
 800d5a8:	f7fe ffbe 	bl	800c528 <__mcmp>
 800d5ac:	2800      	cmp	r0, #0
 800d5ae:	da60      	bge.n	800d672 <_strtod_l+0x892>
 800d5b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5b2:	ea53 030a 	orrs.w	r3, r3, sl
 800d5b6:	f040 8082 	bne.w	800d6be <_strtod_l+0x8de>
 800d5ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d17d      	bne.n	800d6be <_strtod_l+0x8de>
 800d5c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d5c6:	0d1b      	lsrs	r3, r3, #20
 800d5c8:	051b      	lsls	r3, r3, #20
 800d5ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d5ce:	d976      	bls.n	800d6be <_strtod_l+0x8de>
 800d5d0:	696b      	ldr	r3, [r5, #20]
 800d5d2:	b913      	cbnz	r3, 800d5da <_strtod_l+0x7fa>
 800d5d4:	692b      	ldr	r3, [r5, #16]
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	dd71      	ble.n	800d6be <_strtod_l+0x8de>
 800d5da:	4629      	mov	r1, r5
 800d5dc:	2201      	movs	r2, #1
 800d5de:	4620      	mov	r0, r4
 800d5e0:	f7fe ff32 	bl	800c448 <__lshift>
 800d5e4:	4631      	mov	r1, r6
 800d5e6:	4605      	mov	r5, r0
 800d5e8:	f7fe ff9e 	bl	800c528 <__mcmp>
 800d5ec:	2800      	cmp	r0, #0
 800d5ee:	dd66      	ble.n	800d6be <_strtod_l+0x8de>
 800d5f0:	9904      	ldr	r1, [sp, #16]
 800d5f2:	4a53      	ldr	r2, [pc, #332]	; (800d740 <_strtod_l+0x960>)
 800d5f4:	465b      	mov	r3, fp
 800d5f6:	2900      	cmp	r1, #0
 800d5f8:	f000 8081 	beq.w	800d6fe <_strtod_l+0x91e>
 800d5fc:	ea02 010b 	and.w	r1, r2, fp
 800d600:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d604:	dc7b      	bgt.n	800d6fe <_strtod_l+0x91e>
 800d606:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d60a:	f77f aea9 	ble.w	800d360 <_strtod_l+0x580>
 800d60e:	4b4d      	ldr	r3, [pc, #308]	; (800d744 <_strtod_l+0x964>)
 800d610:	4650      	mov	r0, sl
 800d612:	4659      	mov	r1, fp
 800d614:	2200      	movs	r2, #0
 800d616:	f7f2 fff7 	bl	8000608 <__aeabi_dmul>
 800d61a:	460b      	mov	r3, r1
 800d61c:	4303      	orrs	r3, r0
 800d61e:	bf08      	it	eq
 800d620:	2322      	moveq	r3, #34	; 0x22
 800d622:	4682      	mov	sl, r0
 800d624:	468b      	mov	fp, r1
 800d626:	bf08      	it	eq
 800d628:	6023      	streq	r3, [r4, #0]
 800d62a:	e62b      	b.n	800d284 <_strtod_l+0x4a4>
 800d62c:	f04f 32ff 	mov.w	r2, #4294967295
 800d630:	fa02 f303 	lsl.w	r3, r2, r3
 800d634:	ea03 0a0a 	and.w	sl, r3, sl
 800d638:	e6e3      	b.n	800d402 <_strtod_l+0x622>
 800d63a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d63e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d642:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d646:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d64a:	fa01 f308 	lsl.w	r3, r1, r8
 800d64e:	9308      	str	r3, [sp, #32]
 800d650:	910d      	str	r1, [sp, #52]	; 0x34
 800d652:	e746      	b.n	800d4e2 <_strtod_l+0x702>
 800d654:	2300      	movs	r3, #0
 800d656:	9308      	str	r3, [sp, #32]
 800d658:	2301      	movs	r3, #1
 800d65a:	930d      	str	r3, [sp, #52]	; 0x34
 800d65c:	e741      	b.n	800d4e2 <_strtod_l+0x702>
 800d65e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d660:	4642      	mov	r2, r8
 800d662:	4620      	mov	r0, r4
 800d664:	f7fe fef0 	bl	800c448 <__lshift>
 800d668:	9018      	str	r0, [sp, #96]	; 0x60
 800d66a:	2800      	cmp	r0, #0
 800d66c:	f47f af6b 	bne.w	800d546 <_strtod_l+0x766>
 800d670:	e5fe      	b.n	800d270 <_strtod_l+0x490>
 800d672:	465f      	mov	r7, fp
 800d674:	d16e      	bne.n	800d754 <_strtod_l+0x974>
 800d676:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d678:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d67c:	b342      	cbz	r2, 800d6d0 <_strtod_l+0x8f0>
 800d67e:	4a32      	ldr	r2, [pc, #200]	; (800d748 <_strtod_l+0x968>)
 800d680:	4293      	cmp	r3, r2
 800d682:	d128      	bne.n	800d6d6 <_strtod_l+0x8f6>
 800d684:	9b04      	ldr	r3, [sp, #16]
 800d686:	4651      	mov	r1, sl
 800d688:	b1eb      	cbz	r3, 800d6c6 <_strtod_l+0x8e6>
 800d68a:	4b2d      	ldr	r3, [pc, #180]	; (800d740 <_strtod_l+0x960>)
 800d68c:	403b      	ands	r3, r7
 800d68e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d692:	f04f 32ff 	mov.w	r2, #4294967295
 800d696:	d819      	bhi.n	800d6cc <_strtod_l+0x8ec>
 800d698:	0d1b      	lsrs	r3, r3, #20
 800d69a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d69e:	fa02 f303 	lsl.w	r3, r2, r3
 800d6a2:	4299      	cmp	r1, r3
 800d6a4:	d117      	bne.n	800d6d6 <_strtod_l+0x8f6>
 800d6a6:	4b29      	ldr	r3, [pc, #164]	; (800d74c <_strtod_l+0x96c>)
 800d6a8:	429f      	cmp	r7, r3
 800d6aa:	d102      	bne.n	800d6b2 <_strtod_l+0x8d2>
 800d6ac:	3101      	adds	r1, #1
 800d6ae:	f43f addf 	beq.w	800d270 <_strtod_l+0x490>
 800d6b2:	4b23      	ldr	r3, [pc, #140]	; (800d740 <_strtod_l+0x960>)
 800d6b4:	403b      	ands	r3, r7
 800d6b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d6ba:	f04f 0a00 	mov.w	sl, #0
 800d6be:	9b04      	ldr	r3, [sp, #16]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d1a4      	bne.n	800d60e <_strtod_l+0x82e>
 800d6c4:	e5de      	b.n	800d284 <_strtod_l+0x4a4>
 800d6c6:	f04f 33ff 	mov.w	r3, #4294967295
 800d6ca:	e7ea      	b.n	800d6a2 <_strtod_l+0x8c2>
 800d6cc:	4613      	mov	r3, r2
 800d6ce:	e7e8      	b.n	800d6a2 <_strtod_l+0x8c2>
 800d6d0:	ea53 030a 	orrs.w	r3, r3, sl
 800d6d4:	d08c      	beq.n	800d5f0 <_strtod_l+0x810>
 800d6d6:	9b08      	ldr	r3, [sp, #32]
 800d6d8:	b1db      	cbz	r3, 800d712 <_strtod_l+0x932>
 800d6da:	423b      	tst	r3, r7
 800d6dc:	d0ef      	beq.n	800d6be <_strtod_l+0x8de>
 800d6de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6e0:	9a04      	ldr	r2, [sp, #16]
 800d6e2:	4650      	mov	r0, sl
 800d6e4:	4659      	mov	r1, fp
 800d6e6:	b1c3      	cbz	r3, 800d71a <_strtod_l+0x93a>
 800d6e8:	f7ff fb5b 	bl	800cda2 <sulp>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	460b      	mov	r3, r1
 800d6f0:	ec51 0b18 	vmov	r0, r1, d8
 800d6f4:	f7f2 fdd2 	bl	800029c <__adddf3>
 800d6f8:	4682      	mov	sl, r0
 800d6fa:	468b      	mov	fp, r1
 800d6fc:	e7df      	b.n	800d6be <_strtod_l+0x8de>
 800d6fe:	4013      	ands	r3, r2
 800d700:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d704:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d708:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d70c:	f04f 3aff 	mov.w	sl, #4294967295
 800d710:	e7d5      	b.n	800d6be <_strtod_l+0x8de>
 800d712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d714:	ea13 0f0a 	tst.w	r3, sl
 800d718:	e7e0      	b.n	800d6dc <_strtod_l+0x8fc>
 800d71a:	f7ff fb42 	bl	800cda2 <sulp>
 800d71e:	4602      	mov	r2, r0
 800d720:	460b      	mov	r3, r1
 800d722:	ec51 0b18 	vmov	r0, r1, d8
 800d726:	f7f2 fdb7 	bl	8000298 <__aeabi_dsub>
 800d72a:	2200      	movs	r2, #0
 800d72c:	2300      	movs	r3, #0
 800d72e:	4682      	mov	sl, r0
 800d730:	468b      	mov	fp, r1
 800d732:	f7f3 f9d1 	bl	8000ad8 <__aeabi_dcmpeq>
 800d736:	2800      	cmp	r0, #0
 800d738:	d0c1      	beq.n	800d6be <_strtod_l+0x8de>
 800d73a:	e611      	b.n	800d360 <_strtod_l+0x580>
 800d73c:	fffffc02 	.word	0xfffffc02
 800d740:	7ff00000 	.word	0x7ff00000
 800d744:	39500000 	.word	0x39500000
 800d748:	000fffff 	.word	0x000fffff
 800d74c:	7fefffff 	.word	0x7fefffff
 800d750:	08010310 	.word	0x08010310
 800d754:	4631      	mov	r1, r6
 800d756:	4628      	mov	r0, r5
 800d758:	f7ff f864 	bl	800c824 <__ratio>
 800d75c:	ec59 8b10 	vmov	r8, r9, d0
 800d760:	ee10 0a10 	vmov	r0, s0
 800d764:	2200      	movs	r2, #0
 800d766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d76a:	4649      	mov	r1, r9
 800d76c:	f7f3 f9c8 	bl	8000b00 <__aeabi_dcmple>
 800d770:	2800      	cmp	r0, #0
 800d772:	d07a      	beq.n	800d86a <_strtod_l+0xa8a>
 800d774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d776:	2b00      	cmp	r3, #0
 800d778:	d04a      	beq.n	800d810 <_strtod_l+0xa30>
 800d77a:	4b95      	ldr	r3, [pc, #596]	; (800d9d0 <_strtod_l+0xbf0>)
 800d77c:	2200      	movs	r2, #0
 800d77e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d782:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d9d0 <_strtod_l+0xbf0>
 800d786:	f04f 0800 	mov.w	r8, #0
 800d78a:	4b92      	ldr	r3, [pc, #584]	; (800d9d4 <_strtod_l+0xbf4>)
 800d78c:	403b      	ands	r3, r7
 800d78e:	930d      	str	r3, [sp, #52]	; 0x34
 800d790:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d792:	4b91      	ldr	r3, [pc, #580]	; (800d9d8 <_strtod_l+0xbf8>)
 800d794:	429a      	cmp	r2, r3
 800d796:	f040 80b0 	bne.w	800d8fa <_strtod_l+0xb1a>
 800d79a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d79e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d7a2:	ec4b ab10 	vmov	d0, sl, fp
 800d7a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d7aa:	f7fe ff63 	bl	800c674 <__ulp>
 800d7ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d7b2:	ec53 2b10 	vmov	r2, r3, d0
 800d7b6:	f7f2 ff27 	bl	8000608 <__aeabi_dmul>
 800d7ba:	4652      	mov	r2, sl
 800d7bc:	465b      	mov	r3, fp
 800d7be:	f7f2 fd6d 	bl	800029c <__adddf3>
 800d7c2:	460b      	mov	r3, r1
 800d7c4:	4983      	ldr	r1, [pc, #524]	; (800d9d4 <_strtod_l+0xbf4>)
 800d7c6:	4a85      	ldr	r2, [pc, #532]	; (800d9dc <_strtod_l+0xbfc>)
 800d7c8:	4019      	ands	r1, r3
 800d7ca:	4291      	cmp	r1, r2
 800d7cc:	4682      	mov	sl, r0
 800d7ce:	d960      	bls.n	800d892 <_strtod_l+0xab2>
 800d7d0:	ee18 3a90 	vmov	r3, s17
 800d7d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d104      	bne.n	800d7e6 <_strtod_l+0xa06>
 800d7dc:	ee18 3a10 	vmov	r3, s16
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	f43f ad45 	beq.w	800d270 <_strtod_l+0x490>
 800d7e6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d9e8 <_strtod_l+0xc08>
 800d7ea:	f04f 3aff 	mov.w	sl, #4294967295
 800d7ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d7f0:	4620      	mov	r0, r4
 800d7f2:	f7fe fc40 	bl	800c076 <_Bfree>
 800d7f6:	9905      	ldr	r1, [sp, #20]
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f7fe fc3c 	bl	800c076 <_Bfree>
 800d7fe:	4631      	mov	r1, r6
 800d800:	4620      	mov	r0, r4
 800d802:	f7fe fc38 	bl	800c076 <_Bfree>
 800d806:	4629      	mov	r1, r5
 800d808:	4620      	mov	r0, r4
 800d80a:	f7fe fc34 	bl	800c076 <_Bfree>
 800d80e:	e61a      	b.n	800d446 <_strtod_l+0x666>
 800d810:	f1ba 0f00 	cmp.w	sl, #0
 800d814:	d11b      	bne.n	800d84e <_strtod_l+0xa6e>
 800d816:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d81a:	b9f3      	cbnz	r3, 800d85a <_strtod_l+0xa7a>
 800d81c:	4b6c      	ldr	r3, [pc, #432]	; (800d9d0 <_strtod_l+0xbf0>)
 800d81e:	2200      	movs	r2, #0
 800d820:	4640      	mov	r0, r8
 800d822:	4649      	mov	r1, r9
 800d824:	f7f3 f962 	bl	8000aec <__aeabi_dcmplt>
 800d828:	b9d0      	cbnz	r0, 800d860 <_strtod_l+0xa80>
 800d82a:	4640      	mov	r0, r8
 800d82c:	4649      	mov	r1, r9
 800d82e:	4b6c      	ldr	r3, [pc, #432]	; (800d9e0 <_strtod_l+0xc00>)
 800d830:	2200      	movs	r2, #0
 800d832:	f7f2 fee9 	bl	8000608 <__aeabi_dmul>
 800d836:	4680      	mov	r8, r0
 800d838:	4689      	mov	r9, r1
 800d83a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d83e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d842:	9315      	str	r3, [sp, #84]	; 0x54
 800d844:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d848:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d84c:	e79d      	b.n	800d78a <_strtod_l+0x9aa>
 800d84e:	f1ba 0f01 	cmp.w	sl, #1
 800d852:	d102      	bne.n	800d85a <_strtod_l+0xa7a>
 800d854:	2f00      	cmp	r7, #0
 800d856:	f43f ad83 	beq.w	800d360 <_strtod_l+0x580>
 800d85a:	4b62      	ldr	r3, [pc, #392]	; (800d9e4 <_strtod_l+0xc04>)
 800d85c:	2200      	movs	r2, #0
 800d85e:	e78e      	b.n	800d77e <_strtod_l+0x99e>
 800d860:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d9e0 <_strtod_l+0xc00>
 800d864:	f04f 0800 	mov.w	r8, #0
 800d868:	e7e7      	b.n	800d83a <_strtod_l+0xa5a>
 800d86a:	4b5d      	ldr	r3, [pc, #372]	; (800d9e0 <_strtod_l+0xc00>)
 800d86c:	4640      	mov	r0, r8
 800d86e:	4649      	mov	r1, r9
 800d870:	2200      	movs	r2, #0
 800d872:	f7f2 fec9 	bl	8000608 <__aeabi_dmul>
 800d876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d878:	4680      	mov	r8, r0
 800d87a:	4689      	mov	r9, r1
 800d87c:	b933      	cbnz	r3, 800d88c <_strtod_l+0xaac>
 800d87e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d882:	900e      	str	r0, [sp, #56]	; 0x38
 800d884:	930f      	str	r3, [sp, #60]	; 0x3c
 800d886:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d88a:	e7dd      	b.n	800d848 <_strtod_l+0xa68>
 800d88c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d890:	e7f9      	b.n	800d886 <_strtod_l+0xaa6>
 800d892:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d896:	9b04      	ldr	r3, [sp, #16]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d1a8      	bne.n	800d7ee <_strtod_l+0xa0e>
 800d89c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d8a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d8a2:	0d1b      	lsrs	r3, r3, #20
 800d8a4:	051b      	lsls	r3, r3, #20
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d1a1      	bne.n	800d7ee <_strtod_l+0xa0e>
 800d8aa:	4640      	mov	r0, r8
 800d8ac:	4649      	mov	r1, r9
 800d8ae:	f7f3 fa0b 	bl	8000cc8 <__aeabi_d2lz>
 800d8b2:	f7f2 fe7b 	bl	80005ac <__aeabi_l2d>
 800d8b6:	4602      	mov	r2, r0
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	4640      	mov	r0, r8
 800d8bc:	4649      	mov	r1, r9
 800d8be:	f7f2 fceb 	bl	8000298 <__aeabi_dsub>
 800d8c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d8c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8c8:	ea43 030a 	orr.w	r3, r3, sl
 800d8cc:	4313      	orrs	r3, r2
 800d8ce:	4680      	mov	r8, r0
 800d8d0:	4689      	mov	r9, r1
 800d8d2:	d055      	beq.n	800d980 <_strtod_l+0xba0>
 800d8d4:	a336      	add	r3, pc, #216	; (adr r3, 800d9b0 <_strtod_l+0xbd0>)
 800d8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8da:	f7f3 f907 	bl	8000aec <__aeabi_dcmplt>
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	f47f acd0 	bne.w	800d284 <_strtod_l+0x4a4>
 800d8e4:	a334      	add	r3, pc, #208	; (adr r3, 800d9b8 <_strtod_l+0xbd8>)
 800d8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ea:	4640      	mov	r0, r8
 800d8ec:	4649      	mov	r1, r9
 800d8ee:	f7f3 f91b 	bl	8000b28 <__aeabi_dcmpgt>
 800d8f2:	2800      	cmp	r0, #0
 800d8f4:	f43f af7b 	beq.w	800d7ee <_strtod_l+0xa0e>
 800d8f8:	e4c4      	b.n	800d284 <_strtod_l+0x4a4>
 800d8fa:	9b04      	ldr	r3, [sp, #16]
 800d8fc:	b333      	cbz	r3, 800d94c <_strtod_l+0xb6c>
 800d8fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d900:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d904:	d822      	bhi.n	800d94c <_strtod_l+0xb6c>
 800d906:	a32e      	add	r3, pc, #184	; (adr r3, 800d9c0 <_strtod_l+0xbe0>)
 800d908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90c:	4640      	mov	r0, r8
 800d90e:	4649      	mov	r1, r9
 800d910:	f7f3 f8f6 	bl	8000b00 <__aeabi_dcmple>
 800d914:	b1a0      	cbz	r0, 800d940 <_strtod_l+0xb60>
 800d916:	4649      	mov	r1, r9
 800d918:	4640      	mov	r0, r8
 800d91a:	f7f3 f94d 	bl	8000bb8 <__aeabi_d2uiz>
 800d91e:	2801      	cmp	r0, #1
 800d920:	bf38      	it	cc
 800d922:	2001      	movcc	r0, #1
 800d924:	f7f2 fdf6 	bl	8000514 <__aeabi_ui2d>
 800d928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d92a:	4680      	mov	r8, r0
 800d92c:	4689      	mov	r9, r1
 800d92e:	bb23      	cbnz	r3, 800d97a <_strtod_l+0xb9a>
 800d930:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d934:	9010      	str	r0, [sp, #64]	; 0x40
 800d936:	9311      	str	r3, [sp, #68]	; 0x44
 800d938:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d93c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d942:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d944:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d948:	1a9b      	subs	r3, r3, r2
 800d94a:	9309      	str	r3, [sp, #36]	; 0x24
 800d94c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d950:	eeb0 0a48 	vmov.f32	s0, s16
 800d954:	eef0 0a68 	vmov.f32	s1, s17
 800d958:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d95c:	f7fe fe8a 	bl	800c674 <__ulp>
 800d960:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d964:	ec53 2b10 	vmov	r2, r3, d0
 800d968:	f7f2 fe4e 	bl	8000608 <__aeabi_dmul>
 800d96c:	ec53 2b18 	vmov	r2, r3, d8
 800d970:	f7f2 fc94 	bl	800029c <__adddf3>
 800d974:	4682      	mov	sl, r0
 800d976:	468b      	mov	fp, r1
 800d978:	e78d      	b.n	800d896 <_strtod_l+0xab6>
 800d97a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d97e:	e7db      	b.n	800d938 <_strtod_l+0xb58>
 800d980:	a311      	add	r3, pc, #68	; (adr r3, 800d9c8 <_strtod_l+0xbe8>)
 800d982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d986:	f7f3 f8b1 	bl	8000aec <__aeabi_dcmplt>
 800d98a:	e7b2      	b.n	800d8f2 <_strtod_l+0xb12>
 800d98c:	2300      	movs	r3, #0
 800d98e:	930a      	str	r3, [sp, #40]	; 0x28
 800d990:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d992:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d994:	6013      	str	r3, [r2, #0]
 800d996:	f7ff ba6b 	b.w	800ce70 <_strtod_l+0x90>
 800d99a:	2a65      	cmp	r2, #101	; 0x65
 800d99c:	f43f ab5f 	beq.w	800d05e <_strtod_l+0x27e>
 800d9a0:	2a45      	cmp	r2, #69	; 0x45
 800d9a2:	f43f ab5c 	beq.w	800d05e <_strtod_l+0x27e>
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	f7ff bb94 	b.w	800d0d4 <_strtod_l+0x2f4>
 800d9ac:	f3af 8000 	nop.w
 800d9b0:	94a03595 	.word	0x94a03595
 800d9b4:	3fdfffff 	.word	0x3fdfffff
 800d9b8:	35afe535 	.word	0x35afe535
 800d9bc:	3fe00000 	.word	0x3fe00000
 800d9c0:	ffc00000 	.word	0xffc00000
 800d9c4:	41dfffff 	.word	0x41dfffff
 800d9c8:	94a03595 	.word	0x94a03595
 800d9cc:	3fcfffff 	.word	0x3fcfffff
 800d9d0:	3ff00000 	.word	0x3ff00000
 800d9d4:	7ff00000 	.word	0x7ff00000
 800d9d8:	7fe00000 	.word	0x7fe00000
 800d9dc:	7c9fffff 	.word	0x7c9fffff
 800d9e0:	3fe00000 	.word	0x3fe00000
 800d9e4:	bff00000 	.word	0xbff00000
 800d9e8:	7fefffff 	.word	0x7fefffff

0800d9ec <_strtod_r>:
 800d9ec:	4b01      	ldr	r3, [pc, #4]	; (800d9f4 <_strtod_r+0x8>)
 800d9ee:	f7ff b9f7 	b.w	800cde0 <_strtod_l>
 800d9f2:	bf00      	nop
 800d9f4:	20000854 	.word	0x20000854

0800d9f8 <_strtoll_l.constprop.0>:
 800d9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9fc:	b085      	sub	sp, #20
 800d9fe:	4688      	mov	r8, r1
 800da00:	9201      	str	r2, [sp, #4]
 800da02:	4a47      	ldr	r2, [pc, #284]	; (800db20 <_strtoll_l.constprop.0+0x128>)
 800da04:	9003      	str	r0, [sp, #12]
 800da06:	461e      	mov	r6, r3
 800da08:	460d      	mov	r5, r1
 800da0a:	462b      	mov	r3, r5
 800da0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da10:	5ca7      	ldrb	r7, [r4, r2]
 800da12:	f017 0708 	ands.w	r7, r7, #8
 800da16:	d1f8      	bne.n	800da0a <_strtoll_l.constprop.0+0x12>
 800da18:	2c2d      	cmp	r4, #45	; 0x2d
 800da1a:	d147      	bne.n	800daac <_strtoll_l.constprop.0+0xb4>
 800da1c:	782c      	ldrb	r4, [r5, #0]
 800da1e:	2701      	movs	r7, #1
 800da20:	1c9d      	adds	r5, r3, #2
 800da22:	2e00      	cmp	r6, #0
 800da24:	d077      	beq.n	800db16 <_strtoll_l.constprop.0+0x11e>
 800da26:	2e10      	cmp	r6, #16
 800da28:	d109      	bne.n	800da3e <_strtoll_l.constprop.0+0x46>
 800da2a:	2c30      	cmp	r4, #48	; 0x30
 800da2c:	d107      	bne.n	800da3e <_strtoll_l.constprop.0+0x46>
 800da2e:	782b      	ldrb	r3, [r5, #0]
 800da30:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800da34:	2b58      	cmp	r3, #88	; 0x58
 800da36:	d169      	bne.n	800db0c <_strtoll_l.constprop.0+0x114>
 800da38:	786c      	ldrb	r4, [r5, #1]
 800da3a:	2610      	movs	r6, #16
 800da3c:	3502      	adds	r5, #2
 800da3e:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 800da42:	f107 3bff 	add.w	fp, r7, #4294967295
 800da46:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da4a:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800da4e:	4632      	mov	r2, r6
 800da50:	464b      	mov	r3, r9
 800da52:	4658      	mov	r0, fp
 800da54:	4651      	mov	r1, sl
 800da56:	f7f3 f91f 	bl	8000c98 <__aeabi_uldivmod>
 800da5a:	2300      	movs	r3, #0
 800da5c:	9202      	str	r2, [sp, #8]
 800da5e:	468c      	mov	ip, r1
 800da60:	4602      	mov	r2, r0
 800da62:	4619      	mov	r1, r3
 800da64:	4618      	mov	r0, r3
 800da66:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800da6a:	f1be 0f09 	cmp.w	lr, #9
 800da6e:	d822      	bhi.n	800dab6 <_strtoll_l.constprop.0+0xbe>
 800da70:	4674      	mov	r4, lr
 800da72:	42a6      	cmp	r6, r4
 800da74:	dd30      	ble.n	800dad8 <_strtoll_l.constprop.0+0xe0>
 800da76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da7a:	d014      	beq.n	800daa6 <_strtoll_l.constprop.0+0xae>
 800da7c:	4282      	cmp	r2, r0
 800da7e:	eb7c 0301 	sbcs.w	r3, ip, r1
 800da82:	d326      	bcc.n	800dad2 <_strtoll_l.constprop.0+0xda>
 800da84:	458c      	cmp	ip, r1
 800da86:	bf08      	it	eq
 800da88:	4282      	cmpeq	r2, r0
 800da8a:	d102      	bne.n	800da92 <_strtoll_l.constprop.0+0x9a>
 800da8c:	9b02      	ldr	r3, [sp, #8]
 800da8e:	42a3      	cmp	r3, r4
 800da90:	db1f      	blt.n	800dad2 <_strtoll_l.constprop.0+0xda>
 800da92:	4371      	muls	r1, r6
 800da94:	fb00 1109 	mla	r1, r0, r9, r1
 800da98:	fba6 0300 	umull	r0, r3, r6, r0
 800da9c:	4419      	add	r1, r3
 800da9e:	1820      	adds	r0, r4, r0
 800daa0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800daa4:	2301      	movs	r3, #1
 800daa6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800daaa:	e7dc      	b.n	800da66 <_strtoll_l.constprop.0+0x6e>
 800daac:	2c2b      	cmp	r4, #43	; 0x2b
 800daae:	bf04      	itt	eq
 800dab0:	782c      	ldrbeq	r4, [r5, #0]
 800dab2:	1c9d      	addeq	r5, r3, #2
 800dab4:	e7b5      	b.n	800da22 <_strtoll_l.constprop.0+0x2a>
 800dab6:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800daba:	f1be 0f19 	cmp.w	lr, #25
 800dabe:	d801      	bhi.n	800dac4 <_strtoll_l.constprop.0+0xcc>
 800dac0:	3c37      	subs	r4, #55	; 0x37
 800dac2:	e7d6      	b.n	800da72 <_strtoll_l.constprop.0+0x7a>
 800dac4:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800dac8:	f1be 0f19 	cmp.w	lr, #25
 800dacc:	d804      	bhi.n	800dad8 <_strtoll_l.constprop.0+0xe0>
 800dace:	3c57      	subs	r4, #87	; 0x57
 800dad0:	e7cf      	b.n	800da72 <_strtoll_l.constprop.0+0x7a>
 800dad2:	f04f 33ff 	mov.w	r3, #4294967295
 800dad6:	e7e6      	b.n	800daa6 <_strtoll_l.constprop.0+0xae>
 800dad8:	1c5a      	adds	r2, r3, #1
 800dada:	d109      	bne.n	800daf0 <_strtoll_l.constprop.0+0xf8>
 800dadc:	9a03      	ldr	r2, [sp, #12]
 800dade:	2322      	movs	r3, #34	; 0x22
 800dae0:	6013      	str	r3, [r2, #0]
 800dae2:	9b01      	ldr	r3, [sp, #4]
 800dae4:	4658      	mov	r0, fp
 800dae6:	4651      	mov	r1, sl
 800dae8:	b953      	cbnz	r3, 800db00 <_strtoll_l.constprop.0+0x108>
 800daea:	b005      	add	sp, #20
 800daec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daf0:	b117      	cbz	r7, 800daf8 <_strtoll_l.constprop.0+0x100>
 800daf2:	4240      	negs	r0, r0
 800daf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800daf8:	9a01      	ldr	r2, [sp, #4]
 800dafa:	2a00      	cmp	r2, #0
 800dafc:	d0f5      	beq.n	800daea <_strtoll_l.constprop.0+0xf2>
 800dafe:	b10b      	cbz	r3, 800db04 <_strtoll_l.constprop.0+0x10c>
 800db00:	f105 38ff 	add.w	r8, r5, #4294967295
 800db04:	9b01      	ldr	r3, [sp, #4]
 800db06:	f8c3 8000 	str.w	r8, [r3]
 800db0a:	e7ee      	b.n	800daea <_strtoll_l.constprop.0+0xf2>
 800db0c:	2430      	movs	r4, #48	; 0x30
 800db0e:	2e00      	cmp	r6, #0
 800db10:	d195      	bne.n	800da3e <_strtoll_l.constprop.0+0x46>
 800db12:	2608      	movs	r6, #8
 800db14:	e793      	b.n	800da3e <_strtoll_l.constprop.0+0x46>
 800db16:	2c30      	cmp	r4, #48	; 0x30
 800db18:	d089      	beq.n	800da2e <_strtoll_l.constprop.0+0x36>
 800db1a:	260a      	movs	r6, #10
 800db1c:	e78f      	b.n	800da3e <_strtoll_l.constprop.0+0x46>
 800db1e:	bf00      	nop
 800db20:	08010009 	.word	0x08010009

0800db24 <_strtoll_r>:
 800db24:	f7ff bf68 	b.w	800d9f8 <_strtoll_l.constprop.0>

0800db28 <_strtoul_l.constprop.0>:
 800db28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db2c:	4f36      	ldr	r7, [pc, #216]	; (800dc08 <_strtoul_l.constprop.0+0xe0>)
 800db2e:	4686      	mov	lr, r0
 800db30:	460d      	mov	r5, r1
 800db32:	4628      	mov	r0, r5
 800db34:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db38:	5de6      	ldrb	r6, [r4, r7]
 800db3a:	f016 0608 	ands.w	r6, r6, #8
 800db3e:	d1f8      	bne.n	800db32 <_strtoul_l.constprop.0+0xa>
 800db40:	2c2d      	cmp	r4, #45	; 0x2d
 800db42:	d12f      	bne.n	800dba4 <_strtoul_l.constprop.0+0x7c>
 800db44:	782c      	ldrb	r4, [r5, #0]
 800db46:	2601      	movs	r6, #1
 800db48:	1c85      	adds	r5, r0, #2
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d057      	beq.n	800dbfe <_strtoul_l.constprop.0+0xd6>
 800db4e:	2b10      	cmp	r3, #16
 800db50:	d109      	bne.n	800db66 <_strtoul_l.constprop.0+0x3e>
 800db52:	2c30      	cmp	r4, #48	; 0x30
 800db54:	d107      	bne.n	800db66 <_strtoul_l.constprop.0+0x3e>
 800db56:	7828      	ldrb	r0, [r5, #0]
 800db58:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800db5c:	2858      	cmp	r0, #88	; 0x58
 800db5e:	d149      	bne.n	800dbf4 <_strtoul_l.constprop.0+0xcc>
 800db60:	786c      	ldrb	r4, [r5, #1]
 800db62:	2310      	movs	r3, #16
 800db64:	3502      	adds	r5, #2
 800db66:	f04f 38ff 	mov.w	r8, #4294967295
 800db6a:	2700      	movs	r7, #0
 800db6c:	fbb8 f8f3 	udiv	r8, r8, r3
 800db70:	fb03 f908 	mul.w	r9, r3, r8
 800db74:	ea6f 0909 	mvn.w	r9, r9
 800db78:	4638      	mov	r0, r7
 800db7a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800db7e:	f1bc 0f09 	cmp.w	ip, #9
 800db82:	d814      	bhi.n	800dbae <_strtoul_l.constprop.0+0x86>
 800db84:	4664      	mov	r4, ip
 800db86:	42a3      	cmp	r3, r4
 800db88:	dd22      	ble.n	800dbd0 <_strtoul_l.constprop.0+0xa8>
 800db8a:	2f00      	cmp	r7, #0
 800db8c:	db1d      	blt.n	800dbca <_strtoul_l.constprop.0+0xa2>
 800db8e:	4580      	cmp	r8, r0
 800db90:	d31b      	bcc.n	800dbca <_strtoul_l.constprop.0+0xa2>
 800db92:	d101      	bne.n	800db98 <_strtoul_l.constprop.0+0x70>
 800db94:	45a1      	cmp	r9, r4
 800db96:	db18      	blt.n	800dbca <_strtoul_l.constprop.0+0xa2>
 800db98:	fb00 4003 	mla	r0, r0, r3, r4
 800db9c:	2701      	movs	r7, #1
 800db9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dba2:	e7ea      	b.n	800db7a <_strtoul_l.constprop.0+0x52>
 800dba4:	2c2b      	cmp	r4, #43	; 0x2b
 800dba6:	bf04      	itt	eq
 800dba8:	782c      	ldrbeq	r4, [r5, #0]
 800dbaa:	1c85      	addeq	r5, r0, #2
 800dbac:	e7cd      	b.n	800db4a <_strtoul_l.constprop.0+0x22>
 800dbae:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dbb2:	f1bc 0f19 	cmp.w	ip, #25
 800dbb6:	d801      	bhi.n	800dbbc <_strtoul_l.constprop.0+0x94>
 800dbb8:	3c37      	subs	r4, #55	; 0x37
 800dbba:	e7e4      	b.n	800db86 <_strtoul_l.constprop.0+0x5e>
 800dbbc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dbc0:	f1bc 0f19 	cmp.w	ip, #25
 800dbc4:	d804      	bhi.n	800dbd0 <_strtoul_l.constprop.0+0xa8>
 800dbc6:	3c57      	subs	r4, #87	; 0x57
 800dbc8:	e7dd      	b.n	800db86 <_strtoul_l.constprop.0+0x5e>
 800dbca:	f04f 37ff 	mov.w	r7, #4294967295
 800dbce:	e7e6      	b.n	800db9e <_strtoul_l.constprop.0+0x76>
 800dbd0:	2f00      	cmp	r7, #0
 800dbd2:	da07      	bge.n	800dbe4 <_strtoul_l.constprop.0+0xbc>
 800dbd4:	2322      	movs	r3, #34	; 0x22
 800dbd6:	f8ce 3000 	str.w	r3, [lr]
 800dbda:	f04f 30ff 	mov.w	r0, #4294967295
 800dbde:	b932      	cbnz	r2, 800dbee <_strtoul_l.constprop.0+0xc6>
 800dbe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbe4:	b106      	cbz	r6, 800dbe8 <_strtoul_l.constprop.0+0xc0>
 800dbe6:	4240      	negs	r0, r0
 800dbe8:	2a00      	cmp	r2, #0
 800dbea:	d0f9      	beq.n	800dbe0 <_strtoul_l.constprop.0+0xb8>
 800dbec:	b107      	cbz	r7, 800dbf0 <_strtoul_l.constprop.0+0xc8>
 800dbee:	1e69      	subs	r1, r5, #1
 800dbf0:	6011      	str	r1, [r2, #0]
 800dbf2:	e7f5      	b.n	800dbe0 <_strtoul_l.constprop.0+0xb8>
 800dbf4:	2430      	movs	r4, #48	; 0x30
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d1b5      	bne.n	800db66 <_strtoul_l.constprop.0+0x3e>
 800dbfa:	2308      	movs	r3, #8
 800dbfc:	e7b3      	b.n	800db66 <_strtoul_l.constprop.0+0x3e>
 800dbfe:	2c30      	cmp	r4, #48	; 0x30
 800dc00:	d0a9      	beq.n	800db56 <_strtoul_l.constprop.0+0x2e>
 800dc02:	230a      	movs	r3, #10
 800dc04:	e7af      	b.n	800db66 <_strtoul_l.constprop.0+0x3e>
 800dc06:	bf00      	nop
 800dc08:	08010009 	.word	0x08010009

0800dc0c <_strtoul_r>:
 800dc0c:	f7ff bf8c 	b.w	800db28 <_strtoul_l.constprop.0>

0800dc10 <_strtoull_l.constprop.0>:
 800dc10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc14:	4692      	mov	sl, r2
 800dc16:	4a49      	ldr	r2, [pc, #292]	; (800dd3c <_strtoull_l.constprop.0+0x12c>)
 800dc18:	9001      	str	r0, [sp, #4]
 800dc1a:	4689      	mov	r9, r1
 800dc1c:	461d      	mov	r5, r3
 800dc1e:	460e      	mov	r6, r1
 800dc20:	4633      	mov	r3, r6
 800dc22:	f816 4b01 	ldrb.w	r4, [r6], #1
 800dc26:	5ca7      	ldrb	r7, [r4, r2]
 800dc28:	f017 0708 	ands.w	r7, r7, #8
 800dc2c:	d1f8      	bne.n	800dc20 <_strtoull_l.constprop.0+0x10>
 800dc2e:	2c2d      	cmp	r4, #45	; 0x2d
 800dc30:	d14a      	bne.n	800dcc8 <_strtoull_l.constprop.0+0xb8>
 800dc32:	7834      	ldrb	r4, [r6, #0]
 800dc34:	2701      	movs	r7, #1
 800dc36:	1c9e      	adds	r6, r3, #2
 800dc38:	2d00      	cmp	r5, #0
 800dc3a:	d07b      	beq.n	800dd34 <_strtoull_l.constprop.0+0x124>
 800dc3c:	2d10      	cmp	r5, #16
 800dc3e:	d109      	bne.n	800dc54 <_strtoull_l.constprop.0+0x44>
 800dc40:	2c30      	cmp	r4, #48	; 0x30
 800dc42:	d107      	bne.n	800dc54 <_strtoull_l.constprop.0+0x44>
 800dc44:	7833      	ldrb	r3, [r6, #0]
 800dc46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dc4a:	2b58      	cmp	r3, #88	; 0x58
 800dc4c:	d16d      	bne.n	800dd2a <_strtoull_l.constprop.0+0x11a>
 800dc4e:	7874      	ldrb	r4, [r6, #1]
 800dc50:	2510      	movs	r5, #16
 800dc52:	3602      	adds	r6, #2
 800dc54:	ea4f 7be5 	mov.w	fp, r5, asr #31
 800dc58:	462a      	mov	r2, r5
 800dc5a:	465b      	mov	r3, fp
 800dc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc60:	f04f 31ff 	mov.w	r1, #4294967295
 800dc64:	f7f3 f818 	bl	8000c98 <__aeabi_uldivmod>
 800dc68:	462a      	mov	r2, r5
 800dc6a:	9000      	str	r0, [sp, #0]
 800dc6c:	4688      	mov	r8, r1
 800dc6e:	465b      	mov	r3, fp
 800dc70:	f04f 30ff 	mov.w	r0, #4294967295
 800dc74:	f04f 31ff 	mov.w	r1, #4294967295
 800dc78:	f7f3 f80e 	bl	8000c98 <__aeabi_uldivmod>
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	4618      	mov	r0, r3
 800dc80:	4619      	mov	r1, r3
 800dc82:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800dc86:	f1bc 0f09 	cmp.w	ip, #9
 800dc8a:	d822      	bhi.n	800dcd2 <_strtoull_l.constprop.0+0xc2>
 800dc8c:	4664      	mov	r4, ip
 800dc8e:	42a5      	cmp	r5, r4
 800dc90:	dd30      	ble.n	800dcf4 <_strtoull_l.constprop.0+0xe4>
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	db2b      	blt.n	800dcee <_strtoull_l.constprop.0+0xde>
 800dc96:	9b00      	ldr	r3, [sp, #0]
 800dc98:	4283      	cmp	r3, r0
 800dc9a:	eb78 0301 	sbcs.w	r3, r8, r1
 800dc9e:	d326      	bcc.n	800dcee <_strtoull_l.constprop.0+0xde>
 800dca0:	9b00      	ldr	r3, [sp, #0]
 800dca2:	4588      	cmp	r8, r1
 800dca4:	bf08      	it	eq
 800dca6:	4283      	cmpeq	r3, r0
 800dca8:	d101      	bne.n	800dcae <_strtoull_l.constprop.0+0x9e>
 800dcaa:	42a2      	cmp	r2, r4
 800dcac:	db1f      	blt.n	800dcee <_strtoull_l.constprop.0+0xde>
 800dcae:	4369      	muls	r1, r5
 800dcb0:	fb00 110b 	mla	r1, r0, fp, r1
 800dcb4:	fba5 0300 	umull	r0, r3, r5, r0
 800dcb8:	4419      	add	r1, r3
 800dcba:	1820      	adds	r0, r4, r0
 800dcbc:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	f816 4b01 	ldrb.w	r4, [r6], #1
 800dcc6:	e7dc      	b.n	800dc82 <_strtoull_l.constprop.0+0x72>
 800dcc8:	2c2b      	cmp	r4, #43	; 0x2b
 800dcca:	bf04      	itt	eq
 800dccc:	7834      	ldrbeq	r4, [r6, #0]
 800dcce:	1c9e      	addeq	r6, r3, #2
 800dcd0:	e7b2      	b.n	800dc38 <_strtoull_l.constprop.0+0x28>
 800dcd2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dcd6:	f1bc 0f19 	cmp.w	ip, #25
 800dcda:	d801      	bhi.n	800dce0 <_strtoull_l.constprop.0+0xd0>
 800dcdc:	3c37      	subs	r4, #55	; 0x37
 800dcde:	e7d6      	b.n	800dc8e <_strtoull_l.constprop.0+0x7e>
 800dce0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dce4:	f1bc 0f19 	cmp.w	ip, #25
 800dce8:	d804      	bhi.n	800dcf4 <_strtoull_l.constprop.0+0xe4>
 800dcea:	3c57      	subs	r4, #87	; 0x57
 800dcec:	e7cf      	b.n	800dc8e <_strtoull_l.constprop.0+0x7e>
 800dcee:	f04f 33ff 	mov.w	r3, #4294967295
 800dcf2:	e7e6      	b.n	800dcc2 <_strtoull_l.constprop.0+0xb2>
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	da0b      	bge.n	800dd10 <_strtoull_l.constprop.0+0x100>
 800dcf8:	9a01      	ldr	r2, [sp, #4]
 800dcfa:	2322      	movs	r3, #34	; 0x22
 800dcfc:	f04f 30ff 	mov.w	r0, #4294967295
 800dd00:	6013      	str	r3, [r2, #0]
 800dd02:	4601      	mov	r1, r0
 800dd04:	f1ba 0f00 	cmp.w	sl, #0
 800dd08:	d10a      	bne.n	800dd20 <_strtoull_l.constprop.0+0x110>
 800dd0a:	b003      	add	sp, #12
 800dd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd10:	b117      	cbz	r7, 800dd18 <_strtoull_l.constprop.0+0x108>
 800dd12:	4240      	negs	r0, r0
 800dd14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800dd18:	f1ba 0f00 	cmp.w	sl, #0
 800dd1c:	d0f5      	beq.n	800dd0a <_strtoull_l.constprop.0+0xfa>
 800dd1e:	b10b      	cbz	r3, 800dd24 <_strtoull_l.constprop.0+0x114>
 800dd20:	f106 39ff 	add.w	r9, r6, #4294967295
 800dd24:	f8ca 9000 	str.w	r9, [sl]
 800dd28:	e7ef      	b.n	800dd0a <_strtoull_l.constprop.0+0xfa>
 800dd2a:	2430      	movs	r4, #48	; 0x30
 800dd2c:	2d00      	cmp	r5, #0
 800dd2e:	d191      	bne.n	800dc54 <_strtoull_l.constprop.0+0x44>
 800dd30:	2508      	movs	r5, #8
 800dd32:	e78f      	b.n	800dc54 <_strtoull_l.constprop.0+0x44>
 800dd34:	2c30      	cmp	r4, #48	; 0x30
 800dd36:	d085      	beq.n	800dc44 <_strtoull_l.constprop.0+0x34>
 800dd38:	250a      	movs	r5, #10
 800dd3a:	e78b      	b.n	800dc54 <_strtoull_l.constprop.0+0x44>
 800dd3c:	08010009 	.word	0x08010009

0800dd40 <_strtoull_r>:
 800dd40:	f7ff bf66 	b.w	800dc10 <_strtoull_l.constprop.0>

0800dd44 <__ssprint_r>:
 800dd44:	6893      	ldr	r3, [r2, #8]
 800dd46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd4a:	4680      	mov	r8, r0
 800dd4c:	460c      	mov	r4, r1
 800dd4e:	4617      	mov	r7, r2
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d061      	beq.n	800de18 <__ssprint_r+0xd4>
 800dd54:	2300      	movs	r3, #0
 800dd56:	f8d2 a000 	ldr.w	sl, [r2]
 800dd5a:	9301      	str	r3, [sp, #4]
 800dd5c:	469b      	mov	fp, r3
 800dd5e:	f1bb 0f00 	cmp.w	fp, #0
 800dd62:	d02b      	beq.n	800ddbc <__ssprint_r+0x78>
 800dd64:	68a6      	ldr	r6, [r4, #8]
 800dd66:	455e      	cmp	r6, fp
 800dd68:	d844      	bhi.n	800ddf4 <__ssprint_r+0xb0>
 800dd6a:	89a2      	ldrh	r2, [r4, #12]
 800dd6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dd70:	d03e      	beq.n	800ddf0 <__ssprint_r+0xac>
 800dd72:	6820      	ldr	r0, [r4, #0]
 800dd74:	6921      	ldr	r1, [r4, #16]
 800dd76:	6965      	ldr	r5, [r4, #20]
 800dd78:	eba0 0901 	sub.w	r9, r0, r1
 800dd7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd84:	f109 0001 	add.w	r0, r9, #1
 800dd88:	106d      	asrs	r5, r5, #1
 800dd8a:	4458      	add	r0, fp
 800dd8c:	4285      	cmp	r5, r0
 800dd8e:	bf38      	it	cc
 800dd90:	4605      	movcc	r5, r0
 800dd92:	0553      	lsls	r3, r2, #21
 800dd94:	d545      	bpl.n	800de22 <__ssprint_r+0xde>
 800dd96:	4629      	mov	r1, r5
 800dd98:	4640      	mov	r0, r8
 800dd9a:	f7fa f9f9 	bl	8008190 <_malloc_r>
 800dd9e:	4606      	mov	r6, r0
 800dda0:	b9a0      	cbnz	r0, 800ddcc <__ssprint_r+0x88>
 800dda2:	230c      	movs	r3, #12
 800dda4:	f8c8 3000 	str.w	r3, [r8]
 800dda8:	89a3      	ldrh	r3, [r4, #12]
 800ddaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddae:	81a3      	strh	r3, [r4, #12]
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	e9c7 3301 	strd	r3, r3, [r7, #4]
 800ddb6:	f04f 30ff 	mov.w	r0, #4294967295
 800ddba:	e02f      	b.n	800de1c <__ssprint_r+0xd8>
 800ddbc:	f8da 3000 	ldr.w	r3, [sl]
 800ddc0:	f8da b004 	ldr.w	fp, [sl, #4]
 800ddc4:	9301      	str	r3, [sp, #4]
 800ddc6:	f10a 0a08 	add.w	sl, sl, #8
 800ddca:	e7c8      	b.n	800dd5e <__ssprint_r+0x1a>
 800ddcc:	464a      	mov	r2, r9
 800ddce:	6921      	ldr	r1, [r4, #16]
 800ddd0:	f7fe f91e 	bl	800c010 <memcpy>
 800ddd4:	89a2      	ldrh	r2, [r4, #12]
 800ddd6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800ddda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ddde:	81a2      	strh	r2, [r4, #12]
 800dde0:	6126      	str	r6, [r4, #16]
 800dde2:	6165      	str	r5, [r4, #20]
 800dde4:	444e      	add	r6, r9
 800dde6:	eba5 0509 	sub.w	r5, r5, r9
 800ddea:	6026      	str	r6, [r4, #0]
 800ddec:	60a5      	str	r5, [r4, #8]
 800ddee:	465e      	mov	r6, fp
 800ddf0:	455e      	cmp	r6, fp
 800ddf2:	d900      	bls.n	800ddf6 <__ssprint_r+0xb2>
 800ddf4:	465e      	mov	r6, fp
 800ddf6:	4632      	mov	r2, r6
 800ddf8:	9901      	ldr	r1, [sp, #4]
 800ddfa:	6820      	ldr	r0, [r4, #0]
 800ddfc:	f000 fe4e 	bl	800ea9c <memmove>
 800de00:	68a2      	ldr	r2, [r4, #8]
 800de02:	1b92      	subs	r2, r2, r6
 800de04:	60a2      	str	r2, [r4, #8]
 800de06:	6822      	ldr	r2, [r4, #0]
 800de08:	4432      	add	r2, r6
 800de0a:	6022      	str	r2, [r4, #0]
 800de0c:	68ba      	ldr	r2, [r7, #8]
 800de0e:	eba2 030b 	sub.w	r3, r2, fp
 800de12:	60bb      	str	r3, [r7, #8]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d1d1      	bne.n	800ddbc <__ssprint_r+0x78>
 800de18:	2000      	movs	r0, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	b003      	add	sp, #12
 800de1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de22:	462a      	mov	r2, r5
 800de24:	4640      	mov	r0, r8
 800de26:	f7fe fd8f 	bl	800c948 <_realloc_r>
 800de2a:	4606      	mov	r6, r0
 800de2c:	2800      	cmp	r0, #0
 800de2e:	d1d7      	bne.n	800dde0 <__ssprint_r+0x9c>
 800de30:	6921      	ldr	r1, [r4, #16]
 800de32:	4640      	mov	r0, r8
 800de34:	f7fd ffd2 	bl	800bddc <_free_r>
 800de38:	e7b3      	b.n	800dda2 <__ssprint_r+0x5e>

0800de3a <_sungetc_r>:
 800de3a:	b538      	push	{r3, r4, r5, lr}
 800de3c:	1c4b      	adds	r3, r1, #1
 800de3e:	4614      	mov	r4, r2
 800de40:	d103      	bne.n	800de4a <_sungetc_r+0x10>
 800de42:	f04f 35ff 	mov.w	r5, #4294967295
 800de46:	4628      	mov	r0, r5
 800de48:	bd38      	pop	{r3, r4, r5, pc}
 800de4a:	8993      	ldrh	r3, [r2, #12]
 800de4c:	f023 0320 	bic.w	r3, r3, #32
 800de50:	8193      	strh	r3, [r2, #12]
 800de52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800de54:	6852      	ldr	r2, [r2, #4]
 800de56:	b2cd      	uxtb	r5, r1
 800de58:	b18b      	cbz	r3, 800de7e <_sungetc_r+0x44>
 800de5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de5c:	4293      	cmp	r3, r2
 800de5e:	dd08      	ble.n	800de72 <_sungetc_r+0x38>
 800de60:	6823      	ldr	r3, [r4, #0]
 800de62:	1e5a      	subs	r2, r3, #1
 800de64:	6022      	str	r2, [r4, #0]
 800de66:	f803 5c01 	strb.w	r5, [r3, #-1]
 800de6a:	6863      	ldr	r3, [r4, #4]
 800de6c:	3301      	adds	r3, #1
 800de6e:	6063      	str	r3, [r4, #4]
 800de70:	e7e9      	b.n	800de46 <_sungetc_r+0xc>
 800de72:	4621      	mov	r1, r4
 800de74:	f000 f873 	bl	800df5e <__submore>
 800de78:	2800      	cmp	r0, #0
 800de7a:	d0f1      	beq.n	800de60 <_sungetc_r+0x26>
 800de7c:	e7e1      	b.n	800de42 <_sungetc_r+0x8>
 800de7e:	6921      	ldr	r1, [r4, #16]
 800de80:	6823      	ldr	r3, [r4, #0]
 800de82:	b151      	cbz	r1, 800de9a <_sungetc_r+0x60>
 800de84:	4299      	cmp	r1, r3
 800de86:	d208      	bcs.n	800de9a <_sungetc_r+0x60>
 800de88:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800de8c:	42a9      	cmp	r1, r5
 800de8e:	d104      	bne.n	800de9a <_sungetc_r+0x60>
 800de90:	3b01      	subs	r3, #1
 800de92:	3201      	adds	r2, #1
 800de94:	6023      	str	r3, [r4, #0]
 800de96:	6062      	str	r2, [r4, #4]
 800de98:	e7d5      	b.n	800de46 <_sungetc_r+0xc>
 800de9a:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 800de9e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800dea2:	6323      	str	r3, [r4, #48]	; 0x30
 800dea4:	2303      	movs	r3, #3
 800dea6:	6363      	str	r3, [r4, #52]	; 0x34
 800dea8:	4623      	mov	r3, r4
 800deaa:	f803 5f42 	strb.w	r5, [r3, #66]!
 800deae:	6023      	str	r3, [r4, #0]
 800deb0:	2301      	movs	r3, #1
 800deb2:	e7dc      	b.n	800de6e <_sungetc_r+0x34>

0800deb4 <__ssrefill_r>:
 800deb4:	b510      	push	{r4, lr}
 800deb6:	460c      	mov	r4, r1
 800deb8:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800deba:	b169      	cbz	r1, 800ded8 <__ssrefill_r+0x24>
 800debc:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800dec0:	4299      	cmp	r1, r3
 800dec2:	d001      	beq.n	800dec8 <__ssrefill_r+0x14>
 800dec4:	f7fd ff8a 	bl	800bddc <_free_r>
 800dec8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800deca:	6063      	str	r3, [r4, #4]
 800decc:	2000      	movs	r0, #0
 800dece:	6320      	str	r0, [r4, #48]	; 0x30
 800ded0:	b113      	cbz	r3, 800ded8 <__ssrefill_r+0x24>
 800ded2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ded4:	6023      	str	r3, [r4, #0]
 800ded6:	bd10      	pop	{r4, pc}
 800ded8:	6923      	ldr	r3, [r4, #16]
 800deda:	6023      	str	r3, [r4, #0]
 800dedc:	2300      	movs	r3, #0
 800dede:	6063      	str	r3, [r4, #4]
 800dee0:	89a3      	ldrh	r3, [r4, #12]
 800dee2:	f043 0320 	orr.w	r3, r3, #32
 800dee6:	81a3      	strh	r3, [r4, #12]
 800dee8:	f04f 30ff 	mov.w	r0, #4294967295
 800deec:	e7f3      	b.n	800ded6 <__ssrefill_r+0x22>

0800deee <_sfread_r>:
 800deee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800def2:	461f      	mov	r7, r3
 800def4:	4613      	mov	r3, r2
 800def6:	437b      	muls	r3, r7
 800def8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800defa:	4682      	mov	sl, r0
 800defc:	4688      	mov	r8, r1
 800defe:	4691      	mov	r9, r2
 800df00:	d027      	beq.n	800df52 <_sfread_r+0x64>
 800df02:	461e      	mov	r6, r3
 800df04:	e9d4 1500 	ldrd	r1, r5, [r4]
 800df08:	42b5      	cmp	r5, r6
 800df0a:	d30b      	bcc.n	800df24 <_sfread_r+0x36>
 800df0c:	4632      	mov	r2, r6
 800df0e:	4640      	mov	r0, r8
 800df10:	f7fe f87e 	bl	800c010 <memcpy>
 800df14:	6862      	ldr	r2, [r4, #4]
 800df16:	6821      	ldr	r1, [r4, #0]
 800df18:	1b92      	subs	r2, r2, r6
 800df1a:	4431      	add	r1, r6
 800df1c:	6062      	str	r2, [r4, #4]
 800df1e:	6021      	str	r1, [r4, #0]
 800df20:	463b      	mov	r3, r7
 800df22:	e016      	b.n	800df52 <_sfread_r+0x64>
 800df24:	462a      	mov	r2, r5
 800df26:	4640      	mov	r0, r8
 800df28:	9301      	str	r3, [sp, #4]
 800df2a:	f7fe f871 	bl	800c010 <memcpy>
 800df2e:	6822      	ldr	r2, [r4, #0]
 800df30:	2300      	movs	r3, #0
 800df32:	442a      	add	r2, r5
 800df34:	6063      	str	r3, [r4, #4]
 800df36:	6022      	str	r2, [r4, #0]
 800df38:	4621      	mov	r1, r4
 800df3a:	4650      	mov	r0, sl
 800df3c:	f7ff ffba 	bl	800deb4 <__ssrefill_r>
 800df40:	44a8      	add	r8, r5
 800df42:	9b01      	ldr	r3, [sp, #4]
 800df44:	eba6 0b05 	sub.w	fp, r6, r5
 800df48:	b138      	cbz	r0, 800df5a <_sfread_r+0x6c>
 800df4a:	18e9      	adds	r1, r5, r3
 800df4c:	1b89      	subs	r1, r1, r6
 800df4e:	fbb1 f3f9 	udiv	r3, r1, r9
 800df52:	4618      	mov	r0, r3
 800df54:	b003      	add	sp, #12
 800df56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df5a:	465e      	mov	r6, fp
 800df5c:	e7d2      	b.n	800df04 <_sfread_r+0x16>

0800df5e <__submore>:
 800df5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df62:	460c      	mov	r4, r1
 800df64:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800df66:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800df6a:	4299      	cmp	r1, r3
 800df6c:	d11d      	bne.n	800dfaa <__submore+0x4c>
 800df6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800df72:	f7fa f90d 	bl	8008190 <_malloc_r>
 800df76:	b918      	cbnz	r0, 800df80 <__submore+0x22>
 800df78:	f04f 30ff 	mov.w	r0, #4294967295
 800df7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df84:	6363      	str	r3, [r4, #52]	; 0x34
 800df86:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800df8a:	6320      	str	r0, [r4, #48]	; 0x30
 800df8c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800df90:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800df94:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800df98:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800df9c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800dfa0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800dfa4:	6020      	str	r0, [r4, #0]
 800dfa6:	2000      	movs	r0, #0
 800dfa8:	e7e8      	b.n	800df7c <__submore+0x1e>
 800dfaa:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800dfac:	0077      	lsls	r7, r6, #1
 800dfae:	463a      	mov	r2, r7
 800dfb0:	f7fe fcca 	bl	800c948 <_realloc_r>
 800dfb4:	4605      	mov	r5, r0
 800dfb6:	2800      	cmp	r0, #0
 800dfb8:	d0de      	beq.n	800df78 <__submore+0x1a>
 800dfba:	eb00 0806 	add.w	r8, r0, r6
 800dfbe:	4601      	mov	r1, r0
 800dfc0:	4632      	mov	r2, r6
 800dfc2:	4640      	mov	r0, r8
 800dfc4:	f7fe f824 	bl	800c010 <memcpy>
 800dfc8:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
 800dfcc:	f8c4 8000 	str.w	r8, [r4]
 800dfd0:	e7e9      	b.n	800dfa6 <__submore+0x48>

0800dfd2 <__ascii_wctomb>:
 800dfd2:	b149      	cbz	r1, 800dfe8 <__ascii_wctomb+0x16>
 800dfd4:	2aff      	cmp	r2, #255	; 0xff
 800dfd6:	bf85      	ittet	hi
 800dfd8:	238a      	movhi	r3, #138	; 0x8a
 800dfda:	6003      	strhi	r3, [r0, #0]
 800dfdc:	700a      	strbls	r2, [r1, #0]
 800dfde:	f04f 30ff 	movhi.w	r0, #4294967295
 800dfe2:	bf98      	it	ls
 800dfe4:	2001      	movls	r0, #1
 800dfe6:	4770      	bx	lr
 800dfe8:	4608      	mov	r0, r1
 800dfea:	4770      	bx	lr

0800dfec <__register_exitproc>:
 800dfec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dff0:	f8df a078 	ldr.w	sl, [pc, #120]	; 800e06c <__register_exitproc+0x80>
 800dff4:	4606      	mov	r6, r0
 800dff6:	f8da 0000 	ldr.w	r0, [sl]
 800dffa:	4698      	mov	r8, r3
 800dffc:	460f      	mov	r7, r1
 800dffe:	4691      	mov	r9, r2
 800e000:	f7fd ffc6 	bl	800bf90 <__retarget_lock_acquire_recursive>
 800e004:	4b18      	ldr	r3, [pc, #96]	; (800e068 <__register_exitproc+0x7c>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800e00c:	b91c      	cbnz	r4, 800e016 <__register_exitproc+0x2a>
 800e00e:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800e012:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800e016:	6865      	ldr	r5, [r4, #4]
 800e018:	f8da 0000 	ldr.w	r0, [sl]
 800e01c:	2d1f      	cmp	r5, #31
 800e01e:	dd05      	ble.n	800e02c <__register_exitproc+0x40>
 800e020:	f7fd ffb7 	bl	800bf92 <__retarget_lock_release_recursive>
 800e024:	f04f 30ff 	mov.w	r0, #4294967295
 800e028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e02c:	b19e      	cbz	r6, 800e056 <__register_exitproc+0x6a>
 800e02e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800e032:	2201      	movs	r2, #1
 800e034:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800e038:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800e03c:	40aa      	lsls	r2, r5
 800e03e:	4313      	orrs	r3, r2
 800e040:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800e044:	2e02      	cmp	r6, #2
 800e046:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800e04a:	bf02      	ittt	eq
 800e04c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800e050:	4313      	orreq	r3, r2
 800e052:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800e056:	1c6b      	adds	r3, r5, #1
 800e058:	3502      	adds	r5, #2
 800e05a:	6063      	str	r3, [r4, #4]
 800e05c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800e060:	f7fd ff97 	bl	800bf92 <__retarget_lock_release_recursive>
 800e064:	2000      	movs	r0, #0
 800e066:	e7df      	b.n	800e028 <__register_exitproc+0x3c>
 800e068:	0800ff88 	.word	0x0800ff88
 800e06c:	20000850 	.word	0x20000850

0800e070 <__assert_func>:
 800e070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e072:	4614      	mov	r4, r2
 800e074:	461a      	mov	r2, r3
 800e076:	4b09      	ldr	r3, [pc, #36]	; (800e09c <__assert_func+0x2c>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4605      	mov	r5, r0
 800e07c:	68d8      	ldr	r0, [r3, #12]
 800e07e:	b14c      	cbz	r4, 800e094 <__assert_func+0x24>
 800e080:	4b07      	ldr	r3, [pc, #28]	; (800e0a0 <__assert_func+0x30>)
 800e082:	9100      	str	r1, [sp, #0]
 800e084:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e088:	4906      	ldr	r1, [pc, #24]	; (800e0a4 <__assert_func+0x34>)
 800e08a:	462b      	mov	r3, r5
 800e08c:	f000 f966 	bl	800e35c <fiprintf>
 800e090:	f001 fa86 	bl	800f5a0 <abort>
 800e094:	4b04      	ldr	r3, [pc, #16]	; (800e0a8 <__assert_func+0x38>)
 800e096:	461c      	mov	r4, r3
 800e098:	e7f3      	b.n	800e082 <__assert_func+0x12>
 800e09a:	bf00      	nop
 800e09c:	20000010 	.word	0x20000010
 800e0a0:	08010338 	.word	0x08010338
 800e0a4:	08010345 	.word	0x08010345
 800e0a8:	08010373 	.word	0x08010373

0800e0ac <_calloc_r>:
 800e0ac:	b538      	push	{r3, r4, r5, lr}
 800e0ae:	fba1 1502 	umull	r1, r5, r1, r2
 800e0b2:	b92d      	cbnz	r5, 800e0c0 <_calloc_r+0x14>
 800e0b4:	f7fa f86c 	bl	8008190 <_malloc_r>
 800e0b8:	4604      	mov	r4, r0
 800e0ba:	b938      	cbnz	r0, 800e0cc <_calloc_r+0x20>
 800e0bc:	4620      	mov	r0, r4
 800e0be:	bd38      	pop	{r3, r4, r5, pc}
 800e0c0:	f7fa f82c 	bl	800811c <__errno>
 800e0c4:	230c      	movs	r3, #12
 800e0c6:	6003      	str	r3, [r0, #0]
 800e0c8:	2400      	movs	r4, #0
 800e0ca:	e7f7      	b.n	800e0bc <_calloc_r+0x10>
 800e0cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e0d0:	f022 0203 	bic.w	r2, r2, #3
 800e0d4:	3a04      	subs	r2, #4
 800e0d6:	2a24      	cmp	r2, #36	; 0x24
 800e0d8:	d819      	bhi.n	800e10e <_calloc_r+0x62>
 800e0da:	2a13      	cmp	r2, #19
 800e0dc:	d915      	bls.n	800e10a <_calloc_r+0x5e>
 800e0de:	2a1b      	cmp	r2, #27
 800e0e0:	e9c0 5500 	strd	r5, r5, [r0]
 800e0e4:	d806      	bhi.n	800e0f4 <_calloc_r+0x48>
 800e0e6:	f100 0308 	add.w	r3, r0, #8
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	e9c3 2200 	strd	r2, r2, [r3]
 800e0f0:	609a      	str	r2, [r3, #8]
 800e0f2:	e7e3      	b.n	800e0bc <_calloc_r+0x10>
 800e0f4:	2a24      	cmp	r2, #36	; 0x24
 800e0f6:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800e0fa:	bf11      	iteee	ne
 800e0fc:	f100 0310 	addne.w	r3, r0, #16
 800e100:	6105      	streq	r5, [r0, #16]
 800e102:	f100 0318 	addeq.w	r3, r0, #24
 800e106:	6145      	streq	r5, [r0, #20]
 800e108:	e7ef      	b.n	800e0ea <_calloc_r+0x3e>
 800e10a:	4603      	mov	r3, r0
 800e10c:	e7ed      	b.n	800e0ea <_calloc_r+0x3e>
 800e10e:	4629      	mov	r1, r5
 800e110:	f7fa fa7a 	bl	8008608 <memset>
 800e114:	e7d2      	b.n	800e0bc <_calloc_r+0x10>
	...

0800e118 <__sflush_r>:
 800e118:	898b      	ldrh	r3, [r1, #12]
 800e11a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e11e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e122:	4605      	mov	r5, r0
 800e124:	0718      	lsls	r0, r3, #28
 800e126:	460c      	mov	r4, r1
 800e128:	d45f      	bmi.n	800e1ea <__sflush_r+0xd2>
 800e12a:	684b      	ldr	r3, [r1, #4]
 800e12c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e130:	2b00      	cmp	r3, #0
 800e132:	818a      	strh	r2, [r1, #12]
 800e134:	dc05      	bgt.n	800e142 <__sflush_r+0x2a>
 800e136:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800e138:	2b00      	cmp	r3, #0
 800e13a:	dc02      	bgt.n	800e142 <__sflush_r+0x2a>
 800e13c:	2000      	movs	r0, #0
 800e13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e142:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e144:	2e00      	cmp	r6, #0
 800e146:	d0f9      	beq.n	800e13c <__sflush_r+0x24>
 800e148:	2300      	movs	r3, #0
 800e14a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e14e:	682f      	ldr	r7, [r5, #0]
 800e150:	602b      	str	r3, [r5, #0]
 800e152:	d036      	beq.n	800e1c2 <__sflush_r+0xaa>
 800e154:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e156:	89a3      	ldrh	r3, [r4, #12]
 800e158:	075a      	lsls	r2, r3, #29
 800e15a:	d505      	bpl.n	800e168 <__sflush_r+0x50>
 800e15c:	6863      	ldr	r3, [r4, #4]
 800e15e:	1ac0      	subs	r0, r0, r3
 800e160:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e162:	b10b      	cbz	r3, 800e168 <__sflush_r+0x50>
 800e164:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e166:	1ac0      	subs	r0, r0, r3
 800e168:	2300      	movs	r3, #0
 800e16a:	4602      	mov	r2, r0
 800e16c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e16e:	69e1      	ldr	r1, [r4, #28]
 800e170:	4628      	mov	r0, r5
 800e172:	47b0      	blx	r6
 800e174:	1c43      	adds	r3, r0, #1
 800e176:	89a3      	ldrh	r3, [r4, #12]
 800e178:	d106      	bne.n	800e188 <__sflush_r+0x70>
 800e17a:	6829      	ldr	r1, [r5, #0]
 800e17c:	291d      	cmp	r1, #29
 800e17e:	d830      	bhi.n	800e1e2 <__sflush_r+0xca>
 800e180:	4a2b      	ldr	r2, [pc, #172]	; (800e230 <__sflush_r+0x118>)
 800e182:	40ca      	lsrs	r2, r1
 800e184:	07d6      	lsls	r6, r2, #31
 800e186:	d52c      	bpl.n	800e1e2 <__sflush_r+0xca>
 800e188:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e18c:	b21b      	sxth	r3, r3
 800e18e:	2200      	movs	r2, #0
 800e190:	6062      	str	r2, [r4, #4]
 800e192:	04d9      	lsls	r1, r3, #19
 800e194:	6922      	ldr	r2, [r4, #16]
 800e196:	81a3      	strh	r3, [r4, #12]
 800e198:	6022      	str	r2, [r4, #0]
 800e19a:	d504      	bpl.n	800e1a6 <__sflush_r+0x8e>
 800e19c:	1c42      	adds	r2, r0, #1
 800e19e:	d101      	bne.n	800e1a4 <__sflush_r+0x8c>
 800e1a0:	682b      	ldr	r3, [r5, #0]
 800e1a2:	b903      	cbnz	r3, 800e1a6 <__sflush_r+0x8e>
 800e1a4:	6520      	str	r0, [r4, #80]	; 0x50
 800e1a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e1a8:	602f      	str	r7, [r5, #0]
 800e1aa:	2900      	cmp	r1, #0
 800e1ac:	d0c6      	beq.n	800e13c <__sflush_r+0x24>
 800e1ae:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e1b2:	4299      	cmp	r1, r3
 800e1b4:	d002      	beq.n	800e1bc <__sflush_r+0xa4>
 800e1b6:	4628      	mov	r0, r5
 800e1b8:	f7fd fe10 	bl	800bddc <_free_r>
 800e1bc:	2000      	movs	r0, #0
 800e1be:	6320      	str	r0, [r4, #48]	; 0x30
 800e1c0:	e7bd      	b.n	800e13e <__sflush_r+0x26>
 800e1c2:	69e1      	ldr	r1, [r4, #28]
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	47b0      	blx	r6
 800e1ca:	1c41      	adds	r1, r0, #1
 800e1cc:	d1c3      	bne.n	800e156 <__sflush_r+0x3e>
 800e1ce:	682b      	ldr	r3, [r5, #0]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d0c0      	beq.n	800e156 <__sflush_r+0x3e>
 800e1d4:	2b1d      	cmp	r3, #29
 800e1d6:	d001      	beq.n	800e1dc <__sflush_r+0xc4>
 800e1d8:	2b16      	cmp	r3, #22
 800e1da:	d101      	bne.n	800e1e0 <__sflush_r+0xc8>
 800e1dc:	602f      	str	r7, [r5, #0]
 800e1de:	e7ad      	b.n	800e13c <__sflush_r+0x24>
 800e1e0:	89a3      	ldrh	r3, [r4, #12]
 800e1e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1e6:	81a3      	strh	r3, [r4, #12]
 800e1e8:	e7a9      	b.n	800e13e <__sflush_r+0x26>
 800e1ea:	690f      	ldr	r7, [r1, #16]
 800e1ec:	2f00      	cmp	r7, #0
 800e1ee:	d0a5      	beq.n	800e13c <__sflush_r+0x24>
 800e1f0:	079b      	lsls	r3, r3, #30
 800e1f2:	680e      	ldr	r6, [r1, #0]
 800e1f4:	bf08      	it	eq
 800e1f6:	694b      	ldreq	r3, [r1, #20]
 800e1f8:	600f      	str	r7, [r1, #0]
 800e1fa:	bf18      	it	ne
 800e1fc:	2300      	movne	r3, #0
 800e1fe:	eba6 0807 	sub.w	r8, r6, r7
 800e202:	608b      	str	r3, [r1, #8]
 800e204:	f1b8 0f00 	cmp.w	r8, #0
 800e208:	dd98      	ble.n	800e13c <__sflush_r+0x24>
 800e20a:	69e1      	ldr	r1, [r4, #28]
 800e20c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e20e:	4643      	mov	r3, r8
 800e210:	463a      	mov	r2, r7
 800e212:	4628      	mov	r0, r5
 800e214:	47b0      	blx	r6
 800e216:	2800      	cmp	r0, #0
 800e218:	dc06      	bgt.n	800e228 <__sflush_r+0x110>
 800e21a:	89a3      	ldrh	r3, [r4, #12]
 800e21c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e220:	81a3      	strh	r3, [r4, #12]
 800e222:	f04f 30ff 	mov.w	r0, #4294967295
 800e226:	e78a      	b.n	800e13e <__sflush_r+0x26>
 800e228:	4407      	add	r7, r0
 800e22a:	eba8 0800 	sub.w	r8, r8, r0
 800e22e:	e7e9      	b.n	800e204 <__sflush_r+0xec>
 800e230:	20400001 	.word	0x20400001

0800e234 <_fflush_r>:
 800e234:	b538      	push	{r3, r4, r5, lr}
 800e236:	460c      	mov	r4, r1
 800e238:	4605      	mov	r5, r0
 800e23a:	b118      	cbz	r0, 800e244 <_fflush_r+0x10>
 800e23c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e23e:	b90b      	cbnz	r3, 800e244 <_fflush_r+0x10>
 800e240:	f000 f864 	bl	800e30c <__sinit>
 800e244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e248:	b1bb      	cbz	r3, 800e27a <_fflush_r+0x46>
 800e24a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e24c:	07d0      	lsls	r0, r2, #31
 800e24e:	d404      	bmi.n	800e25a <_fflush_r+0x26>
 800e250:	0599      	lsls	r1, r3, #22
 800e252:	d402      	bmi.n	800e25a <_fflush_r+0x26>
 800e254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e256:	f7fd fe9b 	bl	800bf90 <__retarget_lock_acquire_recursive>
 800e25a:	4628      	mov	r0, r5
 800e25c:	4621      	mov	r1, r4
 800e25e:	f7ff ff5b 	bl	800e118 <__sflush_r>
 800e262:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e264:	07da      	lsls	r2, r3, #31
 800e266:	4605      	mov	r5, r0
 800e268:	d405      	bmi.n	800e276 <_fflush_r+0x42>
 800e26a:	89a3      	ldrh	r3, [r4, #12]
 800e26c:	059b      	lsls	r3, r3, #22
 800e26e:	d402      	bmi.n	800e276 <_fflush_r+0x42>
 800e270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e272:	f7fd fe8e 	bl	800bf92 <__retarget_lock_release_recursive>
 800e276:	4628      	mov	r0, r5
 800e278:	bd38      	pop	{r3, r4, r5, pc}
 800e27a:	461d      	mov	r5, r3
 800e27c:	e7fb      	b.n	800e276 <_fflush_r+0x42>
	...

0800e280 <std>:
 800e280:	2300      	movs	r3, #0
 800e282:	b510      	push	{r4, lr}
 800e284:	4604      	mov	r4, r0
 800e286:	e9c0 3300 	strd	r3, r3, [r0]
 800e28a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e28e:	6083      	str	r3, [r0, #8]
 800e290:	8181      	strh	r1, [r0, #12]
 800e292:	6643      	str	r3, [r0, #100]	; 0x64
 800e294:	81c2      	strh	r2, [r0, #14]
 800e296:	6183      	str	r3, [r0, #24]
 800e298:	4619      	mov	r1, r3
 800e29a:	2208      	movs	r2, #8
 800e29c:	305c      	adds	r0, #92	; 0x5c
 800e29e:	f7fa f9b3 	bl	8008608 <memset>
 800e2a2:	4b07      	ldr	r3, [pc, #28]	; (800e2c0 <std+0x40>)
 800e2a4:	6223      	str	r3, [r4, #32]
 800e2a6:	4b07      	ldr	r3, [pc, #28]	; (800e2c4 <std+0x44>)
 800e2a8:	6263      	str	r3, [r4, #36]	; 0x24
 800e2aa:	4b07      	ldr	r3, [pc, #28]	; (800e2c8 <std+0x48>)
 800e2ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800e2ae:	4b07      	ldr	r3, [pc, #28]	; (800e2cc <std+0x4c>)
 800e2b0:	61e4      	str	r4, [r4, #28]
 800e2b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e2b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2bc:	f7fd be66 	b.w	800bf8c <__retarget_lock_init_recursive>
 800e2c0:	080086e9 	.word	0x080086e9
 800e2c4:	0800870f 	.word	0x0800870f
 800e2c8:	08008747 	.word	0x08008747
 800e2cc:	0800876b 	.word	0x0800876b

0800e2d0 <_cleanup_r>:
 800e2d0:	4901      	ldr	r1, [pc, #4]	; (800e2d8 <_cleanup_r+0x8>)
 800e2d2:	f000 b855 	b.w	800e380 <_fwalk_reent>
 800e2d6:	bf00      	nop
 800e2d8:	0800f5af 	.word	0x0800f5af

0800e2dc <__sfp_lock_acquire>:
 800e2dc:	4801      	ldr	r0, [pc, #4]	; (800e2e4 <__sfp_lock_acquire+0x8>)
 800e2de:	f7fd be57 	b.w	800bf90 <__retarget_lock_acquire_recursive>
 800e2e2:	bf00      	nop
 800e2e4:	200011a6 	.word	0x200011a6

0800e2e8 <__sfp_lock_release>:
 800e2e8:	4801      	ldr	r0, [pc, #4]	; (800e2f0 <__sfp_lock_release+0x8>)
 800e2ea:	f7fd be52 	b.w	800bf92 <__retarget_lock_release_recursive>
 800e2ee:	bf00      	nop
 800e2f0:	200011a6 	.word	0x200011a6

0800e2f4 <__sinit_lock_acquire>:
 800e2f4:	4801      	ldr	r0, [pc, #4]	; (800e2fc <__sinit_lock_acquire+0x8>)
 800e2f6:	f7fd be4b 	b.w	800bf90 <__retarget_lock_acquire_recursive>
 800e2fa:	bf00      	nop
 800e2fc:	200011a7 	.word	0x200011a7

0800e300 <__sinit_lock_release>:
 800e300:	4801      	ldr	r0, [pc, #4]	; (800e308 <__sinit_lock_release+0x8>)
 800e302:	f7fd be46 	b.w	800bf92 <__retarget_lock_release_recursive>
 800e306:	bf00      	nop
 800e308:	200011a7 	.word	0x200011a7

0800e30c <__sinit>:
 800e30c:	b510      	push	{r4, lr}
 800e30e:	4604      	mov	r4, r0
 800e310:	f7ff fff0 	bl	800e2f4 <__sinit_lock_acquire>
 800e314:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e316:	b11a      	cbz	r2, 800e320 <__sinit+0x14>
 800e318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e31c:	f7ff bff0 	b.w	800e300 <__sinit_lock_release>
 800e320:	4b0d      	ldr	r3, [pc, #52]	; (800e358 <__sinit+0x4c>)
 800e322:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e324:	2303      	movs	r3, #3
 800e326:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800e32a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800e32e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800e332:	6860      	ldr	r0, [r4, #4]
 800e334:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800e338:	2104      	movs	r1, #4
 800e33a:	f7ff ffa1 	bl	800e280 <std>
 800e33e:	68a0      	ldr	r0, [r4, #8]
 800e340:	2201      	movs	r2, #1
 800e342:	2109      	movs	r1, #9
 800e344:	f7ff ff9c 	bl	800e280 <std>
 800e348:	68e0      	ldr	r0, [r4, #12]
 800e34a:	2202      	movs	r2, #2
 800e34c:	2112      	movs	r1, #18
 800e34e:	f7ff ff97 	bl	800e280 <std>
 800e352:	2301      	movs	r3, #1
 800e354:	63a3      	str	r3, [r4, #56]	; 0x38
 800e356:	e7df      	b.n	800e318 <__sinit+0xc>
 800e358:	0800e2d1 	.word	0x0800e2d1

0800e35c <fiprintf>:
 800e35c:	b40e      	push	{r1, r2, r3}
 800e35e:	b503      	push	{r0, r1, lr}
 800e360:	4601      	mov	r1, r0
 800e362:	ab03      	add	r3, sp, #12
 800e364:	4805      	ldr	r0, [pc, #20]	; (800e37c <fiprintf+0x20>)
 800e366:	f853 2b04 	ldr.w	r2, [r3], #4
 800e36a:	6800      	ldr	r0, [r0, #0]
 800e36c:	9301      	str	r3, [sp, #4]
 800e36e:	f000 fbe9 	bl	800eb44 <_vfiprintf_r>
 800e372:	b002      	add	sp, #8
 800e374:	f85d eb04 	ldr.w	lr, [sp], #4
 800e378:	b003      	add	sp, #12
 800e37a:	4770      	bx	lr
 800e37c:	20000010 	.word	0x20000010

0800e380 <_fwalk_reent>:
 800e380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e384:	4606      	mov	r6, r0
 800e386:	4688      	mov	r8, r1
 800e388:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800e38c:	2700      	movs	r7, #0
 800e38e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e392:	f1b9 0901 	subs.w	r9, r9, #1
 800e396:	d505      	bpl.n	800e3a4 <_fwalk_reent+0x24>
 800e398:	6824      	ldr	r4, [r4, #0]
 800e39a:	2c00      	cmp	r4, #0
 800e39c:	d1f7      	bne.n	800e38e <_fwalk_reent+0xe>
 800e39e:	4638      	mov	r0, r7
 800e3a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3a4:	89ab      	ldrh	r3, [r5, #12]
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d907      	bls.n	800e3ba <_fwalk_reent+0x3a>
 800e3aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	d003      	beq.n	800e3ba <_fwalk_reent+0x3a>
 800e3b2:	4629      	mov	r1, r5
 800e3b4:	4630      	mov	r0, r6
 800e3b6:	47c0      	blx	r8
 800e3b8:	4307      	orrs	r7, r0
 800e3ba:	3568      	adds	r5, #104	; 0x68
 800e3bc:	e7e9      	b.n	800e392 <_fwalk_reent+0x12>

0800e3be <rshift>:
 800e3be:	6903      	ldr	r3, [r0, #16]
 800e3c0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e3c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3c8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e3cc:	f100 0414 	add.w	r4, r0, #20
 800e3d0:	dd45      	ble.n	800e45e <rshift+0xa0>
 800e3d2:	f011 011f 	ands.w	r1, r1, #31
 800e3d6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e3da:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e3de:	d10c      	bne.n	800e3fa <rshift+0x3c>
 800e3e0:	f100 0710 	add.w	r7, r0, #16
 800e3e4:	4629      	mov	r1, r5
 800e3e6:	42b1      	cmp	r1, r6
 800e3e8:	d334      	bcc.n	800e454 <rshift+0x96>
 800e3ea:	1a9b      	subs	r3, r3, r2
 800e3ec:	009b      	lsls	r3, r3, #2
 800e3ee:	1eea      	subs	r2, r5, #3
 800e3f0:	4296      	cmp	r6, r2
 800e3f2:	bf38      	it	cc
 800e3f4:	2300      	movcc	r3, #0
 800e3f6:	4423      	add	r3, r4
 800e3f8:	e015      	b.n	800e426 <rshift+0x68>
 800e3fa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e3fe:	f1c1 0820 	rsb	r8, r1, #32
 800e402:	40cf      	lsrs	r7, r1
 800e404:	f105 0e04 	add.w	lr, r5, #4
 800e408:	46a1      	mov	r9, r4
 800e40a:	4576      	cmp	r6, lr
 800e40c:	46f4      	mov	ip, lr
 800e40e:	d815      	bhi.n	800e43c <rshift+0x7e>
 800e410:	1a9a      	subs	r2, r3, r2
 800e412:	0092      	lsls	r2, r2, #2
 800e414:	3a04      	subs	r2, #4
 800e416:	3501      	adds	r5, #1
 800e418:	42ae      	cmp	r6, r5
 800e41a:	bf38      	it	cc
 800e41c:	2200      	movcc	r2, #0
 800e41e:	18a3      	adds	r3, r4, r2
 800e420:	50a7      	str	r7, [r4, r2]
 800e422:	b107      	cbz	r7, 800e426 <rshift+0x68>
 800e424:	3304      	adds	r3, #4
 800e426:	1b1a      	subs	r2, r3, r4
 800e428:	42a3      	cmp	r3, r4
 800e42a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e42e:	bf08      	it	eq
 800e430:	2300      	moveq	r3, #0
 800e432:	6102      	str	r2, [r0, #16]
 800e434:	bf08      	it	eq
 800e436:	6143      	streq	r3, [r0, #20]
 800e438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e43c:	f8dc c000 	ldr.w	ip, [ip]
 800e440:	fa0c fc08 	lsl.w	ip, ip, r8
 800e444:	ea4c 0707 	orr.w	r7, ip, r7
 800e448:	f849 7b04 	str.w	r7, [r9], #4
 800e44c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e450:	40cf      	lsrs	r7, r1
 800e452:	e7da      	b.n	800e40a <rshift+0x4c>
 800e454:	f851 cb04 	ldr.w	ip, [r1], #4
 800e458:	f847 cf04 	str.w	ip, [r7, #4]!
 800e45c:	e7c3      	b.n	800e3e6 <rshift+0x28>
 800e45e:	4623      	mov	r3, r4
 800e460:	e7e1      	b.n	800e426 <rshift+0x68>

0800e462 <__hexdig_fun>:
 800e462:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e466:	2b09      	cmp	r3, #9
 800e468:	d802      	bhi.n	800e470 <__hexdig_fun+0xe>
 800e46a:	3820      	subs	r0, #32
 800e46c:	b2c0      	uxtb	r0, r0
 800e46e:	4770      	bx	lr
 800e470:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e474:	2b05      	cmp	r3, #5
 800e476:	d801      	bhi.n	800e47c <__hexdig_fun+0x1a>
 800e478:	3847      	subs	r0, #71	; 0x47
 800e47a:	e7f7      	b.n	800e46c <__hexdig_fun+0xa>
 800e47c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e480:	2b05      	cmp	r3, #5
 800e482:	d801      	bhi.n	800e488 <__hexdig_fun+0x26>
 800e484:	3827      	subs	r0, #39	; 0x27
 800e486:	e7f1      	b.n	800e46c <__hexdig_fun+0xa>
 800e488:	2000      	movs	r0, #0
 800e48a:	4770      	bx	lr

0800e48c <__gethex>:
 800e48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e490:	ed2d 8b02 	vpush	{d8}
 800e494:	b089      	sub	sp, #36	; 0x24
 800e496:	ee08 0a10 	vmov	s16, r0
 800e49a:	9304      	str	r3, [sp, #16]
 800e49c:	4bb4      	ldr	r3, [pc, #720]	; (800e770 <__gethex+0x2e4>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	9301      	str	r3, [sp, #4]
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	468b      	mov	fp, r1
 800e4a6:	4690      	mov	r8, r2
 800e4a8:	f7f1 fe9a 	bl	80001e0 <strlen>
 800e4ac:	9b01      	ldr	r3, [sp, #4]
 800e4ae:	f8db 2000 	ldr.w	r2, [fp]
 800e4b2:	4403      	add	r3, r0
 800e4b4:	4682      	mov	sl, r0
 800e4b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e4ba:	9305      	str	r3, [sp, #20]
 800e4bc:	1c93      	adds	r3, r2, #2
 800e4be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e4c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e4c6:	32fe      	adds	r2, #254	; 0xfe
 800e4c8:	18d1      	adds	r1, r2, r3
 800e4ca:	461f      	mov	r7, r3
 800e4cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e4d0:	9100      	str	r1, [sp, #0]
 800e4d2:	2830      	cmp	r0, #48	; 0x30
 800e4d4:	d0f8      	beq.n	800e4c8 <__gethex+0x3c>
 800e4d6:	f7ff ffc4 	bl	800e462 <__hexdig_fun>
 800e4da:	4604      	mov	r4, r0
 800e4dc:	2800      	cmp	r0, #0
 800e4de:	d13a      	bne.n	800e556 <__gethex+0xca>
 800e4e0:	9901      	ldr	r1, [sp, #4]
 800e4e2:	4652      	mov	r2, sl
 800e4e4:	4638      	mov	r0, r7
 800e4e6:	f7fa f944 	bl	8008772 <strncmp>
 800e4ea:	4605      	mov	r5, r0
 800e4ec:	2800      	cmp	r0, #0
 800e4ee:	d168      	bne.n	800e5c2 <__gethex+0x136>
 800e4f0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e4f4:	eb07 060a 	add.w	r6, r7, sl
 800e4f8:	f7ff ffb3 	bl	800e462 <__hexdig_fun>
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	d062      	beq.n	800e5c6 <__gethex+0x13a>
 800e500:	4633      	mov	r3, r6
 800e502:	7818      	ldrb	r0, [r3, #0]
 800e504:	2830      	cmp	r0, #48	; 0x30
 800e506:	461f      	mov	r7, r3
 800e508:	f103 0301 	add.w	r3, r3, #1
 800e50c:	d0f9      	beq.n	800e502 <__gethex+0x76>
 800e50e:	f7ff ffa8 	bl	800e462 <__hexdig_fun>
 800e512:	2301      	movs	r3, #1
 800e514:	fab0 f480 	clz	r4, r0
 800e518:	0964      	lsrs	r4, r4, #5
 800e51a:	4635      	mov	r5, r6
 800e51c:	9300      	str	r3, [sp, #0]
 800e51e:	463a      	mov	r2, r7
 800e520:	4616      	mov	r6, r2
 800e522:	3201      	adds	r2, #1
 800e524:	7830      	ldrb	r0, [r6, #0]
 800e526:	f7ff ff9c 	bl	800e462 <__hexdig_fun>
 800e52a:	2800      	cmp	r0, #0
 800e52c:	d1f8      	bne.n	800e520 <__gethex+0x94>
 800e52e:	9901      	ldr	r1, [sp, #4]
 800e530:	4652      	mov	r2, sl
 800e532:	4630      	mov	r0, r6
 800e534:	f7fa f91d 	bl	8008772 <strncmp>
 800e538:	b980      	cbnz	r0, 800e55c <__gethex+0xd0>
 800e53a:	b94d      	cbnz	r5, 800e550 <__gethex+0xc4>
 800e53c:	eb06 050a 	add.w	r5, r6, sl
 800e540:	462a      	mov	r2, r5
 800e542:	4616      	mov	r6, r2
 800e544:	3201      	adds	r2, #1
 800e546:	7830      	ldrb	r0, [r6, #0]
 800e548:	f7ff ff8b 	bl	800e462 <__hexdig_fun>
 800e54c:	2800      	cmp	r0, #0
 800e54e:	d1f8      	bne.n	800e542 <__gethex+0xb6>
 800e550:	1bad      	subs	r5, r5, r6
 800e552:	00ad      	lsls	r5, r5, #2
 800e554:	e004      	b.n	800e560 <__gethex+0xd4>
 800e556:	2400      	movs	r4, #0
 800e558:	4625      	mov	r5, r4
 800e55a:	e7e0      	b.n	800e51e <__gethex+0x92>
 800e55c:	2d00      	cmp	r5, #0
 800e55e:	d1f7      	bne.n	800e550 <__gethex+0xc4>
 800e560:	7833      	ldrb	r3, [r6, #0]
 800e562:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e566:	2b50      	cmp	r3, #80	; 0x50
 800e568:	d13b      	bne.n	800e5e2 <__gethex+0x156>
 800e56a:	7873      	ldrb	r3, [r6, #1]
 800e56c:	2b2b      	cmp	r3, #43	; 0x2b
 800e56e:	d02c      	beq.n	800e5ca <__gethex+0x13e>
 800e570:	2b2d      	cmp	r3, #45	; 0x2d
 800e572:	d02e      	beq.n	800e5d2 <__gethex+0x146>
 800e574:	1c71      	adds	r1, r6, #1
 800e576:	f04f 0900 	mov.w	r9, #0
 800e57a:	7808      	ldrb	r0, [r1, #0]
 800e57c:	f7ff ff71 	bl	800e462 <__hexdig_fun>
 800e580:	1e43      	subs	r3, r0, #1
 800e582:	b2db      	uxtb	r3, r3
 800e584:	2b18      	cmp	r3, #24
 800e586:	d82c      	bhi.n	800e5e2 <__gethex+0x156>
 800e588:	f1a0 0210 	sub.w	r2, r0, #16
 800e58c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e590:	f7ff ff67 	bl	800e462 <__hexdig_fun>
 800e594:	1e43      	subs	r3, r0, #1
 800e596:	b2db      	uxtb	r3, r3
 800e598:	2b18      	cmp	r3, #24
 800e59a:	d91d      	bls.n	800e5d8 <__gethex+0x14c>
 800e59c:	f1b9 0f00 	cmp.w	r9, #0
 800e5a0:	d000      	beq.n	800e5a4 <__gethex+0x118>
 800e5a2:	4252      	negs	r2, r2
 800e5a4:	4415      	add	r5, r2
 800e5a6:	f8cb 1000 	str.w	r1, [fp]
 800e5aa:	b1e4      	cbz	r4, 800e5e6 <__gethex+0x15a>
 800e5ac:	9b00      	ldr	r3, [sp, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	bf14      	ite	ne
 800e5b2:	2700      	movne	r7, #0
 800e5b4:	2706      	moveq	r7, #6
 800e5b6:	4638      	mov	r0, r7
 800e5b8:	b009      	add	sp, #36	; 0x24
 800e5ba:	ecbd 8b02 	vpop	{d8}
 800e5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5c2:	463e      	mov	r6, r7
 800e5c4:	4625      	mov	r5, r4
 800e5c6:	2401      	movs	r4, #1
 800e5c8:	e7ca      	b.n	800e560 <__gethex+0xd4>
 800e5ca:	f04f 0900 	mov.w	r9, #0
 800e5ce:	1cb1      	adds	r1, r6, #2
 800e5d0:	e7d3      	b.n	800e57a <__gethex+0xee>
 800e5d2:	f04f 0901 	mov.w	r9, #1
 800e5d6:	e7fa      	b.n	800e5ce <__gethex+0x142>
 800e5d8:	230a      	movs	r3, #10
 800e5da:	fb03 0202 	mla	r2, r3, r2, r0
 800e5de:	3a10      	subs	r2, #16
 800e5e0:	e7d4      	b.n	800e58c <__gethex+0x100>
 800e5e2:	4631      	mov	r1, r6
 800e5e4:	e7df      	b.n	800e5a6 <__gethex+0x11a>
 800e5e6:	1bf3      	subs	r3, r6, r7
 800e5e8:	3b01      	subs	r3, #1
 800e5ea:	4621      	mov	r1, r4
 800e5ec:	2b07      	cmp	r3, #7
 800e5ee:	dc0b      	bgt.n	800e608 <__gethex+0x17c>
 800e5f0:	ee18 0a10 	vmov	r0, s16
 800e5f4:	f7fd fd1a 	bl	800c02c <_Balloc>
 800e5f8:	4604      	mov	r4, r0
 800e5fa:	b940      	cbnz	r0, 800e60e <__gethex+0x182>
 800e5fc:	4b5d      	ldr	r3, [pc, #372]	; (800e774 <__gethex+0x2e8>)
 800e5fe:	4602      	mov	r2, r0
 800e600:	21de      	movs	r1, #222	; 0xde
 800e602:	485d      	ldr	r0, [pc, #372]	; (800e778 <__gethex+0x2ec>)
 800e604:	f7ff fd34 	bl	800e070 <__assert_func>
 800e608:	3101      	adds	r1, #1
 800e60a:	105b      	asrs	r3, r3, #1
 800e60c:	e7ee      	b.n	800e5ec <__gethex+0x160>
 800e60e:	f100 0914 	add.w	r9, r0, #20
 800e612:	f04f 0b00 	mov.w	fp, #0
 800e616:	f1ca 0301 	rsb	r3, sl, #1
 800e61a:	f8cd 9008 	str.w	r9, [sp, #8]
 800e61e:	f8cd b000 	str.w	fp, [sp]
 800e622:	9306      	str	r3, [sp, #24]
 800e624:	42b7      	cmp	r7, r6
 800e626:	d340      	bcc.n	800e6aa <__gethex+0x21e>
 800e628:	9802      	ldr	r0, [sp, #8]
 800e62a:	9b00      	ldr	r3, [sp, #0]
 800e62c:	f840 3b04 	str.w	r3, [r0], #4
 800e630:	eba0 0009 	sub.w	r0, r0, r9
 800e634:	1080      	asrs	r0, r0, #2
 800e636:	0146      	lsls	r6, r0, #5
 800e638:	6120      	str	r0, [r4, #16]
 800e63a:	4618      	mov	r0, r3
 800e63c:	f7fd fdb4 	bl	800c1a8 <__hi0bits>
 800e640:	1a30      	subs	r0, r6, r0
 800e642:	f8d8 6000 	ldr.w	r6, [r8]
 800e646:	42b0      	cmp	r0, r6
 800e648:	dd63      	ble.n	800e712 <__gethex+0x286>
 800e64a:	1b87      	subs	r7, r0, r6
 800e64c:	4639      	mov	r1, r7
 800e64e:	4620      	mov	r0, r4
 800e650:	f7fe f93e 	bl	800c8d0 <__any_on>
 800e654:	4682      	mov	sl, r0
 800e656:	b1a8      	cbz	r0, 800e684 <__gethex+0x1f8>
 800e658:	1e7b      	subs	r3, r7, #1
 800e65a:	1159      	asrs	r1, r3, #5
 800e65c:	f003 021f 	and.w	r2, r3, #31
 800e660:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e664:	f04f 0a01 	mov.w	sl, #1
 800e668:	fa0a f202 	lsl.w	r2, sl, r2
 800e66c:	420a      	tst	r2, r1
 800e66e:	d009      	beq.n	800e684 <__gethex+0x1f8>
 800e670:	4553      	cmp	r3, sl
 800e672:	dd05      	ble.n	800e680 <__gethex+0x1f4>
 800e674:	1eb9      	subs	r1, r7, #2
 800e676:	4620      	mov	r0, r4
 800e678:	f7fe f92a 	bl	800c8d0 <__any_on>
 800e67c:	2800      	cmp	r0, #0
 800e67e:	d145      	bne.n	800e70c <__gethex+0x280>
 800e680:	f04f 0a02 	mov.w	sl, #2
 800e684:	4639      	mov	r1, r7
 800e686:	4620      	mov	r0, r4
 800e688:	f7ff fe99 	bl	800e3be <rshift>
 800e68c:	443d      	add	r5, r7
 800e68e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e692:	42ab      	cmp	r3, r5
 800e694:	da4c      	bge.n	800e730 <__gethex+0x2a4>
 800e696:	ee18 0a10 	vmov	r0, s16
 800e69a:	4621      	mov	r1, r4
 800e69c:	f7fd fceb 	bl	800c076 <_Bfree>
 800e6a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	6013      	str	r3, [r2, #0]
 800e6a6:	27a3      	movs	r7, #163	; 0xa3
 800e6a8:	e785      	b.n	800e5b6 <__gethex+0x12a>
 800e6aa:	1e73      	subs	r3, r6, #1
 800e6ac:	9a05      	ldr	r2, [sp, #20]
 800e6ae:	9303      	str	r3, [sp, #12]
 800e6b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d019      	beq.n	800e6ec <__gethex+0x260>
 800e6b8:	f1bb 0f20 	cmp.w	fp, #32
 800e6bc:	d107      	bne.n	800e6ce <__gethex+0x242>
 800e6be:	9b02      	ldr	r3, [sp, #8]
 800e6c0:	9a00      	ldr	r2, [sp, #0]
 800e6c2:	f843 2b04 	str.w	r2, [r3], #4
 800e6c6:	9302      	str	r3, [sp, #8]
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	9300      	str	r3, [sp, #0]
 800e6cc:	469b      	mov	fp, r3
 800e6ce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e6d2:	f7ff fec6 	bl	800e462 <__hexdig_fun>
 800e6d6:	9b00      	ldr	r3, [sp, #0]
 800e6d8:	f000 000f 	and.w	r0, r0, #15
 800e6dc:	fa00 f00b 	lsl.w	r0, r0, fp
 800e6e0:	4303      	orrs	r3, r0
 800e6e2:	9300      	str	r3, [sp, #0]
 800e6e4:	f10b 0b04 	add.w	fp, fp, #4
 800e6e8:	9b03      	ldr	r3, [sp, #12]
 800e6ea:	e00d      	b.n	800e708 <__gethex+0x27c>
 800e6ec:	9b03      	ldr	r3, [sp, #12]
 800e6ee:	9a06      	ldr	r2, [sp, #24]
 800e6f0:	4413      	add	r3, r2
 800e6f2:	42bb      	cmp	r3, r7
 800e6f4:	d3e0      	bcc.n	800e6b8 <__gethex+0x22c>
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	9901      	ldr	r1, [sp, #4]
 800e6fa:	9307      	str	r3, [sp, #28]
 800e6fc:	4652      	mov	r2, sl
 800e6fe:	f7fa f838 	bl	8008772 <strncmp>
 800e702:	9b07      	ldr	r3, [sp, #28]
 800e704:	2800      	cmp	r0, #0
 800e706:	d1d7      	bne.n	800e6b8 <__gethex+0x22c>
 800e708:	461e      	mov	r6, r3
 800e70a:	e78b      	b.n	800e624 <__gethex+0x198>
 800e70c:	f04f 0a03 	mov.w	sl, #3
 800e710:	e7b8      	b.n	800e684 <__gethex+0x1f8>
 800e712:	da0a      	bge.n	800e72a <__gethex+0x29e>
 800e714:	1a37      	subs	r7, r6, r0
 800e716:	4621      	mov	r1, r4
 800e718:	ee18 0a10 	vmov	r0, s16
 800e71c:	463a      	mov	r2, r7
 800e71e:	f7fd fe93 	bl	800c448 <__lshift>
 800e722:	1bed      	subs	r5, r5, r7
 800e724:	4604      	mov	r4, r0
 800e726:	f100 0914 	add.w	r9, r0, #20
 800e72a:	f04f 0a00 	mov.w	sl, #0
 800e72e:	e7ae      	b.n	800e68e <__gethex+0x202>
 800e730:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e734:	42a8      	cmp	r0, r5
 800e736:	dd72      	ble.n	800e81e <__gethex+0x392>
 800e738:	1b45      	subs	r5, r0, r5
 800e73a:	42ae      	cmp	r6, r5
 800e73c:	dc36      	bgt.n	800e7ac <__gethex+0x320>
 800e73e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e742:	2b02      	cmp	r3, #2
 800e744:	d02a      	beq.n	800e79c <__gethex+0x310>
 800e746:	2b03      	cmp	r3, #3
 800e748:	d02c      	beq.n	800e7a4 <__gethex+0x318>
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	d11c      	bne.n	800e788 <__gethex+0x2fc>
 800e74e:	42ae      	cmp	r6, r5
 800e750:	d11a      	bne.n	800e788 <__gethex+0x2fc>
 800e752:	2e01      	cmp	r6, #1
 800e754:	d112      	bne.n	800e77c <__gethex+0x2f0>
 800e756:	9a04      	ldr	r2, [sp, #16]
 800e758:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e75c:	6013      	str	r3, [r2, #0]
 800e75e:	2301      	movs	r3, #1
 800e760:	6123      	str	r3, [r4, #16]
 800e762:	f8c9 3000 	str.w	r3, [r9]
 800e766:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e768:	2762      	movs	r7, #98	; 0x62
 800e76a:	601c      	str	r4, [r3, #0]
 800e76c:	e723      	b.n	800e5b6 <__gethex+0x12a>
 800e76e:	bf00      	nop
 800e770:	080103d8 	.word	0x080103d8
 800e774:	08010116 	.word	0x08010116
 800e778:	08010374 	.word	0x08010374
 800e77c:	1e71      	subs	r1, r6, #1
 800e77e:	4620      	mov	r0, r4
 800e780:	f7fe f8a6 	bl	800c8d0 <__any_on>
 800e784:	2800      	cmp	r0, #0
 800e786:	d1e6      	bne.n	800e756 <__gethex+0x2ca>
 800e788:	ee18 0a10 	vmov	r0, s16
 800e78c:	4621      	mov	r1, r4
 800e78e:	f7fd fc72 	bl	800c076 <_Bfree>
 800e792:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e794:	2300      	movs	r3, #0
 800e796:	6013      	str	r3, [r2, #0]
 800e798:	2750      	movs	r7, #80	; 0x50
 800e79a:	e70c      	b.n	800e5b6 <__gethex+0x12a>
 800e79c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d1f2      	bne.n	800e788 <__gethex+0x2fc>
 800e7a2:	e7d8      	b.n	800e756 <__gethex+0x2ca>
 800e7a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d1d5      	bne.n	800e756 <__gethex+0x2ca>
 800e7aa:	e7ed      	b.n	800e788 <__gethex+0x2fc>
 800e7ac:	1e6f      	subs	r7, r5, #1
 800e7ae:	f1ba 0f00 	cmp.w	sl, #0
 800e7b2:	d131      	bne.n	800e818 <__gethex+0x38c>
 800e7b4:	b127      	cbz	r7, 800e7c0 <__gethex+0x334>
 800e7b6:	4639      	mov	r1, r7
 800e7b8:	4620      	mov	r0, r4
 800e7ba:	f7fe f889 	bl	800c8d0 <__any_on>
 800e7be:	4682      	mov	sl, r0
 800e7c0:	117b      	asrs	r3, r7, #5
 800e7c2:	2101      	movs	r1, #1
 800e7c4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e7c8:	f007 071f 	and.w	r7, r7, #31
 800e7cc:	fa01 f707 	lsl.w	r7, r1, r7
 800e7d0:	421f      	tst	r7, r3
 800e7d2:	4629      	mov	r1, r5
 800e7d4:	4620      	mov	r0, r4
 800e7d6:	bf18      	it	ne
 800e7d8:	f04a 0a02 	orrne.w	sl, sl, #2
 800e7dc:	1b76      	subs	r6, r6, r5
 800e7de:	f7ff fdee 	bl	800e3be <rshift>
 800e7e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e7e6:	2702      	movs	r7, #2
 800e7e8:	f1ba 0f00 	cmp.w	sl, #0
 800e7ec:	d048      	beq.n	800e880 <__gethex+0x3f4>
 800e7ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e7f2:	2b02      	cmp	r3, #2
 800e7f4:	d015      	beq.n	800e822 <__gethex+0x396>
 800e7f6:	2b03      	cmp	r3, #3
 800e7f8:	d017      	beq.n	800e82a <__gethex+0x39e>
 800e7fa:	2b01      	cmp	r3, #1
 800e7fc:	d109      	bne.n	800e812 <__gethex+0x386>
 800e7fe:	f01a 0f02 	tst.w	sl, #2
 800e802:	d006      	beq.n	800e812 <__gethex+0x386>
 800e804:	f8d9 0000 	ldr.w	r0, [r9]
 800e808:	ea4a 0a00 	orr.w	sl, sl, r0
 800e80c:	f01a 0f01 	tst.w	sl, #1
 800e810:	d10e      	bne.n	800e830 <__gethex+0x3a4>
 800e812:	f047 0710 	orr.w	r7, r7, #16
 800e816:	e033      	b.n	800e880 <__gethex+0x3f4>
 800e818:	f04f 0a01 	mov.w	sl, #1
 800e81c:	e7d0      	b.n	800e7c0 <__gethex+0x334>
 800e81e:	2701      	movs	r7, #1
 800e820:	e7e2      	b.n	800e7e8 <__gethex+0x35c>
 800e822:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e824:	f1c3 0301 	rsb	r3, r3, #1
 800e828:	9315      	str	r3, [sp, #84]	; 0x54
 800e82a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d0f0      	beq.n	800e812 <__gethex+0x386>
 800e830:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e834:	f104 0314 	add.w	r3, r4, #20
 800e838:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e83c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e840:	f04f 0c00 	mov.w	ip, #0
 800e844:	4618      	mov	r0, r3
 800e846:	f853 2b04 	ldr.w	r2, [r3], #4
 800e84a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e84e:	d01c      	beq.n	800e88a <__gethex+0x3fe>
 800e850:	3201      	adds	r2, #1
 800e852:	6002      	str	r2, [r0, #0]
 800e854:	2f02      	cmp	r7, #2
 800e856:	f104 0314 	add.w	r3, r4, #20
 800e85a:	d13f      	bne.n	800e8dc <__gethex+0x450>
 800e85c:	f8d8 2000 	ldr.w	r2, [r8]
 800e860:	3a01      	subs	r2, #1
 800e862:	42b2      	cmp	r2, r6
 800e864:	d10a      	bne.n	800e87c <__gethex+0x3f0>
 800e866:	1171      	asrs	r1, r6, #5
 800e868:	2201      	movs	r2, #1
 800e86a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e86e:	f006 061f 	and.w	r6, r6, #31
 800e872:	fa02 f606 	lsl.w	r6, r2, r6
 800e876:	421e      	tst	r6, r3
 800e878:	bf18      	it	ne
 800e87a:	4617      	movne	r7, r2
 800e87c:	f047 0720 	orr.w	r7, r7, #32
 800e880:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e882:	601c      	str	r4, [r3, #0]
 800e884:	9b04      	ldr	r3, [sp, #16]
 800e886:	601d      	str	r5, [r3, #0]
 800e888:	e695      	b.n	800e5b6 <__gethex+0x12a>
 800e88a:	4299      	cmp	r1, r3
 800e88c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e890:	d8d8      	bhi.n	800e844 <__gethex+0x3b8>
 800e892:	68a3      	ldr	r3, [r4, #8]
 800e894:	459b      	cmp	fp, r3
 800e896:	db19      	blt.n	800e8cc <__gethex+0x440>
 800e898:	6861      	ldr	r1, [r4, #4]
 800e89a:	ee18 0a10 	vmov	r0, s16
 800e89e:	3101      	adds	r1, #1
 800e8a0:	f7fd fbc4 	bl	800c02c <_Balloc>
 800e8a4:	4681      	mov	r9, r0
 800e8a6:	b918      	cbnz	r0, 800e8b0 <__gethex+0x424>
 800e8a8:	4b1a      	ldr	r3, [pc, #104]	; (800e914 <__gethex+0x488>)
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	2184      	movs	r1, #132	; 0x84
 800e8ae:	e6a8      	b.n	800e602 <__gethex+0x176>
 800e8b0:	6922      	ldr	r2, [r4, #16]
 800e8b2:	3202      	adds	r2, #2
 800e8b4:	f104 010c 	add.w	r1, r4, #12
 800e8b8:	0092      	lsls	r2, r2, #2
 800e8ba:	300c      	adds	r0, #12
 800e8bc:	f7fd fba8 	bl	800c010 <memcpy>
 800e8c0:	4621      	mov	r1, r4
 800e8c2:	ee18 0a10 	vmov	r0, s16
 800e8c6:	f7fd fbd6 	bl	800c076 <_Bfree>
 800e8ca:	464c      	mov	r4, r9
 800e8cc:	6923      	ldr	r3, [r4, #16]
 800e8ce:	1c5a      	adds	r2, r3, #1
 800e8d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e8d4:	6122      	str	r2, [r4, #16]
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	615a      	str	r2, [r3, #20]
 800e8da:	e7bb      	b.n	800e854 <__gethex+0x3c8>
 800e8dc:	6922      	ldr	r2, [r4, #16]
 800e8de:	455a      	cmp	r2, fp
 800e8e0:	dd0b      	ble.n	800e8fa <__gethex+0x46e>
 800e8e2:	2101      	movs	r1, #1
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	f7ff fd6a 	bl	800e3be <rshift>
 800e8ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e8ee:	3501      	adds	r5, #1
 800e8f0:	42ab      	cmp	r3, r5
 800e8f2:	f6ff aed0 	blt.w	800e696 <__gethex+0x20a>
 800e8f6:	2701      	movs	r7, #1
 800e8f8:	e7c0      	b.n	800e87c <__gethex+0x3f0>
 800e8fa:	f016 061f 	ands.w	r6, r6, #31
 800e8fe:	d0fa      	beq.n	800e8f6 <__gethex+0x46a>
 800e900:	4453      	add	r3, sl
 800e902:	f1c6 0620 	rsb	r6, r6, #32
 800e906:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e90a:	f7fd fc4d 	bl	800c1a8 <__hi0bits>
 800e90e:	42b0      	cmp	r0, r6
 800e910:	dbe7      	blt.n	800e8e2 <__gethex+0x456>
 800e912:	e7f0      	b.n	800e8f6 <__gethex+0x46a>
 800e914:	08010116 	.word	0x08010116

0800e918 <L_shift>:
 800e918:	f1c2 0208 	rsb	r2, r2, #8
 800e91c:	0092      	lsls	r2, r2, #2
 800e91e:	b570      	push	{r4, r5, r6, lr}
 800e920:	f1c2 0620 	rsb	r6, r2, #32
 800e924:	6843      	ldr	r3, [r0, #4]
 800e926:	6804      	ldr	r4, [r0, #0]
 800e928:	fa03 f506 	lsl.w	r5, r3, r6
 800e92c:	432c      	orrs	r4, r5
 800e92e:	40d3      	lsrs	r3, r2
 800e930:	6004      	str	r4, [r0, #0]
 800e932:	f840 3f04 	str.w	r3, [r0, #4]!
 800e936:	4288      	cmp	r0, r1
 800e938:	d3f4      	bcc.n	800e924 <L_shift+0xc>
 800e93a:	bd70      	pop	{r4, r5, r6, pc}

0800e93c <__match>:
 800e93c:	b530      	push	{r4, r5, lr}
 800e93e:	6803      	ldr	r3, [r0, #0]
 800e940:	3301      	adds	r3, #1
 800e942:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e946:	b914      	cbnz	r4, 800e94e <__match+0x12>
 800e948:	6003      	str	r3, [r0, #0]
 800e94a:	2001      	movs	r0, #1
 800e94c:	bd30      	pop	{r4, r5, pc}
 800e94e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e952:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e956:	2d19      	cmp	r5, #25
 800e958:	bf98      	it	ls
 800e95a:	3220      	addls	r2, #32
 800e95c:	42a2      	cmp	r2, r4
 800e95e:	d0f0      	beq.n	800e942 <__match+0x6>
 800e960:	2000      	movs	r0, #0
 800e962:	e7f3      	b.n	800e94c <__match+0x10>

0800e964 <__hexnan>:
 800e964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e968:	680b      	ldr	r3, [r1, #0]
 800e96a:	115e      	asrs	r6, r3, #5
 800e96c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e970:	f013 031f 	ands.w	r3, r3, #31
 800e974:	b087      	sub	sp, #28
 800e976:	bf18      	it	ne
 800e978:	3604      	addne	r6, #4
 800e97a:	2500      	movs	r5, #0
 800e97c:	1f37      	subs	r7, r6, #4
 800e97e:	4690      	mov	r8, r2
 800e980:	6802      	ldr	r2, [r0, #0]
 800e982:	9301      	str	r3, [sp, #4]
 800e984:	4682      	mov	sl, r0
 800e986:	f846 5c04 	str.w	r5, [r6, #-4]
 800e98a:	46b9      	mov	r9, r7
 800e98c:	463c      	mov	r4, r7
 800e98e:	9502      	str	r5, [sp, #8]
 800e990:	46ab      	mov	fp, r5
 800e992:	7851      	ldrb	r1, [r2, #1]
 800e994:	1c53      	adds	r3, r2, #1
 800e996:	9303      	str	r3, [sp, #12]
 800e998:	b341      	cbz	r1, 800e9ec <__hexnan+0x88>
 800e99a:	4608      	mov	r0, r1
 800e99c:	9205      	str	r2, [sp, #20]
 800e99e:	9104      	str	r1, [sp, #16]
 800e9a0:	f7ff fd5f 	bl	800e462 <__hexdig_fun>
 800e9a4:	2800      	cmp	r0, #0
 800e9a6:	d14f      	bne.n	800ea48 <__hexnan+0xe4>
 800e9a8:	9904      	ldr	r1, [sp, #16]
 800e9aa:	9a05      	ldr	r2, [sp, #20]
 800e9ac:	2920      	cmp	r1, #32
 800e9ae:	d818      	bhi.n	800e9e2 <__hexnan+0x7e>
 800e9b0:	9b02      	ldr	r3, [sp, #8]
 800e9b2:	459b      	cmp	fp, r3
 800e9b4:	dd13      	ble.n	800e9de <__hexnan+0x7a>
 800e9b6:	454c      	cmp	r4, r9
 800e9b8:	d206      	bcs.n	800e9c8 <__hexnan+0x64>
 800e9ba:	2d07      	cmp	r5, #7
 800e9bc:	dc04      	bgt.n	800e9c8 <__hexnan+0x64>
 800e9be:	462a      	mov	r2, r5
 800e9c0:	4649      	mov	r1, r9
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	f7ff ffa8 	bl	800e918 <L_shift>
 800e9c8:	4544      	cmp	r4, r8
 800e9ca:	d950      	bls.n	800ea6e <__hexnan+0x10a>
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	f1a4 0904 	sub.w	r9, r4, #4
 800e9d2:	f844 3c04 	str.w	r3, [r4, #-4]
 800e9d6:	f8cd b008 	str.w	fp, [sp, #8]
 800e9da:	464c      	mov	r4, r9
 800e9dc:	461d      	mov	r5, r3
 800e9de:	9a03      	ldr	r2, [sp, #12]
 800e9e0:	e7d7      	b.n	800e992 <__hexnan+0x2e>
 800e9e2:	2929      	cmp	r1, #41	; 0x29
 800e9e4:	d156      	bne.n	800ea94 <__hexnan+0x130>
 800e9e6:	3202      	adds	r2, #2
 800e9e8:	f8ca 2000 	str.w	r2, [sl]
 800e9ec:	f1bb 0f00 	cmp.w	fp, #0
 800e9f0:	d050      	beq.n	800ea94 <__hexnan+0x130>
 800e9f2:	454c      	cmp	r4, r9
 800e9f4:	d206      	bcs.n	800ea04 <__hexnan+0xa0>
 800e9f6:	2d07      	cmp	r5, #7
 800e9f8:	dc04      	bgt.n	800ea04 <__hexnan+0xa0>
 800e9fa:	462a      	mov	r2, r5
 800e9fc:	4649      	mov	r1, r9
 800e9fe:	4620      	mov	r0, r4
 800ea00:	f7ff ff8a 	bl	800e918 <L_shift>
 800ea04:	4544      	cmp	r4, r8
 800ea06:	d934      	bls.n	800ea72 <__hexnan+0x10e>
 800ea08:	f1a8 0204 	sub.w	r2, r8, #4
 800ea0c:	4623      	mov	r3, r4
 800ea0e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ea12:	f842 1f04 	str.w	r1, [r2, #4]!
 800ea16:	429f      	cmp	r7, r3
 800ea18:	d2f9      	bcs.n	800ea0e <__hexnan+0xaa>
 800ea1a:	1b3b      	subs	r3, r7, r4
 800ea1c:	f023 0303 	bic.w	r3, r3, #3
 800ea20:	3304      	adds	r3, #4
 800ea22:	3401      	adds	r4, #1
 800ea24:	3e03      	subs	r6, #3
 800ea26:	42b4      	cmp	r4, r6
 800ea28:	bf88      	it	hi
 800ea2a:	2304      	movhi	r3, #4
 800ea2c:	4443      	add	r3, r8
 800ea2e:	2200      	movs	r2, #0
 800ea30:	f843 2b04 	str.w	r2, [r3], #4
 800ea34:	429f      	cmp	r7, r3
 800ea36:	d2fb      	bcs.n	800ea30 <__hexnan+0xcc>
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	b91b      	cbnz	r3, 800ea44 <__hexnan+0xe0>
 800ea3c:	4547      	cmp	r7, r8
 800ea3e:	d127      	bne.n	800ea90 <__hexnan+0x12c>
 800ea40:	2301      	movs	r3, #1
 800ea42:	603b      	str	r3, [r7, #0]
 800ea44:	2005      	movs	r0, #5
 800ea46:	e026      	b.n	800ea96 <__hexnan+0x132>
 800ea48:	3501      	adds	r5, #1
 800ea4a:	2d08      	cmp	r5, #8
 800ea4c:	f10b 0b01 	add.w	fp, fp, #1
 800ea50:	dd06      	ble.n	800ea60 <__hexnan+0xfc>
 800ea52:	4544      	cmp	r4, r8
 800ea54:	d9c3      	bls.n	800e9de <__hexnan+0x7a>
 800ea56:	2300      	movs	r3, #0
 800ea58:	f844 3c04 	str.w	r3, [r4, #-4]
 800ea5c:	2501      	movs	r5, #1
 800ea5e:	3c04      	subs	r4, #4
 800ea60:	6822      	ldr	r2, [r4, #0]
 800ea62:	f000 000f 	and.w	r0, r0, #15
 800ea66:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ea6a:	6022      	str	r2, [r4, #0]
 800ea6c:	e7b7      	b.n	800e9de <__hexnan+0x7a>
 800ea6e:	2508      	movs	r5, #8
 800ea70:	e7b5      	b.n	800e9de <__hexnan+0x7a>
 800ea72:	9b01      	ldr	r3, [sp, #4]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d0df      	beq.n	800ea38 <__hexnan+0xd4>
 800ea78:	f04f 32ff 	mov.w	r2, #4294967295
 800ea7c:	f1c3 0320 	rsb	r3, r3, #32
 800ea80:	fa22 f303 	lsr.w	r3, r2, r3
 800ea84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ea88:	401a      	ands	r2, r3
 800ea8a:	f846 2c04 	str.w	r2, [r6, #-4]
 800ea8e:	e7d3      	b.n	800ea38 <__hexnan+0xd4>
 800ea90:	3f04      	subs	r7, #4
 800ea92:	e7d1      	b.n	800ea38 <__hexnan+0xd4>
 800ea94:	2004      	movs	r0, #4
 800ea96:	b007      	add	sp, #28
 800ea98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ea9c <memmove>:
 800ea9c:	4288      	cmp	r0, r1
 800ea9e:	b510      	push	{r4, lr}
 800eaa0:	eb01 0402 	add.w	r4, r1, r2
 800eaa4:	d902      	bls.n	800eaac <memmove+0x10>
 800eaa6:	4284      	cmp	r4, r0
 800eaa8:	4623      	mov	r3, r4
 800eaaa:	d807      	bhi.n	800eabc <memmove+0x20>
 800eaac:	1e43      	subs	r3, r0, #1
 800eaae:	42a1      	cmp	r1, r4
 800eab0:	d008      	beq.n	800eac4 <memmove+0x28>
 800eab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eaba:	e7f8      	b.n	800eaae <memmove+0x12>
 800eabc:	4402      	add	r2, r0
 800eabe:	4601      	mov	r1, r0
 800eac0:	428a      	cmp	r2, r1
 800eac2:	d100      	bne.n	800eac6 <memmove+0x2a>
 800eac4:	bd10      	pop	{r4, pc}
 800eac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eaca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eace:	e7f7      	b.n	800eac0 <memmove+0x24>

0800ead0 <nan>:
 800ead0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ead8 <nan+0x8>
 800ead4:	4770      	bx	lr
 800ead6:	bf00      	nop
 800ead8:	00000000 	.word	0x00000000
 800eadc:	7ff80000 	.word	0x7ff80000

0800eae0 <__sprint_r>:
 800eae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eae4:	6893      	ldr	r3, [r2, #8]
 800eae6:	4680      	mov	r8, r0
 800eae8:	460f      	mov	r7, r1
 800eaea:	4614      	mov	r4, r2
 800eaec:	b91b      	cbnz	r3, 800eaf6 <__sprint_r+0x16>
 800eaee:	6053      	str	r3, [r2, #4]
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaf6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800eaf8:	049d      	lsls	r5, r3, #18
 800eafa:	d520      	bpl.n	800eb3e <__sprint_r+0x5e>
 800eafc:	6815      	ldr	r5, [r2, #0]
 800eafe:	3508      	adds	r5, #8
 800eb00:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800eb04:	f04f 0900 	mov.w	r9, #0
 800eb08:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800eb0c:	45ca      	cmp	sl, r9
 800eb0e:	dc0b      	bgt.n	800eb28 <__sprint_r+0x48>
 800eb10:	68a3      	ldr	r3, [r4, #8]
 800eb12:	f026 0003 	bic.w	r0, r6, #3
 800eb16:	1a18      	subs	r0, r3, r0
 800eb18:	60a0      	str	r0, [r4, #8]
 800eb1a:	3508      	adds	r5, #8
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	d1ef      	bne.n	800eb00 <__sprint_r+0x20>
 800eb20:	2300      	movs	r3, #0
 800eb22:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800eb26:	e7e4      	b.n	800eaf2 <__sprint_r+0x12>
 800eb28:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800eb2c:	463a      	mov	r2, r7
 800eb2e:	4640      	mov	r0, r8
 800eb30:	f000 fdd5 	bl	800f6de <_fputwc_r>
 800eb34:	1c43      	adds	r3, r0, #1
 800eb36:	d0f3      	beq.n	800eb20 <__sprint_r+0x40>
 800eb38:	f109 0901 	add.w	r9, r9, #1
 800eb3c:	e7e6      	b.n	800eb0c <__sprint_r+0x2c>
 800eb3e:	f000 fdf9 	bl	800f734 <__sfvwrite_r>
 800eb42:	e7ed      	b.n	800eb20 <__sprint_r+0x40>

0800eb44 <_vfiprintf_r>:
 800eb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb48:	ed2d 8b02 	vpush	{d8}
 800eb4c:	b0b9      	sub	sp, #228	; 0xe4
 800eb4e:	460f      	mov	r7, r1
 800eb50:	9201      	str	r2, [sp, #4]
 800eb52:	461d      	mov	r5, r3
 800eb54:	461c      	mov	r4, r3
 800eb56:	4681      	mov	r9, r0
 800eb58:	b118      	cbz	r0, 800eb62 <_vfiprintf_r+0x1e>
 800eb5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800eb5c:	b90b      	cbnz	r3, 800eb62 <_vfiprintf_r+0x1e>
 800eb5e:	f7ff fbd5 	bl	800e30c <__sinit>
 800eb62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb64:	07d8      	lsls	r0, r3, #31
 800eb66:	d405      	bmi.n	800eb74 <_vfiprintf_r+0x30>
 800eb68:	89bb      	ldrh	r3, [r7, #12]
 800eb6a:	0599      	lsls	r1, r3, #22
 800eb6c:	d402      	bmi.n	800eb74 <_vfiprintf_r+0x30>
 800eb6e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800eb70:	f7fd fa0e 	bl	800bf90 <__retarget_lock_acquire_recursive>
 800eb74:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800eb78:	049a      	lsls	r2, r3, #18
 800eb7a:	d406      	bmi.n	800eb8a <_vfiprintf_r+0x46>
 800eb7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800eb80:	81bb      	strh	r3, [r7, #12]
 800eb82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eb88:	667b      	str	r3, [r7, #100]	; 0x64
 800eb8a:	89bb      	ldrh	r3, [r7, #12]
 800eb8c:	071e      	lsls	r6, r3, #28
 800eb8e:	d501      	bpl.n	800eb94 <_vfiprintf_r+0x50>
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	b9bb      	cbnz	r3, 800ebc4 <_vfiprintf_r+0x80>
 800eb94:	4639      	mov	r1, r7
 800eb96:	4648      	mov	r0, r9
 800eb98:	f000 fcaa 	bl	800f4f0 <__swsetup_r>
 800eb9c:	b190      	cbz	r0, 800ebc4 <_vfiprintf_r+0x80>
 800eb9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eba0:	07d8      	lsls	r0, r3, #31
 800eba2:	d508      	bpl.n	800ebb6 <_vfiprintf_r+0x72>
 800eba4:	f04f 33ff 	mov.w	r3, #4294967295
 800eba8:	9302      	str	r3, [sp, #8]
 800ebaa:	9802      	ldr	r0, [sp, #8]
 800ebac:	b039      	add	sp, #228	; 0xe4
 800ebae:	ecbd 8b02 	vpop	{d8}
 800ebb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebb6:	89bb      	ldrh	r3, [r7, #12]
 800ebb8:	0599      	lsls	r1, r3, #22
 800ebba:	d4f3      	bmi.n	800eba4 <_vfiprintf_r+0x60>
 800ebbc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ebbe:	f7fd f9e8 	bl	800bf92 <__retarget_lock_release_recursive>
 800ebc2:	e7ef      	b.n	800eba4 <_vfiprintf_r+0x60>
 800ebc4:	89bb      	ldrh	r3, [r7, #12]
 800ebc6:	f003 021a 	and.w	r2, r3, #26
 800ebca:	2a0a      	cmp	r2, #10
 800ebcc:	d116      	bne.n	800ebfc <_vfiprintf_r+0xb8>
 800ebce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ebd2:	2a00      	cmp	r2, #0
 800ebd4:	db12      	blt.n	800ebfc <_vfiprintf_r+0xb8>
 800ebd6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ebd8:	07d2      	lsls	r2, r2, #31
 800ebda:	d404      	bmi.n	800ebe6 <_vfiprintf_r+0xa2>
 800ebdc:	059e      	lsls	r6, r3, #22
 800ebde:	d402      	bmi.n	800ebe6 <_vfiprintf_r+0xa2>
 800ebe0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ebe2:	f7fd f9d6 	bl	800bf92 <__retarget_lock_release_recursive>
 800ebe6:	9a01      	ldr	r2, [sp, #4]
 800ebe8:	462b      	mov	r3, r5
 800ebea:	4639      	mov	r1, r7
 800ebec:	4648      	mov	r0, r9
 800ebee:	b039      	add	sp, #228	; 0xe4
 800ebf0:	ecbd 8b02 	vpop	{d8}
 800ebf4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebf8:	f000 bc3a 	b.w	800f470 <__sbprintf>
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800ec02:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ec06:	ae0f      	add	r6, sp, #60	; 0x3c
 800ec08:	ee08 3a10 	vmov	s16, r3
 800ec0c:	960c      	str	r6, [sp, #48]	; 0x30
 800ec0e:	9307      	str	r3, [sp, #28]
 800ec10:	9302      	str	r3, [sp, #8]
 800ec12:	9b01      	ldr	r3, [sp, #4]
 800ec14:	461d      	mov	r5, r3
 800ec16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec1a:	b10a      	cbz	r2, 800ec20 <_vfiprintf_r+0xdc>
 800ec1c:	2a25      	cmp	r2, #37	; 0x25
 800ec1e:	d1f9      	bne.n	800ec14 <_vfiprintf_r+0xd0>
 800ec20:	9b01      	ldr	r3, [sp, #4]
 800ec22:	ebb5 0803 	subs.w	r8, r5, r3
 800ec26:	d00d      	beq.n	800ec44 <_vfiprintf_r+0x100>
 800ec28:	e9c6 3800 	strd	r3, r8, [r6]
 800ec2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec2e:	4443      	add	r3, r8
 800ec30:	930e      	str	r3, [sp, #56]	; 0x38
 800ec32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec34:	3301      	adds	r3, #1
 800ec36:	2b07      	cmp	r3, #7
 800ec38:	930d      	str	r3, [sp, #52]	; 0x34
 800ec3a:	dc75      	bgt.n	800ed28 <_vfiprintf_r+0x1e4>
 800ec3c:	3608      	adds	r6, #8
 800ec3e:	9b02      	ldr	r3, [sp, #8]
 800ec40:	4443      	add	r3, r8
 800ec42:	9302      	str	r3, [sp, #8]
 800ec44:	782b      	ldrb	r3, [r5, #0]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	f000 83d6 	beq.w	800f3f8 <_vfiprintf_r+0x8b4>
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	f04f 31ff 	mov.w	r1, #4294967295
 800ec52:	1c6a      	adds	r2, r5, #1
 800ec54:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800ec58:	9100      	str	r1, [sp, #0]
 800ec5a:	9303      	str	r3, [sp, #12]
 800ec5c:	469a      	mov	sl, r3
 800ec5e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ec62:	9201      	str	r2, [sp, #4]
 800ec64:	f1a3 0220 	sub.w	r2, r3, #32
 800ec68:	2a5a      	cmp	r2, #90	; 0x5a
 800ec6a:	f200 831f 	bhi.w	800f2ac <_vfiprintf_r+0x768>
 800ec6e:	e8df f012 	tbh	[pc, r2, lsl #1]
 800ec72:	009b      	.short	0x009b
 800ec74:	031d031d 	.word	0x031d031d
 800ec78:	031d00a3 	.word	0x031d00a3
 800ec7c:	031d031d 	.word	0x031d031d
 800ec80:	031d0082 	.word	0x031d0082
 800ec84:	00a6031d 	.word	0x00a6031d
 800ec88:	031d00b0 	.word	0x031d00b0
 800ec8c:	00b200ad 	.word	0x00b200ad
 800ec90:	00cd031d 	.word	0x00cd031d
 800ec94:	00d000d0 	.word	0x00d000d0
 800ec98:	00d000d0 	.word	0x00d000d0
 800ec9c:	00d000d0 	.word	0x00d000d0
 800eca0:	00d000d0 	.word	0x00d000d0
 800eca4:	031d00d0 	.word	0x031d00d0
 800eca8:	031d031d 	.word	0x031d031d
 800ecac:	031d031d 	.word	0x031d031d
 800ecb0:	031d031d 	.word	0x031d031d
 800ecb4:	031d031d 	.word	0x031d031d
 800ecb8:	010800fa 	.word	0x010800fa
 800ecbc:	031d031d 	.word	0x031d031d
 800ecc0:	031d031d 	.word	0x031d031d
 800ecc4:	031d031d 	.word	0x031d031d
 800ecc8:	031d031d 	.word	0x031d031d
 800eccc:	031d031d 	.word	0x031d031d
 800ecd0:	031d0158 	.word	0x031d0158
 800ecd4:	031d031d 	.word	0x031d031d
 800ecd8:	031d01a1 	.word	0x031d01a1
 800ecdc:	031d027e 	.word	0x031d027e
 800ece0:	029e031d 	.word	0x029e031d
 800ece4:	031d031d 	.word	0x031d031d
 800ece8:	031d031d 	.word	0x031d031d
 800ecec:	031d031d 	.word	0x031d031d
 800ecf0:	031d031d 	.word	0x031d031d
 800ecf4:	031d031d 	.word	0x031d031d
 800ecf8:	010a00fa 	.word	0x010a00fa
 800ecfc:	031d031d 	.word	0x031d031d
 800ed00:	00e0031d 	.word	0x00e0031d
 800ed04:	00f4010a 	.word	0x00f4010a
 800ed08:	00ed031d 	.word	0x00ed031d
 800ed0c:	0136031d 	.word	0x0136031d
 800ed10:	018f015a 	.word	0x018f015a
 800ed14:	031d00f4 	.word	0x031d00f4
 800ed18:	009901a1 	.word	0x009901a1
 800ed1c:	031d0280 	.word	0x031d0280
 800ed20:	0065031d 	.word	0x0065031d
 800ed24:	0099031d 	.word	0x0099031d
 800ed28:	aa0c      	add	r2, sp, #48	; 0x30
 800ed2a:	4639      	mov	r1, r7
 800ed2c:	4648      	mov	r0, r9
 800ed2e:	f7ff fed7 	bl	800eae0 <__sprint_r>
 800ed32:	2800      	cmp	r0, #0
 800ed34:	f040 833f 	bne.w	800f3b6 <_vfiprintf_r+0x872>
 800ed38:	ae0f      	add	r6, sp, #60	; 0x3c
 800ed3a:	e780      	b.n	800ec3e <_vfiprintf_r+0xfa>
 800ed3c:	4a9c      	ldr	r2, [pc, #624]	; (800efb0 <_vfiprintf_r+0x46c>)
 800ed3e:	9205      	str	r2, [sp, #20]
 800ed40:	f01a 0220 	ands.w	r2, sl, #32
 800ed44:	f000 8235 	beq.w	800f1b2 <_vfiprintf_r+0x66e>
 800ed48:	3407      	adds	r4, #7
 800ed4a:	f024 0207 	bic.w	r2, r4, #7
 800ed4e:	4693      	mov	fp, r2
 800ed50:	6855      	ldr	r5, [r2, #4]
 800ed52:	f85b 4b08 	ldr.w	r4, [fp], #8
 800ed56:	f01a 0f01 	tst.w	sl, #1
 800ed5a:	d009      	beq.n	800ed70 <_vfiprintf_r+0x22c>
 800ed5c:	ea54 0205 	orrs.w	r2, r4, r5
 800ed60:	bf1f      	itttt	ne
 800ed62:	2230      	movne	r2, #48	; 0x30
 800ed64:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800ed68:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 800ed6c:	f04a 0a02 	orrne.w	sl, sl, #2
 800ed70:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800ed74:	e11a      	b.n	800efac <_vfiprintf_r+0x468>
 800ed76:	4648      	mov	r0, r9
 800ed78:	f7fd f904 	bl	800bf84 <_localeconv_r>
 800ed7c:	6843      	ldr	r3, [r0, #4]
 800ed7e:	4618      	mov	r0, r3
 800ed80:	ee08 3a10 	vmov	s16, r3
 800ed84:	f7f1 fa2c 	bl	80001e0 <strlen>
 800ed88:	9007      	str	r0, [sp, #28]
 800ed8a:	4648      	mov	r0, r9
 800ed8c:	f7fd f8fa 	bl	800bf84 <_localeconv_r>
 800ed90:	6883      	ldr	r3, [r0, #8]
 800ed92:	9306      	str	r3, [sp, #24]
 800ed94:	9b07      	ldr	r3, [sp, #28]
 800ed96:	b12b      	cbz	r3, 800eda4 <_vfiprintf_r+0x260>
 800ed98:	9b06      	ldr	r3, [sp, #24]
 800ed9a:	b11b      	cbz	r3, 800eda4 <_vfiprintf_r+0x260>
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	b10b      	cbz	r3, 800eda4 <_vfiprintf_r+0x260>
 800eda0:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800eda4:	9a01      	ldr	r2, [sp, #4]
 800eda6:	e75a      	b.n	800ec5e <_vfiprintf_r+0x11a>
 800eda8:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800edac:	2b00      	cmp	r3, #0
 800edae:	d1f9      	bne.n	800eda4 <_vfiprintf_r+0x260>
 800edb0:	2320      	movs	r3, #32
 800edb2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800edb6:	e7f5      	b.n	800eda4 <_vfiprintf_r+0x260>
 800edb8:	f04a 0a01 	orr.w	sl, sl, #1
 800edbc:	e7f2      	b.n	800eda4 <_vfiprintf_r+0x260>
 800edbe:	f854 3b04 	ldr.w	r3, [r4], #4
 800edc2:	9303      	str	r3, [sp, #12]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	daed      	bge.n	800eda4 <_vfiprintf_r+0x260>
 800edc8:	425b      	negs	r3, r3
 800edca:	9303      	str	r3, [sp, #12]
 800edcc:	f04a 0a04 	orr.w	sl, sl, #4
 800edd0:	e7e8      	b.n	800eda4 <_vfiprintf_r+0x260>
 800edd2:	232b      	movs	r3, #43	; 0x2b
 800edd4:	e7ed      	b.n	800edb2 <_vfiprintf_r+0x26e>
 800edd6:	9a01      	ldr	r2, [sp, #4]
 800edd8:	f812 3b01 	ldrb.w	r3, [r2], #1
 800eddc:	2b2a      	cmp	r3, #42	; 0x2a
 800edde:	d112      	bne.n	800ee06 <_vfiprintf_r+0x2c2>
 800ede0:	f854 0b04 	ldr.w	r0, [r4], #4
 800ede4:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800ede8:	e9cd 3200 	strd	r3, r2, [sp]
 800edec:	e7da      	b.n	800eda4 <_vfiprintf_r+0x260>
 800edee:	9b00      	ldr	r3, [sp, #0]
 800edf0:	200a      	movs	r0, #10
 800edf2:	fb00 1303 	mla	r3, r0, r3, r1
 800edf6:	9300      	str	r3, [sp, #0]
 800edf8:	f812 3b01 	ldrb.w	r3, [r2], #1
 800edfc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ee00:	2909      	cmp	r1, #9
 800ee02:	d9f4      	bls.n	800edee <_vfiprintf_r+0x2aa>
 800ee04:	e72d      	b.n	800ec62 <_vfiprintf_r+0x11e>
 800ee06:	2100      	movs	r1, #0
 800ee08:	9100      	str	r1, [sp, #0]
 800ee0a:	e7f7      	b.n	800edfc <_vfiprintf_r+0x2b8>
 800ee0c:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800ee10:	e7c8      	b.n	800eda4 <_vfiprintf_r+0x260>
 800ee12:	2100      	movs	r1, #0
 800ee14:	9a01      	ldr	r2, [sp, #4]
 800ee16:	9103      	str	r1, [sp, #12]
 800ee18:	9903      	ldr	r1, [sp, #12]
 800ee1a:	3b30      	subs	r3, #48	; 0x30
 800ee1c:	200a      	movs	r0, #10
 800ee1e:	fb00 3301 	mla	r3, r0, r1, r3
 800ee22:	9303      	str	r3, [sp, #12]
 800ee24:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ee28:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ee2c:	2909      	cmp	r1, #9
 800ee2e:	d9f3      	bls.n	800ee18 <_vfiprintf_r+0x2d4>
 800ee30:	e717      	b.n	800ec62 <_vfiprintf_r+0x11e>
 800ee32:	9b01      	ldr	r3, [sp, #4]
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	2b68      	cmp	r3, #104	; 0x68
 800ee38:	bf01      	itttt	eq
 800ee3a:	9b01      	ldreq	r3, [sp, #4]
 800ee3c:	3301      	addeq	r3, #1
 800ee3e:	9301      	streq	r3, [sp, #4]
 800ee40:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800ee44:	bf18      	it	ne
 800ee46:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800ee4a:	e7ab      	b.n	800eda4 <_vfiprintf_r+0x260>
 800ee4c:	9b01      	ldr	r3, [sp, #4]
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	2b6c      	cmp	r3, #108	; 0x6c
 800ee52:	d105      	bne.n	800ee60 <_vfiprintf_r+0x31c>
 800ee54:	9b01      	ldr	r3, [sp, #4]
 800ee56:	3301      	adds	r3, #1
 800ee58:	9301      	str	r3, [sp, #4]
 800ee5a:	f04a 0a20 	orr.w	sl, sl, #32
 800ee5e:	e7a1      	b.n	800eda4 <_vfiprintf_r+0x260>
 800ee60:	f04a 0a10 	orr.w	sl, sl, #16
 800ee64:	e79e      	b.n	800eda4 <_vfiprintf_r+0x260>
 800ee66:	46a3      	mov	fp, r4
 800ee68:	2100      	movs	r1, #0
 800ee6a:	f85b 3b04 	ldr.w	r3, [fp], #4
 800ee6e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800ee72:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800ee76:	2301      	movs	r3, #1
 800ee78:	9300      	str	r3, [sp, #0]
 800ee7a:	460d      	mov	r5, r1
 800ee7c:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 800ee80:	e0ad      	b.n	800efde <_vfiprintf_r+0x49a>
 800ee82:	f04a 0a10 	orr.w	sl, sl, #16
 800ee86:	f01a 0f20 	tst.w	sl, #32
 800ee8a:	d011      	beq.n	800eeb0 <_vfiprintf_r+0x36c>
 800ee8c:	3407      	adds	r4, #7
 800ee8e:	f024 0307 	bic.w	r3, r4, #7
 800ee92:	469b      	mov	fp, r3
 800ee94:	685d      	ldr	r5, [r3, #4]
 800ee96:	f85b 4b08 	ldr.w	r4, [fp], #8
 800ee9a:	2d00      	cmp	r5, #0
 800ee9c:	da06      	bge.n	800eeac <_vfiprintf_r+0x368>
 800ee9e:	4264      	negs	r4, r4
 800eea0:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800eea4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800eea8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800eeac:	2301      	movs	r3, #1
 800eeae:	e04a      	b.n	800ef46 <_vfiprintf_r+0x402>
 800eeb0:	46a3      	mov	fp, r4
 800eeb2:	f01a 0f10 	tst.w	sl, #16
 800eeb6:	f85b 5b04 	ldr.w	r5, [fp], #4
 800eeba:	d002      	beq.n	800eec2 <_vfiprintf_r+0x37e>
 800eebc:	462c      	mov	r4, r5
 800eebe:	17ed      	asrs	r5, r5, #31
 800eec0:	e7eb      	b.n	800ee9a <_vfiprintf_r+0x356>
 800eec2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800eec6:	d003      	beq.n	800eed0 <_vfiprintf_r+0x38c>
 800eec8:	b22c      	sxth	r4, r5
 800eeca:	f345 35c0 	sbfx	r5, r5, #15, #1
 800eece:	e7e4      	b.n	800ee9a <_vfiprintf_r+0x356>
 800eed0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800eed4:	d0f2      	beq.n	800eebc <_vfiprintf_r+0x378>
 800eed6:	b26c      	sxtb	r4, r5
 800eed8:	f345 15c0 	sbfx	r5, r5, #7, #1
 800eedc:	e7dd      	b.n	800ee9a <_vfiprintf_r+0x356>
 800eede:	f01a 0f20 	tst.w	sl, #32
 800eee2:	f104 0b04 	add.w	fp, r4, #4
 800eee6:	d007      	beq.n	800eef8 <_vfiprintf_r+0x3b4>
 800eee8:	9a02      	ldr	r2, [sp, #8]
 800eeea:	6823      	ldr	r3, [r4, #0]
 800eeec:	9902      	ldr	r1, [sp, #8]
 800eeee:	17d2      	asrs	r2, r2, #31
 800eef0:	e9c3 1200 	strd	r1, r2, [r3]
 800eef4:	465c      	mov	r4, fp
 800eef6:	e68c      	b.n	800ec12 <_vfiprintf_r+0xce>
 800eef8:	f01a 0f10 	tst.w	sl, #16
 800eefc:	d003      	beq.n	800ef06 <_vfiprintf_r+0x3c2>
 800eefe:	6823      	ldr	r3, [r4, #0]
 800ef00:	9a02      	ldr	r2, [sp, #8]
 800ef02:	601a      	str	r2, [r3, #0]
 800ef04:	e7f6      	b.n	800eef4 <_vfiprintf_r+0x3b0>
 800ef06:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800ef0a:	d003      	beq.n	800ef14 <_vfiprintf_r+0x3d0>
 800ef0c:	6823      	ldr	r3, [r4, #0]
 800ef0e:	9a02      	ldr	r2, [sp, #8]
 800ef10:	801a      	strh	r2, [r3, #0]
 800ef12:	e7ef      	b.n	800eef4 <_vfiprintf_r+0x3b0>
 800ef14:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800ef18:	d0f1      	beq.n	800eefe <_vfiprintf_r+0x3ba>
 800ef1a:	6823      	ldr	r3, [r4, #0]
 800ef1c:	9a02      	ldr	r2, [sp, #8]
 800ef1e:	701a      	strb	r2, [r3, #0]
 800ef20:	e7e8      	b.n	800eef4 <_vfiprintf_r+0x3b0>
 800ef22:	f04a 0a10 	orr.w	sl, sl, #16
 800ef26:	f01a 0320 	ands.w	r3, sl, #32
 800ef2a:	d01f      	beq.n	800ef6c <_vfiprintf_r+0x428>
 800ef2c:	3407      	adds	r4, #7
 800ef2e:	f024 0307 	bic.w	r3, r4, #7
 800ef32:	469b      	mov	fp, r3
 800ef34:	685d      	ldr	r5, [r3, #4]
 800ef36:	f85b 4b08 	ldr.w	r4, [fp], #8
 800ef3a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800ef3e:	2300      	movs	r3, #0
 800ef40:	2200      	movs	r2, #0
 800ef42:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 800ef46:	9a00      	ldr	r2, [sp, #0]
 800ef48:	3201      	adds	r2, #1
 800ef4a:	f000 8262 	beq.w	800f412 <_vfiprintf_r+0x8ce>
 800ef4e:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800ef52:	9204      	str	r2, [sp, #16]
 800ef54:	ea54 0205 	orrs.w	r2, r4, r5
 800ef58:	f040 8261 	bne.w	800f41e <_vfiprintf_r+0x8da>
 800ef5c:	9a00      	ldr	r2, [sp, #0]
 800ef5e:	2a00      	cmp	r2, #0
 800ef60:	f000 8199 	beq.w	800f296 <_vfiprintf_r+0x752>
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	f040 825d 	bne.w	800f424 <_vfiprintf_r+0x8e0>
 800ef6a:	e139      	b.n	800f1e0 <_vfiprintf_r+0x69c>
 800ef6c:	46a3      	mov	fp, r4
 800ef6e:	f01a 0510 	ands.w	r5, sl, #16
 800ef72:	f85b 4b04 	ldr.w	r4, [fp], #4
 800ef76:	d001      	beq.n	800ef7c <_vfiprintf_r+0x438>
 800ef78:	461d      	mov	r5, r3
 800ef7a:	e7de      	b.n	800ef3a <_vfiprintf_r+0x3f6>
 800ef7c:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800ef80:	d001      	beq.n	800ef86 <_vfiprintf_r+0x442>
 800ef82:	b2a4      	uxth	r4, r4
 800ef84:	e7d9      	b.n	800ef3a <_vfiprintf_r+0x3f6>
 800ef86:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800ef8a:	d0d6      	beq.n	800ef3a <_vfiprintf_r+0x3f6>
 800ef8c:	b2e4      	uxtb	r4, r4
 800ef8e:	e7f3      	b.n	800ef78 <_vfiprintf_r+0x434>
 800ef90:	2330      	movs	r3, #48	; 0x30
 800ef92:	46a3      	mov	fp, r4
 800ef94:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800ef98:	2378      	movs	r3, #120	; 0x78
 800ef9a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 800ef9e:	f85b 4b04 	ldr.w	r4, [fp], #4
 800efa2:	4b03      	ldr	r3, [pc, #12]	; (800efb0 <_vfiprintf_r+0x46c>)
 800efa4:	9305      	str	r3, [sp, #20]
 800efa6:	2500      	movs	r5, #0
 800efa8:	f04a 0a02 	orr.w	sl, sl, #2
 800efac:	2302      	movs	r3, #2
 800efae:	e7c7      	b.n	800ef40 <_vfiprintf_r+0x3fc>
 800efb0:	0800ff9c 	.word	0x0800ff9c
 800efb4:	9b00      	ldr	r3, [sp, #0]
 800efb6:	46a3      	mov	fp, r4
 800efb8:	2500      	movs	r5, #0
 800efba:	1c5c      	adds	r4, r3, #1
 800efbc:	f85b 8b04 	ldr.w	r8, [fp], #4
 800efc0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800efc4:	f000 80ce 	beq.w	800f164 <_vfiprintf_r+0x620>
 800efc8:	461a      	mov	r2, r3
 800efca:	4629      	mov	r1, r5
 800efcc:	4640      	mov	r0, r8
 800efce:	f7f1 f90f 	bl	80001f0 <memchr>
 800efd2:	2800      	cmp	r0, #0
 800efd4:	f000 8174 	beq.w	800f2c0 <_vfiprintf_r+0x77c>
 800efd8:	eba0 0308 	sub.w	r3, r0, r8
 800efdc:	9300      	str	r3, [sp, #0]
 800efde:	9b00      	ldr	r3, [sp, #0]
 800efe0:	42ab      	cmp	r3, r5
 800efe2:	bfb8      	it	lt
 800efe4:	462b      	movlt	r3, r5
 800efe6:	9304      	str	r3, [sp, #16]
 800efe8:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800efec:	b113      	cbz	r3, 800eff4 <_vfiprintf_r+0x4b0>
 800efee:	9b04      	ldr	r3, [sp, #16]
 800eff0:	3301      	adds	r3, #1
 800eff2:	9304      	str	r3, [sp, #16]
 800eff4:	f01a 0302 	ands.w	r3, sl, #2
 800eff8:	9308      	str	r3, [sp, #32]
 800effa:	bf1e      	ittt	ne
 800effc:	9b04      	ldrne	r3, [sp, #16]
 800effe:	3302      	addne	r3, #2
 800f000:	9304      	strne	r3, [sp, #16]
 800f002:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800f006:	9309      	str	r3, [sp, #36]	; 0x24
 800f008:	d11f      	bne.n	800f04a <_vfiprintf_r+0x506>
 800f00a:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f00e:	1a9c      	subs	r4, r3, r2
 800f010:	2c00      	cmp	r4, #0
 800f012:	dd1a      	ble.n	800f04a <_vfiprintf_r+0x506>
 800f014:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800f018:	48aa      	ldr	r0, [pc, #680]	; (800f2c4 <_vfiprintf_r+0x780>)
 800f01a:	6030      	str	r0, [r6, #0]
 800f01c:	2c10      	cmp	r4, #16
 800f01e:	f103 0301 	add.w	r3, r3, #1
 800f022:	f106 0108 	add.w	r1, r6, #8
 800f026:	f300 8153 	bgt.w	800f2d0 <_vfiprintf_r+0x78c>
 800f02a:	6074      	str	r4, [r6, #4]
 800f02c:	2b07      	cmp	r3, #7
 800f02e:	4414      	add	r4, r2
 800f030:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800f034:	f340 815e 	ble.w	800f2f4 <_vfiprintf_r+0x7b0>
 800f038:	aa0c      	add	r2, sp, #48	; 0x30
 800f03a:	4639      	mov	r1, r7
 800f03c:	4648      	mov	r0, r9
 800f03e:	f7ff fd4f 	bl	800eae0 <__sprint_r>
 800f042:	2800      	cmp	r0, #0
 800f044:	f040 81b7 	bne.w	800f3b6 <_vfiprintf_r+0x872>
 800f048:	ae0f      	add	r6, sp, #60	; 0x3c
 800f04a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800f04e:	b173      	cbz	r3, 800f06e <_vfiprintf_r+0x52a>
 800f050:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 800f054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f056:	6032      	str	r2, [r6, #0]
 800f058:	2201      	movs	r2, #1
 800f05a:	6072      	str	r2, [r6, #4]
 800f05c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f05e:	3301      	adds	r3, #1
 800f060:	3201      	adds	r2, #1
 800f062:	2b07      	cmp	r3, #7
 800f064:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800f068:	f300 8146 	bgt.w	800f2f8 <_vfiprintf_r+0x7b4>
 800f06c:	3608      	adds	r6, #8
 800f06e:	9b08      	ldr	r3, [sp, #32]
 800f070:	b16b      	cbz	r3, 800f08e <_vfiprintf_r+0x54a>
 800f072:	aa0b      	add	r2, sp, #44	; 0x2c
 800f074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f076:	6032      	str	r2, [r6, #0]
 800f078:	2202      	movs	r2, #2
 800f07a:	6072      	str	r2, [r6, #4]
 800f07c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f07e:	3301      	adds	r3, #1
 800f080:	3202      	adds	r2, #2
 800f082:	2b07      	cmp	r3, #7
 800f084:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800f088:	f300 813f 	bgt.w	800f30a <_vfiprintf_r+0x7c6>
 800f08c:	3608      	adds	r6, #8
 800f08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f090:	2b80      	cmp	r3, #128	; 0x80
 800f092:	d11f      	bne.n	800f0d4 <_vfiprintf_r+0x590>
 800f094:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f098:	1a9c      	subs	r4, r3, r2
 800f09a:	2c00      	cmp	r4, #0
 800f09c:	dd1a      	ble.n	800f0d4 <_vfiprintf_r+0x590>
 800f09e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800f0a2:	4889      	ldr	r0, [pc, #548]	; (800f2c8 <_vfiprintf_r+0x784>)
 800f0a4:	6030      	str	r0, [r6, #0]
 800f0a6:	2c10      	cmp	r4, #16
 800f0a8:	f103 0301 	add.w	r3, r3, #1
 800f0ac:	f106 0108 	add.w	r1, r6, #8
 800f0b0:	f300 8134 	bgt.w	800f31c <_vfiprintf_r+0x7d8>
 800f0b4:	6074      	str	r4, [r6, #4]
 800f0b6:	2b07      	cmp	r3, #7
 800f0b8:	4414      	add	r4, r2
 800f0ba:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800f0be:	f340 813f 	ble.w	800f340 <_vfiprintf_r+0x7fc>
 800f0c2:	aa0c      	add	r2, sp, #48	; 0x30
 800f0c4:	4639      	mov	r1, r7
 800f0c6:	4648      	mov	r0, r9
 800f0c8:	f7ff fd0a 	bl	800eae0 <__sprint_r>
 800f0cc:	2800      	cmp	r0, #0
 800f0ce:	f040 8172 	bne.w	800f3b6 <_vfiprintf_r+0x872>
 800f0d2:	ae0f      	add	r6, sp, #60	; 0x3c
 800f0d4:	9b00      	ldr	r3, [sp, #0]
 800f0d6:	1aec      	subs	r4, r5, r3
 800f0d8:	2c00      	cmp	r4, #0
 800f0da:	dd1a      	ble.n	800f112 <_vfiprintf_r+0x5ce>
 800f0dc:	4d7a      	ldr	r5, [pc, #488]	; (800f2c8 <_vfiprintf_r+0x784>)
 800f0de:	6035      	str	r5, [r6, #0]
 800f0e0:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800f0e4:	2c10      	cmp	r4, #16
 800f0e6:	f103 0301 	add.w	r3, r3, #1
 800f0ea:	f106 0208 	add.w	r2, r6, #8
 800f0ee:	f300 8129 	bgt.w	800f344 <_vfiprintf_r+0x800>
 800f0f2:	6074      	str	r4, [r6, #4]
 800f0f4:	2b07      	cmp	r3, #7
 800f0f6:	440c      	add	r4, r1
 800f0f8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800f0fc:	f340 8133 	ble.w	800f366 <_vfiprintf_r+0x822>
 800f100:	aa0c      	add	r2, sp, #48	; 0x30
 800f102:	4639      	mov	r1, r7
 800f104:	4648      	mov	r0, r9
 800f106:	f7ff fceb 	bl	800eae0 <__sprint_r>
 800f10a:	2800      	cmp	r0, #0
 800f10c:	f040 8153 	bne.w	800f3b6 <_vfiprintf_r+0x872>
 800f110:	ae0f      	add	r6, sp, #60	; 0x3c
 800f112:	9b00      	ldr	r3, [sp, #0]
 800f114:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f116:	6073      	str	r3, [r6, #4]
 800f118:	4418      	add	r0, r3
 800f11a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f11c:	f8c6 8000 	str.w	r8, [r6]
 800f120:	3301      	adds	r3, #1
 800f122:	2b07      	cmp	r3, #7
 800f124:	900e      	str	r0, [sp, #56]	; 0x38
 800f126:	930d      	str	r3, [sp, #52]	; 0x34
 800f128:	f300 811f 	bgt.w	800f36a <_vfiprintf_r+0x826>
 800f12c:	f106 0308 	add.w	r3, r6, #8
 800f130:	f01a 0f04 	tst.w	sl, #4
 800f134:	f040 8121 	bne.w	800f37a <_vfiprintf_r+0x836>
 800f138:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f13c:	9904      	ldr	r1, [sp, #16]
 800f13e:	428a      	cmp	r2, r1
 800f140:	bfac      	ite	ge
 800f142:	189b      	addge	r3, r3, r2
 800f144:	185b      	addlt	r3, r3, r1
 800f146:	9302      	str	r3, [sp, #8]
 800f148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f14a:	b13b      	cbz	r3, 800f15c <_vfiprintf_r+0x618>
 800f14c:	aa0c      	add	r2, sp, #48	; 0x30
 800f14e:	4639      	mov	r1, r7
 800f150:	4648      	mov	r0, r9
 800f152:	f7ff fcc5 	bl	800eae0 <__sprint_r>
 800f156:	2800      	cmp	r0, #0
 800f158:	f040 812d 	bne.w	800f3b6 <_vfiprintf_r+0x872>
 800f15c:	2300      	movs	r3, #0
 800f15e:	930d      	str	r3, [sp, #52]	; 0x34
 800f160:	ae0f      	add	r6, sp, #60	; 0x3c
 800f162:	e6c7      	b.n	800eef4 <_vfiprintf_r+0x3b0>
 800f164:	4640      	mov	r0, r8
 800f166:	f7f1 f83b 	bl	80001e0 <strlen>
 800f16a:	9000      	str	r0, [sp, #0]
 800f16c:	e737      	b.n	800efde <_vfiprintf_r+0x49a>
 800f16e:	f04a 0a10 	orr.w	sl, sl, #16
 800f172:	f01a 0320 	ands.w	r3, sl, #32
 800f176:	d008      	beq.n	800f18a <_vfiprintf_r+0x646>
 800f178:	3407      	adds	r4, #7
 800f17a:	f024 0307 	bic.w	r3, r4, #7
 800f17e:	469b      	mov	fp, r3
 800f180:	685d      	ldr	r5, [r3, #4]
 800f182:	f85b 4b08 	ldr.w	r4, [fp], #8
 800f186:	2301      	movs	r3, #1
 800f188:	e6da      	b.n	800ef40 <_vfiprintf_r+0x3fc>
 800f18a:	46a3      	mov	fp, r4
 800f18c:	f01a 0510 	ands.w	r5, sl, #16
 800f190:	f85b 4b04 	ldr.w	r4, [fp], #4
 800f194:	d001      	beq.n	800f19a <_vfiprintf_r+0x656>
 800f196:	461d      	mov	r5, r3
 800f198:	e7f5      	b.n	800f186 <_vfiprintf_r+0x642>
 800f19a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800f19e:	d001      	beq.n	800f1a4 <_vfiprintf_r+0x660>
 800f1a0:	b2a4      	uxth	r4, r4
 800f1a2:	e7f0      	b.n	800f186 <_vfiprintf_r+0x642>
 800f1a4:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800f1a8:	d0ed      	beq.n	800f186 <_vfiprintf_r+0x642>
 800f1aa:	b2e4      	uxtb	r4, r4
 800f1ac:	e7f3      	b.n	800f196 <_vfiprintf_r+0x652>
 800f1ae:	4a47      	ldr	r2, [pc, #284]	; (800f2cc <_vfiprintf_r+0x788>)
 800f1b0:	e5c5      	b.n	800ed3e <_vfiprintf_r+0x1fa>
 800f1b2:	46a3      	mov	fp, r4
 800f1b4:	f01a 0510 	ands.w	r5, sl, #16
 800f1b8:	f85b 4b04 	ldr.w	r4, [fp], #4
 800f1bc:	d001      	beq.n	800f1c2 <_vfiprintf_r+0x67e>
 800f1be:	4615      	mov	r5, r2
 800f1c0:	e5c9      	b.n	800ed56 <_vfiprintf_r+0x212>
 800f1c2:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800f1c6:	d001      	beq.n	800f1cc <_vfiprintf_r+0x688>
 800f1c8:	b2a4      	uxth	r4, r4
 800f1ca:	e5c4      	b.n	800ed56 <_vfiprintf_r+0x212>
 800f1cc:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800f1d0:	f43f adc1 	beq.w	800ed56 <_vfiprintf_r+0x212>
 800f1d4:	b2e4      	uxtb	r4, r4
 800f1d6:	e7f2      	b.n	800f1be <_vfiprintf_r+0x67a>
 800f1d8:	2c0a      	cmp	r4, #10
 800f1da:	f175 0300 	sbcs.w	r3, r5, #0
 800f1de:	d205      	bcs.n	800f1ec <_vfiprintf_r+0x6a8>
 800f1e0:	3430      	adds	r4, #48	; 0x30
 800f1e2:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 800f1e6:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800f1ea:	e137      	b.n	800f45c <_vfiprintf_r+0x918>
 800f1ec:	ab38      	add	r3, sp, #224	; 0xe0
 800f1ee:	9308      	str	r3, [sp, #32]
 800f1f0:	9b04      	ldr	r3, [sp, #16]
 800f1f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f1f6:	f04f 0a00 	mov.w	sl, #0
 800f1fa:	9309      	str	r3, [sp, #36]	; 0x24
 800f1fc:	9b08      	ldr	r3, [sp, #32]
 800f1fe:	220a      	movs	r2, #10
 800f200:	f103 38ff 	add.w	r8, r3, #4294967295
 800f204:	4620      	mov	r0, r4
 800f206:	2300      	movs	r3, #0
 800f208:	4629      	mov	r1, r5
 800f20a:	f7f1 fd45 	bl	8000c98 <__aeabi_uldivmod>
 800f20e:	9b08      	ldr	r3, [sp, #32]
 800f210:	3230      	adds	r2, #48	; 0x30
 800f212:	f803 2c01 	strb.w	r2, [r3, #-1]
 800f216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f218:	f10a 0a01 	add.w	sl, sl, #1
 800f21c:	b1db      	cbz	r3, 800f256 <_vfiprintf_r+0x712>
 800f21e:	9b06      	ldr	r3, [sp, #24]
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	4553      	cmp	r3, sl
 800f224:	d117      	bne.n	800f256 <_vfiprintf_r+0x712>
 800f226:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800f22a:	d014      	beq.n	800f256 <_vfiprintf_r+0x712>
 800f22c:	2c0a      	cmp	r4, #10
 800f22e:	f175 0300 	sbcs.w	r3, r5, #0
 800f232:	d310      	bcc.n	800f256 <_vfiprintf_r+0x712>
 800f234:	9b07      	ldr	r3, [sp, #28]
 800f236:	eba8 0803 	sub.w	r8, r8, r3
 800f23a:	461a      	mov	r2, r3
 800f23c:	ee18 1a10 	vmov	r1, s16
 800f240:	4640      	mov	r0, r8
 800f242:	f7fd fd9b 	bl	800cd7c <strncpy>
 800f246:	9b06      	ldr	r3, [sp, #24]
 800f248:	785b      	ldrb	r3, [r3, #1]
 800f24a:	b1a3      	cbz	r3, 800f276 <_vfiprintf_r+0x732>
 800f24c:	9b06      	ldr	r3, [sp, #24]
 800f24e:	3301      	adds	r3, #1
 800f250:	9306      	str	r3, [sp, #24]
 800f252:	f04f 0a00 	mov.w	sl, #0
 800f256:	2300      	movs	r3, #0
 800f258:	220a      	movs	r2, #10
 800f25a:	4620      	mov	r0, r4
 800f25c:	4629      	mov	r1, r5
 800f25e:	f7f1 fd1b 	bl	8000c98 <__aeabi_uldivmod>
 800f262:	2c0a      	cmp	r4, #10
 800f264:	f175 0300 	sbcs.w	r3, r5, #0
 800f268:	f0c0 80f8 	bcc.w	800f45c <_vfiprintf_r+0x918>
 800f26c:	4604      	mov	r4, r0
 800f26e:	460d      	mov	r5, r1
 800f270:	f8cd 8020 	str.w	r8, [sp, #32]
 800f274:	e7c2      	b.n	800f1fc <_vfiprintf_r+0x6b8>
 800f276:	469a      	mov	sl, r3
 800f278:	e7ed      	b.n	800f256 <_vfiprintf_r+0x712>
 800f27a:	f004 030f 	and.w	r3, r4, #15
 800f27e:	9a05      	ldr	r2, [sp, #20]
 800f280:	0924      	lsrs	r4, r4, #4
 800f282:	5cd3      	ldrb	r3, [r2, r3]
 800f284:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800f288:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800f28c:	092d      	lsrs	r5, r5, #4
 800f28e:	ea54 0305 	orrs.w	r3, r4, r5
 800f292:	d1f2      	bne.n	800f27a <_vfiprintf_r+0x736>
 800f294:	e0e2      	b.n	800f45c <_vfiprintf_r+0x918>
 800f296:	b933      	cbnz	r3, 800f2a6 <_vfiprintf_r+0x762>
 800f298:	f01a 0f01 	tst.w	sl, #1
 800f29c:	d003      	beq.n	800f2a6 <_vfiprintf_r+0x762>
 800f29e:	2330      	movs	r3, #48	; 0x30
 800f2a0:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 800f2a4:	e79f      	b.n	800f1e6 <_vfiprintf_r+0x6a2>
 800f2a6:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800f2aa:	e0d7      	b.n	800f45c <_vfiprintf_r+0x918>
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	f000 80a3 	beq.w	800f3f8 <_vfiprintf_r+0x8b4>
 800f2b2:	2100      	movs	r1, #0
 800f2b4:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800f2b8:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800f2bc:	46a3      	mov	fp, r4
 800f2be:	e5da      	b.n	800ee76 <_vfiprintf_r+0x332>
 800f2c0:	4605      	mov	r5, r0
 800f2c2:	e68c      	b.n	800efde <_vfiprintf_r+0x49a>
 800f2c4:	080103e4 	.word	0x080103e4
 800f2c8:	080103f4 	.word	0x080103f4
 800f2cc:	0800ffad 	.word	0x0800ffad
 800f2d0:	2010      	movs	r0, #16
 800f2d2:	4402      	add	r2, r0
 800f2d4:	2b07      	cmp	r3, #7
 800f2d6:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800f2da:	6070      	str	r0, [r6, #4]
 800f2dc:	dd07      	ble.n	800f2ee <_vfiprintf_r+0x7aa>
 800f2de:	aa0c      	add	r2, sp, #48	; 0x30
 800f2e0:	4639      	mov	r1, r7
 800f2e2:	4648      	mov	r0, r9
 800f2e4:	f7ff fbfc 	bl	800eae0 <__sprint_r>
 800f2e8:	2800      	cmp	r0, #0
 800f2ea:	d164      	bne.n	800f3b6 <_vfiprintf_r+0x872>
 800f2ec:	a90f      	add	r1, sp, #60	; 0x3c
 800f2ee:	3c10      	subs	r4, #16
 800f2f0:	460e      	mov	r6, r1
 800f2f2:	e68f      	b.n	800f014 <_vfiprintf_r+0x4d0>
 800f2f4:	460e      	mov	r6, r1
 800f2f6:	e6a8      	b.n	800f04a <_vfiprintf_r+0x506>
 800f2f8:	aa0c      	add	r2, sp, #48	; 0x30
 800f2fa:	4639      	mov	r1, r7
 800f2fc:	4648      	mov	r0, r9
 800f2fe:	f7ff fbef 	bl	800eae0 <__sprint_r>
 800f302:	2800      	cmp	r0, #0
 800f304:	d157      	bne.n	800f3b6 <_vfiprintf_r+0x872>
 800f306:	ae0f      	add	r6, sp, #60	; 0x3c
 800f308:	e6b1      	b.n	800f06e <_vfiprintf_r+0x52a>
 800f30a:	aa0c      	add	r2, sp, #48	; 0x30
 800f30c:	4639      	mov	r1, r7
 800f30e:	4648      	mov	r0, r9
 800f310:	f7ff fbe6 	bl	800eae0 <__sprint_r>
 800f314:	2800      	cmp	r0, #0
 800f316:	d14e      	bne.n	800f3b6 <_vfiprintf_r+0x872>
 800f318:	ae0f      	add	r6, sp, #60	; 0x3c
 800f31a:	e6b8      	b.n	800f08e <_vfiprintf_r+0x54a>
 800f31c:	2010      	movs	r0, #16
 800f31e:	4402      	add	r2, r0
 800f320:	2b07      	cmp	r3, #7
 800f322:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800f326:	6070      	str	r0, [r6, #4]
 800f328:	dd07      	ble.n	800f33a <_vfiprintf_r+0x7f6>
 800f32a:	aa0c      	add	r2, sp, #48	; 0x30
 800f32c:	4639      	mov	r1, r7
 800f32e:	4648      	mov	r0, r9
 800f330:	f7ff fbd6 	bl	800eae0 <__sprint_r>
 800f334:	2800      	cmp	r0, #0
 800f336:	d13e      	bne.n	800f3b6 <_vfiprintf_r+0x872>
 800f338:	a90f      	add	r1, sp, #60	; 0x3c
 800f33a:	3c10      	subs	r4, #16
 800f33c:	460e      	mov	r6, r1
 800f33e:	e6ae      	b.n	800f09e <_vfiprintf_r+0x55a>
 800f340:	460e      	mov	r6, r1
 800f342:	e6c7      	b.n	800f0d4 <_vfiprintf_r+0x590>
 800f344:	2010      	movs	r0, #16
 800f346:	4401      	add	r1, r0
 800f348:	2b07      	cmp	r3, #7
 800f34a:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800f34e:	6070      	str	r0, [r6, #4]
 800f350:	dd06      	ble.n	800f360 <_vfiprintf_r+0x81c>
 800f352:	aa0c      	add	r2, sp, #48	; 0x30
 800f354:	4639      	mov	r1, r7
 800f356:	4648      	mov	r0, r9
 800f358:	f7ff fbc2 	bl	800eae0 <__sprint_r>
 800f35c:	bb58      	cbnz	r0, 800f3b6 <_vfiprintf_r+0x872>
 800f35e:	aa0f      	add	r2, sp, #60	; 0x3c
 800f360:	3c10      	subs	r4, #16
 800f362:	4616      	mov	r6, r2
 800f364:	e6bb      	b.n	800f0de <_vfiprintf_r+0x59a>
 800f366:	4616      	mov	r6, r2
 800f368:	e6d3      	b.n	800f112 <_vfiprintf_r+0x5ce>
 800f36a:	aa0c      	add	r2, sp, #48	; 0x30
 800f36c:	4639      	mov	r1, r7
 800f36e:	4648      	mov	r0, r9
 800f370:	f7ff fbb6 	bl	800eae0 <__sprint_r>
 800f374:	b9f8      	cbnz	r0, 800f3b6 <_vfiprintf_r+0x872>
 800f376:	ab0f      	add	r3, sp, #60	; 0x3c
 800f378:	e6da      	b.n	800f130 <_vfiprintf_r+0x5ec>
 800f37a:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800f37e:	1a54      	subs	r4, r2, r1
 800f380:	2c00      	cmp	r4, #0
 800f382:	f77f aed9 	ble.w	800f138 <_vfiprintf_r+0x5f4>
 800f386:	4d39      	ldr	r5, [pc, #228]	; (800f46c <_vfiprintf_r+0x928>)
 800f388:	2610      	movs	r6, #16
 800f38a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800f38e:	2c10      	cmp	r4, #16
 800f390:	f102 0201 	add.w	r2, r2, #1
 800f394:	601d      	str	r5, [r3, #0]
 800f396:	dc1d      	bgt.n	800f3d4 <_vfiprintf_r+0x890>
 800f398:	605c      	str	r4, [r3, #4]
 800f39a:	2a07      	cmp	r2, #7
 800f39c:	440c      	add	r4, r1
 800f39e:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 800f3a2:	f77f aec9 	ble.w	800f138 <_vfiprintf_r+0x5f4>
 800f3a6:	aa0c      	add	r2, sp, #48	; 0x30
 800f3a8:	4639      	mov	r1, r7
 800f3aa:	4648      	mov	r0, r9
 800f3ac:	f7ff fb98 	bl	800eae0 <__sprint_r>
 800f3b0:	2800      	cmp	r0, #0
 800f3b2:	f43f aec1 	beq.w	800f138 <_vfiprintf_r+0x5f4>
 800f3b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f3b8:	07d9      	lsls	r1, r3, #31
 800f3ba:	d405      	bmi.n	800f3c8 <_vfiprintf_r+0x884>
 800f3bc:	89bb      	ldrh	r3, [r7, #12]
 800f3be:	059a      	lsls	r2, r3, #22
 800f3c0:	d402      	bmi.n	800f3c8 <_vfiprintf_r+0x884>
 800f3c2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f3c4:	f7fc fde5 	bl	800bf92 <__retarget_lock_release_recursive>
 800f3c8:	89bb      	ldrh	r3, [r7, #12]
 800f3ca:	065b      	lsls	r3, r3, #25
 800f3cc:	f57f abed 	bpl.w	800ebaa <_vfiprintf_r+0x66>
 800f3d0:	f7ff bbe8 	b.w	800eba4 <_vfiprintf_r+0x60>
 800f3d4:	3110      	adds	r1, #16
 800f3d6:	2a07      	cmp	r2, #7
 800f3d8:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 800f3dc:	605e      	str	r6, [r3, #4]
 800f3de:	dc02      	bgt.n	800f3e6 <_vfiprintf_r+0x8a2>
 800f3e0:	3308      	adds	r3, #8
 800f3e2:	3c10      	subs	r4, #16
 800f3e4:	e7d1      	b.n	800f38a <_vfiprintf_r+0x846>
 800f3e6:	aa0c      	add	r2, sp, #48	; 0x30
 800f3e8:	4639      	mov	r1, r7
 800f3ea:	4648      	mov	r0, r9
 800f3ec:	f7ff fb78 	bl	800eae0 <__sprint_r>
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	d1e0      	bne.n	800f3b6 <_vfiprintf_r+0x872>
 800f3f4:	ab0f      	add	r3, sp, #60	; 0x3c
 800f3f6:	e7f4      	b.n	800f3e2 <_vfiprintf_r+0x89e>
 800f3f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f3fa:	b913      	cbnz	r3, 800f402 <_vfiprintf_r+0x8be>
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	930d      	str	r3, [sp, #52]	; 0x34
 800f400:	e7d9      	b.n	800f3b6 <_vfiprintf_r+0x872>
 800f402:	aa0c      	add	r2, sp, #48	; 0x30
 800f404:	4639      	mov	r1, r7
 800f406:	4648      	mov	r0, r9
 800f408:	f7ff fb6a 	bl	800eae0 <__sprint_r>
 800f40c:	2800      	cmp	r0, #0
 800f40e:	d0f5      	beq.n	800f3fc <_vfiprintf_r+0x8b8>
 800f410:	e7d1      	b.n	800f3b6 <_vfiprintf_r+0x872>
 800f412:	ea54 0205 	orrs.w	r2, r4, r5
 800f416:	f8cd a010 	str.w	sl, [sp, #16]
 800f41a:	f43f ada3 	beq.w	800ef64 <_vfiprintf_r+0x420>
 800f41e:	2b01      	cmp	r3, #1
 800f420:	f43f aeda 	beq.w	800f1d8 <_vfiprintf_r+0x694>
 800f424:	2b02      	cmp	r3, #2
 800f426:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800f42a:	f43f af26 	beq.w	800f27a <_vfiprintf_r+0x736>
 800f42e:	f004 0307 	and.w	r3, r4, #7
 800f432:	08e4      	lsrs	r4, r4, #3
 800f434:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800f438:	08ed      	lsrs	r5, r5, #3
 800f43a:	3330      	adds	r3, #48	; 0x30
 800f43c:	ea54 0105 	orrs.w	r1, r4, r5
 800f440:	4642      	mov	r2, r8
 800f442:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800f446:	d1f2      	bne.n	800f42e <_vfiprintf_r+0x8ea>
 800f448:	9904      	ldr	r1, [sp, #16]
 800f44a:	07c8      	lsls	r0, r1, #31
 800f44c:	d506      	bpl.n	800f45c <_vfiprintf_r+0x918>
 800f44e:	2b30      	cmp	r3, #48	; 0x30
 800f450:	d004      	beq.n	800f45c <_vfiprintf_r+0x918>
 800f452:	2330      	movs	r3, #48	; 0x30
 800f454:	f808 3c01 	strb.w	r3, [r8, #-1]
 800f458:	f1a2 0802 	sub.w	r8, r2, #2
 800f45c:	ab38      	add	r3, sp, #224	; 0xe0
 800f45e:	eba3 0308 	sub.w	r3, r3, r8
 800f462:	9d00      	ldr	r5, [sp, #0]
 800f464:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f468:	9300      	str	r3, [sp, #0]
 800f46a:	e5b8      	b.n	800efde <_vfiprintf_r+0x49a>
 800f46c:	080103e4 	.word	0x080103e4

0800f470 <__sbprintf>:
 800f470:	b570      	push	{r4, r5, r6, lr}
 800f472:	460c      	mov	r4, r1
 800f474:	8989      	ldrh	r1, [r1, #12]
 800f476:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800f47a:	f021 0102 	bic.w	r1, r1, #2
 800f47e:	f8ad 1014 	strh.w	r1, [sp, #20]
 800f482:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800f484:	911b      	str	r1, [sp, #108]	; 0x6c
 800f486:	89e1      	ldrh	r1, [r4, #14]
 800f488:	f8ad 1016 	strh.w	r1, [sp, #22]
 800f48c:	69e1      	ldr	r1, [r4, #28]
 800f48e:	9109      	str	r1, [sp, #36]	; 0x24
 800f490:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f492:	910b      	str	r1, [sp, #44]	; 0x2c
 800f494:	a91c      	add	r1, sp, #112	; 0x70
 800f496:	9102      	str	r1, [sp, #8]
 800f498:	9106      	str	r1, [sp, #24]
 800f49a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f49e:	4606      	mov	r6, r0
 800f4a0:	9104      	str	r1, [sp, #16]
 800f4a2:	9107      	str	r1, [sp, #28]
 800f4a4:	a818      	add	r0, sp, #96	; 0x60
 800f4a6:	2100      	movs	r1, #0
 800f4a8:	e9cd 3200 	strd	r3, r2, [sp]
 800f4ac:	9108      	str	r1, [sp, #32]
 800f4ae:	f7fc fd6d 	bl	800bf8c <__retarget_lock_init_recursive>
 800f4b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f4b6:	a902      	add	r1, sp, #8
 800f4b8:	4630      	mov	r0, r6
 800f4ba:	f7ff fb43 	bl	800eb44 <_vfiprintf_r>
 800f4be:	1e05      	subs	r5, r0, #0
 800f4c0:	db07      	blt.n	800f4d2 <__sbprintf+0x62>
 800f4c2:	a902      	add	r1, sp, #8
 800f4c4:	4630      	mov	r0, r6
 800f4c6:	f7fe feb5 	bl	800e234 <_fflush_r>
 800f4ca:	2800      	cmp	r0, #0
 800f4cc:	bf18      	it	ne
 800f4ce:	f04f 35ff 	movne.w	r5, #4294967295
 800f4d2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800f4d6:	9818      	ldr	r0, [sp, #96]	; 0x60
 800f4d8:	065b      	lsls	r3, r3, #25
 800f4da:	bf42      	ittt	mi
 800f4dc:	89a3      	ldrhmi	r3, [r4, #12]
 800f4de:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800f4e2:	81a3      	strhmi	r3, [r4, #12]
 800f4e4:	f7fc fd53 	bl	800bf8e <__retarget_lock_close_recursive>
 800f4e8:	4628      	mov	r0, r5
 800f4ea:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800f4ee:	bd70      	pop	{r4, r5, r6, pc}

0800f4f0 <__swsetup_r>:
 800f4f0:	b538      	push	{r3, r4, r5, lr}
 800f4f2:	4b2a      	ldr	r3, [pc, #168]	; (800f59c <__swsetup_r+0xac>)
 800f4f4:	4605      	mov	r5, r0
 800f4f6:	6818      	ldr	r0, [r3, #0]
 800f4f8:	460c      	mov	r4, r1
 800f4fa:	b118      	cbz	r0, 800f504 <__swsetup_r+0x14>
 800f4fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f4fe:	b90b      	cbnz	r3, 800f504 <__swsetup_r+0x14>
 800f500:	f7fe ff04 	bl	800e30c <__sinit>
 800f504:	89a3      	ldrh	r3, [r4, #12]
 800f506:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f50a:	0718      	lsls	r0, r3, #28
 800f50c:	d422      	bmi.n	800f554 <__swsetup_r+0x64>
 800f50e:	06d9      	lsls	r1, r3, #27
 800f510:	d407      	bmi.n	800f522 <__swsetup_r+0x32>
 800f512:	2309      	movs	r3, #9
 800f514:	602b      	str	r3, [r5, #0]
 800f516:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f51a:	81a3      	strh	r3, [r4, #12]
 800f51c:	f04f 30ff 	mov.w	r0, #4294967295
 800f520:	e034      	b.n	800f58c <__swsetup_r+0x9c>
 800f522:	0758      	lsls	r0, r3, #29
 800f524:	d512      	bpl.n	800f54c <__swsetup_r+0x5c>
 800f526:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f528:	b141      	cbz	r1, 800f53c <__swsetup_r+0x4c>
 800f52a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800f52e:	4299      	cmp	r1, r3
 800f530:	d002      	beq.n	800f538 <__swsetup_r+0x48>
 800f532:	4628      	mov	r0, r5
 800f534:	f7fc fc52 	bl	800bddc <_free_r>
 800f538:	2300      	movs	r3, #0
 800f53a:	6323      	str	r3, [r4, #48]	; 0x30
 800f53c:	89a3      	ldrh	r3, [r4, #12]
 800f53e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f542:	81a3      	strh	r3, [r4, #12]
 800f544:	2300      	movs	r3, #0
 800f546:	6063      	str	r3, [r4, #4]
 800f548:	6923      	ldr	r3, [r4, #16]
 800f54a:	6023      	str	r3, [r4, #0]
 800f54c:	89a3      	ldrh	r3, [r4, #12]
 800f54e:	f043 0308 	orr.w	r3, r3, #8
 800f552:	81a3      	strh	r3, [r4, #12]
 800f554:	6923      	ldr	r3, [r4, #16]
 800f556:	b94b      	cbnz	r3, 800f56c <__swsetup_r+0x7c>
 800f558:	89a3      	ldrh	r3, [r4, #12]
 800f55a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f55e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f562:	d003      	beq.n	800f56c <__swsetup_r+0x7c>
 800f564:	4621      	mov	r1, r4
 800f566:	4628      	mov	r0, r5
 800f568:	f000 fa5a 	bl	800fa20 <__smakebuf_r>
 800f56c:	89a0      	ldrh	r0, [r4, #12]
 800f56e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f572:	f010 0301 	ands.w	r3, r0, #1
 800f576:	d00a      	beq.n	800f58e <__swsetup_r+0x9e>
 800f578:	2300      	movs	r3, #0
 800f57a:	60a3      	str	r3, [r4, #8]
 800f57c:	6963      	ldr	r3, [r4, #20]
 800f57e:	425b      	negs	r3, r3
 800f580:	61a3      	str	r3, [r4, #24]
 800f582:	6923      	ldr	r3, [r4, #16]
 800f584:	b943      	cbnz	r3, 800f598 <__swsetup_r+0xa8>
 800f586:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f58a:	d1c4      	bne.n	800f516 <__swsetup_r+0x26>
 800f58c:	bd38      	pop	{r3, r4, r5, pc}
 800f58e:	0781      	lsls	r1, r0, #30
 800f590:	bf58      	it	pl
 800f592:	6963      	ldrpl	r3, [r4, #20]
 800f594:	60a3      	str	r3, [r4, #8]
 800f596:	e7f4      	b.n	800f582 <__swsetup_r+0x92>
 800f598:	2000      	movs	r0, #0
 800f59a:	e7f7      	b.n	800f58c <__swsetup_r+0x9c>
 800f59c:	20000010 	.word	0x20000010

0800f5a0 <abort>:
 800f5a0:	b508      	push	{r3, lr}
 800f5a2:	2006      	movs	r0, #6
 800f5a4:	f000 faa6 	bl	800faf4 <raise>
 800f5a8:	2001      	movs	r0, #1
 800f5aa:	f7f4 fa0b 	bl	80039c4 <_exit>

0800f5ae <_fclose_r>:
 800f5ae:	b570      	push	{r4, r5, r6, lr}
 800f5b0:	4606      	mov	r6, r0
 800f5b2:	460c      	mov	r4, r1
 800f5b4:	b911      	cbnz	r1, 800f5bc <_fclose_r+0xe>
 800f5b6:	2500      	movs	r5, #0
 800f5b8:	4628      	mov	r0, r5
 800f5ba:	bd70      	pop	{r4, r5, r6, pc}
 800f5bc:	b118      	cbz	r0, 800f5c6 <_fclose_r+0x18>
 800f5be:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f5c0:	b90b      	cbnz	r3, 800f5c6 <_fclose_r+0x18>
 800f5c2:	f7fe fea3 	bl	800e30c <__sinit>
 800f5c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5c8:	07d8      	lsls	r0, r3, #31
 800f5ca:	d405      	bmi.n	800f5d8 <_fclose_r+0x2a>
 800f5cc:	89a3      	ldrh	r3, [r4, #12]
 800f5ce:	0599      	lsls	r1, r3, #22
 800f5d0:	d402      	bmi.n	800f5d8 <_fclose_r+0x2a>
 800f5d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5d4:	f7fc fcdc 	bl	800bf90 <__retarget_lock_acquire_recursive>
 800f5d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5dc:	b93b      	cbnz	r3, 800f5ee <_fclose_r+0x40>
 800f5de:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800f5e0:	f015 0501 	ands.w	r5, r5, #1
 800f5e4:	d1e7      	bne.n	800f5b6 <_fclose_r+0x8>
 800f5e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5e8:	f7fc fcd3 	bl	800bf92 <__retarget_lock_release_recursive>
 800f5ec:	e7e4      	b.n	800f5b8 <_fclose_r+0xa>
 800f5ee:	4621      	mov	r1, r4
 800f5f0:	4630      	mov	r0, r6
 800f5f2:	f7fe fd91 	bl	800e118 <__sflush_r>
 800f5f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f5f8:	4605      	mov	r5, r0
 800f5fa:	b133      	cbz	r3, 800f60a <_fclose_r+0x5c>
 800f5fc:	69e1      	ldr	r1, [r4, #28]
 800f5fe:	4630      	mov	r0, r6
 800f600:	4798      	blx	r3
 800f602:	2800      	cmp	r0, #0
 800f604:	bfb8      	it	lt
 800f606:	f04f 35ff 	movlt.w	r5, #4294967295
 800f60a:	89a3      	ldrh	r3, [r4, #12]
 800f60c:	061a      	lsls	r2, r3, #24
 800f60e:	d503      	bpl.n	800f618 <_fclose_r+0x6a>
 800f610:	6921      	ldr	r1, [r4, #16]
 800f612:	4630      	mov	r0, r6
 800f614:	f7fc fbe2 	bl	800bddc <_free_r>
 800f618:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f61a:	b141      	cbz	r1, 800f62e <_fclose_r+0x80>
 800f61c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800f620:	4299      	cmp	r1, r3
 800f622:	d002      	beq.n	800f62a <_fclose_r+0x7c>
 800f624:	4630      	mov	r0, r6
 800f626:	f7fc fbd9 	bl	800bddc <_free_r>
 800f62a:	2300      	movs	r3, #0
 800f62c:	6323      	str	r3, [r4, #48]	; 0x30
 800f62e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f630:	b121      	cbz	r1, 800f63c <_fclose_r+0x8e>
 800f632:	4630      	mov	r0, r6
 800f634:	f7fc fbd2 	bl	800bddc <_free_r>
 800f638:	2300      	movs	r3, #0
 800f63a:	6463      	str	r3, [r4, #68]	; 0x44
 800f63c:	f7fe fe4e 	bl	800e2dc <__sfp_lock_acquire>
 800f640:	2300      	movs	r3, #0
 800f642:	81a3      	strh	r3, [r4, #12]
 800f644:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f646:	07db      	lsls	r3, r3, #31
 800f648:	d402      	bmi.n	800f650 <_fclose_r+0xa2>
 800f64a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f64c:	f7fc fca1 	bl	800bf92 <__retarget_lock_release_recursive>
 800f650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f652:	f7fc fc9c 	bl	800bf8e <__retarget_lock_close_recursive>
 800f656:	f7fe fe47 	bl	800e2e8 <__sfp_lock_release>
 800f65a:	e7ad      	b.n	800f5b8 <_fclose_r+0xa>

0800f65c <__fputwc>:
 800f65c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f660:	4680      	mov	r8, r0
 800f662:	460e      	mov	r6, r1
 800f664:	4615      	mov	r5, r2
 800f666:	f7fc fc87 	bl	800bf78 <__locale_mb_cur_max>
 800f66a:	2801      	cmp	r0, #1
 800f66c:	d11c      	bne.n	800f6a8 <__fputwc+0x4c>
 800f66e:	1e73      	subs	r3, r6, #1
 800f670:	2bfe      	cmp	r3, #254	; 0xfe
 800f672:	d819      	bhi.n	800f6a8 <__fputwc+0x4c>
 800f674:	f88d 6004 	strb.w	r6, [sp, #4]
 800f678:	4604      	mov	r4, r0
 800f67a:	2700      	movs	r7, #0
 800f67c:	f10d 0904 	add.w	r9, sp, #4
 800f680:	42a7      	cmp	r7, r4
 800f682:	d020      	beq.n	800f6c6 <__fputwc+0x6a>
 800f684:	68ab      	ldr	r3, [r5, #8]
 800f686:	f817 1009 	ldrb.w	r1, [r7, r9]
 800f68a:	3b01      	subs	r3, #1
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	60ab      	str	r3, [r5, #8]
 800f690:	da04      	bge.n	800f69c <__fputwc+0x40>
 800f692:	69aa      	ldr	r2, [r5, #24]
 800f694:	4293      	cmp	r3, r2
 800f696:	db1a      	blt.n	800f6ce <__fputwc+0x72>
 800f698:	290a      	cmp	r1, #10
 800f69a:	d018      	beq.n	800f6ce <__fputwc+0x72>
 800f69c:	682b      	ldr	r3, [r5, #0]
 800f69e:	1c5a      	adds	r2, r3, #1
 800f6a0:	602a      	str	r2, [r5, #0]
 800f6a2:	7019      	strb	r1, [r3, #0]
 800f6a4:	3701      	adds	r7, #1
 800f6a6:	e7eb      	b.n	800f680 <__fputwc+0x24>
 800f6a8:	a901      	add	r1, sp, #4
 800f6aa:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800f6ae:	4632      	mov	r2, r6
 800f6b0:	4640      	mov	r0, r8
 800f6b2:	f000 fa85 	bl	800fbc0 <_wcrtomb_r>
 800f6b6:	1c41      	adds	r1, r0, #1
 800f6b8:	4604      	mov	r4, r0
 800f6ba:	d1de      	bne.n	800f67a <__fputwc+0x1e>
 800f6bc:	89ab      	ldrh	r3, [r5, #12]
 800f6be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6c2:	81ab      	strh	r3, [r5, #12]
 800f6c4:	4606      	mov	r6, r0
 800f6c6:	4630      	mov	r0, r6
 800f6c8:	b003      	add	sp, #12
 800f6ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6ce:	462a      	mov	r2, r5
 800f6d0:	4640      	mov	r0, r8
 800f6d2:	f000 fa2b 	bl	800fb2c <__swbuf_r>
 800f6d6:	1c42      	adds	r2, r0, #1
 800f6d8:	d1e4      	bne.n	800f6a4 <__fputwc+0x48>
 800f6da:	4606      	mov	r6, r0
 800f6dc:	e7f3      	b.n	800f6c6 <__fputwc+0x6a>

0800f6de <_fputwc_r>:
 800f6de:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800f6e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f6e2:	4614      	mov	r4, r2
 800f6e4:	07da      	lsls	r2, r3, #31
 800f6e6:	4605      	mov	r5, r0
 800f6e8:	d407      	bmi.n	800f6fa <_fputwc_r+0x1c>
 800f6ea:	89a3      	ldrh	r3, [r4, #12]
 800f6ec:	059b      	lsls	r3, r3, #22
 800f6ee:	d404      	bmi.n	800f6fa <_fputwc_r+0x1c>
 800f6f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6f2:	9101      	str	r1, [sp, #4]
 800f6f4:	f7fc fc4c 	bl	800bf90 <__retarget_lock_acquire_recursive>
 800f6f8:	9901      	ldr	r1, [sp, #4]
 800f6fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6fe:	0498      	lsls	r0, r3, #18
 800f700:	d406      	bmi.n	800f710 <_fputwc_r+0x32>
 800f702:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f706:	81a3      	strh	r3, [r4, #12]
 800f708:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f70a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f70e:	6663      	str	r3, [r4, #100]	; 0x64
 800f710:	4622      	mov	r2, r4
 800f712:	4628      	mov	r0, r5
 800f714:	f7ff ffa2 	bl	800f65c <__fputwc>
 800f718:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f71a:	07da      	lsls	r2, r3, #31
 800f71c:	4605      	mov	r5, r0
 800f71e:	d405      	bmi.n	800f72c <_fputwc_r+0x4e>
 800f720:	89a3      	ldrh	r3, [r4, #12]
 800f722:	059b      	lsls	r3, r3, #22
 800f724:	d402      	bmi.n	800f72c <_fputwc_r+0x4e>
 800f726:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f728:	f7fc fc33 	bl	800bf92 <__retarget_lock_release_recursive>
 800f72c:	4628      	mov	r0, r5
 800f72e:	b003      	add	sp, #12
 800f730:	bd30      	pop	{r4, r5, pc}
	...

0800f734 <__sfvwrite_r>:
 800f734:	6893      	ldr	r3, [r2, #8]
 800f736:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f73a:	4606      	mov	r6, r0
 800f73c:	460c      	mov	r4, r1
 800f73e:	4690      	mov	r8, r2
 800f740:	b91b      	cbnz	r3, 800f74a <__sfvwrite_r+0x16>
 800f742:	2000      	movs	r0, #0
 800f744:	b003      	add	sp, #12
 800f746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f74a:	898b      	ldrh	r3, [r1, #12]
 800f74c:	0718      	lsls	r0, r3, #28
 800f74e:	d550      	bpl.n	800f7f2 <__sfvwrite_r+0xbe>
 800f750:	690b      	ldr	r3, [r1, #16]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d04d      	beq.n	800f7f2 <__sfvwrite_r+0xbe>
 800f756:	89a3      	ldrh	r3, [r4, #12]
 800f758:	f8d8 7000 	ldr.w	r7, [r8]
 800f75c:	f013 0902 	ands.w	r9, r3, #2
 800f760:	d16c      	bne.n	800f83c <__sfvwrite_r+0x108>
 800f762:	f013 0301 	ands.w	r3, r3, #1
 800f766:	f000 809c 	beq.w	800f8a2 <__sfvwrite_r+0x16e>
 800f76a:	4648      	mov	r0, r9
 800f76c:	46ca      	mov	sl, r9
 800f76e:	46cb      	mov	fp, r9
 800f770:	f1bb 0f00 	cmp.w	fp, #0
 800f774:	f000 8103 	beq.w	800f97e <__sfvwrite_r+0x24a>
 800f778:	b950      	cbnz	r0, 800f790 <__sfvwrite_r+0x5c>
 800f77a:	465a      	mov	r2, fp
 800f77c:	210a      	movs	r1, #10
 800f77e:	4650      	mov	r0, sl
 800f780:	f7f0 fd36 	bl	80001f0 <memchr>
 800f784:	2800      	cmp	r0, #0
 800f786:	f000 80ff 	beq.w	800f988 <__sfvwrite_r+0x254>
 800f78a:	3001      	adds	r0, #1
 800f78c:	eba0 090a 	sub.w	r9, r0, sl
 800f790:	6820      	ldr	r0, [r4, #0]
 800f792:	6921      	ldr	r1, [r4, #16]
 800f794:	6963      	ldr	r3, [r4, #20]
 800f796:	45d9      	cmp	r9, fp
 800f798:	464a      	mov	r2, r9
 800f79a:	bf28      	it	cs
 800f79c:	465a      	movcs	r2, fp
 800f79e:	4288      	cmp	r0, r1
 800f7a0:	f240 80f5 	bls.w	800f98e <__sfvwrite_r+0x25a>
 800f7a4:	68a5      	ldr	r5, [r4, #8]
 800f7a6:	441d      	add	r5, r3
 800f7a8:	42aa      	cmp	r2, r5
 800f7aa:	f340 80f0 	ble.w	800f98e <__sfvwrite_r+0x25a>
 800f7ae:	4651      	mov	r1, sl
 800f7b0:	462a      	mov	r2, r5
 800f7b2:	f7ff f973 	bl	800ea9c <memmove>
 800f7b6:	6823      	ldr	r3, [r4, #0]
 800f7b8:	442b      	add	r3, r5
 800f7ba:	6023      	str	r3, [r4, #0]
 800f7bc:	4621      	mov	r1, r4
 800f7be:	4630      	mov	r0, r6
 800f7c0:	f7fe fd38 	bl	800e234 <_fflush_r>
 800f7c4:	2800      	cmp	r0, #0
 800f7c6:	d167      	bne.n	800f898 <__sfvwrite_r+0x164>
 800f7c8:	ebb9 0905 	subs.w	r9, r9, r5
 800f7cc:	f040 80f7 	bne.w	800f9be <__sfvwrite_r+0x28a>
 800f7d0:	4621      	mov	r1, r4
 800f7d2:	4630      	mov	r0, r6
 800f7d4:	f7fe fd2e 	bl	800e234 <_fflush_r>
 800f7d8:	2800      	cmp	r0, #0
 800f7da:	d15d      	bne.n	800f898 <__sfvwrite_r+0x164>
 800f7dc:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800f7e0:	44aa      	add	sl, r5
 800f7e2:	ebab 0b05 	sub.w	fp, fp, r5
 800f7e6:	1b55      	subs	r5, r2, r5
 800f7e8:	f8c8 5008 	str.w	r5, [r8, #8]
 800f7ec:	2d00      	cmp	r5, #0
 800f7ee:	d1bf      	bne.n	800f770 <__sfvwrite_r+0x3c>
 800f7f0:	e7a7      	b.n	800f742 <__sfvwrite_r+0xe>
 800f7f2:	4621      	mov	r1, r4
 800f7f4:	4630      	mov	r0, r6
 800f7f6:	f7ff fe7b 	bl	800f4f0 <__swsetup_r>
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	d0ab      	beq.n	800f756 <__sfvwrite_r+0x22>
 800f7fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f802:	e79f      	b.n	800f744 <__sfvwrite_r+0x10>
 800f804:	e9d7 b900 	ldrd	fp, r9, [r7]
 800f808:	3708      	adds	r7, #8
 800f80a:	f1b9 0f00 	cmp.w	r9, #0
 800f80e:	d0f9      	beq.n	800f804 <__sfvwrite_r+0xd0>
 800f810:	45d1      	cmp	r9, sl
 800f812:	464b      	mov	r3, r9
 800f814:	69e1      	ldr	r1, [r4, #28]
 800f816:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f818:	bf28      	it	cs
 800f81a:	4653      	movcs	r3, sl
 800f81c:	465a      	mov	r2, fp
 800f81e:	4630      	mov	r0, r6
 800f820:	47a8      	blx	r5
 800f822:	2800      	cmp	r0, #0
 800f824:	dd38      	ble.n	800f898 <__sfvwrite_r+0x164>
 800f826:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f82a:	4483      	add	fp, r0
 800f82c:	eba9 0900 	sub.w	r9, r9, r0
 800f830:	1a18      	subs	r0, r3, r0
 800f832:	f8c8 0008 	str.w	r0, [r8, #8]
 800f836:	2800      	cmp	r0, #0
 800f838:	d1e7      	bne.n	800f80a <__sfvwrite_r+0xd6>
 800f83a:	e782      	b.n	800f742 <__sfvwrite_r+0xe>
 800f83c:	f04f 0b00 	mov.w	fp, #0
 800f840:	f8df a180 	ldr.w	sl, [pc, #384]	; 800f9c4 <__sfvwrite_r+0x290>
 800f844:	46d9      	mov	r9, fp
 800f846:	e7e0      	b.n	800f80a <__sfvwrite_r+0xd6>
 800f848:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800f84c:	3708      	adds	r7, #8
 800f84e:	f1ba 0f00 	cmp.w	sl, #0
 800f852:	d0f9      	beq.n	800f848 <__sfvwrite_r+0x114>
 800f854:	89a3      	ldrh	r3, [r4, #12]
 800f856:	6820      	ldr	r0, [r4, #0]
 800f858:	68a2      	ldr	r2, [r4, #8]
 800f85a:	0599      	lsls	r1, r3, #22
 800f85c:	d563      	bpl.n	800f926 <__sfvwrite_r+0x1f2>
 800f85e:	4552      	cmp	r2, sl
 800f860:	d836      	bhi.n	800f8d0 <__sfvwrite_r+0x19c>
 800f862:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800f866:	d033      	beq.n	800f8d0 <__sfvwrite_r+0x19c>
 800f868:	6921      	ldr	r1, [r4, #16]
 800f86a:	6965      	ldr	r5, [r4, #20]
 800f86c:	eba0 0b01 	sub.w	fp, r0, r1
 800f870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f874:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f878:	f10b 0201 	add.w	r2, fp, #1
 800f87c:	106d      	asrs	r5, r5, #1
 800f87e:	4452      	add	r2, sl
 800f880:	4295      	cmp	r5, r2
 800f882:	bf38      	it	cc
 800f884:	4615      	movcc	r5, r2
 800f886:	055b      	lsls	r3, r3, #21
 800f888:	d53d      	bpl.n	800f906 <__sfvwrite_r+0x1d2>
 800f88a:	4629      	mov	r1, r5
 800f88c:	4630      	mov	r0, r6
 800f88e:	f7f8 fc7f 	bl	8008190 <_malloc_r>
 800f892:	b948      	cbnz	r0, 800f8a8 <__sfvwrite_r+0x174>
 800f894:	230c      	movs	r3, #12
 800f896:	6033      	str	r3, [r6, #0]
 800f898:	89a3      	ldrh	r3, [r4, #12]
 800f89a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f89e:	81a3      	strh	r3, [r4, #12]
 800f8a0:	e7ad      	b.n	800f7fe <__sfvwrite_r+0xca>
 800f8a2:	4699      	mov	r9, r3
 800f8a4:	469a      	mov	sl, r3
 800f8a6:	e7d2      	b.n	800f84e <__sfvwrite_r+0x11a>
 800f8a8:	465a      	mov	r2, fp
 800f8aa:	6921      	ldr	r1, [r4, #16]
 800f8ac:	9001      	str	r0, [sp, #4]
 800f8ae:	f7fc fbaf 	bl	800c010 <memcpy>
 800f8b2:	89a2      	ldrh	r2, [r4, #12]
 800f8b4:	9b01      	ldr	r3, [sp, #4]
 800f8b6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800f8ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f8be:	81a2      	strh	r2, [r4, #12]
 800f8c0:	6123      	str	r3, [r4, #16]
 800f8c2:	6165      	str	r5, [r4, #20]
 800f8c4:	445b      	add	r3, fp
 800f8c6:	eba5 050b 	sub.w	r5, r5, fp
 800f8ca:	6023      	str	r3, [r4, #0]
 800f8cc:	4652      	mov	r2, sl
 800f8ce:	60a5      	str	r5, [r4, #8]
 800f8d0:	4552      	cmp	r2, sl
 800f8d2:	bf28      	it	cs
 800f8d4:	4652      	movcs	r2, sl
 800f8d6:	6820      	ldr	r0, [r4, #0]
 800f8d8:	9201      	str	r2, [sp, #4]
 800f8da:	4649      	mov	r1, r9
 800f8dc:	f7ff f8de 	bl	800ea9c <memmove>
 800f8e0:	68a3      	ldr	r3, [r4, #8]
 800f8e2:	9a01      	ldr	r2, [sp, #4]
 800f8e4:	1a9b      	subs	r3, r3, r2
 800f8e6:	60a3      	str	r3, [r4, #8]
 800f8e8:	6823      	ldr	r3, [r4, #0]
 800f8ea:	441a      	add	r2, r3
 800f8ec:	4655      	mov	r5, sl
 800f8ee:	6022      	str	r2, [r4, #0]
 800f8f0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800f8f4:	44a9      	add	r9, r5
 800f8f6:	ebaa 0a05 	sub.w	sl, sl, r5
 800f8fa:	1b45      	subs	r5, r0, r5
 800f8fc:	f8c8 5008 	str.w	r5, [r8, #8]
 800f900:	2d00      	cmp	r5, #0
 800f902:	d1a4      	bne.n	800f84e <__sfvwrite_r+0x11a>
 800f904:	e71d      	b.n	800f742 <__sfvwrite_r+0xe>
 800f906:	462a      	mov	r2, r5
 800f908:	4630      	mov	r0, r6
 800f90a:	f7fd f81d 	bl	800c948 <_realloc_r>
 800f90e:	4603      	mov	r3, r0
 800f910:	2800      	cmp	r0, #0
 800f912:	d1d5      	bne.n	800f8c0 <__sfvwrite_r+0x18c>
 800f914:	6921      	ldr	r1, [r4, #16]
 800f916:	4630      	mov	r0, r6
 800f918:	f7fc fa60 	bl	800bddc <_free_r>
 800f91c:	89a3      	ldrh	r3, [r4, #12]
 800f91e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f922:	81a3      	strh	r3, [r4, #12]
 800f924:	e7b6      	b.n	800f894 <__sfvwrite_r+0x160>
 800f926:	6923      	ldr	r3, [r4, #16]
 800f928:	4283      	cmp	r3, r0
 800f92a:	d302      	bcc.n	800f932 <__sfvwrite_r+0x1fe>
 800f92c:	6961      	ldr	r1, [r4, #20]
 800f92e:	4551      	cmp	r1, sl
 800f930:	d915      	bls.n	800f95e <__sfvwrite_r+0x22a>
 800f932:	4552      	cmp	r2, sl
 800f934:	bf28      	it	cs
 800f936:	4652      	movcs	r2, sl
 800f938:	4649      	mov	r1, r9
 800f93a:	4615      	mov	r5, r2
 800f93c:	f7ff f8ae 	bl	800ea9c <memmove>
 800f940:	68a3      	ldr	r3, [r4, #8]
 800f942:	6822      	ldr	r2, [r4, #0]
 800f944:	1b5b      	subs	r3, r3, r5
 800f946:	442a      	add	r2, r5
 800f948:	60a3      	str	r3, [r4, #8]
 800f94a:	6022      	str	r2, [r4, #0]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d1cf      	bne.n	800f8f0 <__sfvwrite_r+0x1bc>
 800f950:	4621      	mov	r1, r4
 800f952:	4630      	mov	r0, r6
 800f954:	f7fe fc6e 	bl	800e234 <_fflush_r>
 800f958:	2800      	cmp	r0, #0
 800f95a:	d0c9      	beq.n	800f8f0 <__sfvwrite_r+0x1bc>
 800f95c:	e79c      	b.n	800f898 <__sfvwrite_r+0x164>
 800f95e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f962:	459a      	cmp	sl, r3
 800f964:	bf38      	it	cc
 800f966:	4653      	movcc	r3, sl
 800f968:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f96a:	fb93 f3f1 	sdiv	r3, r3, r1
 800f96e:	464a      	mov	r2, r9
 800f970:	434b      	muls	r3, r1
 800f972:	4630      	mov	r0, r6
 800f974:	69e1      	ldr	r1, [r4, #28]
 800f976:	47a8      	blx	r5
 800f978:	1e05      	subs	r5, r0, #0
 800f97a:	dcb9      	bgt.n	800f8f0 <__sfvwrite_r+0x1bc>
 800f97c:	e78c      	b.n	800f898 <__sfvwrite_r+0x164>
 800f97e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800f982:	2000      	movs	r0, #0
 800f984:	3708      	adds	r7, #8
 800f986:	e6f3      	b.n	800f770 <__sfvwrite_r+0x3c>
 800f988:	f10b 0901 	add.w	r9, fp, #1
 800f98c:	e700      	b.n	800f790 <__sfvwrite_r+0x5c>
 800f98e:	4293      	cmp	r3, r2
 800f990:	dc08      	bgt.n	800f9a4 <__sfvwrite_r+0x270>
 800f992:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f994:	69e1      	ldr	r1, [r4, #28]
 800f996:	4652      	mov	r2, sl
 800f998:	4630      	mov	r0, r6
 800f99a:	47a8      	blx	r5
 800f99c:	1e05      	subs	r5, r0, #0
 800f99e:	f73f af13 	bgt.w	800f7c8 <__sfvwrite_r+0x94>
 800f9a2:	e779      	b.n	800f898 <__sfvwrite_r+0x164>
 800f9a4:	4651      	mov	r1, sl
 800f9a6:	9201      	str	r2, [sp, #4]
 800f9a8:	f7ff f878 	bl	800ea9c <memmove>
 800f9ac:	9a01      	ldr	r2, [sp, #4]
 800f9ae:	68a3      	ldr	r3, [r4, #8]
 800f9b0:	1a9b      	subs	r3, r3, r2
 800f9b2:	60a3      	str	r3, [r4, #8]
 800f9b4:	6823      	ldr	r3, [r4, #0]
 800f9b6:	4413      	add	r3, r2
 800f9b8:	6023      	str	r3, [r4, #0]
 800f9ba:	4615      	mov	r5, r2
 800f9bc:	e704      	b.n	800f7c8 <__sfvwrite_r+0x94>
 800f9be:	2001      	movs	r0, #1
 800f9c0:	e70c      	b.n	800f7dc <__sfvwrite_r+0xa8>
 800f9c2:	bf00      	nop
 800f9c4:	7ffffc00 	.word	0x7ffffc00

0800f9c8 <__swhatbuf_r>:
 800f9c8:	b570      	push	{r4, r5, r6, lr}
 800f9ca:	460e      	mov	r6, r1
 800f9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9d0:	2900      	cmp	r1, #0
 800f9d2:	b096      	sub	sp, #88	; 0x58
 800f9d4:	4614      	mov	r4, r2
 800f9d6:	461d      	mov	r5, r3
 800f9d8:	da0a      	bge.n	800f9f0 <__swhatbuf_r+0x28>
 800f9da:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 800f9de:	2300      	movs	r3, #0
 800f9e0:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 800f9e4:	602b      	str	r3, [r5, #0]
 800f9e6:	d116      	bne.n	800fa16 <__swhatbuf_r+0x4e>
 800f9e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9ec:	6023      	str	r3, [r4, #0]
 800f9ee:	e015      	b.n	800fa1c <__swhatbuf_r+0x54>
 800f9f0:	466a      	mov	r2, sp
 800f9f2:	f000 f8fb 	bl	800fbec <_fstat_r>
 800f9f6:	2800      	cmp	r0, #0
 800f9f8:	dbef      	blt.n	800f9da <__swhatbuf_r+0x12>
 800f9fa:	9a01      	ldr	r2, [sp, #4]
 800f9fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fa00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fa04:	425a      	negs	r2, r3
 800fa06:	415a      	adcs	r2, r3
 800fa08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa0c:	602a      	str	r2, [r5, #0]
 800fa0e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800fa12:	6023      	str	r3, [r4, #0]
 800fa14:	e002      	b.n	800fa1c <__swhatbuf_r+0x54>
 800fa16:	2240      	movs	r2, #64	; 0x40
 800fa18:	6022      	str	r2, [r4, #0]
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	b016      	add	sp, #88	; 0x58
 800fa1e:	bd70      	pop	{r4, r5, r6, pc}

0800fa20 <__smakebuf_r>:
 800fa20:	898b      	ldrh	r3, [r1, #12]
 800fa22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa24:	079d      	lsls	r5, r3, #30
 800fa26:	4606      	mov	r6, r0
 800fa28:	460c      	mov	r4, r1
 800fa2a:	d507      	bpl.n	800fa3c <__smakebuf_r+0x1c>
 800fa2c:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800fa30:	6023      	str	r3, [r4, #0]
 800fa32:	6123      	str	r3, [r4, #16]
 800fa34:	2301      	movs	r3, #1
 800fa36:	6163      	str	r3, [r4, #20]
 800fa38:	b002      	add	sp, #8
 800fa3a:	bd70      	pop	{r4, r5, r6, pc}
 800fa3c:	ab01      	add	r3, sp, #4
 800fa3e:	466a      	mov	r2, sp
 800fa40:	f7ff ffc2 	bl	800f9c8 <__swhatbuf_r>
 800fa44:	9900      	ldr	r1, [sp, #0]
 800fa46:	4605      	mov	r5, r0
 800fa48:	4630      	mov	r0, r6
 800fa4a:	f7f8 fba1 	bl	8008190 <_malloc_r>
 800fa4e:	b948      	cbnz	r0, 800fa64 <__smakebuf_r+0x44>
 800fa50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa54:	059a      	lsls	r2, r3, #22
 800fa56:	d4ef      	bmi.n	800fa38 <__smakebuf_r+0x18>
 800fa58:	f023 0303 	bic.w	r3, r3, #3
 800fa5c:	f043 0302 	orr.w	r3, r3, #2
 800fa60:	81a3      	strh	r3, [r4, #12]
 800fa62:	e7e3      	b.n	800fa2c <__smakebuf_r+0xc>
 800fa64:	4b0d      	ldr	r3, [pc, #52]	; (800fa9c <__smakebuf_r+0x7c>)
 800fa66:	63f3      	str	r3, [r6, #60]	; 0x3c
 800fa68:	89a3      	ldrh	r3, [r4, #12]
 800fa6a:	6020      	str	r0, [r4, #0]
 800fa6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa70:	81a3      	strh	r3, [r4, #12]
 800fa72:	9b00      	ldr	r3, [sp, #0]
 800fa74:	6163      	str	r3, [r4, #20]
 800fa76:	9b01      	ldr	r3, [sp, #4]
 800fa78:	6120      	str	r0, [r4, #16]
 800fa7a:	b15b      	cbz	r3, 800fa94 <__smakebuf_r+0x74>
 800fa7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa80:	4630      	mov	r0, r6
 800fa82:	f000 f8c5 	bl	800fc10 <_isatty_r>
 800fa86:	b128      	cbz	r0, 800fa94 <__smakebuf_r+0x74>
 800fa88:	89a3      	ldrh	r3, [r4, #12]
 800fa8a:	f023 0303 	bic.w	r3, r3, #3
 800fa8e:	f043 0301 	orr.w	r3, r3, #1
 800fa92:	81a3      	strh	r3, [r4, #12]
 800fa94:	89a0      	ldrh	r0, [r4, #12]
 800fa96:	4305      	orrs	r5, r0
 800fa98:	81a5      	strh	r5, [r4, #12]
 800fa9a:	e7cd      	b.n	800fa38 <__smakebuf_r+0x18>
 800fa9c:	0800e2d1 	.word	0x0800e2d1

0800faa0 <_raise_r>:
 800faa0:	291f      	cmp	r1, #31
 800faa2:	b538      	push	{r3, r4, r5, lr}
 800faa4:	4604      	mov	r4, r0
 800faa6:	460d      	mov	r5, r1
 800faa8:	d904      	bls.n	800fab4 <_raise_r+0x14>
 800faaa:	2316      	movs	r3, #22
 800faac:	6003      	str	r3, [r0, #0]
 800faae:	f04f 30ff 	mov.w	r0, #4294967295
 800fab2:	bd38      	pop	{r3, r4, r5, pc}
 800fab4:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800fab8:	b112      	cbz	r2, 800fac0 <_raise_r+0x20>
 800faba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fabe:	b94b      	cbnz	r3, 800fad4 <_raise_r+0x34>
 800fac0:	4620      	mov	r0, r4
 800fac2:	f000 f831 	bl	800fb28 <_getpid_r>
 800fac6:	462a      	mov	r2, r5
 800fac8:	4601      	mov	r1, r0
 800faca:	4620      	mov	r0, r4
 800facc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fad0:	f000 b818 	b.w	800fb04 <_kill_r>
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d00a      	beq.n	800faee <_raise_r+0x4e>
 800fad8:	1c59      	adds	r1, r3, #1
 800fada:	d103      	bne.n	800fae4 <_raise_r+0x44>
 800fadc:	2316      	movs	r3, #22
 800fade:	6003      	str	r3, [r0, #0]
 800fae0:	2001      	movs	r0, #1
 800fae2:	e7e6      	b.n	800fab2 <_raise_r+0x12>
 800fae4:	2400      	movs	r4, #0
 800fae6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800faea:	4628      	mov	r0, r5
 800faec:	4798      	blx	r3
 800faee:	2000      	movs	r0, #0
 800faf0:	e7df      	b.n	800fab2 <_raise_r+0x12>
	...

0800faf4 <raise>:
 800faf4:	4b02      	ldr	r3, [pc, #8]	; (800fb00 <raise+0xc>)
 800faf6:	4601      	mov	r1, r0
 800faf8:	6818      	ldr	r0, [r3, #0]
 800fafa:	f7ff bfd1 	b.w	800faa0 <_raise_r>
 800fafe:	bf00      	nop
 800fb00:	20000010 	.word	0x20000010

0800fb04 <_kill_r>:
 800fb04:	b538      	push	{r3, r4, r5, lr}
 800fb06:	4d07      	ldr	r5, [pc, #28]	; (800fb24 <_kill_r+0x20>)
 800fb08:	2300      	movs	r3, #0
 800fb0a:	4604      	mov	r4, r0
 800fb0c:	4608      	mov	r0, r1
 800fb0e:	4611      	mov	r1, r2
 800fb10:	602b      	str	r3, [r5, #0]
 800fb12:	f7f3 ff47 	bl	80039a4 <_kill>
 800fb16:	1c43      	adds	r3, r0, #1
 800fb18:	d102      	bne.n	800fb20 <_kill_r+0x1c>
 800fb1a:	682b      	ldr	r3, [r5, #0]
 800fb1c:	b103      	cbz	r3, 800fb20 <_kill_r+0x1c>
 800fb1e:	6023      	str	r3, [r4, #0]
 800fb20:	bd38      	pop	{r3, r4, r5, pc}
 800fb22:	bf00      	nop
 800fb24:	200011a8 	.word	0x200011a8

0800fb28 <_getpid_r>:
 800fb28:	f7f3 bf34 	b.w	8003994 <_getpid>

0800fb2c <__swbuf_r>:
 800fb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb2e:	460e      	mov	r6, r1
 800fb30:	4614      	mov	r4, r2
 800fb32:	4605      	mov	r5, r0
 800fb34:	b118      	cbz	r0, 800fb3e <__swbuf_r+0x12>
 800fb36:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800fb38:	b90b      	cbnz	r3, 800fb3e <__swbuf_r+0x12>
 800fb3a:	f7fe fbe7 	bl	800e30c <__sinit>
 800fb3e:	69a3      	ldr	r3, [r4, #24]
 800fb40:	60a3      	str	r3, [r4, #8]
 800fb42:	89a3      	ldrh	r3, [r4, #12]
 800fb44:	0719      	lsls	r1, r3, #28
 800fb46:	d529      	bpl.n	800fb9c <__swbuf_r+0x70>
 800fb48:	6923      	ldr	r3, [r4, #16]
 800fb4a:	b33b      	cbz	r3, 800fb9c <__swbuf_r+0x70>
 800fb4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb50:	b2f6      	uxtb	r6, r6
 800fb52:	049a      	lsls	r2, r3, #18
 800fb54:	4637      	mov	r7, r6
 800fb56:	d52a      	bpl.n	800fbae <__swbuf_r+0x82>
 800fb58:	6823      	ldr	r3, [r4, #0]
 800fb5a:	6920      	ldr	r0, [r4, #16]
 800fb5c:	1a18      	subs	r0, r3, r0
 800fb5e:	6963      	ldr	r3, [r4, #20]
 800fb60:	4283      	cmp	r3, r0
 800fb62:	dc04      	bgt.n	800fb6e <__swbuf_r+0x42>
 800fb64:	4621      	mov	r1, r4
 800fb66:	4628      	mov	r0, r5
 800fb68:	f7fe fb64 	bl	800e234 <_fflush_r>
 800fb6c:	b9e0      	cbnz	r0, 800fba8 <__swbuf_r+0x7c>
 800fb6e:	68a3      	ldr	r3, [r4, #8]
 800fb70:	3b01      	subs	r3, #1
 800fb72:	60a3      	str	r3, [r4, #8]
 800fb74:	6823      	ldr	r3, [r4, #0]
 800fb76:	1c5a      	adds	r2, r3, #1
 800fb78:	6022      	str	r2, [r4, #0]
 800fb7a:	701e      	strb	r6, [r3, #0]
 800fb7c:	6962      	ldr	r2, [r4, #20]
 800fb7e:	1c43      	adds	r3, r0, #1
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d004      	beq.n	800fb8e <__swbuf_r+0x62>
 800fb84:	89a3      	ldrh	r3, [r4, #12]
 800fb86:	07db      	lsls	r3, r3, #31
 800fb88:	d506      	bpl.n	800fb98 <__swbuf_r+0x6c>
 800fb8a:	2e0a      	cmp	r6, #10
 800fb8c:	d104      	bne.n	800fb98 <__swbuf_r+0x6c>
 800fb8e:	4621      	mov	r1, r4
 800fb90:	4628      	mov	r0, r5
 800fb92:	f7fe fb4f 	bl	800e234 <_fflush_r>
 800fb96:	b938      	cbnz	r0, 800fba8 <__swbuf_r+0x7c>
 800fb98:	4638      	mov	r0, r7
 800fb9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb9c:	4621      	mov	r1, r4
 800fb9e:	4628      	mov	r0, r5
 800fba0:	f7ff fca6 	bl	800f4f0 <__swsetup_r>
 800fba4:	2800      	cmp	r0, #0
 800fba6:	d0d1      	beq.n	800fb4c <__swbuf_r+0x20>
 800fba8:	f04f 37ff 	mov.w	r7, #4294967295
 800fbac:	e7f4      	b.n	800fb98 <__swbuf_r+0x6c>
 800fbae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fbb2:	81a3      	strh	r3, [r4, #12]
 800fbb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fbb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fbba:	6663      	str	r3, [r4, #100]	; 0x64
 800fbbc:	e7cc      	b.n	800fb58 <__swbuf_r+0x2c>
	...

0800fbc0 <_wcrtomb_r>:
 800fbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbc2:	4c09      	ldr	r4, [pc, #36]	; (800fbe8 <_wcrtomb_r+0x28>)
 800fbc4:	b085      	sub	sp, #20
 800fbc6:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800fbca:	4605      	mov	r5, r0
 800fbcc:	461e      	mov	r6, r3
 800fbce:	b909      	cbnz	r1, 800fbd4 <_wcrtomb_r+0x14>
 800fbd0:	460a      	mov	r2, r1
 800fbd2:	a901      	add	r1, sp, #4
 800fbd4:	47b8      	blx	r7
 800fbd6:	1c43      	adds	r3, r0, #1
 800fbd8:	bf01      	itttt	eq
 800fbda:	2300      	moveq	r3, #0
 800fbdc:	6033      	streq	r3, [r6, #0]
 800fbde:	238a      	moveq	r3, #138	; 0x8a
 800fbe0:	602b      	streq	r3, [r5, #0]
 800fbe2:	b005      	add	sp, #20
 800fbe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbe6:	bf00      	nop
 800fbe8:	20000854 	.word	0x20000854

0800fbec <_fstat_r>:
 800fbec:	b538      	push	{r3, r4, r5, lr}
 800fbee:	4d07      	ldr	r5, [pc, #28]	; (800fc0c <_fstat_r+0x20>)
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	4604      	mov	r4, r0
 800fbf4:	4608      	mov	r0, r1
 800fbf6:	4611      	mov	r1, r2
 800fbf8:	602b      	str	r3, [r5, #0]
 800fbfa:	f7f3 ff32 	bl	8003a62 <_fstat>
 800fbfe:	1c43      	adds	r3, r0, #1
 800fc00:	d102      	bne.n	800fc08 <_fstat_r+0x1c>
 800fc02:	682b      	ldr	r3, [r5, #0]
 800fc04:	b103      	cbz	r3, 800fc08 <_fstat_r+0x1c>
 800fc06:	6023      	str	r3, [r4, #0]
 800fc08:	bd38      	pop	{r3, r4, r5, pc}
 800fc0a:	bf00      	nop
 800fc0c:	200011a8 	.word	0x200011a8

0800fc10 <_isatty_r>:
 800fc10:	b538      	push	{r3, r4, r5, lr}
 800fc12:	4d06      	ldr	r5, [pc, #24]	; (800fc2c <_isatty_r+0x1c>)
 800fc14:	2300      	movs	r3, #0
 800fc16:	4604      	mov	r4, r0
 800fc18:	4608      	mov	r0, r1
 800fc1a:	602b      	str	r3, [r5, #0]
 800fc1c:	f7f3 ff31 	bl	8003a82 <_isatty>
 800fc20:	1c43      	adds	r3, r0, #1
 800fc22:	d102      	bne.n	800fc2a <_isatty_r+0x1a>
 800fc24:	682b      	ldr	r3, [r5, #0]
 800fc26:	b103      	cbz	r3, 800fc2a <_isatty_r+0x1a>
 800fc28:	6023      	str	r3, [r4, #0]
 800fc2a:	bd38      	pop	{r3, r4, r5, pc}
 800fc2c:	200011a8 	.word	0x200011a8

0800fc30 <_init>:
 800fc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc32:	bf00      	nop
 800fc34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc36:	bc08      	pop	{r3}
 800fc38:	469e      	mov	lr, r3
 800fc3a:	4770      	bx	lr

0800fc3c <_fini>:
 800fc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc3e:	bf00      	nop
 800fc40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc42:	bc08      	pop	{r3}
 800fc44:	469e      	mov	lr, r3
 800fc46:	4770      	bx	lr
