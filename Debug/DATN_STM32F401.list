
DATN_STM32F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007dc  0800fc38  0800fc38  0001fc38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010414  08010414  000309c4  2**0
                  CONTENTS
  4 .ARM          00000008  08010414  08010414  00020414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801041c  0801041c  000309c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801041c  0801041c  0002041c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010424  08010424  00020424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009c4  20000000  08010428  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  200009c4  08010dec  000309c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011a4  08010dec  000311a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000309c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b46  00000000  00000000  000309f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000251b  00000000  00000000  0004353a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00045a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  00046bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019435  00000000  00000000  00047c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130c1  00000000  00000000  00061055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d7ad  00000000  00000000  00074116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001118c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064dc  00000000  00000000  00111914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200009c4 	.word	0x200009c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fc20 	.word	0x0800fc20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200009c8 	.word	0x200009c8
 80001dc:	0800fc20 	.word	0x0800fc20

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <W25Q32_Init>:
GPIO_TypeDef *CS_PORT;
uint16_t CS_Pin;
SPI_HandleTypeDef *hspi;
uint8_t dum_byte = 0xff;

void W25Q32_Init(SPI_HandleTypeDef *hspix, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	4613      	mov	r3, r2
 8001014:	80fb      	strh	r3, [r7, #6]
	hspi = hspix;
 8001016:	4a07      	ldr	r2, [pc, #28]	; (8001034 <W25Q32_Init+0x2c>)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6013      	str	r3, [r2, #0]
	CS_PORT = GPIOx;
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <W25Q32_Init+0x30>)
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	6013      	str	r3, [r2, #0]
	CS_Pin = GPIO_Pin;
 8001022:	4a06      	ldr	r2, [pc, #24]	; (800103c <W25Q32_Init+0x34>)
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	8013      	strh	r3, [r2, #0]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	200009e8 	.word	0x200009e8
 8001038:	200009e0 	.word	0x200009e0
 800103c:	200009e4 	.word	0x200009e4

08001040 <W25Q32_CS_LOW>:

void W25Q32_CS_LOW() {
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_Pin, 0);
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <W25Q32_CS_LOW+0x18>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <W25Q32_CS_LOW+0x1c>)
 800104a:	8811      	ldrh	r1, [r2, #0]
 800104c:	2200      	movs	r2, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f003 fd52 	bl	8004af8 <HAL_GPIO_WritePin>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200009e0 	.word	0x200009e0
 800105c:	200009e4 	.word	0x200009e4

08001060 <W25Q32_CS_HIGH>:

void W25Q32_CS_HIGH() {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_Pin, 1);
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <W25Q32_CS_HIGH+0x18>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <W25Q32_CS_HIGH+0x1c>)
 800106a:	8811      	ldrh	r1, [r2, #0]
 800106c:	2201      	movs	r2, #1
 800106e:	4618      	mov	r0, r3
 8001070:	f003 fd42 	bl	8004af8 <HAL_GPIO_WritePin>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200009e0 	.word	0x200009e0
 800107c:	200009e4 	.word	0x200009e4

08001080 <WriteEnable>:

void WriteEnable() {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	uint8_t *tsm = malloc(sizeof(uint8_t));
 8001086:	2001      	movs	r0, #1
 8001088:	f007 f86a 	bl	8008160 <malloc>
 800108c:	4603      	mov	r3, r0
 800108e:	607b      	str	r3, [r7, #4]
	uint8_t *rev = malloc(sizeof(uint8_t));
 8001090:	2001      	movs	r0, #1
 8001092:	f007 f865 	bl	8008160 <malloc>
 8001096:	4603      	mov	r3, r0
 8001098:	603b      	str	r3, [r7, #0]
	tsm[0] = WRITE_EN;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2206      	movs	r2, #6
 800109e:	701a      	strb	r2, [r3, #0]

	W25Q32_CS_LOW();
 80010a0:	f7ff ffce 	bl	8001040 <W25Q32_CS_LOW>
	W25Q32_Send_Receive(tsm, rev, 1);
 80010a4:	2201      	movs	r2, #1
 80010a6:	6839      	ldr	r1, [r7, #0]
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 f867 	bl	800117c <W25Q32_Send_Receive>
	W25Q32_CS_HIGH();
 80010ae:	f7ff ffd7 	bl	8001060 <W25Q32_CS_HIGH>

	free(tsm);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f007 f85c 	bl	8008170 <free>
	free(rev);
 80010b8:	6838      	ldr	r0, [r7, #0]
 80010ba:	f007 f859 	bl	8008170 <free>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <WriteDisable>:

void WriteDisable() {
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
	uint8_t *tsm = (uint8_t*) malloc(sizeof(uint8_t));
 80010cc:	2001      	movs	r0, #1
 80010ce:	f007 f847 	bl	8008160 <malloc>
 80010d2:	4603      	mov	r3, r0
 80010d4:	607b      	str	r3, [r7, #4]
	uint8_t *rev = (uint8_t*) malloc(sizeof(uint8_t));
 80010d6:	2001      	movs	r0, #1
 80010d8:	f007 f842 	bl	8008160 <malloc>
 80010dc:	4603      	mov	r3, r0
 80010de:	603b      	str	r3, [r7, #0]
	tsm[0] = WRITE_DIS;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2204      	movs	r2, #4
 80010e4:	701a      	strb	r2, [r3, #0]

	W25Q32_CS_LOW();
 80010e6:	f7ff ffab 	bl	8001040 <W25Q32_CS_LOW>
	W25Q32_Send_Receive(tsm, rev, 1);
 80010ea:	2201      	movs	r2, #1
 80010ec:	6839      	ldr	r1, [r7, #0]
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 f844 	bl	800117c <W25Q32_Send_Receive>
	W25Q32_CS_HIGH();
 80010f4:	f7ff ffb4 	bl	8001060 <W25Q32_CS_HIGH>

	free(tsm);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f007 f839 	bl	8008170 <free>
	free(rev);
 80010fe:	6838      	ldr	r0, [r7, #0]
 8001100:	f007 f836 	bl	8008170 <free>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <W25Q32_WaitEndCycle>:

void W25Q32_WaitEndCycle() {
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
	W25Q32_CS_LOW();
 8001112:	f7ff ff95 	bl	8001040 <W25Q32_CS_LOW>
	uint8_t check;
	uint8_t *tx = (uint8_t*) malloc(sizeof(uint8_t));
 8001116:	2001      	movs	r0, #1
 8001118:	f007 f822 	bl	8008160 <malloc>
 800111c:	4603      	mov	r3, r0
 800111e:	60fb      	str	r3, [r7, #12]
	uint8_t *rx = (uint8_t*) malloc(sizeof(uint8_t));
 8001120:	2001      	movs	r0, #1
 8001122:	f007 f81d 	bl	8008160 <malloc>
 8001126:	4603      	mov	r3, r0
 8001128:	60bb      	str	r3, [r7, #8]
	*tx = RDSR1;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2205      	movs	r2, #5
 800112e:	701a      	strb	r2, [r3, #0]

	W25Q32_CS_LOW();
 8001130:	f7ff ff86 	bl	8001040 <W25Q32_CS_LOW>
	W25Q32_Send_Receive(tx, rx, 1);
 8001134:	2201      	movs	r2, #1
 8001136:	68b9      	ldr	r1, [r7, #8]
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f000 f81f 	bl	800117c <W25Q32_Send_Receive>
	do {
		*tx = dum_byte;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <W25Q32_WaitEndCycle+0x6c>)
 8001140:	781a      	ldrb	r2, [r3, #0]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	701a      	strb	r2, [r3, #0]
		W25Q32_Send_Receive(tx, rx, 1);
 8001146:	2201      	movs	r2, #1
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f000 f816 	bl	800117c <W25Q32_Send_Receive>
		check = *rx;
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	71fb      	strb	r3, [r7, #7]
	} while (check & 0x01);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1ee      	bne.n	800113e <W25Q32_WaitEndCycle+0x32>
	W25Q32_CS_HIGH();
 8001160:	f7ff ff7e 	bl	8001060 <W25Q32_CS_HIGH>
	free(tx);
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f007 f803 	bl	8008170 <free>
	free(rx);
 800116a:	68b8      	ldr	r0, [r7, #8]
 800116c:	f007 f800 	bl	8008170 <free>
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000000 	.word	0x20000000

0800117c <W25Q32_Send_Receive>:

void W25Q32_Send_Receive(uint8_t *tx_buf, uint8_t *rx_buf, uint16_t tx_num) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	4613      	mov	r3, r2
 8001188:	80fb      	strh	r3, [r7, #6]
	rx_spi_flg = 0;
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <W25Q32_Send_Receive+0x3c>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_TransmitReceive_IT(hspi, tx_buf, rx_buf, tx_num);
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <W25Q32_Send_Receive+0x40>)
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	68f9      	ldr	r1, [r7, #12]
 800119a:	f004 f9db 	bl	8005554 <HAL_SPI_TransmitReceive_IT>
	while (!rx_spi_flg) {
 800119e:	bf00      	nop
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <W25Q32_Send_Receive+0x3c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	f083 0301 	eor.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f8      	bne.n	80011a0 <W25Q32_Send_Receive+0x24>
	}
//	HAL_SPI_TransmitReceive(hspi, tx_buf, rx_buf, tx_num, 500);
}
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200010f4 	.word	0x200010f4
 80011bc:	200009e8 	.word	0x200009e8

080011c0 <W25Q32_ReadData>:

void W25Q32_ReadData(uint8_t *pBuffer, uint32_t ReadAddr, uint16_t len) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	4613      	mov	r3, r2
 80011cc:	80fb      	strh	r3, [r7, #6]
	W25Q32_CS_LOW();
 80011ce:	f7ff ff37 	bl	8001040 <W25Q32_CS_LOW>

	uint8_t *cmd = malloc(sizeof(uint8_t) * (4 + len));
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	3304      	adds	r3, #4
 80011d6:	4618      	mov	r0, r3
 80011d8:	f006 ffc2 	bl	8008160 <malloc>
 80011dc:	4603      	mov	r3, r0
 80011de:	617b      	str	r3, [r7, #20]
	uint8_t *ret = malloc(sizeof(uint8_t) * len);
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f006 ffbc 	bl	8008160 <malloc>
 80011e8:	4603      	mov	r3, r0
 80011ea:	613b      	str	r3, [r7, #16]
	cmd[0] = READ_DATA;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	2203      	movs	r2, #3
 80011f0:	701a      	strb	r2, [r3, #0]
	cmd[1] = (ReadAddr & 0x00FF0000) >> 16;
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	0c1a      	lsrs	r2, r3, #16
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	3301      	adds	r3, #1
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	701a      	strb	r2, [r3, #0]
	cmd[2] = (ReadAddr & 0x0000FF00) >> 8;
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	0a1a      	lsrs	r2, r3, #8
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	3302      	adds	r3, #2
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	701a      	strb	r2, [r3, #0]
	cmd[3] = ReadAddr & 0x000000FF;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3303      	adds	r3, #3
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	701a      	strb	r2, [r3, #0]
	W25Q32_Send_Receive(cmd, ret, 4);
 8001214:	2204      	movs	r2, #4
 8001216:	6939      	ldr	r1, [r7, #16]
 8001218:	6978      	ldr	r0, [r7, #20]
 800121a:	f7ff ffaf 	bl	800117c <W25Q32_Send_Receive>
	W25Q32_Send_Receive(cmd + 4, pBuffer , len);
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3304      	adds	r3, #4
 8001222:	88fa      	ldrh	r2, [r7, #6]
 8001224:	68f9      	ldr	r1, [r7, #12]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ffa8 	bl	800117c <W25Q32_Send_Receive>
	W25Q32_CS_HIGH();
 800122c:	f7ff ff18 	bl	8001060 <W25Q32_CS_HIGH>
	free(cmd);
 8001230:	6978      	ldr	r0, [r7, #20]
 8001232:	f006 ff9d 	bl	8008170 <free>
	free(ret);
 8001236:	6938      	ldr	r0, [r7, #16]
 8001238:	f006 ff9a 	bl	8008170 <free>
}
 800123c:	bf00      	nop
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <W25Q32_WriteData>:

void W25Q32_WriteData(uint8_t *pBuffer, uint32_t WriteAddr, uint16_t len) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	4613      	mov	r3, r2
 8001250:	80fb      	strh	r3, [r7, #6]
	uint8_t *cmd = malloc(sizeof(uint8_t) * (4 + len));
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	3304      	adds	r3, #4
 8001256:	4618      	mov	r0, r3
 8001258:	f006 ff82 	bl	8008160 <malloc>
 800125c:	4603      	mov	r3, r0
 800125e:	61bb      	str	r3, [r7, #24]
	uint8_t *data = malloc(sizeof(uint8_t) * len);
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	4618      	mov	r0, r3
 8001264:	f006 ff7c 	bl	8008160 <malloc>
 8001268:	4603      	mov	r3, r0
 800126a:	617b      	str	r3, [r7, #20]
	uint8_t *ret = malloc(sizeof(uint8_t) * len);
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	4618      	mov	r0, r3
 8001270:	f006 ff76 	bl	8008160 <malloc>
 8001274:	4603      	mov	r3, r0
 8001276:	613b      	str	r3, [r7, #16]

	WriteEnable();
 8001278:	f7ff ff02 	bl	8001080 <WriteEnable>
	W25Q32_CS_LOW();
 800127c:	f7ff fee0 	bl	8001040 <W25Q32_CS_LOW>
	cmd[0] = PAGE_PROGRAM;
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2202      	movs	r2, #2
 8001284:	701a      	strb	r2, [r3, #0]
	cmd[1] = (WriteAddr & 0x00FF0000) >> 16;
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	0c1a      	lsrs	r2, r3, #16
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	3301      	adds	r3, #1
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	701a      	strb	r2, [r3, #0]
	cmd[2] = (WriteAddr & 0x0000FF00) >> 8;
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	0a1a      	lsrs	r2, r3, #8
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	3302      	adds	r3, #2
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	701a      	strb	r2, [r3, #0]
	cmd[3] = WriteAddr & 0x000000FF;
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	3303      	adds	r3, #3
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	701a      	strb	r2, [r3, #0]
	W25Q32_Send_Receive(cmd, data, 4);
 80012a8:	2204      	movs	r2, #4
 80012aa:	6979      	ldr	r1, [r7, #20]
 80012ac:	69b8      	ldr	r0, [r7, #24]
 80012ae:	f7ff ff65 	bl	800117c <W25Q32_Send_Receive>
	for (uint8_t i = 0; i < len; i++) {
 80012b2:	2300      	movs	r3, #0
 80012b4:	77fb      	strb	r3, [r7, #31]
 80012b6:	e00a      	b.n	80012ce <W25Q32_WriteData+0x8a>
		*(data + i) = *(pBuffer + i);
 80012b8:	7ffb      	ldrb	r3, [r7, #31]
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	441a      	add	r2, r3
 80012be:	7ffb      	ldrb	r3, [r7, #31]
 80012c0:	6979      	ldr	r1, [r7, #20]
 80012c2:	440b      	add	r3, r1
 80012c4:	7812      	ldrb	r2, [r2, #0]
 80012c6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < len; i++) {
 80012c8:	7ffb      	ldrb	r3, [r7, #31]
 80012ca:	3301      	adds	r3, #1
 80012cc:	77fb      	strb	r3, [r7, #31]
 80012ce:	7ffb      	ldrb	r3, [r7, #31]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	88fa      	ldrh	r2, [r7, #6]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d8ef      	bhi.n	80012b8 <W25Q32_WriteData+0x74>
	}
	W25Q32_Send_Receive(data, ret, len);
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	461a      	mov	r2, r3
 80012dc:	6939      	ldr	r1, [r7, #16]
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff ff4c 	bl	800117c <W25Q32_Send_Receive>
	W25Q32_CS_HIGH();
 80012e4:	f7ff febc 	bl	8001060 <W25Q32_CS_HIGH>
	W25Q32_WaitEndCycle();
 80012e8:	f7ff ff10 	bl	800110c <W25Q32_WaitEndCycle>
	WriteDisable();
 80012ec:	f7ff feeb 	bl	80010c6 <WriteDisable>
	free(cmd);
 80012f0:	69b8      	ldr	r0, [r7, #24]
 80012f2:	f006 ff3d 	bl	8008170 <free>
	free(data);
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f006 ff3a 	bl	8008170 <free>
}
 80012fc:	bf00      	nop
 80012fe:	3720      	adds	r7, #32
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <W25Q32_erase4k>:

void W25Q32_erase4k(uint32_t add) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	uint8_t *cmd = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 800130c:	2004      	movs	r0, #4
 800130e:	f006 ff27 	bl	8008160 <malloc>
 8001312:	4603      	mov	r3, r0
 8001314:	60fb      	str	r3, [r7, #12]
	uint8_t *ret = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 8001316:	2004      	movs	r0, #4
 8001318:	f006 ff22 	bl	8008160 <malloc>
 800131c:	4603      	mov	r3, r0
 800131e:	60bb      	str	r3, [r7, #8]
	cmd[0] = ERASE_SECTOR;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2220      	movs	r2, #32
 8001324:	701a      	strb	r2, [r3, #0]
	cmd[1] = (add & 0x00FF0000) >> 16;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	0c1a      	lsrs	r2, r3, #16
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3301      	adds	r3, #1
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	701a      	strb	r2, [r3, #0]
	cmd[2] = (add & 0x0000FF00) >> 8;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	0a1a      	lsrs	r2, r3, #8
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3302      	adds	r3, #2
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	701a      	strb	r2, [r3, #0]
	cmd[3] = add & 0x0000000FF;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3303      	adds	r3, #3
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	701a      	strb	r2, [r3, #0]

	WriteEnable();
 8001348:	f7ff fe9a 	bl	8001080 <WriteEnable>
	W25Q32_CS_LOW();
 800134c:	f7ff fe78 	bl	8001040 <W25Q32_CS_LOW>
	W25Q32_Send_Receive(cmd, ret, 4);
 8001350:	2204      	movs	r2, #4
 8001352:	68b9      	ldr	r1, [r7, #8]
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f7ff ff11 	bl	800117c <W25Q32_Send_Receive>
	W25Q32_CS_HIGH();
 800135a:	f7ff fe81 	bl	8001060 <W25Q32_CS_HIGH>
	W25Q32_WaitEndCycle();
 800135e:	f7ff fed5 	bl	800110c <W25Q32_WaitEndCycle>
	WriteDisable();
 8001362:	f7ff feb0 	bl	80010c6 <WriteDisable>
	free(cmd);
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f006 ff02 	bl	8008170 <free>
	free(ret);
 800136c:	68b8      	ldr	r0, [r7, #8]
 800136e:	f006 feff 	bl	8008170 <free>
}
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001380:	f002 fc02 	bl	8003b88 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001384:	f000 f866 	bl	8001454 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001388:	f000 fb98 	bl	8001abc <MX_GPIO_Init>
	MX_ADC1_Init();
 800138c:	f000 f8c2 	bl	8001514 <MX_ADC1_Init>
	MX_SPI2_Init();
 8001390:	f000 f912 	bl	80015b8 <MX_SPI2_Init>
	MX_TIM1_Init();
 8001394:	f000 f946 	bl	8001624 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001398:	f000 f9f0 	bl	800177c <MX_TIM2_Init>
	MX_TIM3_Init();
 800139c:	f000 fa3a 	bl	8001814 <MX_TIM3_Init>
	MX_TIM4_Init();
 80013a0:	f000 faba 	bl	8001918 <MX_TIM4_Init>
	MX_TIM5_Init();
 80013a4:	f000 fb0c 	bl	80019c0 <MX_TIM5_Init>
	MX_USART1_UART_Init();
 80013a8:	f000 fb5e 	bl	8001a68 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, &uart_chr, sizeof(uart_chr));
 80013ac:	2201      	movs	r2, #1
 80013ae:	4920      	ldr	r1, [pc, #128]	; (8001430 <main+0xb4>)
 80013b0:	4820      	ldr	r0, [pc, #128]	; (8001434 <main+0xb8>)
 80013b2:	f005 ff0e 	bl	80071d2 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80013b6:	4820      	ldr	r0, [pc, #128]	; (8001438 <main+0xbc>)
 80013b8:	f004 fd32 	bl	8005e20 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 80013bc:	481f      	ldr	r0, [pc, #124]	; (800143c <main+0xc0>)
 80013be:	f004 fcd5 	bl	8005d6c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013c2:	2100      	movs	r1, #0
 80013c4:	481c      	ldr	r0, [pc, #112]	; (8001438 <main+0xbc>)
 80013c6:	f004 fde7 	bl	8005f98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80013ca:	2104      	movs	r1, #4
 80013cc:	481a      	ldr	r0, [pc, #104]	; (8001438 <main+0xbc>)
 80013ce:	f004 fde3 	bl	8005f98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013d2:	2100      	movs	r1, #0
 80013d4:	481a      	ldr	r0, [pc, #104]	; (8001440 <main+0xc4>)
 80013d6:	f004 fddf 	bl	8005f98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80013da:	210c      	movs	r1, #12
 80013dc:	4818      	ldr	r0, [pc, #96]	; (8001440 <main+0xc4>)
 80013de:	f004 fddb 	bl	8005f98 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80013e2:	2104      	movs	r1, #4
 80013e4:	4817      	ldr	r0, [pc, #92]	; (8001444 <main+0xc8>)
 80013e6:	f004 ff2d 	bl	8006244 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80013ea:	2104      	movs	r1, #4
 80013ec:	4816      	ldr	r0, [pc, #88]	; (8001448 <main+0xcc>)
 80013ee:	f004 ff29 	bl	8006244 <HAL_TIM_Encoder_Start>
	init_dht22();
 80013f2:	f001 fce1 	bl	8002db8 <init_dht22>
	W25Q32_Init(&hspi2, GPIOB, GPIO_PIN_12);
 80013f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013fa:	4914      	ldr	r1, [pc, #80]	; (800144c <main+0xd0>)
 80013fc:	4814      	ldr	r0, [pc, #80]	; (8001450 <main+0xd4>)
 80013fe:	f7ff fe03 	bl	8001008 <W25Q32_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8001402:	2201      	movs	r2, #1
 8001404:	2104      	movs	r1, #4
 8001406:	4811      	ldr	r0, [pc, #68]	; (800144c <main+0xd0>)
 8001408:	f003 fb76 	bl	8004af8 <HAL_GPIO_WritePin>
//	First_Start();
	Flash_get_info();
 800140c:	f000 fda4 	bl	8001f58 <Flash_get_info>
	Response();
 8001410:	f000 fc92 	bl	8001d38 <Response>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		Blink_Led();
 8001414:	f001 fc88 	bl	8002d28 <Blink_Led>
		Handle_Command();
 8001418:	f000 fdf0 	bl	8001ffc <Handle_Command>
		en_motor();
 800141c:	f001 faa4 	bl	8002968 <en_motor>
		control_door();
 8001420:	f001 fa2c 	bl	800287c <control_door>
		control_led();
 8001424:	f001 fc1a 	bl	8002c5c <control_led>
		Send_data();
 8001428:	f000 fdd0 	bl	8001fcc <Send_data>
		Blink_Led();
 800142c:	e7f2      	b.n	8001414 <main+0x98>
 800142e:	bf00      	nop
 8001430:	2000109d 	.word	0x2000109d
 8001434:	20000bf4 	.word	0x20000bf4
 8001438:	20000b1c 	.word	0x20000b1c
 800143c:	20000ad4 	.word	0x20000ad4
 8001440:	20000a8c 	.word	0x20000a8c
 8001444:	20000b64 	.word	0x20000b64
 8001448:	20000bac 	.word	0x20000bac
 800144c:	40020400 	.word	0x40020400
 8001450:	20000a34 	.word	0x20000a34

08001454 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b094      	sub	sp, #80	; 0x50
 8001458:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800145a:	f107 0320 	add.w	r3, r7, #32
 800145e:	2230      	movs	r2, #48	; 0x30
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f007 f8c8 	bl	80085f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	4b23      	ldr	r3, [pc, #140]	; (800150c <SystemClock_Config+0xb8>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	4a22      	ldr	r2, [pc, #136]	; (800150c <SystemClock_Config+0xb8>)
 8001482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001486:	6413      	str	r3, [r2, #64]	; 0x40
 8001488:	4b20      	ldr	r3, [pc, #128]	; (800150c <SystemClock_Config+0xb8>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <SystemClock_Config+0xbc>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014a0:	4a1b      	ldr	r2, [pc, #108]	; (8001510 <SystemClock_Config+0xbc>)
 80014a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b19      	ldr	r3, [pc, #100]	; (8001510 <SystemClock_Config+0xbc>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014b4:	2302      	movs	r3, #2
 80014b6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014bc:	2310      	movs	r3, #16
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80014c4:	f107 0320 	add.w	r3, r7, #32
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 fb61 	bl	8004b90 <HAL_RCC_OscConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <SystemClock_Config+0x84>
		Error_Handler();
 80014d4:	f001 ff8e 	bl	80033f4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80014d8:	230f      	movs	r3, #15
 80014da:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 fdc4 	bl	8005080 <HAL_RCC_ClockConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0xae>
		Error_Handler();
 80014fe:	f001 ff79 	bl	80033f4 <Error_Handler>
	}
}
 8001502:	bf00      	nop
 8001504:	3750      	adds	r7, #80	; 0x50
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800
 8001510:	40007000 	.word	0x40007000

08001514 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800151a:	463b      	mov	r3, r7
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001526:	4b21      	ldr	r3, [pc, #132]	; (80015ac <MX_ADC1_Init+0x98>)
 8001528:	4a21      	ldr	r2, [pc, #132]	; (80015b0 <MX_ADC1_Init+0x9c>)
 800152a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <MX_ADC1_Init+0x98>)
 800152e:	2200      	movs	r2, #0
 8001530:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001532:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <MX_ADC1_Init+0x98>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001538:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <MX_ADC1_Init+0x98>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800153e:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <MX_ADC1_Init+0x98>)
 8001540:	2200      	movs	r2, #0
 8001542:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <MX_ADC1_Init+0x98>)
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <MX_ADC1_Init+0x98>)
 800154e:	2200      	movs	r2, #0
 8001550:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <MX_ADC1_Init+0x98>)
 8001554:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <MX_ADC1_Init+0xa0>)
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <MX_ADC1_Init+0x98>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <MX_ADC1_Init+0x98>)
 8001560:	2201      	movs	r2, #1
 8001562:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_ADC1_Init+0x98>)
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_ADC1_Init+0x98>)
 800156e:	2201      	movs	r2, #1
 8001570:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001572:	480e      	ldr	r0, [pc, #56]	; (80015ac <MX_ADC1_Init+0x98>)
 8001574:	f002 fb9e 	bl	8003cb4 <HAL_ADC_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_ADC1_Init+0x6e>
		Error_Handler();
 800157e:	f001 ff39 	bl	80033f4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8001582:	2305      	movs	r3, #5
 8001584:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001586:	2301      	movs	r3, #1
 8001588:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800158e:	463b      	mov	r3, r7
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <MX_ADC1_Init+0x98>)
 8001594:	f002 fd52 	bl	800403c <HAL_ADC_ConfigChannel>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_ADC1_Init+0x8e>
		Error_Handler();
 800159e:	f001 ff29 	bl	80033f4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200009ec 	.word	0x200009ec
 80015b0:	40012000 	.word	0x40012000
 80015b4:	0f000001 	.word	0x0f000001

080015b8 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <MX_SPI2_Init+0x64>)
 80015be:	4a18      	ldr	r2, [pc, #96]	; (8001620 <MX_SPI2_Init+0x68>)
 80015c0:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <MX_SPI2_Init+0x64>)
 80015c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015c8:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <MX_SPI2_Init+0x64>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <MX_SPI2_Init+0x64>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_SPI2_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <MX_SPI2_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_SPI2_Init+0x64>)
 80015e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e8:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_SPI2_Init+0x64>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <MX_SPI2_Init+0x64>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_SPI2_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <MX_SPI2_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_SPI2_Init+0x64>)
 8001604:	220a      	movs	r2, #10
 8001606:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8001608:	4804      	ldr	r0, [pc, #16]	; (800161c <MX_SPI2_Init+0x64>)
 800160a:	f003 ff19 	bl	8005440 <HAL_SPI_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_SPI2_Init+0x60>
		Error_Handler();
 8001614:	f001 feee 	bl	80033f4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000a34 	.word	0x20000a34
 8001620:	40003800 	.word	0x40003800

08001624 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b096      	sub	sp, #88	; 0x58
 8001628:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800162a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001638:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
 8001650:	611a      	str	r2, [r3, #16]
 8001652:	615a      	str	r2, [r3, #20]
 8001654:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2220      	movs	r2, #32
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f006 ffcb 	bl	80085f8 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001662:	4b44      	ldr	r3, [pc, #272]	; (8001774 <MX_TIM1_Init+0x150>)
 8001664:	4a44      	ldr	r2, [pc, #272]	; (8001778 <MX_TIM1_Init+0x154>)
 8001666:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1599;
 8001668:	4b42      	ldr	r3, [pc, #264]	; (8001774 <MX_TIM1_Init+0x150>)
 800166a:	f240 623f 	movw	r2, #1599	; 0x63f
 800166e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001670:	4b40      	ldr	r3, [pc, #256]	; (8001774 <MX_TIM1_Init+0x150>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 199;
 8001676:	4b3f      	ldr	r3, [pc, #252]	; (8001774 <MX_TIM1_Init+0x150>)
 8001678:	22c7      	movs	r2, #199	; 0xc7
 800167a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167c:	4b3d      	ldr	r3, [pc, #244]	; (8001774 <MX_TIM1_Init+0x150>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001682:	4b3c      	ldr	r3, [pc, #240]	; (8001774 <MX_TIM1_Init+0x150>)
 8001684:	2200      	movs	r2, #0
 8001686:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001688:	4b3a      	ldr	r3, [pc, #232]	; (8001774 <MX_TIM1_Init+0x150>)
 800168a:	2200      	movs	r2, #0
 800168c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800168e:	4839      	ldr	r0, [pc, #228]	; (8001774 <MX_TIM1_Init+0x150>)
 8001690:	f004 fb1c 	bl	8005ccc <HAL_TIM_Base_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM1_Init+0x7a>
		Error_Handler();
 800169a:	f001 feab 	bl	80033f4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800169e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a2:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80016a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016a8:	4619      	mov	r1, r3
 80016aa:	4832      	ldr	r0, [pc, #200]	; (8001774 <MX_TIM1_Init+0x150>)
 80016ac:	f005 f822 	bl	80066f4 <HAL_TIM_ConfigClockSource>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM1_Init+0x96>
		Error_Handler();
 80016b6:	f001 fe9d 	bl	80033f4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80016ba:	482e      	ldr	r0, [pc, #184]	; (8001774 <MX_TIM1_Init+0x150>)
 80016bc:	f004 fc12 	bl	8005ee4 <HAL_TIM_PWM_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM1_Init+0xa6>
		Error_Handler();
 80016c6:	f001 fe95 	bl	80033f4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ca:	2300      	movs	r3, #0
 80016cc:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80016d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016d6:	4619      	mov	r1, r3
 80016d8:	4826      	ldr	r0, [pc, #152]	; (8001774 <MX_TIM1_Init+0x150>)
 80016da:	f005 fbc7 	bl	8006e6c <HAL_TIMEx_MasterConfigSynchronization>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80016e4:	f001 fe86 	bl	80033f4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e8:	2360      	movs	r3, #96	; 0x60
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016f4:	2300      	movs	r3, #0
 80016f6:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016fc:	2300      	movs	r3, #0
 80016fe:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001700:	2300      	movs	r3, #0
 8001702:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001708:	2200      	movs	r2, #0
 800170a:	4619      	mov	r1, r3
 800170c:	4819      	ldr	r0, [pc, #100]	; (8001774 <MX_TIM1_Init+0x150>)
 800170e:	f004 ff2f 	bl	8006570 <HAL_TIM_PWM_ConfigChannel>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8001718:	f001 fe6c 	bl	80033f4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 800171c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001720:	220c      	movs	r2, #12
 8001722:	4619      	mov	r1, r3
 8001724:	4813      	ldr	r0, [pc, #76]	; (8001774 <MX_TIM1_Init+0x150>)
 8001726:	f004 ff23 	bl	8006570 <HAL_TIM_PWM_ConfigChannel>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM1_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 8001730:	f001 fe60 	bl	80033f4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800174c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	4619      	mov	r1, r3
 8001756:	4807      	ldr	r0, [pc, #28]	; (8001774 <MX_TIM1_Init+0x150>)
 8001758:	f005 fbf6 	bl	8006f48 <HAL_TIMEx_ConfigBreakDeadTime>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM1_Init+0x142>
			!= HAL_OK) {
		Error_Handler();
 8001762:	f001 fe47 	bl	80033f4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001766:	4803      	ldr	r0, [pc, #12]	; (8001774 <MX_TIM1_Init+0x150>)
 8001768:	f001 ffd6 	bl	8003718 <HAL_TIM_MspPostInit>

}
 800176c:	bf00      	nop
 800176e:	3758      	adds	r7, #88	; 0x58
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000a8c 	.word	0x20000a8c
 8001778:	40010000 	.word	0x40010000

0800177c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001790:	463b      	mov	r3, r7
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <MX_TIM2_Init+0x94>)
 800179a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800179e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15;
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <MX_TIM2_Init+0x94>)
 80017a2:	220f      	movs	r2, #15
 80017a4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <MX_TIM2_Init+0x94>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <MX_TIM2_Init+0x94>)
 80017ae:	f04f 32ff 	mov.w	r2, #4294967295
 80017b2:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b4:	4b16      	ldr	r3, [pc, #88]	; (8001810 <MX_TIM2_Init+0x94>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <MX_TIM2_Init+0x94>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80017c0:	4813      	ldr	r0, [pc, #76]	; (8001810 <MX_TIM2_Init+0x94>)
 80017c2:	f004 fa83 	bl	8005ccc <HAL_TIM_Base_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM2_Init+0x54>
		Error_Handler();
 80017cc:	f001 fe12 	bl	80033f4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	4619      	mov	r1, r3
 80017dc:	480c      	ldr	r0, [pc, #48]	; (8001810 <MX_TIM2_Init+0x94>)
 80017de:	f004 ff89 	bl	80066f4 <HAL_TIM_ConfigClockSource>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM2_Init+0x70>
		Error_Handler();
 80017e8:	f001 fe04 	bl	80033f4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ec:	2300      	movs	r3, #0
 80017ee:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80017f4:	463b      	mov	r3, r7
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_TIM2_Init+0x94>)
 80017fa:	f005 fb37 	bl	8006e6c <HAL_TIMEx_MasterConfigSynchronization>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001804:	f001 fdf6 	bl	80033f4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000ad4 	.word	0x20000ad4

08001814 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b08e      	sub	sp, #56	; 0x38
 8001818:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800181a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001828:	f107 0320 	add.w	r3, r7, #32
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
 8001840:	615a      	str	r2, [r3, #20]
 8001842:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001844:	4b32      	ldr	r3, [pc, #200]	; (8001910 <MX_TIM3_Init+0xfc>)
 8001846:	4a33      	ldr	r2, [pc, #204]	; (8001914 <MX_TIM3_Init+0x100>)
 8001848:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 15;
 800184a:	4b31      	ldr	r3, [pc, #196]	; (8001910 <MX_TIM3_Init+0xfc>)
 800184c:	220f      	movs	r2, #15
 800184e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001850:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <MX_TIM3_Init+0xfc>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 999;
 8001856:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <MX_TIM3_Init+0xfc>)
 8001858:	f240 32e7 	movw	r2, #999	; 0x3e7
 800185c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185e:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <MX_TIM3_Init+0xfc>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001864:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <MX_TIM3_Init+0xfc>)
 8001866:	2200      	movs	r2, #0
 8001868:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800186a:	4829      	ldr	r0, [pc, #164]	; (8001910 <MX_TIM3_Init+0xfc>)
 800186c:	f004 fa2e 	bl	8005ccc <HAL_TIM_Base_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM3_Init+0x66>
		Error_Handler();
 8001876:	f001 fdbd 	bl	80033f4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001880:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001884:	4619      	mov	r1, r3
 8001886:	4822      	ldr	r0, [pc, #136]	; (8001910 <MX_TIM3_Init+0xfc>)
 8001888:	f004 ff34 	bl	80066f4 <HAL_TIM_ConfigClockSource>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM3_Init+0x82>
		Error_Handler();
 8001892:	f001 fdaf 	bl	80033f4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001896:	481e      	ldr	r0, [pc, #120]	; (8001910 <MX_TIM3_Init+0xfc>)
 8001898:	f004 fb24 	bl	8005ee4 <HAL_TIM_PWM_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM3_Init+0x92>
		Error_Handler();
 80018a2:	f001 fda7 	bl	80033f4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80018ae:	f107 0320 	add.w	r3, r7, #32
 80018b2:	4619      	mov	r1, r3
 80018b4:	4816      	ldr	r0, [pc, #88]	; (8001910 <MX_TIM3_Init+0xfc>)
 80018b6:	f005 fad9 	bl	8006e6c <HAL_TIMEx_MasterConfigSynchronization>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 80018c0:	f001 fd98 	bl	80033f4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c4:	2360      	movs	r3, #96	; 0x60
 80018c6:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	2200      	movs	r2, #0
 80018d8:	4619      	mov	r1, r3
 80018da:	480d      	ldr	r0, [pc, #52]	; (8001910 <MX_TIM3_Init+0xfc>)
 80018dc:	f004 fe48 	bl	8006570 <HAL_TIM_PWM_ConfigChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 80018e6:	f001 fd85 	bl	80033f4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2204      	movs	r2, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4807      	ldr	r0, [pc, #28]	; (8001910 <MX_TIM3_Init+0xfc>)
 80018f2:	f004 fe3d 	bl	8006570 <HAL_TIM_PWM_ConfigChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM3_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 80018fc:	f001 fd7a 	bl	80033f4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001900:	4803      	ldr	r0, [pc, #12]	; (8001910 <MX_TIM3_Init+0xfc>)
 8001902:	f001 ff09 	bl	8003718 <HAL_TIM_MspPostInit>

}
 8001906:	bf00      	nop
 8001908:	3738      	adds	r7, #56	; 0x38
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000b1c 	.word	0x20000b1c
 8001914:	40000400 	.word	0x40000400

08001918 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b08c      	sub	sp, #48	; 0x30
 800191c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	2224      	movs	r2, #36	; 0x24
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f006 fe66 	bl	80085f8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001934:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <MX_TIM4_Init+0xa0>)
 8001936:	4a21      	ldr	r2, [pc, #132]	; (80019bc <MX_TIM4_Init+0xa4>)
 8001938:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800193a:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <MX_TIM4_Init+0xa0>)
 800193c:	2200      	movs	r2, #0
 800193e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001940:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <MX_TIM4_Init+0xa0>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <MX_TIM4_Init+0xa0>)
 8001948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800194c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194e:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <MX_TIM4_Init+0xa0>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <MX_TIM4_Init+0xa0>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800195a:	2303      	movs	r3, #3
 800195c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001962:	2301      	movs	r3, #1
 8001964:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001972:	2301      	movs	r3, #1
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001976:	2300      	movs	r3, #0
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	4619      	mov	r1, r3
 8001984:	480c      	ldr	r0, [pc, #48]	; (80019b8 <MX_TIM4_Init+0xa0>)
 8001986:	f004 fbb7 	bl	80060f8 <HAL_TIM_Encoder_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM4_Init+0x7c>
		Error_Handler();
 8001990:	f001 fd30 	bl	80033f4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	4619      	mov	r1, r3
 80019a0:	4805      	ldr	r0, [pc, #20]	; (80019b8 <MX_TIM4_Init+0xa0>)
 80019a2:	f005 fa63 	bl	8006e6c <HAL_TIMEx_MasterConfigSynchronization>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM4_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80019ac:	f001 fd22 	bl	80033f4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80019b0:	bf00      	nop
 80019b2:	3730      	adds	r7, #48	; 0x30
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000b64 	.word	0x20000b64
 80019bc:	40000800 	.word	0x40000800

080019c0 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08c      	sub	sp, #48	; 0x30
 80019c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80019c6:	f107 030c 	add.w	r3, r7, #12
 80019ca:	2224      	movs	r2, #36	; 0x24
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f006 fe12 	bl	80085f8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80019dc:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <MX_TIM5_Init+0xa0>)
 80019de:	4a21      	ldr	r2, [pc, #132]	; (8001a64 <MX_TIM5_Init+0xa4>)
 80019e0:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 80019e2:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <MX_TIM5_Init+0xa0>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e8:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <MX_TIM5_Init+0xa0>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 80019ee:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <MX_TIM5_Init+0xa0>)
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295
 80019f4:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f6:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <MX_TIM5_Init+0xa0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fc:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <MX_TIM5_Init+0xa0>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a02:	2303      	movs	r3, #3
 8001a04:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a16:	2300      	movs	r3, #0
 8001a18:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8001a26:	f107 030c 	add.w	r3, r7, #12
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480c      	ldr	r0, [pc, #48]	; (8001a60 <MX_TIM5_Init+0xa0>)
 8001a2e:	f004 fb63 	bl	80060f8 <HAL_TIM_Encoder_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM5_Init+0x7c>
		Error_Handler();
 8001a38:	f001 fcdc 	bl	80033f4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	4619      	mov	r1, r3
 8001a48:	4805      	ldr	r0, [pc, #20]	; (8001a60 <MX_TIM5_Init+0xa0>)
 8001a4a:	f005 fa0f 	bl	8006e6c <HAL_TIMEx_MasterConfigSynchronization>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM5_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001a54:	f001 fcce 	bl	80033f4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8001a58:	bf00      	nop
 8001a5a:	3730      	adds	r7, #48	; 0x30
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000bac 	.word	0x20000bac
 8001a64:	40000c00 	.word	0x40000c00

08001a68 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a6e:	4a12      	ldr	r2, [pc, #72]	; (8001ab8 <MX_USART1_UART_Init+0x50>)
 8001a70:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a78:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001a9e:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001aa0:	f005 fab8 	bl	8007014 <HAL_UART_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001aaa:	f001 fca3 	bl	80033f4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000bf4 	.word	0x20000bf4
 8001ab8:	40011000 	.word	0x40011000

08001abc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	4b7a      	ldr	r3, [pc, #488]	; (8001cc0 <MX_GPIO_Init+0x204>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a79      	ldr	r2, [pc, #484]	; (8001cc0 <MX_GPIO_Init+0x204>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b77      	ldr	r3, [pc, #476]	; (8001cc0 <MX_GPIO_Init+0x204>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b73      	ldr	r3, [pc, #460]	; (8001cc0 <MX_GPIO_Init+0x204>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a72      	ldr	r2, [pc, #456]	; (8001cc0 <MX_GPIO_Init+0x204>)
 8001af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b70      	ldr	r3, [pc, #448]	; (8001cc0 <MX_GPIO_Init+0x204>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	4b6c      	ldr	r3, [pc, #432]	; (8001cc0 <MX_GPIO_Init+0x204>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a6b      	ldr	r2, [pc, #428]	; (8001cc0 <MX_GPIO_Init+0x204>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b69      	ldr	r3, [pc, #420]	; (8001cc0 <MX_GPIO_Init+0x204>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	4b65      	ldr	r3, [pc, #404]	; (8001cc0 <MX_GPIO_Init+0x204>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a64      	ldr	r2, [pc, #400]	; (8001cc0 <MX_GPIO_Init+0x204>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b62      	ldr	r3, [pc, #392]	; (8001cc0 <MX_GPIO_Init+0x204>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b48:	485e      	ldr	r0, [pc, #376]	; (8001cc4 <MX_GPIO_Init+0x208>)
 8001b4a:	f002 ffd5 	bl	8004af8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	2104      	movs	r1, #4
 8001b52:	485d      	ldr	r0, [pc, #372]	; (8001cc8 <MX_GPIO_Init+0x20c>)
 8001b54:	f002 ffd0 	bl	8004af8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LIGHT_Pin | CS_Pin | LIGHT2_Pin | DHT_Pin,
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f241 6108 	movw	r1, #5640	; 0x1608
 8001b5e:	485a      	ldr	r0, [pc, #360]	; (8001cc8 <MX_GPIO_Init+0x20c>)
 8001b60:	f002 ffca 	bl	8004af8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b68:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4851      	ldr	r0, [pc, #324]	; (8001cc4 <MX_GPIO_Init+0x208>)
 8001b7e:	f002 fe1f 	bl	80047c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN6_Pin BTN4_Pin */
	GPIO_InitStruct.Pin = BTN6_Pin | BTN4_Pin;
 8001b82:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b86:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b88:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b8c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	484a      	ldr	r0, [pc, #296]	; (8001cc4 <MX_GPIO_Init+0x208>)
 8001b9a:	f002 fe11 	bl	80047c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SR502_2_Pin LSS_Pin */
	GPIO_InitStruct.Pin = SR502_2_Pin | LSS_Pin;
 8001b9e:	230c      	movs	r3, #12
 8001ba0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ba2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001ba6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4846      	ldr	r0, [pc, #280]	; (8001ccc <MX_GPIO_Init+0x210>)
 8001bb4:	f002 fe04 	bl	80047c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SR501_Pin LSS2_Pin */
	GPIO_InitStruct.Pin = SR501_Pin | LSS2_Pin;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001bbc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001bc0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	483e      	ldr	r0, [pc, #248]	; (8001cc8 <MX_GPIO_Init+0x20c>)
 8001bce:	f002 fdf7 	bl	80047c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BUZZER_Pin LIGHT_Pin CS_Pin LIGHT2_Pin */
	GPIO_InitStruct.Pin = BUZZER_Pin | LIGHT_Pin | CS_Pin | LIGHT2_Pin;
 8001bd2:	f241 430c 	movw	r3, #5132	; 0x140c
 8001bd6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	4837      	ldr	r0, [pc, #220]	; (8001cc8 <MX_GPIO_Init+0x20c>)
 8001bec:	f002 fde8 	bl	80047c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN5_Pin */
	GPIO_InitStruct.Pin = BTN5_Pin;
 8001bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bf6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bfa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BTN5_GPIO_Port, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	4831      	ldr	r0, [pc, #196]	; (8001ccc <MX_GPIO_Init+0x210>)
 8001c08:	f002 fdda 	bl	80047c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin | BTN2_Pin | BTN3_Pin;
 8001c0c:	f44f 7398 	mov.w	r3, #304	; 0x130
 8001c10:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c12:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c16:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	4619      	mov	r1, r3
 8001c22:	4829      	ldr	r0, [pc, #164]	; (8001cc8 <MX_GPIO_Init+0x20c>)
 8001c24:	f002 fdcc 	bl	80047c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : DHT_Pin */
	GPIO_InitStruct.Pin = DHT_Pin;
 8001c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c2c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c36:	2302      	movs	r3, #2
 8001c38:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4821      	ldr	r0, [pc, #132]	; (8001cc8 <MX_GPIO_Init+0x20c>)
 8001c42:	f002 fdbd 	bl	80047c0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2105      	movs	r1, #5
 8001c4a:	2006      	movs	r0, #6
 8001c4c:	f002 fcef 	bl	800462e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c50:	2006      	movs	r0, #6
 8001c52:	f002 fd08 	bl	8004666 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2105      	movs	r1, #5
 8001c5a:	2007      	movs	r0, #7
 8001c5c:	f002 fce7 	bl	800462e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c60:	2007      	movs	r0, #7
 8001c62:	f002 fd00 	bl	8004666 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2105      	movs	r1, #5
 8001c6a:	2008      	movs	r0, #8
 8001c6c:	f002 fcdf 	bl	800462e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001c70:	2008      	movs	r0, #8
 8001c72:	f002 fcf8 	bl	8004666 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2105      	movs	r1, #5
 8001c7a:	2009      	movs	r0, #9
 8001c7c:	f002 fcd7 	bl	800462e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001c80:	2009      	movs	r0, #9
 8001c82:	f002 fcf0 	bl	8004666 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 6, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2106      	movs	r1, #6
 8001c8a:	200a      	movs	r0, #10
 8001c8c:	f002 fccf 	bl	800462e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001c90:	200a      	movs	r0, #10
 8001c92:	f002 fce8 	bl	8004666 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2106      	movs	r1, #6
 8001c9a:	2017      	movs	r0, #23
 8001c9c:	f002 fcc7 	bl	800462e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ca0:	2017      	movs	r0, #23
 8001ca2:	f002 fce0 	bl	8004666 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2106      	movs	r1, #6
 8001caa:	2028      	movs	r0, #40	; 0x28
 8001cac:	f002 fcbf 	bl	800462e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cb0:	2028      	movs	r0, #40	; 0x28
 8001cb2:	f002 fcd8 	bl	8004666 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001cb6:	bf00      	nop
 8001cb8:	3728      	adds	r7, #40	; 0x28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40020800 	.word	0x40020800
 8001cc8:	40020400 	.word	0x40020400
 8001ccc:	40020000 	.word	0x40020000

08001cd0 <gpio_set_mode>:
//	d_done = 1;
//	d_done_2 = 1;
//	f_done = 1;
//	f_done_2 = 1;
//}
void gpio_set_mode(uint8_t mode) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]
 8001ce8:	611a      	str	r2, [r3, #16]
	if (mode) {						// output
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00f      	beq.n	8001d10 <gpio_set_mode+0x40>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf4:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d02:	f107 030c 	add.w	r3, r7, #12
 8001d06:	4619      	mov	r1, r3
 8001d08:	480a      	ldr	r0, [pc, #40]	; (8001d34 <gpio_set_mode+0x64>)
 8001d0a:	f002 fd59 	bl	80047c0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	}
}
 8001d0e:	e00c      	b.n	8001d2a <gpio_set_mode+0x5a>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d14:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1e:	f107 030c 	add.w	r3, r7, #12
 8001d22:	4619      	mov	r1, r3
 8001d24:	4803      	ldr	r0, [pc, #12]	; (8001d34 <gpio_set_mode+0x64>)
 8001d26:	f002 fd4b 	bl	80047c0 <HAL_GPIO_Init>
}
 8001d2a:	bf00      	nop
 8001d2c:	3720      	adds	r7, #32
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40020400 	.word	0x40020400

08001d38 <Response>:

void Response() {
 8001d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d3c:	b0a3      	sub	sp, #140	; 0x8c
 8001d3e:	af14      	add	r7, sp, #80	; 0x50
	dht22_GetValue(&dht);
 8001d40:	4840      	ldr	r0, [pc, #256]	; (8001e44 <Response+0x10c>)
 8001d42:	f001 f849 	bl	8002dd8 <dht22_GetValue>
	getADC_value();
 8001d46:	f001 fb35 	bl	80033b4 <getADC_value>
	motor_get_speed();
 8001d4a:	f000 feb7 	bl	8002abc <motor_get_speed>
//			door2, d_mod_2, door_state_2,
//			fan1, motor_speed, fan2, motor_speed_2,
//			led1, led_mod, led_state,
//			led2, led_mod_2, led_state_2,
//			buz_state);
	Flash_write_info();
 8001d4e:	f000 f8a9 	bl	8001ea4 <Flash_write_info>

	sprintf((char*) tx,
 8001d52:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <Response+0x110>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fbfe 	bl	8000558 <__aeabi_f2d>
 8001d5c:	4680      	mov	r8, r0
 8001d5e:	4689      	mov	r9, r1
 8001d60:	4b3a      	ldr	r3, [pc, #232]	; (8001e4c <Response+0x114>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fbf7 	bl	8000558 <__aeabi_f2d>
 8001d6a:	4604      	mov	r4, r0
 8001d6c:	460d      	mov	r5, r1
 8001d6e:	4b38      	ldr	r3, [pc, #224]	; (8001e50 <Response+0x118>)
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	637b      	str	r3, [r7, #52]	; 0x34
 8001d74:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <Response+0x11c>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	633b      	str	r3, [r7, #48]	; 0x30
 8001d7a:	4b37      	ldr	r3, [pc, #220]	; (8001e58 <Response+0x120>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d80:	4b36      	ldr	r3, [pc, #216]	; (8001e5c <Response+0x124>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d86:	4b36      	ldr	r3, [pc, #216]	; (8001e60 <Response+0x128>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8c:	4b35      	ldr	r3, [pc, #212]	; (8001e64 <Response+0x12c>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	623b      	str	r3, [r7, #32]
 8001d92:	4b35      	ldr	r3, [pc, #212]	; (8001e68 <Response+0x130>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <Response+0x134>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	61bb      	str	r3, [r7, #24]
 8001d9e:	4b34      	ldr	r3, [pc, #208]	; (8001e70 <Response+0x138>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	617a      	str	r2, [r7, #20]
 8001da4:	4b33      	ldr	r3, [pc, #204]	; (8001e74 <Response+0x13c>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	4b33      	ldr	r3, [pc, #204]	; (8001e78 <Response+0x140>)
 8001dac:	681e      	ldr	r6, [r3, #0]
 8001dae:	4b33      	ldr	r3, [pc, #204]	; (8001e7c <Response+0x144>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <Response+0x148>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	4b32      	ldr	r3, [pc, #200]	; (8001e84 <Response+0x14c>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	4b31      	ldr	r3, [pc, #196]	; (8001e88 <Response+0x150>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <Response+0x154>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4b30      	ldr	r3, [pc, #192]	; (8001e90 <Response+0x158>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b30      	ldr	r3, [pc, #192]	; (8001e94 <Response+0x15c>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	9313      	str	r3, [sp, #76]	; 0x4c
 8001dd8:	9212      	str	r2, [sp, #72]	; 0x48
 8001dda:	9111      	str	r1, [sp, #68]	; 0x44
 8001ddc:	9010      	str	r0, [sp, #64]	; 0x40
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	910f      	str	r1, [sp, #60]	; 0x3c
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	910e      	str	r1, [sp, #56]	; 0x38
 8001de6:	68f9      	ldr	r1, [r7, #12]
 8001de8:	910d      	str	r1, [sp, #52]	; 0x34
 8001dea:	960c      	str	r6, [sp, #48]	; 0x30
 8001dec:	6939      	ldr	r1, [r7, #16]
 8001dee:	910b      	str	r1, [sp, #44]	; 0x2c
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	920a      	str	r2, [sp, #40]	; 0x28
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	9209      	str	r2, [sp, #36]	; 0x24
 8001df8:	69fa      	ldr	r2, [r7, #28]
 8001dfa:	9208      	str	r2, [sp, #32]
 8001dfc:	6a3a      	ldr	r2, [r7, #32]
 8001dfe:	9207      	str	r2, [sp, #28]
 8001e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e02:	9206      	str	r2, [sp, #24]
 8001e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e06:	9205      	str	r2, [sp, #20]
 8001e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e0a:	9204      	str	r2, [sp, #16]
 8001e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e0e:	9203      	str	r2, [sp, #12]
 8001e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e12:	9302      	str	r3, [sp, #8]
 8001e14:	e9cd 4500 	strd	r4, r5, [sp]
 8001e18:	4642      	mov	r2, r8
 8001e1a:	464b      	mov	r3, r9
 8001e1c:	491e      	ldr	r1, [pc, #120]	; (8001e98 <Response+0x160>)
 8001e1e:	481f      	ldr	r0, [pc, #124]	; (8001e9c <Response+0x164>)
 8001e20:	f006 fc0e 	bl	8008640 <sprintf>
			"tem:%.1f\thum:%.1f\tmq2:%d\tdr1:%d\tdm1:%d\tds1:%d\tdr2:%d\tdm2:%d\tds2:%d\tfn1:%d\tfs1:%d\tfn2:%d\tfs2:%d\tld1:%d\tlm1:%d\tls1:%d\tld2:%d\tlm2:%d\tls2:%d\tbuz:%d",
			tem, hum, adc_val, door1, d_mod, door_state, door2, d_mod_2,
			door_state_2, fan1, motor_speed, fan2, motor_speed_2, led1, led_mod,
			led_state, led2, led_mod_2, led_state_2, buz_state);
	HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8001e24:	481d      	ldr	r0, [pc, #116]	; (8001e9c <Response+0x164>)
 8001e26:	f7fe f9db 	bl	80001e0 <strlen>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	23c8      	movs	r3, #200	; 0xc8
 8001e30:	491a      	ldr	r1, [pc, #104]	; (8001e9c <Response+0x164>)
 8001e32:	481b      	ldr	r0, [pc, #108]	; (8001ea0 <Response+0x168>)
 8001e34:	f005 f93b 	bl	80070ae <HAL_UART_Transmit>
}
 8001e38:	bf00      	nop
 8001e3a:	373c      	adds	r7, #60	; 0x3c
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e42:	bf00      	nop
 8001e44:	200010dc 	.word	0x200010dc
 8001e48:	200010e4 	.word	0x200010e4
 8001e4c:	200010e8 	.word	0x200010e8
 8001e50:	200010d8 	.word	0x200010d8
 8001e54:	200010b8 	.word	0x200010b8
 8001e58:	200010ba 	.word	0x200010ba
 8001e5c:	200010bc 	.word	0x200010bc
 8001e60:	200010b9 	.word	0x200010b9
 8001e64:	200010bb 	.word	0x200010bb
 8001e68:	200010bd 	.word	0x200010bd
 8001e6c:	200010c2 	.word	0x200010c2
 8001e70:	200010c8 	.word	0x200010c8
 8001e74:	200010c3 	.word	0x200010c3
 8001e78:	200010cc 	.word	0x200010cc
 8001e7c:	200010ac 	.word	0x200010ac
 8001e80:	200010b0 	.word	0x200010b0
 8001e84:	200010ae 	.word	0x200010ae
 8001e88:	200010ad 	.word	0x200010ad
 8001e8c:	200010b1 	.word	0x200010b1
 8001e90:	200010af 	.word	0x200010af
 8001e94:	200010c1 	.word	0x200010c1
 8001e98:	0800fc38 	.word	0x0800fc38
 8001e9c:	20000c9c 	.word	0x20000c9c
 8001ea0:	20000bf4 	.word	0x20000bf4

08001ea4 <Flash_write_info>:

void Flash_write_info() {
 8001ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ea6:	b08b      	sub	sp, #44	; 0x2c
 8001ea8:	af08      	add	r7, sp, #32
	sprintf((char*) flash_data, "%d %d %d %d %d %d %d %d %d %d", door1, d_mod,
 8001eaa:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <Flash_write_info+0x84>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	469c      	mov	ip, r3
 8001eb0:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <Flash_write_info+0x88>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	469e      	mov	lr, r3
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <Flash_write_info+0x8c>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <Flash_write_info+0x90>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <Flash_write_info+0x94>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <Flash_write_info+0x98>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	461c      	mov	r4, r3
 8001ece:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <Flash_write_info+0x9c>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	461d      	mov	r5, r3
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <Flash_write_info+0xa0>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	461e      	mov	r6, r3
 8001eda:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <Flash_write_info+0xa4>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <Flash_write_info+0xa8>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	9307      	str	r3, [sp, #28]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	9306      	str	r3, [sp, #24]
 8001eea:	9605      	str	r6, [sp, #20]
 8001eec:	9504      	str	r5, [sp, #16]
 8001eee:	9403      	str	r4, [sp, #12]
 8001ef0:	9002      	str	r0, [sp, #8]
 8001ef2:	9101      	str	r1, [sp, #4]
 8001ef4:	9200      	str	r2, [sp, #0]
 8001ef6:	4673      	mov	r3, lr
 8001ef8:	4662      	mov	r2, ip
 8001efa:	4915      	ldr	r1, [pc, #84]	; (8001f50 <Flash_write_info+0xac>)
 8001efc:	4815      	ldr	r0, [pc, #84]	; (8001f54 <Flash_write_info+0xb0>)
 8001efe:	f006 fb9f 	bl	8008640 <sprintf>
			door2, d_mod_2, fan1, fan2, led1, led_mod, led2, led_mod_2);
	W25Q32_erase4k(SECTOR_USE * SECTOR_SIZE);
 8001f02:	f44f 3024 	mov.w	r0, #167936	; 0x29000
 8001f06:	f7ff f9fd 	bl	8001304 <W25Q32_erase4k>
	W25Q32_WriteData(flash_data, SECTOR_USE * SECTOR_SIZE,
			strlen((char*) flash_data));
 8001f0a:	4812      	ldr	r0, [pc, #72]	; (8001f54 <Flash_write_info+0xb0>)
 8001f0c:	f7fe f968 	bl	80001e0 <strlen>
 8001f10:	4603      	mov	r3, r0
	W25Q32_WriteData(flash_data, SECTOR_USE * SECTOR_SIZE,
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	f44f 3124 	mov.w	r1, #167936	; 0x29000
 8001f1a:	480e      	ldr	r0, [pc, #56]	; (8001f54 <Flash_write_info+0xb0>)
 8001f1c:	f7ff f992 	bl	8001244 <W25Q32_WriteData>
//	HAL_UART_Transmit(&huart1, flash_data, strlen((char*) flash_data), 200);
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f28:	200010b8 	.word	0x200010b8
 8001f2c:	200010ba 	.word	0x200010ba
 8001f30:	200010b9 	.word	0x200010b9
 8001f34:	200010bb 	.word	0x200010bb
 8001f38:	200010c2 	.word	0x200010c2
 8001f3c:	200010c3 	.word	0x200010c3
 8001f40:	200010ac 	.word	0x200010ac
 8001f44:	200010b0 	.word	0x200010b0
 8001f48:	200010ad 	.word	0x200010ad
 8001f4c:	200010b1 	.word	0x200010b1
 8001f50:	0800fcc8 	.word	0x0800fcc8
 8001f54:	200010f8 	.word	0x200010f8

08001f58 <Flash_get_info>:

void Flash_get_info() {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af08      	add	r7, sp, #32
	W25Q32_ReadData(flash_data, SECTOR_USE * SECTOR_SIZE, 19);
 8001f5e:	2213      	movs	r2, #19
 8001f60:	f44f 3124 	mov.w	r1, #167936	; 0x29000
 8001f64:	480d      	ldr	r0, [pc, #52]	; (8001f9c <Flash_get_info+0x44>)
 8001f66:	f7ff f92b 	bl	80011c0 <W25Q32_ReadData>
//	HAL_UART_Transmit(&huart1, flash_data, strlen((char*) flash_data), 200);
//	sscanf((char*) flash_data, "%d %d %d %d %d %d %d %d %d %d",
//			&door1, &d_mod, &door2, &d_mod_2,
//			&fan1, &fan2, &led1, &led_mod,
//			&led2, &led_mod_2);
	sscanf((char*) flash_data,
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <Flash_get_info+0x48>)
 8001f6c:	9307      	str	r3, [sp, #28]
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <Flash_get_info+0x4c>)
 8001f70:	9306      	str	r3, [sp, #24]
 8001f72:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <Flash_get_info+0x50>)
 8001f74:	9305      	str	r3, [sp, #20]
 8001f76:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <Flash_get_info+0x54>)
 8001f78:	9304      	str	r3, [sp, #16]
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <Flash_get_info+0x58>)
 8001f7c:	9303      	str	r3, [sp, #12]
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <Flash_get_info+0x5c>)
 8001f80:	9302      	str	r3, [sp, #8]
 8001f82:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <Flash_get_info+0x60>)
 8001f84:	9301      	str	r3, [sp, #4]
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <Flash_get_info+0x64>)
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <Flash_get_info+0x68>)
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	; (8001fc4 <Flash_get_info+0x6c>)
 8001f8e:	490e      	ldr	r1, [pc, #56]	; (8001fc8 <Flash_get_info+0x70>)
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <Flash_get_info+0x44>)
 8001f92:	f006 fb75 	bl	8008680 <sscanf>
			"%hhu %hhu %hhu %hhu %hhu %hhu %hhu %hhu %hhu %hhu", &door1, &d_mod,
			&door2, &d_mod_2, &fan1, &fan2, &led1, &led_mod, &led2, &led_mod_2);
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	200010f8 	.word	0x200010f8
 8001fa0:	200010b1 	.word	0x200010b1
 8001fa4:	200010ad 	.word	0x200010ad
 8001fa8:	200010b0 	.word	0x200010b0
 8001fac:	200010ac 	.word	0x200010ac
 8001fb0:	200010c3 	.word	0x200010c3
 8001fb4:	200010c2 	.word	0x200010c2
 8001fb8:	200010bb 	.word	0x200010bb
 8001fbc:	200010b9 	.word	0x200010b9
 8001fc0:	200010ba 	.word	0x200010ba
 8001fc4:	200010b8 	.word	0x200010b8
 8001fc8:	0800fce8 	.word	0x0800fce8

08001fcc <Send_data>:

void Send_data() {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
	if (g_sys_tick - dur_tick >= DURATION) {
 8001fd0:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <Send_data+0x28>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <Send_data+0x2c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f247 522f 	movw	r2, #29999	; 0x752f
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d905      	bls.n	8001fee <Send_data+0x22>
		Response();
 8001fe2:	f7ff fea9 	bl	8001d38 <Response>
		dur_tick = g_sys_tick;
 8001fe6:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <Send_data+0x28>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a03      	ldr	r2, [pc, #12]	; (8001ff8 <Send_data+0x2c>)
 8001fec:	6013      	str	r3, [r2, #0]
	}
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200010a0 	.word	0x200010a0
 8001ff8:	200010a4 	.word	0x200010a4

08001ffc <Handle_Command>:

void Handle_Command() {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	if (g_sys_tick - uart_last_rcv >= 20 && strlen((char*) uart_buf) >= 7) {
 8002000:	4ba0      	ldr	r3, [pc, #640]	; (8002284 <Handle_Command+0x288>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4aa0      	ldr	r2, [pc, #640]	; (8002288 <Handle_Command+0x28c>)
 8002006:	7812      	ldrb	r2, [r2, #0]
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	2b13      	cmp	r3, #19
 800200c:	f240 8404 	bls.w	8002818 <Handle_Command+0x81c>
 8002010:	489e      	ldr	r0, [pc, #632]	; (800228c <Handle_Command+0x290>)
 8002012:	f7fe f8e5 	bl	80001e0 <strlen>
 8002016:	4603      	mov	r3, r0
 8002018:	2b06      	cmp	r3, #6
 800201a:	f240 83fd 	bls.w	8002818 <Handle_Command+0x81c>
		// LIGHT command
		HAL_UART_Transmit(&huart1, uart_buf, strlen((char*) uart_buf), 200);
 800201e:	489b      	ldr	r0, [pc, #620]	; (800228c <Handle_Command+0x290>)
 8002020:	f7fe f8de 	bl	80001e0 <strlen>
 8002024:	4603      	mov	r3, r0
 8002026:	b29a      	uxth	r2, r3
 8002028:	23c8      	movs	r3, #200	; 0xc8
 800202a:	4998      	ldr	r1, [pc, #608]	; (800228c <Handle_Command+0x290>)
 800202c:	4898      	ldr	r0, [pc, #608]	; (8002290 <Handle_Command+0x294>)
 800202e:	f005 f83e 	bl	80070ae <HAL_UART_Transmit>
		if (strlen((char*) uart_buf) == 7
 8002032:	4896      	ldr	r0, [pc, #600]	; (800228c <Handle_Command+0x290>)
 8002034:	f7fe f8d4 	bl	80001e0 <strlen>
 8002038:	4603      	mov	r3, r0
 800203a:	2b07      	cmp	r3, #7
 800203c:	d129      	bne.n	8002092 <Handle_Command+0x96>
				&& strncmp((char*) uart_buf, "c:l:1:", 6) == 0) {
 800203e:	2206      	movs	r2, #6
 8002040:	4994      	ldr	r1, [pc, #592]	; (8002294 <Handle_Command+0x298>)
 8002042:	4892      	ldr	r0, [pc, #584]	; (800228c <Handle_Command+0x290>)
 8002044:	f006 fb8d 	bl	8008762 <strncmp>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d121      	bne.n	8002092 <Handle_Command+0x96>
			led1 = atoi((char*) uart_buf + 6);
 800204e:	4b92      	ldr	r3, [pc, #584]	; (8002298 <Handle_Command+0x29c>)
 8002050:	4618      	mov	r0, r3
 8002052:	f006 f857 	bl	8008104 <atoi>
 8002056:	4603      	mov	r3, r0
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4b90      	ldr	r3, [pc, #576]	; (800229c <Handle_Command+0x2a0>)
 800205c:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 800205e:	f000 fe97 	bl	8002d90 <clear_uart_buf>
			if (isDebug) {
 8002062:	4b8f      	ldr	r3, [pc, #572]	; (80022a0 <Handle_Command+0x2a4>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d010      	beq.n	800208c <Handle_Command+0x90>
				sprintf((char*) tx, "LED 1 active: %d\n", led1);
 800206a:	4b8c      	ldr	r3, [pc, #560]	; (800229c <Handle_Command+0x2a0>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	498c      	ldr	r1, [pc, #560]	; (80022a4 <Handle_Command+0x2a8>)
 8002072:	488d      	ldr	r0, [pc, #564]	; (80022a8 <Handle_Command+0x2ac>)
 8002074:	f006 fae4 	bl	8008640 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002078:	488b      	ldr	r0, [pc, #556]	; (80022a8 <Handle_Command+0x2ac>)
 800207a:	f7fe f8b1 	bl	80001e0 <strlen>
 800207e:	4603      	mov	r3, r0
 8002080:	b29a      	uxth	r2, r3
 8002082:	23c8      	movs	r3, #200	; 0xc8
 8002084:	4988      	ldr	r1, [pc, #544]	; (80022a8 <Handle_Command+0x2ac>)
 8002086:	4882      	ldr	r0, [pc, #520]	; (8002290 <Handle_Command+0x294>)
 8002088:	f005 f811 	bl	80070ae <HAL_UART_Transmit>
			}
			Response();
 800208c:	f7ff fe54 	bl	8001d38 <Response>
 8002090:	e3c2      	b.n	8002818 <Handle_Command+0x81c>
		} else if (strlen((char*) uart_buf) == 7
 8002092:	487e      	ldr	r0, [pc, #504]	; (800228c <Handle_Command+0x290>)
 8002094:	f7fe f8a4 	bl	80001e0 <strlen>
 8002098:	4603      	mov	r3, r0
 800209a:	2b07      	cmp	r3, #7
 800209c:	d129      	bne.n	80020f2 <Handle_Command+0xf6>
				&& strncmp((char*) uart_buf, "c:l:2:", 6) == 0) {
 800209e:	2206      	movs	r2, #6
 80020a0:	4982      	ldr	r1, [pc, #520]	; (80022ac <Handle_Command+0x2b0>)
 80020a2:	487a      	ldr	r0, [pc, #488]	; (800228c <Handle_Command+0x290>)
 80020a4:	f006 fb5d 	bl	8008762 <strncmp>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d121      	bne.n	80020f2 <Handle_Command+0xf6>
			led2 = atoi((char*) uart_buf + 6);
 80020ae:	4b7a      	ldr	r3, [pc, #488]	; (8002298 <Handle_Command+0x29c>)
 80020b0:	4618      	mov	r0, r3
 80020b2:	f006 f827 	bl	8008104 <atoi>
 80020b6:	4603      	mov	r3, r0
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4b7d      	ldr	r3, [pc, #500]	; (80022b0 <Handle_Command+0x2b4>)
 80020bc:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 80020be:	f000 fe67 	bl	8002d90 <clear_uart_buf>
			if (isDebug) {
 80020c2:	4b77      	ldr	r3, [pc, #476]	; (80022a0 <Handle_Command+0x2a4>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d010      	beq.n	80020ec <Handle_Command+0xf0>
				sprintf((char*) tx, "LED 2 active: %d\n", led2);
 80020ca:	4b79      	ldr	r3, [pc, #484]	; (80022b0 <Handle_Command+0x2b4>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	4978      	ldr	r1, [pc, #480]	; (80022b4 <Handle_Command+0x2b8>)
 80020d2:	4875      	ldr	r0, [pc, #468]	; (80022a8 <Handle_Command+0x2ac>)
 80020d4:	f006 fab4 	bl	8008640 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 80020d8:	4873      	ldr	r0, [pc, #460]	; (80022a8 <Handle_Command+0x2ac>)
 80020da:	f7fe f881 	bl	80001e0 <strlen>
 80020de:	4603      	mov	r3, r0
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	23c8      	movs	r3, #200	; 0xc8
 80020e4:	4970      	ldr	r1, [pc, #448]	; (80022a8 <Handle_Command+0x2ac>)
 80020e6:	486a      	ldr	r0, [pc, #424]	; (8002290 <Handle_Command+0x294>)
 80020e8:	f004 ffe1 	bl	80070ae <HAL_UART_Transmit>
			}
			Response();
 80020ec:	f7ff fe24 	bl	8001d38 <Response>
 80020f0:	e392      	b.n	8002818 <Handle_Command+0x81c>
		} else if (strncmp((char*) uart_buf, "c:l:1:m:", 8) == 0
 80020f2:	2208      	movs	r2, #8
 80020f4:	4970      	ldr	r1, [pc, #448]	; (80022b8 <Handle_Command+0x2bc>)
 80020f6:	4865      	ldr	r0, [pc, #404]	; (800228c <Handle_Command+0x290>)
 80020f8:	f006 fb33 	bl	8008762 <strncmp>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d129      	bne.n	8002156 <Handle_Command+0x15a>
				&& strlen((char*) uart_buf) == 9) {
 8002102:	4862      	ldr	r0, [pc, #392]	; (800228c <Handle_Command+0x290>)
 8002104:	f7fe f86c 	bl	80001e0 <strlen>
 8002108:	4603      	mov	r3, r0
 800210a:	2b09      	cmp	r3, #9
 800210c:	d123      	bne.n	8002156 <Handle_Command+0x15a>
			l_done = 1;
 800210e:	4b6b      	ldr	r3, [pc, #428]	; (80022bc <Handle_Command+0x2c0>)
 8002110:	2201      	movs	r2, #1
 8002112:	701a      	strb	r2, [r3, #0]
			led_mod = atoi((char*) uart_buf + 8);
 8002114:	4b6a      	ldr	r3, [pc, #424]	; (80022c0 <Handle_Command+0x2c4>)
 8002116:	4618      	mov	r0, r3
 8002118:	f005 fff4 	bl	8008104 <atoi>
 800211c:	4603      	mov	r3, r0
 800211e:	b2da      	uxtb	r2, r3
 8002120:	4b68      	ldr	r3, [pc, #416]	; (80022c4 <Handle_Command+0x2c8>)
 8002122:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 8002124:	f000 fe34 	bl	8002d90 <clear_uart_buf>
			if (isDebug) {
 8002128:	4b5d      	ldr	r3, [pc, #372]	; (80022a0 <Handle_Command+0x2a4>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 8373 	beq.w	8002818 <Handle_Command+0x81c>
				sprintf((char*) tx, "LED 1 mode: %d\n", led_mod);
 8002132:	4b64      	ldr	r3, [pc, #400]	; (80022c4 <Handle_Command+0x2c8>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	4963      	ldr	r1, [pc, #396]	; (80022c8 <Handle_Command+0x2cc>)
 800213a:	485b      	ldr	r0, [pc, #364]	; (80022a8 <Handle_Command+0x2ac>)
 800213c:	f006 fa80 	bl	8008640 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002140:	4859      	ldr	r0, [pc, #356]	; (80022a8 <Handle_Command+0x2ac>)
 8002142:	f7fe f84d 	bl	80001e0 <strlen>
 8002146:	4603      	mov	r3, r0
 8002148:	b29a      	uxth	r2, r3
 800214a:	23c8      	movs	r3, #200	; 0xc8
 800214c:	4956      	ldr	r1, [pc, #344]	; (80022a8 <Handle_Command+0x2ac>)
 800214e:	4850      	ldr	r0, [pc, #320]	; (8002290 <Handle_Command+0x294>)
 8002150:	f004 ffad 	bl	80070ae <HAL_UART_Transmit>
			if (isDebug) {
 8002154:	e360      	b.n	8002818 <Handle_Command+0x81c>
			}
		} else if (strlen((char*) uart_buf) == 9
 8002156:	484d      	ldr	r0, [pc, #308]	; (800228c <Handle_Command+0x290>)
 8002158:	f7fe f842 	bl	80001e0 <strlen>
 800215c:	4603      	mov	r3, r0
 800215e:	2b09      	cmp	r3, #9
 8002160:	d12b      	bne.n	80021ba <Handle_Command+0x1be>
				&& strncmp((char*) uart_buf, "c:l:2:m:", 8) == 0) {
 8002162:	2208      	movs	r2, #8
 8002164:	4959      	ldr	r1, [pc, #356]	; (80022cc <Handle_Command+0x2d0>)
 8002166:	4849      	ldr	r0, [pc, #292]	; (800228c <Handle_Command+0x290>)
 8002168:	f006 fafb 	bl	8008762 <strncmp>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d123      	bne.n	80021ba <Handle_Command+0x1be>
			l_done_2 = 1;
 8002172:	4b57      	ldr	r3, [pc, #348]	; (80022d0 <Handle_Command+0x2d4>)
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
			led_mod_2 = atoi((char*) uart_buf + 8);
 8002178:	4b51      	ldr	r3, [pc, #324]	; (80022c0 <Handle_Command+0x2c4>)
 800217a:	4618      	mov	r0, r3
 800217c:	f005 ffc2 	bl	8008104 <atoi>
 8002180:	4603      	mov	r3, r0
 8002182:	b2da      	uxtb	r2, r3
 8002184:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <Handle_Command+0x2d8>)
 8002186:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 8002188:	f000 fe02 	bl	8002d90 <clear_uart_buf>
			if (isDebug) {
 800218c:	4b44      	ldr	r3, [pc, #272]	; (80022a0 <Handle_Command+0x2a4>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 8341 	beq.w	8002818 <Handle_Command+0x81c>
				sprintf((char*) tx, "LED 2 mode: %d\n", led_mod_2);
 8002196:	4b4f      	ldr	r3, [pc, #316]	; (80022d4 <Handle_Command+0x2d8>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	494e      	ldr	r1, [pc, #312]	; (80022d8 <Handle_Command+0x2dc>)
 800219e:	4842      	ldr	r0, [pc, #264]	; (80022a8 <Handle_Command+0x2ac>)
 80021a0:	f006 fa4e 	bl	8008640 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 80021a4:	4840      	ldr	r0, [pc, #256]	; (80022a8 <Handle_Command+0x2ac>)
 80021a6:	f7fe f81b 	bl	80001e0 <strlen>
 80021aa:	4603      	mov	r3, r0
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	23c8      	movs	r3, #200	; 0xc8
 80021b0:	493d      	ldr	r1, [pc, #244]	; (80022a8 <Handle_Command+0x2ac>)
 80021b2:	4837      	ldr	r0, [pc, #220]	; (8002290 <Handle_Command+0x294>)
 80021b4:	f004 ff7b 	bl	80070ae <HAL_UART_Transmit>
			if (isDebug) {
 80021b8:	e32e      	b.n	8002818 <Handle_Command+0x81c>
			}
		} else if (strlen((char*) uart_buf) == 9
 80021ba:	4834      	ldr	r0, [pc, #208]	; (800228c <Handle_Command+0x290>)
 80021bc:	f7fe f810 	bl	80001e0 <strlen>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b09      	cmp	r3, #9
 80021c4:	d12b      	bne.n	800221e <Handle_Command+0x222>
				&& strncmp((char*) uart_buf, "c:l:1:s:", 8) == 0) {
 80021c6:	2208      	movs	r2, #8
 80021c8:	4944      	ldr	r1, [pc, #272]	; (80022dc <Handle_Command+0x2e0>)
 80021ca:	4830      	ldr	r0, [pc, #192]	; (800228c <Handle_Command+0x290>)
 80021cc:	f006 fac9 	bl	8008762 <strncmp>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d123      	bne.n	800221e <Handle_Command+0x222>
			l_done = 1;
 80021d6:	4b39      	ldr	r3, [pc, #228]	; (80022bc <Handle_Command+0x2c0>)
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
			led_state = atoi((char*) uart_buf + 8);
 80021dc:	4b38      	ldr	r3, [pc, #224]	; (80022c0 <Handle_Command+0x2c4>)
 80021de:	4618      	mov	r0, r3
 80021e0:	f005 ff90 	bl	8008104 <atoi>
 80021e4:	4603      	mov	r3, r0
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	4b3d      	ldr	r3, [pc, #244]	; (80022e0 <Handle_Command+0x2e4>)
 80021ea:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 80021ec:	f000 fdd0 	bl	8002d90 <clear_uart_buf>
			if (isDebug) {
 80021f0:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <Handle_Command+0x2a4>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 830f 	beq.w	8002818 <Handle_Command+0x81c>
				sprintf((char*) tx, "LED 1 state: %d\n", led_state);
 80021fa:	4b39      	ldr	r3, [pc, #228]	; (80022e0 <Handle_Command+0x2e4>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	4938      	ldr	r1, [pc, #224]	; (80022e4 <Handle_Command+0x2e8>)
 8002202:	4829      	ldr	r0, [pc, #164]	; (80022a8 <Handle_Command+0x2ac>)
 8002204:	f006 fa1c 	bl	8008640 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002208:	4827      	ldr	r0, [pc, #156]	; (80022a8 <Handle_Command+0x2ac>)
 800220a:	f7fd ffe9 	bl	80001e0 <strlen>
 800220e:	4603      	mov	r3, r0
 8002210:	b29a      	uxth	r2, r3
 8002212:	23c8      	movs	r3, #200	; 0xc8
 8002214:	4924      	ldr	r1, [pc, #144]	; (80022a8 <Handle_Command+0x2ac>)
 8002216:	481e      	ldr	r0, [pc, #120]	; (8002290 <Handle_Command+0x294>)
 8002218:	f004 ff49 	bl	80070ae <HAL_UART_Transmit>
			if (isDebug) {
 800221c:	e2fc      	b.n	8002818 <Handle_Command+0x81c>
			}
		} else if (strlen((char*) uart_buf) == 9
 800221e:	481b      	ldr	r0, [pc, #108]	; (800228c <Handle_Command+0x290>)
 8002220:	f7fd ffde 	bl	80001e0 <strlen>
 8002224:	4603      	mov	r3, r0
 8002226:	2b09      	cmp	r3, #9
 8002228:	d164      	bne.n	80022f4 <Handle_Command+0x2f8>
				&& strncmp((char*) uart_buf, "c:l:2:s:", 8) == 0) {
 800222a:	2208      	movs	r2, #8
 800222c:	492e      	ldr	r1, [pc, #184]	; (80022e8 <Handle_Command+0x2ec>)
 800222e:	4817      	ldr	r0, [pc, #92]	; (800228c <Handle_Command+0x290>)
 8002230:	f006 fa97 	bl	8008762 <strncmp>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d15c      	bne.n	80022f4 <Handle_Command+0x2f8>
			l_done_2 = 1;
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <Handle_Command+0x2d4>)
 800223c:	2201      	movs	r2, #1
 800223e:	701a      	strb	r2, [r3, #0]
			led_state_2 = atoi((char*) uart_buf + 8);
 8002240:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <Handle_Command+0x2c4>)
 8002242:	4618      	mov	r0, r3
 8002244:	f005 ff5e 	bl	8008104 <atoi>
 8002248:	4603      	mov	r3, r0
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4b27      	ldr	r3, [pc, #156]	; (80022ec <Handle_Command+0x2f0>)
 800224e:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 8002250:	f000 fd9e 	bl	8002d90 <clear_uart_buf>
			if (isDebug) {
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <Handle_Command+0x2a4>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 82dd 	beq.w	8002818 <Handle_Command+0x81c>
				sprintf((char*) tx, "LED 2 state: %d\n", led_state_2);
 800225e:	4b23      	ldr	r3, [pc, #140]	; (80022ec <Handle_Command+0x2f0>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	4922      	ldr	r1, [pc, #136]	; (80022f0 <Handle_Command+0x2f4>)
 8002266:	4810      	ldr	r0, [pc, #64]	; (80022a8 <Handle_Command+0x2ac>)
 8002268:	f006 f9ea 	bl	8008640 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 800226c:	480e      	ldr	r0, [pc, #56]	; (80022a8 <Handle_Command+0x2ac>)
 800226e:	f7fd ffb7 	bl	80001e0 <strlen>
 8002272:	4603      	mov	r3, r0
 8002274:	b29a      	uxth	r2, r3
 8002276:	23c8      	movs	r3, #200	; 0xc8
 8002278:	490b      	ldr	r1, [pc, #44]	; (80022a8 <Handle_Command+0x2ac>)
 800227a:	4805      	ldr	r0, [pc, #20]	; (8002290 <Handle_Command+0x294>)
 800227c:	f004 ff17 	bl	80070ae <HAL_UART_Transmit>
			if (isDebug) {
 8002280:	e2ca      	b.n	8002818 <Handle_Command+0x81c>
 8002282:	bf00      	nop
 8002284:	200010a0 	.word	0x200010a0
 8002288:	2000109e 	.word	0x2000109e
 800228c:	20000c38 	.word	0x20000c38
 8002290:	20000bf4 	.word	0x20000bf4
 8002294:	0800fd1c 	.word	0x0800fd1c
 8002298:	20000c3e 	.word	0x20000c3e
 800229c:	200010ac 	.word	0x200010ac
 80022a0:	2000115c 	.word	0x2000115c
 80022a4:	0800fd24 	.word	0x0800fd24
 80022a8:	20000c9c 	.word	0x20000c9c
 80022ac:	0800fd38 	.word	0x0800fd38
 80022b0:	200010ad 	.word	0x200010ad
 80022b4:	0800fd40 	.word	0x0800fd40
 80022b8:	0800fd54 	.word	0x0800fd54
 80022bc:	200010b2 	.word	0x200010b2
 80022c0:	20000c40 	.word	0x20000c40
 80022c4:	200010b0 	.word	0x200010b0
 80022c8:	0800fd60 	.word	0x0800fd60
 80022cc:	0800fd70 	.word	0x0800fd70
 80022d0:	200010b3 	.word	0x200010b3
 80022d4:	200010b1 	.word	0x200010b1
 80022d8:	0800fd7c 	.word	0x0800fd7c
 80022dc:	0800fd8c 	.word	0x0800fd8c
 80022e0:	200010ae 	.word	0x200010ae
 80022e4:	0800fd98 	.word	0x0800fd98
 80022e8:	0800fdac 	.word	0x0800fdac
 80022ec:	200010af 	.word	0x200010af
 80022f0:	0800fdb8 	.word	0x0800fdb8
			}
		}

		// FAN command
		else if (strlen((char*) uart_buf) == 7
 80022f4:	48aa      	ldr	r0, [pc, #680]	; (80025a0 <Handle_Command+0x5a4>)
 80022f6:	f7fd ff73 	bl	80001e0 <strlen>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b07      	cmp	r3, #7
 80022fe:	d129      	bne.n	8002354 <Handle_Command+0x358>
				&& strncmp((char*) uart_buf, "c:f:1:", 6) == 0) {
 8002300:	2206      	movs	r2, #6
 8002302:	49a8      	ldr	r1, [pc, #672]	; (80025a4 <Handle_Command+0x5a8>)
 8002304:	48a6      	ldr	r0, [pc, #664]	; (80025a0 <Handle_Command+0x5a4>)
 8002306:	f006 fa2c 	bl	8008762 <strncmp>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d121      	bne.n	8002354 <Handle_Command+0x358>
			fan1 = atoi((char*) uart_buf + 6);
 8002310:	4ba5      	ldr	r3, [pc, #660]	; (80025a8 <Handle_Command+0x5ac>)
 8002312:	4618      	mov	r0, r3
 8002314:	f005 fef6 	bl	8008104 <atoi>
 8002318:	4603      	mov	r3, r0
 800231a:	b2da      	uxtb	r2, r3
 800231c:	4ba3      	ldr	r3, [pc, #652]	; (80025ac <Handle_Command+0x5b0>)
 800231e:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 8002320:	f000 fd36 	bl	8002d90 <clear_uart_buf>
			if (isDebug) {
 8002324:	4ba2      	ldr	r3, [pc, #648]	; (80025b0 <Handle_Command+0x5b4>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d010      	beq.n	800234e <Handle_Command+0x352>
				sprintf((char*) tx, "fan 1 active: %d\n", fan1);
 800232c:	4b9f      	ldr	r3, [pc, #636]	; (80025ac <Handle_Command+0x5b0>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	49a0      	ldr	r1, [pc, #640]	; (80025b4 <Handle_Command+0x5b8>)
 8002334:	48a0      	ldr	r0, [pc, #640]	; (80025b8 <Handle_Command+0x5bc>)
 8002336:	f006 f983 	bl	8008640 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 800233a:	489f      	ldr	r0, [pc, #636]	; (80025b8 <Handle_Command+0x5bc>)
 800233c:	f7fd ff50 	bl	80001e0 <strlen>
 8002340:	4603      	mov	r3, r0
 8002342:	b29a      	uxth	r2, r3
 8002344:	23c8      	movs	r3, #200	; 0xc8
 8002346:	499c      	ldr	r1, [pc, #624]	; (80025b8 <Handle_Command+0x5bc>)
 8002348:	489c      	ldr	r0, [pc, #624]	; (80025bc <Handle_Command+0x5c0>)
 800234a:	f004 feb0 	bl	80070ae <HAL_UART_Transmit>
			}
			Response();
 800234e:	f7ff fcf3 	bl	8001d38 <Response>
 8002352:	e261      	b.n	8002818 <Handle_Command+0x81c>
		} else if (strlen((char*) uart_buf) == 7
 8002354:	4892      	ldr	r0, [pc, #584]	; (80025a0 <Handle_Command+0x5a4>)
 8002356:	f7fd ff43 	bl	80001e0 <strlen>
 800235a:	4603      	mov	r3, r0
 800235c:	2b07      	cmp	r3, #7
 800235e:	d129      	bne.n	80023b4 <Handle_Command+0x3b8>
				&& strncmp((char*) uart_buf, "c:f:2:", 6) == 0) {
 8002360:	2206      	movs	r2, #6
 8002362:	4997      	ldr	r1, [pc, #604]	; (80025c0 <Handle_Command+0x5c4>)
 8002364:	488e      	ldr	r0, [pc, #568]	; (80025a0 <Handle_Command+0x5a4>)
 8002366:	f006 f9fc 	bl	8008762 <strncmp>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d121      	bne.n	80023b4 <Handle_Command+0x3b8>
			fan2 = atoi((char*) uart_buf + 6);
 8002370:	4b8d      	ldr	r3, [pc, #564]	; (80025a8 <Handle_Command+0x5ac>)
 8002372:	4618      	mov	r0, r3
 8002374:	f005 fec6 	bl	8008104 <atoi>
 8002378:	4603      	mov	r3, r0
 800237a:	b2da      	uxtb	r2, r3
 800237c:	4b91      	ldr	r3, [pc, #580]	; (80025c4 <Handle_Command+0x5c8>)
 800237e:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 8002380:	f000 fd06 	bl	8002d90 <clear_uart_buf>
			if (isDebug) {
 8002384:	4b8a      	ldr	r3, [pc, #552]	; (80025b0 <Handle_Command+0x5b4>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d010      	beq.n	80023ae <Handle_Command+0x3b2>
				sprintf((char*) tx, "fan 2 active: %d\n", fan2);
 800238c:	4b8d      	ldr	r3, [pc, #564]	; (80025c4 <Handle_Command+0x5c8>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	498d      	ldr	r1, [pc, #564]	; (80025c8 <Handle_Command+0x5cc>)
 8002394:	4888      	ldr	r0, [pc, #544]	; (80025b8 <Handle_Command+0x5bc>)
 8002396:	f006 f953 	bl	8008640 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 800239a:	4887      	ldr	r0, [pc, #540]	; (80025b8 <Handle_Command+0x5bc>)
 800239c:	f7fd ff20 	bl	80001e0 <strlen>
 80023a0:	4603      	mov	r3, r0
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	23c8      	movs	r3, #200	; 0xc8
 80023a6:	4984      	ldr	r1, [pc, #528]	; (80025b8 <Handle_Command+0x5bc>)
 80023a8:	4884      	ldr	r0, [pc, #528]	; (80025bc <Handle_Command+0x5c0>)
 80023aa:	f004 fe80 	bl	80070ae <HAL_UART_Transmit>
			}
			Response();
 80023ae:	f7ff fcc3 	bl	8001d38 <Response>
 80023b2:	e231      	b.n	8002818 <Handle_Command+0x81c>
		} else if (strlen((char*) uart_buf) == 9
 80023b4:	487a      	ldr	r0, [pc, #488]	; (80025a0 <Handle_Command+0x5a4>)
 80023b6:	f7fd ff13 	bl	80001e0 <strlen>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b09      	cmp	r3, #9
 80023be:	d12b      	bne.n	8002418 <Handle_Command+0x41c>
				&& strncmp((char*) uart_buf, "c:f:1:s:", 8) == 0) {
 80023c0:	2208      	movs	r2, #8
 80023c2:	4982      	ldr	r1, [pc, #520]	; (80025cc <Handle_Command+0x5d0>)
 80023c4:	4876      	ldr	r0, [pc, #472]	; (80025a0 <Handle_Command+0x5a4>)
 80023c6:	f006 f9cc 	bl	8008762 <strncmp>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d123      	bne.n	8002418 <Handle_Command+0x41c>
			f_done = 1;
 80023d0:	4b7f      	ldr	r3, [pc, #508]	; (80025d0 <Handle_Command+0x5d4>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
			speed = atoi((char*) uart_buf + 8);
 80023d6:	4b7f      	ldr	r3, [pc, #508]	; (80025d4 <Handle_Command+0x5d8>)
 80023d8:	4618      	mov	r0, r3
 80023da:	f005 fe93 	bl	8008104 <atoi>
 80023de:	4603      	mov	r3, r0
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4b7d      	ldr	r3, [pc, #500]	; (80025d8 <Handle_Command+0x5dc>)
 80023e4:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 80023e6:	f000 fcd3 	bl	8002d90 <clear_uart_buf>
			if (isDebug) {
 80023ea:	4b71      	ldr	r3, [pc, #452]	; (80025b0 <Handle_Command+0x5b4>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 8212 	beq.w	8002818 <Handle_Command+0x81c>
				sprintf((char*) tx, "fan 1 speed: %d\n", speed);
 80023f4:	4b78      	ldr	r3, [pc, #480]	; (80025d8 <Handle_Command+0x5dc>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4978      	ldr	r1, [pc, #480]	; (80025dc <Handle_Command+0x5e0>)
 80023fc:	486e      	ldr	r0, [pc, #440]	; (80025b8 <Handle_Command+0x5bc>)
 80023fe:	f006 f91f 	bl	8008640 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002402:	486d      	ldr	r0, [pc, #436]	; (80025b8 <Handle_Command+0x5bc>)
 8002404:	f7fd feec 	bl	80001e0 <strlen>
 8002408:	4603      	mov	r3, r0
 800240a:	b29a      	uxth	r2, r3
 800240c:	23c8      	movs	r3, #200	; 0xc8
 800240e:	496a      	ldr	r1, [pc, #424]	; (80025b8 <Handle_Command+0x5bc>)
 8002410:	486a      	ldr	r0, [pc, #424]	; (80025bc <Handle_Command+0x5c0>)
 8002412:	f004 fe4c 	bl	80070ae <HAL_UART_Transmit>
			if (isDebug) {
 8002416:	e1ff      	b.n	8002818 <Handle_Command+0x81c>
			}
		} else if (strlen((char*) uart_buf) == 9
 8002418:	4861      	ldr	r0, [pc, #388]	; (80025a0 <Handle_Command+0x5a4>)
 800241a:	f7fd fee1 	bl	80001e0 <strlen>
 800241e:	4603      	mov	r3, r0
 8002420:	2b09      	cmp	r3, #9
 8002422:	d12b      	bne.n	800247c <Handle_Command+0x480>
				&& strncmp((char*) uart_buf, "c:f:2:s:", 8) == 0) {
 8002424:	2208      	movs	r2, #8
 8002426:	496e      	ldr	r1, [pc, #440]	; (80025e0 <Handle_Command+0x5e4>)
 8002428:	485d      	ldr	r0, [pc, #372]	; (80025a0 <Handle_Command+0x5a4>)
 800242a:	f006 f99a 	bl	8008762 <strncmp>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d123      	bne.n	800247c <Handle_Command+0x480>
			f_done_2 = 1;
 8002434:	4b6b      	ldr	r3, [pc, #428]	; (80025e4 <Handle_Command+0x5e8>)
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
			speed_2 = atoi((char*) uart_buf + 8);
 800243a:	4b66      	ldr	r3, [pc, #408]	; (80025d4 <Handle_Command+0x5d8>)
 800243c:	4618      	mov	r0, r3
 800243e:	f005 fe61 	bl	8008104 <atoi>
 8002442:	4603      	mov	r3, r0
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4b68      	ldr	r3, [pc, #416]	; (80025e8 <Handle_Command+0x5ec>)
 8002448:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 800244a:	f000 fca1 	bl	8002d90 <clear_uart_buf>
			if (isDebug) {
 800244e:	4b58      	ldr	r3, [pc, #352]	; (80025b0 <Handle_Command+0x5b4>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 81e0 	beq.w	8002818 <Handle_Command+0x81c>
				sprintf((char*) tx, "fan 2 speed: %d\n", speed_2);
 8002458:	4b63      	ldr	r3, [pc, #396]	; (80025e8 <Handle_Command+0x5ec>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	4963      	ldr	r1, [pc, #396]	; (80025ec <Handle_Command+0x5f0>)
 8002460:	4855      	ldr	r0, [pc, #340]	; (80025b8 <Handle_Command+0x5bc>)
 8002462:	f006 f8ed 	bl	8008640 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002466:	4854      	ldr	r0, [pc, #336]	; (80025b8 <Handle_Command+0x5bc>)
 8002468:	f7fd feba 	bl	80001e0 <strlen>
 800246c:	4603      	mov	r3, r0
 800246e:	b29a      	uxth	r2, r3
 8002470:	23c8      	movs	r3, #200	; 0xc8
 8002472:	4951      	ldr	r1, [pc, #324]	; (80025b8 <Handle_Command+0x5bc>)
 8002474:	4851      	ldr	r0, [pc, #324]	; (80025bc <Handle_Command+0x5c0>)
 8002476:	f004 fe1a 	bl	80070ae <HAL_UART_Transmit>
			if (isDebug) {
 800247a:	e1cd      	b.n	8002818 <Handle_Command+0x81c>
			}
		}

		// DOOR command
		else if (strlen((char*) uart_buf) == 7
 800247c:	4848      	ldr	r0, [pc, #288]	; (80025a0 <Handle_Command+0x5a4>)
 800247e:	f7fd feaf 	bl	80001e0 <strlen>
 8002482:	4603      	mov	r3, r0
 8002484:	2b07      	cmp	r3, #7
 8002486:	d129      	bne.n	80024dc <Handle_Command+0x4e0>
				&& strncmp((char*) uart_buf, "c:d:1:", 6) == 0) {
 8002488:	2206      	movs	r2, #6
 800248a:	4959      	ldr	r1, [pc, #356]	; (80025f0 <Handle_Command+0x5f4>)
 800248c:	4844      	ldr	r0, [pc, #272]	; (80025a0 <Handle_Command+0x5a4>)
 800248e:	f006 f968 	bl	8008762 <strncmp>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d121      	bne.n	80024dc <Handle_Command+0x4e0>
			door1 = atoi((char*) uart_buf + 6);
 8002498:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <Handle_Command+0x5ac>)
 800249a:	4618      	mov	r0, r3
 800249c:	f005 fe32 	bl	8008104 <atoi>
 80024a0:	4603      	mov	r3, r0
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	4b53      	ldr	r3, [pc, #332]	; (80025f4 <Handle_Command+0x5f8>)
 80024a6:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 80024a8:	f000 fc72 	bl	8002d90 <clear_uart_buf>
			if (isDebug) {
 80024ac:	4b40      	ldr	r3, [pc, #256]	; (80025b0 <Handle_Command+0x5b4>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d010      	beq.n	80024d6 <Handle_Command+0x4da>
				sprintf((char*) tx, "door 1 active: %d\n", door1);
 80024b4:	4b4f      	ldr	r3, [pc, #316]	; (80025f4 <Handle_Command+0x5f8>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	494f      	ldr	r1, [pc, #316]	; (80025f8 <Handle_Command+0x5fc>)
 80024bc:	483e      	ldr	r0, [pc, #248]	; (80025b8 <Handle_Command+0x5bc>)
 80024be:	f006 f8bf 	bl	8008640 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 80024c2:	483d      	ldr	r0, [pc, #244]	; (80025b8 <Handle_Command+0x5bc>)
 80024c4:	f7fd fe8c 	bl	80001e0 <strlen>
 80024c8:	4603      	mov	r3, r0
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	23c8      	movs	r3, #200	; 0xc8
 80024ce:	493a      	ldr	r1, [pc, #232]	; (80025b8 <Handle_Command+0x5bc>)
 80024d0:	483a      	ldr	r0, [pc, #232]	; (80025bc <Handle_Command+0x5c0>)
 80024d2:	f004 fdec 	bl	80070ae <HAL_UART_Transmit>
			}
			Response();
 80024d6:	f7ff fc2f 	bl	8001d38 <Response>
 80024da:	e19d      	b.n	8002818 <Handle_Command+0x81c>
		} else if (strlen((char*) uart_buf) == 7
 80024dc:	4830      	ldr	r0, [pc, #192]	; (80025a0 <Handle_Command+0x5a4>)
 80024de:	f7fd fe7f 	bl	80001e0 <strlen>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b07      	cmp	r3, #7
 80024e6:	d129      	bne.n	800253c <Handle_Command+0x540>
				&& strncmp((char*) uart_buf, "c:d:2:", 6) == 0) {
 80024e8:	2206      	movs	r2, #6
 80024ea:	4944      	ldr	r1, [pc, #272]	; (80025fc <Handle_Command+0x600>)
 80024ec:	482c      	ldr	r0, [pc, #176]	; (80025a0 <Handle_Command+0x5a4>)
 80024ee:	f006 f938 	bl	8008762 <strncmp>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d121      	bne.n	800253c <Handle_Command+0x540>
			door2 = atoi((char*) uart_buf + 6);
 80024f8:	4b2b      	ldr	r3, [pc, #172]	; (80025a8 <Handle_Command+0x5ac>)
 80024fa:	4618      	mov	r0, r3
 80024fc:	f005 fe02 	bl	8008104 <atoi>
 8002500:	4603      	mov	r3, r0
 8002502:	b2da      	uxtb	r2, r3
 8002504:	4b3e      	ldr	r3, [pc, #248]	; (8002600 <Handle_Command+0x604>)
 8002506:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 8002508:	f000 fc42 	bl	8002d90 <clear_uart_buf>
			if (isDebug) {
 800250c:	4b28      	ldr	r3, [pc, #160]	; (80025b0 <Handle_Command+0x5b4>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d010      	beq.n	8002536 <Handle_Command+0x53a>
				sprintf((char*) tx, "door 2 active: %d\n", door2);
 8002514:	4b3a      	ldr	r3, [pc, #232]	; (8002600 <Handle_Command+0x604>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	493a      	ldr	r1, [pc, #232]	; (8002604 <Handle_Command+0x608>)
 800251c:	4826      	ldr	r0, [pc, #152]	; (80025b8 <Handle_Command+0x5bc>)
 800251e:	f006 f88f 	bl	8008640 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002522:	4825      	ldr	r0, [pc, #148]	; (80025b8 <Handle_Command+0x5bc>)
 8002524:	f7fd fe5c 	bl	80001e0 <strlen>
 8002528:	4603      	mov	r3, r0
 800252a:	b29a      	uxth	r2, r3
 800252c:	23c8      	movs	r3, #200	; 0xc8
 800252e:	4922      	ldr	r1, [pc, #136]	; (80025b8 <Handle_Command+0x5bc>)
 8002530:	4822      	ldr	r0, [pc, #136]	; (80025bc <Handle_Command+0x5c0>)
 8002532:	f004 fdbc 	bl	80070ae <HAL_UART_Transmit>
			}
			Response();
 8002536:	f7ff fbff 	bl	8001d38 <Response>
 800253a:	e16d      	b.n	8002818 <Handle_Command+0x81c>
		} else if (strlen((char*) uart_buf) == 9
 800253c:	4818      	ldr	r0, [pc, #96]	; (80025a0 <Handle_Command+0x5a4>)
 800253e:	f7fd fe4f 	bl	80001e0 <strlen>
 8002542:	4603      	mov	r3, r0
 8002544:	2b09      	cmp	r3, #9
 8002546:	d167      	bne.n	8002618 <Handle_Command+0x61c>
				&& strncmp((char*) uart_buf, "c:d:1:m:", 8) == 0) {
 8002548:	2208      	movs	r2, #8
 800254a:	492f      	ldr	r1, [pc, #188]	; (8002608 <Handle_Command+0x60c>)
 800254c:	4814      	ldr	r0, [pc, #80]	; (80025a0 <Handle_Command+0x5a4>)
 800254e:	f006 f908 	bl	8008762 <strncmp>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d15f      	bne.n	8002618 <Handle_Command+0x61c>
			d_done = 1;
 8002558:	4b2c      	ldr	r3, [pc, #176]	; (800260c <Handle_Command+0x610>)
 800255a:	2201      	movs	r2, #1
 800255c:	701a      	strb	r2, [r3, #0]
			d_mod = atoi((char*) uart_buf + 8);
 800255e:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <Handle_Command+0x5d8>)
 8002560:	4618      	mov	r0, r3
 8002562:	f005 fdcf 	bl	8008104 <atoi>
 8002566:	4603      	mov	r3, r0
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4b29      	ldr	r3, [pc, #164]	; (8002610 <Handle_Command+0x614>)
 800256c:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 800256e:	f000 fc0f 	bl	8002d90 <clear_uart_buf>
			if (isDebug) {
 8002572:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <Handle_Command+0x5b4>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 814e 	beq.w	8002818 <Handle_Command+0x81c>
				sprintf((char*) tx, "door 1 mode: %d\n", d_mod);
 800257c:	4b24      	ldr	r3, [pc, #144]	; (8002610 <Handle_Command+0x614>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	4924      	ldr	r1, [pc, #144]	; (8002614 <Handle_Command+0x618>)
 8002584:	480c      	ldr	r0, [pc, #48]	; (80025b8 <Handle_Command+0x5bc>)
 8002586:	f006 f85b 	bl	8008640 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 800258a:	480b      	ldr	r0, [pc, #44]	; (80025b8 <Handle_Command+0x5bc>)
 800258c:	f7fd fe28 	bl	80001e0 <strlen>
 8002590:	4603      	mov	r3, r0
 8002592:	b29a      	uxth	r2, r3
 8002594:	23c8      	movs	r3, #200	; 0xc8
 8002596:	4908      	ldr	r1, [pc, #32]	; (80025b8 <Handle_Command+0x5bc>)
 8002598:	4808      	ldr	r0, [pc, #32]	; (80025bc <Handle_Command+0x5c0>)
 800259a:	f004 fd88 	bl	80070ae <HAL_UART_Transmit>
			if (isDebug) {
 800259e:	e13b      	b.n	8002818 <Handle_Command+0x81c>
 80025a0:	20000c38 	.word	0x20000c38
 80025a4:	0800fdcc 	.word	0x0800fdcc
 80025a8:	20000c3e 	.word	0x20000c3e
 80025ac:	200010c2 	.word	0x200010c2
 80025b0:	2000115c 	.word	0x2000115c
 80025b4:	0800fdd4 	.word	0x0800fdd4
 80025b8:	20000c9c 	.word	0x20000c9c
 80025bc:	20000bf4 	.word	0x20000bf4
 80025c0:	0800fde8 	.word	0x0800fde8
 80025c4:	200010c3 	.word	0x200010c3
 80025c8:	0800fdf0 	.word	0x0800fdf0
 80025cc:	0800fe04 	.word	0x0800fe04
 80025d0:	200010c6 	.word	0x200010c6
 80025d4:	20000c40 	.word	0x20000c40
 80025d8:	200010c4 	.word	0x200010c4
 80025dc:	0800fe10 	.word	0x0800fe10
 80025e0:	0800fe24 	.word	0x0800fe24
 80025e4:	200010c7 	.word	0x200010c7
 80025e8:	200010c5 	.word	0x200010c5
 80025ec:	0800fe30 	.word	0x0800fe30
 80025f0:	0800fe44 	.word	0x0800fe44
 80025f4:	200010b8 	.word	0x200010b8
 80025f8:	0800fe4c 	.word	0x0800fe4c
 80025fc:	0800fe60 	.word	0x0800fe60
 8002600:	200010b9 	.word	0x200010b9
 8002604:	0800fe68 	.word	0x0800fe68
 8002608:	0800fe7c 	.word	0x0800fe7c
 800260c:	200010be 	.word	0x200010be
 8002610:	200010ba 	.word	0x200010ba
 8002614:	0800fe88 	.word	0x0800fe88
			}
		} else if (strlen((char*) uart_buf) == 9
 8002618:	4880      	ldr	r0, [pc, #512]	; (800281c <Handle_Command+0x820>)
 800261a:	f7fd fde1 	bl	80001e0 <strlen>
 800261e:	4603      	mov	r3, r0
 8002620:	2b09      	cmp	r3, #9
 8002622:	d12b      	bne.n	800267c <Handle_Command+0x680>
				&& strncmp((char*) uart_buf, "c:d:2:m:", 8) == 0) {
 8002624:	2208      	movs	r2, #8
 8002626:	497e      	ldr	r1, [pc, #504]	; (8002820 <Handle_Command+0x824>)
 8002628:	487c      	ldr	r0, [pc, #496]	; (800281c <Handle_Command+0x820>)
 800262a:	f006 f89a 	bl	8008762 <strncmp>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d123      	bne.n	800267c <Handle_Command+0x680>
			d_done_2 = 1;
 8002634:	4b7b      	ldr	r3, [pc, #492]	; (8002824 <Handle_Command+0x828>)
 8002636:	2201      	movs	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]
			d_mod_2 = atoi((char*) uart_buf + 8);
 800263a:	4b7b      	ldr	r3, [pc, #492]	; (8002828 <Handle_Command+0x82c>)
 800263c:	4618      	mov	r0, r3
 800263e:	f005 fd61 	bl	8008104 <atoi>
 8002642:	4603      	mov	r3, r0
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4b79      	ldr	r3, [pc, #484]	; (800282c <Handle_Command+0x830>)
 8002648:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 800264a:	f000 fba1 	bl	8002d90 <clear_uart_buf>
			if (isDebug) {
 800264e:	4b78      	ldr	r3, [pc, #480]	; (8002830 <Handle_Command+0x834>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 80e0 	beq.w	8002818 <Handle_Command+0x81c>
				sprintf((char*) tx, "door 2 mode: %d\n", d_mod_2);
 8002658:	4b74      	ldr	r3, [pc, #464]	; (800282c <Handle_Command+0x830>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	4975      	ldr	r1, [pc, #468]	; (8002834 <Handle_Command+0x838>)
 8002660:	4875      	ldr	r0, [pc, #468]	; (8002838 <Handle_Command+0x83c>)
 8002662:	f005 ffed 	bl	8008640 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002666:	4874      	ldr	r0, [pc, #464]	; (8002838 <Handle_Command+0x83c>)
 8002668:	f7fd fdba 	bl	80001e0 <strlen>
 800266c:	4603      	mov	r3, r0
 800266e:	b29a      	uxth	r2, r3
 8002670:	23c8      	movs	r3, #200	; 0xc8
 8002672:	4971      	ldr	r1, [pc, #452]	; (8002838 <Handle_Command+0x83c>)
 8002674:	4871      	ldr	r0, [pc, #452]	; (800283c <Handle_Command+0x840>)
 8002676:	f004 fd1a 	bl	80070ae <HAL_UART_Transmit>
			if (isDebug) {
 800267a:	e0cd      	b.n	8002818 <Handle_Command+0x81c>
			}
		} else if (strlen((char*) uart_buf) == 9
 800267c:	4867      	ldr	r0, [pc, #412]	; (800281c <Handle_Command+0x820>)
 800267e:	f7fd fdaf 	bl	80001e0 <strlen>
 8002682:	4603      	mov	r3, r0
 8002684:	2b09      	cmp	r3, #9
 8002686:	d12b      	bne.n	80026e0 <Handle_Command+0x6e4>
				&& strncmp((char*) uart_buf, "c:d:1:s:", 8) == 0) {
 8002688:	2208      	movs	r2, #8
 800268a:	496d      	ldr	r1, [pc, #436]	; (8002840 <Handle_Command+0x844>)
 800268c:	4863      	ldr	r0, [pc, #396]	; (800281c <Handle_Command+0x820>)
 800268e:	f006 f868 	bl	8008762 <strncmp>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d123      	bne.n	80026e0 <Handle_Command+0x6e4>
			d_done = 1;
 8002698:	4b6a      	ldr	r3, [pc, #424]	; (8002844 <Handle_Command+0x848>)
 800269a:	2201      	movs	r2, #1
 800269c:	701a      	strb	r2, [r3, #0]
			door_state = atoi((char*) uart_buf + 8);
 800269e:	4b62      	ldr	r3, [pc, #392]	; (8002828 <Handle_Command+0x82c>)
 80026a0:	4618      	mov	r0, r3
 80026a2:	f005 fd2f 	bl	8008104 <atoi>
 80026a6:	4603      	mov	r3, r0
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	4b67      	ldr	r3, [pc, #412]	; (8002848 <Handle_Command+0x84c>)
 80026ac:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 80026ae:	f000 fb6f 	bl	8002d90 <clear_uart_buf>
			if (isDebug) {
 80026b2:	4b5f      	ldr	r3, [pc, #380]	; (8002830 <Handle_Command+0x834>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 80ae 	beq.w	8002818 <Handle_Command+0x81c>
				sprintf((char*) tx, "door 1 state: %d\n", door_state);
 80026bc:	4b62      	ldr	r3, [pc, #392]	; (8002848 <Handle_Command+0x84c>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	4962      	ldr	r1, [pc, #392]	; (800284c <Handle_Command+0x850>)
 80026c4:	485c      	ldr	r0, [pc, #368]	; (8002838 <Handle_Command+0x83c>)
 80026c6:	f005 ffbb 	bl	8008640 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 80026ca:	485b      	ldr	r0, [pc, #364]	; (8002838 <Handle_Command+0x83c>)
 80026cc:	f7fd fd88 	bl	80001e0 <strlen>
 80026d0:	4603      	mov	r3, r0
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	23c8      	movs	r3, #200	; 0xc8
 80026d6:	4958      	ldr	r1, [pc, #352]	; (8002838 <Handle_Command+0x83c>)
 80026d8:	4858      	ldr	r0, [pc, #352]	; (800283c <Handle_Command+0x840>)
 80026da:	f004 fce8 	bl	80070ae <HAL_UART_Transmit>
			if (isDebug) {
 80026de:	e09b      	b.n	8002818 <Handle_Command+0x81c>
			}
		} else if (strlen((char*) uart_buf) == 9
 80026e0:	484e      	ldr	r0, [pc, #312]	; (800281c <Handle_Command+0x820>)
 80026e2:	f7fd fd7d 	bl	80001e0 <strlen>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b09      	cmp	r3, #9
 80026ea:	d12a      	bne.n	8002742 <Handle_Command+0x746>
				&& strncmp((char*) uart_buf, "c:d:2:s:", 8) == 0) {
 80026ec:	2208      	movs	r2, #8
 80026ee:	4958      	ldr	r1, [pc, #352]	; (8002850 <Handle_Command+0x854>)
 80026f0:	484a      	ldr	r0, [pc, #296]	; (800281c <Handle_Command+0x820>)
 80026f2:	f006 f836 	bl	8008762 <strncmp>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d122      	bne.n	8002742 <Handle_Command+0x746>
			d_done_2 = 1;
 80026fc:	4b49      	ldr	r3, [pc, #292]	; (8002824 <Handle_Command+0x828>)
 80026fe:	2201      	movs	r2, #1
 8002700:	701a      	strb	r2, [r3, #0]
			door_state_2 = atoi((char*) uart_buf + 8);
 8002702:	4b49      	ldr	r3, [pc, #292]	; (8002828 <Handle_Command+0x82c>)
 8002704:	4618      	mov	r0, r3
 8002706:	f005 fcfd 	bl	8008104 <atoi>
 800270a:	4603      	mov	r3, r0
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4b51      	ldr	r3, [pc, #324]	; (8002854 <Handle_Command+0x858>)
 8002710:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 8002712:	f000 fb3d 	bl	8002d90 <clear_uart_buf>
			if (isDebug) {
 8002716:	4b46      	ldr	r3, [pc, #280]	; (8002830 <Handle_Command+0x834>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d07c      	beq.n	8002818 <Handle_Command+0x81c>
				sprintf((char*) tx, "door 2 state: %d\n", door_state_2);
 800271e:	4b4d      	ldr	r3, [pc, #308]	; (8002854 <Handle_Command+0x858>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	494c      	ldr	r1, [pc, #304]	; (8002858 <Handle_Command+0x85c>)
 8002726:	4844      	ldr	r0, [pc, #272]	; (8002838 <Handle_Command+0x83c>)
 8002728:	f005 ff8a 	bl	8008640 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 800272c:	4842      	ldr	r0, [pc, #264]	; (8002838 <Handle_Command+0x83c>)
 800272e:	f7fd fd57 	bl	80001e0 <strlen>
 8002732:	4603      	mov	r3, r0
 8002734:	b29a      	uxth	r2, r3
 8002736:	23c8      	movs	r3, #200	; 0xc8
 8002738:	493f      	ldr	r1, [pc, #252]	; (8002838 <Handle_Command+0x83c>)
 800273a:	4840      	ldr	r0, [pc, #256]	; (800283c <Handle_Command+0x840>)
 800273c:	f004 fcb7 	bl	80070ae <HAL_UART_Transmit>
			if (isDebug) {
 8002740:	e06a      	b.n	8002818 <Handle_Command+0x81c>
			}
		} else if (strncmp((char*) uart_buf, "c:b:s:", 6) == 0
 8002742:	2206      	movs	r2, #6
 8002744:	4945      	ldr	r1, [pc, #276]	; (800285c <Handle_Command+0x860>)
 8002746:	4835      	ldr	r0, [pc, #212]	; (800281c <Handle_Command+0x820>)
 8002748:	f006 f80b 	bl	8008762 <strncmp>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d123      	bne.n	800279a <Handle_Command+0x79e>
				&& strlen((char*) uart_buf) == 7) {
 8002752:	4832      	ldr	r0, [pc, #200]	; (800281c <Handle_Command+0x820>)
 8002754:	f7fd fd44 	bl	80001e0 <strlen>
 8002758:	4603      	mov	r3, r0
 800275a:	2b07      	cmp	r3, #7
 800275c:	d11d      	bne.n	800279a <Handle_Command+0x79e>
			buz_done = 1;
 800275e:	4b40      	ldr	r3, [pc, #256]	; (8002860 <Handle_Command+0x864>)
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
			buz_state = 0;
 8002764:	4b3f      	ldr	r3, [pc, #252]	; (8002864 <Handle_Command+0x868>)
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 800276a:	f000 fb11 	bl	8002d90 <clear_uart_buf>
			if (isDebug) {
 800276e:	4b30      	ldr	r3, [pc, #192]	; (8002830 <Handle_Command+0x834>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d050      	beq.n	8002818 <Handle_Command+0x81c>
				sprintf((char*) tx, "buz state: %d\n", buz_state);
 8002776:	4b3b      	ldr	r3, [pc, #236]	; (8002864 <Handle_Command+0x868>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	493a      	ldr	r1, [pc, #232]	; (8002868 <Handle_Command+0x86c>)
 800277e:	482e      	ldr	r0, [pc, #184]	; (8002838 <Handle_Command+0x83c>)
 8002780:	f005 ff5e 	bl	8008640 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002784:	482c      	ldr	r0, [pc, #176]	; (8002838 <Handle_Command+0x83c>)
 8002786:	f7fd fd2b 	bl	80001e0 <strlen>
 800278a:	4603      	mov	r3, r0
 800278c:	b29a      	uxth	r2, r3
 800278e:	23c8      	movs	r3, #200	; 0xc8
 8002790:	4929      	ldr	r1, [pc, #164]	; (8002838 <Handle_Command+0x83c>)
 8002792:	482a      	ldr	r0, [pc, #168]	; (800283c <Handle_Command+0x840>)
 8002794:	f004 fc8b 	bl	80070ae <HAL_UART_Transmit>
			if (isDebug) {
 8002798:	e03e      	b.n	8002818 <Handle_Command+0x81c>
			}
		} else if (strncmp((char*) uart_buf, "c:d:s:", 6) == 0
 800279a:	2206      	movs	r2, #6
 800279c:	4933      	ldr	r1, [pc, #204]	; (800286c <Handle_Command+0x870>)
 800279e:	481f      	ldr	r0, [pc, #124]	; (800281c <Handle_Command+0x820>)
 80027a0:	f005 ffdf 	bl	8008762 <strncmp>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d125      	bne.n	80027f6 <Handle_Command+0x7fa>
				&& strlen((char*) uart_buf) == 7) {
 80027aa:	481c      	ldr	r0, [pc, #112]	; (800281c <Handle_Command+0x820>)
 80027ac:	f7fd fd18 	bl	80001e0 <strlen>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b07      	cmp	r3, #7
 80027b4:	d11f      	bne.n	80027f6 <Handle_Command+0x7fa>
			isDebug = atoi((char*) uart_buf + 6);
 80027b6:	4b2e      	ldr	r3, [pc, #184]	; (8002870 <Handle_Command+0x874>)
 80027b8:	4618      	mov	r0, r3
 80027ba:	f005 fca3 	bl	8008104 <atoi>
 80027be:	4603      	mov	r3, r0
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <Handle_Command+0x834>)
 80027c4:	701a      	strb	r2, [r3, #0]
			clear_uart_buf();
 80027c6:	f000 fae3 	bl	8002d90 <clear_uart_buf>
			if (isDebug) {
 80027ca:	4b19      	ldr	r3, [pc, #100]	; (8002830 <Handle_Command+0x834>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d022      	beq.n	8002818 <Handle_Command+0x81c>
				sprintf((char*) tx, "Debug state: %d\n", isDebug);
 80027d2:	4b17      	ldr	r3, [pc, #92]	; (8002830 <Handle_Command+0x834>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	4926      	ldr	r1, [pc, #152]	; (8002874 <Handle_Command+0x878>)
 80027da:	4817      	ldr	r0, [pc, #92]	; (8002838 <Handle_Command+0x83c>)
 80027dc:	f005 ff30 	bl	8008640 <sprintf>
				HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 80027e0:	4815      	ldr	r0, [pc, #84]	; (8002838 <Handle_Command+0x83c>)
 80027e2:	f7fd fcfd 	bl	80001e0 <strlen>
 80027e6:	4603      	mov	r3, r0
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	23c8      	movs	r3, #200	; 0xc8
 80027ec:	4912      	ldr	r1, [pc, #72]	; (8002838 <Handle_Command+0x83c>)
 80027ee:	4813      	ldr	r0, [pc, #76]	; (800283c <Handle_Command+0x840>)
 80027f0:	f004 fc5d 	bl	80070ae <HAL_UART_Transmit>
			if (isDebug) {
 80027f4:	e010      	b.n	8002818 <Handle_Command+0x81c>
			}
		} else {
			clear_uart_buf();
 80027f6:	f000 facb 	bl	8002d90 <clear_uart_buf>
			sprintf((char*) tx, "Invalid Command!\n");
 80027fa:	491f      	ldr	r1, [pc, #124]	; (8002878 <Handle_Command+0x87c>)
 80027fc:	480e      	ldr	r0, [pc, #56]	; (8002838 <Handle_Command+0x83c>)
 80027fe:	f005 ff1f 	bl	8008640 <sprintf>
			HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002802:	480d      	ldr	r0, [pc, #52]	; (8002838 <Handle_Command+0x83c>)
 8002804:	f7fd fcec 	bl	80001e0 <strlen>
 8002808:	4603      	mov	r3, r0
 800280a:	b29a      	uxth	r2, r3
 800280c:	23c8      	movs	r3, #200	; 0xc8
 800280e:	490a      	ldr	r1, [pc, #40]	; (8002838 <Handle_Command+0x83c>)
 8002810:	480a      	ldr	r0, [pc, #40]	; (800283c <Handle_Command+0x840>)
 8002812:	f004 fc4c 	bl	80070ae <HAL_UART_Transmit>
		}
	}
}
 8002816:	e7ff      	b.n	8002818 <Handle_Command+0x81c>
 8002818:	bf00      	nop
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20000c38 	.word	0x20000c38
 8002820:	0800fe9c 	.word	0x0800fe9c
 8002824:	200010bf 	.word	0x200010bf
 8002828:	20000c40 	.word	0x20000c40
 800282c:	200010bb 	.word	0x200010bb
 8002830:	2000115c 	.word	0x2000115c
 8002834:	0800fea8 	.word	0x0800fea8
 8002838:	20000c9c 	.word	0x20000c9c
 800283c:	20000bf4 	.word	0x20000bf4
 8002840:	0800febc 	.word	0x0800febc
 8002844:	200010be 	.word	0x200010be
 8002848:	200010bc 	.word	0x200010bc
 800284c:	0800fec8 	.word	0x0800fec8
 8002850:	0800fedc 	.word	0x0800fedc
 8002854:	200010bd 	.word	0x200010bd
 8002858:	0800fee8 	.word	0x0800fee8
 800285c:	0800fefc 	.word	0x0800fefc
 8002860:	200010c0 	.word	0x200010c0
 8002864:	200010c1 	.word	0x200010c1
 8002868:	0800ff04 	.word	0x0800ff04
 800286c:	0800ff14 	.word	0x0800ff14
 8002870:	20000c3e 	.word	0x20000c3e
 8002874:	0800ff1c 	.word	0x0800ff1c
 8002878:	0800ff30 	.word	0x0800ff30

0800287c <control_door>:

void control_door() {
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
	if (d_done) {
 8002880:	4b30      	ldr	r3, [pc, #192]	; (8002944 <control_door+0xc8>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d02b      	beq.n	80028e0 <control_door+0x64>
		if (d_mod) {
 8002888:	4b2f      	ldr	r3, [pc, #188]	; (8002948 <control_door+0xcc>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d015      	beq.n	80028bc <control_door+0x40>
			door_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8002890:	2101      	movs	r1, #1
 8002892:	482e      	ldr	r0, [pc, #184]	; (800294c <control_door+0xd0>)
 8002894:	f002 f918 	bl	8004ac8 <HAL_GPIO_ReadPin>
 8002898:	4603      	mov	r3, r0
 800289a:	461a      	mov	r2, r3
 800289c:	4b2c      	ldr	r3, [pc, #176]	; (8002950 <control_door+0xd4>)
 800289e:	701a      	strb	r2, [r3, #0]
			if (door_state)
 80028a0:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <control_door+0xd4>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d004      	beq.n	80028b2 <control_door+0x36>
				__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 15);
 80028a8:	4b2a      	ldr	r3, [pc, #168]	; (8002954 <control_door+0xd8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	220f      	movs	r2, #15
 80028ae:	635a      	str	r2, [r3, #52]	; 0x34
 80028b0:	e011      	b.n	80028d6 <control_door+0x5a>
			else
				__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 25);
 80028b2:	4b28      	ldr	r3, [pc, #160]	; (8002954 <control_door+0xd8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2219      	movs	r2, #25
 80028b8:	635a      	str	r2, [r3, #52]	; 0x34
 80028ba:	e00c      	b.n	80028d6 <control_door+0x5a>
		} else {
			if (door_state)
 80028bc:	4b24      	ldr	r3, [pc, #144]	; (8002950 <control_door+0xd4>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d004      	beq.n	80028ce <control_door+0x52>
				__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 15);
 80028c4:	4b23      	ldr	r3, [pc, #140]	; (8002954 <control_door+0xd8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	220f      	movs	r2, #15
 80028ca:	635a      	str	r2, [r3, #52]	; 0x34
 80028cc:	e003      	b.n	80028d6 <control_door+0x5a>
			else
				__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 25);
 80028ce:	4b21      	ldr	r3, [pc, #132]	; (8002954 <control_door+0xd8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2219      	movs	r2, #25
 80028d4:	635a      	str	r2, [r3, #52]	; 0x34
		}
		d_done = 0;
 80028d6:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <control_door+0xc8>)
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
		Response();
 80028dc:	f7ff fa2c 	bl	8001d38 <Response>
	}
	if (d_done_2) {
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <control_door+0xdc>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d02b      	beq.n	8002940 <control_door+0xc4>
		if (d_mod_2) {
 80028e8:	4b1c      	ldr	r3, [pc, #112]	; (800295c <control_door+0xe0>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d015      	beq.n	800291c <control_door+0xa0>
			door_state_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 80028f0:	2104      	movs	r1, #4
 80028f2:	481b      	ldr	r0, [pc, #108]	; (8002960 <control_door+0xe4>)
 80028f4:	f002 f8e8 	bl	8004ac8 <HAL_GPIO_ReadPin>
 80028f8:	4603      	mov	r3, r0
 80028fa:	461a      	mov	r2, r3
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <control_door+0xe8>)
 80028fe:	701a      	strb	r2, [r3, #0]
			if (door_state_2)
 8002900:	4b18      	ldr	r3, [pc, #96]	; (8002964 <control_door+0xe8>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d004      	beq.n	8002912 <control_door+0x96>
				__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, 5);
 8002908:	4b12      	ldr	r3, [pc, #72]	; (8002954 <control_door+0xd8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2205      	movs	r2, #5
 800290e:	641a      	str	r2, [r3, #64]	; 0x40
 8002910:	e011      	b.n	8002936 <control_door+0xba>
			else
				__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, 15);
 8002912:	4b10      	ldr	r3, [pc, #64]	; (8002954 <control_door+0xd8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	220f      	movs	r2, #15
 8002918:	641a      	str	r2, [r3, #64]	; 0x40
 800291a:	e00c      	b.n	8002936 <control_door+0xba>
		} else {
			if (door_state_2)
 800291c:	4b11      	ldr	r3, [pc, #68]	; (8002964 <control_door+0xe8>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d004      	beq.n	800292e <control_door+0xb2>
				__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, 5);
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <control_door+0xd8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2205      	movs	r2, #5
 800292a:	641a      	str	r2, [r3, #64]	; 0x40
 800292c:	e003      	b.n	8002936 <control_door+0xba>
			else
				__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, 15);
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <control_door+0xd8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	220f      	movs	r2, #15
 8002934:	641a      	str	r2, [r3, #64]	; 0x40
		}
		d_done_2 = 0;
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <control_door+0xdc>)
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
		Response();
 800293c:	f7ff f9fc 	bl	8001d38 <Response>
	}
}
 8002940:	bf00      	nop
 8002942:	bd80      	pop	{r7, pc}
 8002944:	200010be 	.word	0x200010be
 8002948:	200010ba 	.word	0x200010ba
 800294c:	40020400 	.word	0x40020400
 8002950:	200010bc 	.word	0x200010bc
 8002954:	20000a8c 	.word	0x20000a8c
 8002958:	200010bf 	.word	0x200010bf
 800295c:	200010bb 	.word	0x200010bb
 8002960:	40020000 	.word	0x40020000
 8002964:	200010bd 	.word	0x200010bd

08002968 <en_motor>:

void en_motor() {
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
	if (f_done) {
 800296c:	4b4b      	ldr	r3, [pc, #300]	; (8002a9c <en_motor+0x134>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d04e      	beq.n	8002a12 <en_motor+0xaa>
		if (speed == 0) {
 8002974:	4b4a      	ldr	r3, [pc, #296]	; (8002aa0 <en_motor+0x138>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d104      	bne.n	8002986 <en_motor+0x1e>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 800297c:	4b49      	ldr	r3, [pc, #292]	; (8002aa4 <en_motor+0x13c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2200      	movs	r2, #0
 8002982:	635a      	str	r2, [r3, #52]	; 0x34
 8002984:	e02f      	b.n	80029e6 <en_motor+0x7e>
		} else if (speed == 1) {
 8002986:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <en_motor+0x138>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d104      	bne.n	8002998 <en_motor+0x30>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 200);
 800298e:	4b45      	ldr	r3, [pc, #276]	; (8002aa4 <en_motor+0x13c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	22c8      	movs	r2, #200	; 0xc8
 8002994:	635a      	str	r2, [r3, #52]	; 0x34
 8002996:	e026      	b.n	80029e6 <en_motor+0x7e>
		} else if (speed == 2) {
 8002998:	4b41      	ldr	r3, [pc, #260]	; (8002aa0 <en_motor+0x138>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b02      	cmp	r3, #2
 800299e:	d105      	bne.n	80029ac <en_motor+0x44>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 400);
 80029a0:	4b40      	ldr	r3, [pc, #256]	; (8002aa4 <en_motor+0x13c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80029a8:	635a      	str	r2, [r3, #52]	; 0x34
 80029aa:	e01c      	b.n	80029e6 <en_motor+0x7e>
		} else if (speed == 3) {
 80029ac:	4b3c      	ldr	r3, [pc, #240]	; (8002aa0 <en_motor+0x138>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d105      	bne.n	80029c0 <en_motor+0x58>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 600);
 80029b4:	4b3b      	ldr	r3, [pc, #236]	; (8002aa4 <en_motor+0x13c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80029bc:	635a      	str	r2, [r3, #52]	; 0x34
 80029be:	e012      	b.n	80029e6 <en_motor+0x7e>
		} else if (speed == 4) {
 80029c0:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <en_motor+0x138>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d105      	bne.n	80029d4 <en_motor+0x6c>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 800);
 80029c8:	4b36      	ldr	r3, [pc, #216]	; (8002aa4 <en_motor+0x13c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80029d0:	635a      	str	r2, [r3, #52]	; 0x34
 80029d2:	e008      	b.n	80029e6 <en_motor+0x7e>
		} else if (speed == 5) {
 80029d4:	4b32      	ldr	r3, [pc, #200]	; (8002aa0 <en_motor+0x138>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b05      	cmp	r3, #5
 80029da:	d104      	bne.n	80029e6 <en_motor+0x7e>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 999);
 80029dc:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <en_motor+0x13c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029e4:	635a      	str	r2, [r3, #52]	; 0x34
		}
		sprintf((char*) tx, "fan 1x speed: %d\n", speed);
 80029e6:	4b2e      	ldr	r3, [pc, #184]	; (8002aa0 <en_motor+0x138>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	492e      	ldr	r1, [pc, #184]	; (8002aa8 <en_motor+0x140>)
 80029ee:	482f      	ldr	r0, [pc, #188]	; (8002aac <en_motor+0x144>)
 80029f0:	f005 fe26 	bl	8008640 <sprintf>
		HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 80029f4:	482d      	ldr	r0, [pc, #180]	; (8002aac <en_motor+0x144>)
 80029f6:	f7fd fbf3 	bl	80001e0 <strlen>
 80029fa:	4603      	mov	r3, r0
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	23c8      	movs	r3, #200	; 0xc8
 8002a00:	492a      	ldr	r1, [pc, #168]	; (8002aac <en_motor+0x144>)
 8002a02:	482b      	ldr	r0, [pc, #172]	; (8002ab0 <en_motor+0x148>)
 8002a04:	f004 fb53 	bl	80070ae <HAL_UART_Transmit>
		f_done = 0;
 8002a08:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <en_motor+0x134>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
		Response();
 8002a0e:	f7ff f993 	bl	8001d38 <Response>
	}
	if (f_done_2) {
 8002a12:	4b28      	ldr	r3, [pc, #160]	; (8002ab4 <en_motor+0x14c>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d03d      	beq.n	8002a96 <en_motor+0x12e>
		if (speed_2 == 0) {
 8002a1a:	4b27      	ldr	r3, [pc, #156]	; (8002ab8 <en_motor+0x150>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d104      	bne.n	8002a2c <en_motor+0xc4>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 8002a22:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <en_motor+0x13c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2200      	movs	r2, #0
 8002a28:	639a      	str	r2, [r3, #56]	; 0x38
 8002a2a:	e02f      	b.n	8002a8c <en_motor+0x124>
		} else if (speed_2 == 1) {
 8002a2c:	4b22      	ldr	r3, [pc, #136]	; (8002ab8 <en_motor+0x150>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d104      	bne.n	8002a3e <en_motor+0xd6>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 200);
 8002a34:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <en_motor+0x13c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	22c8      	movs	r2, #200	; 0xc8
 8002a3a:	639a      	str	r2, [r3, #56]	; 0x38
 8002a3c:	e026      	b.n	8002a8c <en_motor+0x124>
		} else if (speed_2 == 2) {
 8002a3e:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <en_motor+0x150>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d105      	bne.n	8002a52 <en_motor+0xea>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 400);
 8002a46:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <en_motor+0x13c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002a4e:	639a      	str	r2, [r3, #56]	; 0x38
 8002a50:	e01c      	b.n	8002a8c <en_motor+0x124>
		} else if (speed_2 == 3) {
 8002a52:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <en_motor+0x150>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d105      	bne.n	8002a66 <en_motor+0xfe>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 600);
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <en_motor+0x13c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002a62:	639a      	str	r2, [r3, #56]	; 0x38
 8002a64:	e012      	b.n	8002a8c <en_motor+0x124>
		} else if (speed_2 == 4) {
 8002a66:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <en_motor+0x150>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d105      	bne.n	8002a7a <en_motor+0x112>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 800);
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <en_motor+0x13c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002a76:	639a      	str	r2, [r3, #56]	; 0x38
 8002a78:	e008      	b.n	8002a8c <en_motor+0x124>
		} else if (speed_2 == 5) {
 8002a7a:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <en_motor+0x150>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b05      	cmp	r3, #5
 8002a80:	d104      	bne.n	8002a8c <en_motor+0x124>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 999);
 8002a82:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <en_motor+0x13c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a8a:	639a      	str	r2, [r3, #56]	; 0x38
		}
		f_done_2 = 0;
 8002a8c:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <en_motor+0x14c>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
		Response();
 8002a92:	f7ff f951 	bl	8001d38 <Response>
	}
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200010c6 	.word	0x200010c6
 8002aa0:	200010c4 	.word	0x200010c4
 8002aa4:	20000b1c 	.word	0x20000b1c
 8002aa8:	0800ff44 	.word	0x0800ff44
 8002aac:	20000c9c 	.word	0x20000c9c
 8002ab0:	20000bf4 	.word	0x20000bf4
 8002ab4:	200010c7 	.word	0x200010c7
 8002ab8:	200010c5 	.word	0x200010c5

08002abc <motor_get_speed>:

void motor_get_speed() {
 8002abc:	b598      	push	{r3, r4, r7, lr}
 8002abe:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 8002ac0:	20c8      	movs	r0, #200	; 0xc8
 8002ac2:	f001 f8d3 	bl	8003c6c <HAL_Delay>
	en_cnt = __HAL_TIM_GetCounter(&htim4);
 8002ac6:	4b39      	ldr	r3, [pc, #228]	; (8002bac <motor_get_speed+0xf0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	4a38      	ldr	r2, [pc, #224]	; (8002bb0 <motor_get_speed+0xf4>)
 8002ace:	6013      	str	r3, [r2, #0]
	en_cnt_2 = __HAL_TIM_GetCounter(&htim5);
 8002ad0:	4b38      	ldr	r3, [pc, #224]	; (8002bb4 <motor_get_speed+0xf8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	4a38      	ldr	r2, [pc, #224]	; (8002bb8 <motor_get_speed+0xfc>)
 8002ad8:	6013      	str	r3, [r2, #0]
	HAL_Delay(100);
 8002ada:	2064      	movs	r0, #100	; 0x64
 8002adc:	f001 f8c6 	bl	8003c6c <HAL_Delay>
	motor_speed = (__HAL_TIM_GetCounter(&htim4) - en_cnt) * 600 / 384; //encoder cnt increase 384 when complete 1 round
 8002ae0:	4b32      	ldr	r3, [pc, #200]	; (8002bac <motor_get_speed+0xf0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ae6:	4b32      	ldr	r3, [pc, #200]	; (8002bb0 <motor_get_speed+0xf4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	4a31      	ldr	r2, [pc, #196]	; (8002bbc <motor_get_speed+0x100>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	0a1b      	lsrs	r3, r3, #8
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b30      	ldr	r3, [pc, #192]	; (8002bc0 <motor_get_speed+0x104>)
 8002b00:	601a      	str	r2, [r3, #0]
	motor_speed_2 = (__HAL_TIM_GetCounter(&htim5) - en_cnt_2) * 600 / 384;
 8002b02:	4b2c      	ldr	r3, [pc, #176]	; (8002bb4 <motor_get_speed+0xf8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b08:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <motor_get_speed+0xfc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002b12:	fb02 f303 	mul.w	r3, r2, r3
 8002b16:	4a29      	ldr	r2, [pc, #164]	; (8002bbc <motor_get_speed+0x100>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	0a1b      	lsrs	r3, r3, #8
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4b28      	ldr	r3, [pc, #160]	; (8002bc4 <motor_get_speed+0x108>)
 8002b22:	601a      	str	r2, [r3, #0]
	sprintf((char*) tx, "\n%d %d\n", motor_speed_2, check_speed(motor_speed_2));
 8002b24:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <motor_get_speed+0x108>)
 8002b26:	681c      	ldr	r4, [r3, #0]
 8002b28:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <motor_get_speed+0x108>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 f855 	bl	8002bdc <check_speed>
 8002b32:	4603      	mov	r3, r0
 8002b34:	4622      	mov	r2, r4
 8002b36:	4924      	ldr	r1, [pc, #144]	; (8002bc8 <motor_get_speed+0x10c>)
 8002b38:	4824      	ldr	r0, [pc, #144]	; (8002bcc <motor_get_speed+0x110>)
 8002b3a:	f005 fd81 	bl	8008640 <sprintf>
	HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002b3e:	4823      	ldr	r0, [pc, #140]	; (8002bcc <motor_get_speed+0x110>)
 8002b40:	f7fd fb4e 	bl	80001e0 <strlen>
 8002b44:	4603      	mov	r3, r0
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	23c8      	movs	r3, #200	; 0xc8
 8002b4a:	4920      	ldr	r1, [pc, #128]	; (8002bcc <motor_get_speed+0x110>)
 8002b4c:	4820      	ldr	r0, [pc, #128]	; (8002bd0 <motor_get_speed+0x114>)
 8002b4e:	f004 faae 	bl	80070ae <HAL_UART_Transmit>
	if (check_speed(motor_speed) != speed)
 8002b52:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <motor_get_speed+0x104>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 f840 	bl	8002bdc <check_speed>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <motor_get_speed+0x118>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d004      	beq.n	8002b72 <motor_get_speed+0xb6>
		motor_speed = -1;
 8002b68:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <motor_get_speed+0x104>)
 8002b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e004      	b.n	8002b7c <motor_get_speed+0xc0>
	else
		motor_speed = speed;
 8002b72:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <motor_get_speed+0x118>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <motor_get_speed+0x104>)
 8002b7a:	601a      	str	r2, [r3, #0]
	if (check_speed(motor_speed_2) != speed_2)
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <motor_get_speed+0x108>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 f82b 	bl	8002bdc <check_speed>
 8002b86:	4603      	mov	r3, r0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <motor_get_speed+0x11c>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d004      	beq.n	8002b9c <motor_get_speed+0xe0>
		motor_speed_2 = -1;
 8002b92:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <motor_get_speed+0x108>)
 8002b94:	f04f 32ff 	mov.w	r2, #4294967295
 8002b98:	601a      	str	r2, [r3, #0]
	else
		motor_speed_2 = speed_2;
}
 8002b9a:	e004      	b.n	8002ba6 <motor_get_speed+0xea>
		motor_speed_2 = speed_2;
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <motor_get_speed+0x11c>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <motor_get_speed+0x108>)
 8002ba4:	601a      	str	r2, [r3, #0]
}
 8002ba6:	bf00      	nop
 8002ba8:	bd98      	pop	{r3, r4, r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000b64 	.word	0x20000b64
 8002bb0:	200010d0 	.word	0x200010d0
 8002bb4:	20000bac 	.word	0x20000bac
 8002bb8:	200010d4 	.word	0x200010d4
 8002bbc:	aaaaaaab 	.word	0xaaaaaaab
 8002bc0:	200010c8 	.word	0x200010c8
 8002bc4:	200010cc 	.word	0x200010cc
 8002bc8:	0800ff58 	.word	0x0800ff58
 8002bcc:	20000c9c 	.word	0x20000c9c
 8002bd0:	20000bf4 	.word	0x20000bf4
 8002bd4:	200010c4 	.word	0x200010c4
 8002bd8:	200010c5 	.word	0x200010c5

08002bdc <check_speed>:

uint8_t check_speed(int encoder_val) {
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]

	if (encoder_val == 0)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <check_speed+0x12>
		return 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e02f      	b.n	8002c4e <check_speed+0x72>
	else if (encoder_val >= 600 && encoder_val < 1150)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002bf4:	db06      	blt.n	8002c04 <check_speed+0x28>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f240 427d 	movw	r2, #1149	; 0x47d
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	dc01      	bgt.n	8002c04 <check_speed+0x28>
		return 1;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e024      	b.n	8002c4e <check_speed+0x72>
	else if (encoder_val >= 1150 && encoder_val < 1950)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f240 427d 	movw	r2, #1149	; 0x47d
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	dd06      	ble.n	8002c1c <check_speed+0x40>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f240 729d 	movw	r2, #1949	; 0x79d
 8002c14:	4293      	cmp	r3, r2
 8002c16:	dc01      	bgt.n	8002c1c <check_speed+0x40>
		return 2;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e018      	b.n	8002c4e <check_speed+0x72>
	else if (encoder_val >= 1950 && encoder_val < 3000)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f240 729d 	movw	r2, #1949	; 0x79d
 8002c22:	4293      	cmp	r3, r2
 8002c24:	dd06      	ble.n	8002c34 <check_speed+0x58>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	dc01      	bgt.n	8002c34 <check_speed+0x58>
		return 3;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e00c      	b.n	8002c4e <check_speed+0x72>
	else if (encoder_val >= 3000 && encoder_val < 3900)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	dd06      	ble.n	8002c4c <check_speed+0x70>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f640 723b 	movw	r2, #3899	; 0xf3b
 8002c44:	4293      	cmp	r3, r2
 8002c46:	dc01      	bgt.n	8002c4c <check_speed+0x70>
		return 4;
 8002c48:	2304      	movs	r3, #4
 8002c4a:	e000      	b.n	8002c4e <check_speed+0x72>
	else
		return 5;
 8002c4c:	2305      	movs	r3, #5
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <control_led>:

void control_led() {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
	if (l_done) {
 8002c60:	4b29      	ldr	r3, [pc, #164]	; (8002d08 <control_led+0xac>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d025      	beq.n	8002cb4 <control_led+0x58>
		if (led_mod) {
 8002c68:	4b28      	ldr	r3, [pc, #160]	; (8002d0c <control_led+0xb0>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d014      	beq.n	8002c9a <control_led+0x3e>
			HAL_Delay(300);
 8002c70:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002c74:	f000 fffa 	bl	8003c6c <HAL_Delay>
			led_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8002c78:	2108      	movs	r1, #8
 8002c7a:	4825      	ldr	r0, [pc, #148]	; (8002d10 <control_led+0xb4>)
 8002c7c:	f001 ff24 	bl	8004ac8 <HAL_GPIO_ReadPin>
 8002c80:	4603      	mov	r3, r0
 8002c82:	461a      	mov	r2, r3
 8002c84:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <control_led+0xb8>)
 8002c86:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, led_state);
 8002c88:	4b22      	ldr	r3, [pc, #136]	; (8002d14 <control_led+0xb8>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c92:	4821      	ldr	r0, [pc, #132]	; (8002d18 <control_led+0xbc>)
 8002c94:	f001 ff30 	bl	8004af8 <HAL_GPIO_WritePin>
 8002c98:	e007      	b.n	8002caa <control_led+0x4e>
		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, led_state);
 8002c9a:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <control_led+0xb8>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ca4:	481c      	ldr	r0, [pc, #112]	; (8002d18 <control_led+0xbc>)
 8002ca6:	f001 ff27 	bl	8004af8 <HAL_GPIO_WritePin>
		}
		l_done = 0;
 8002caa:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <control_led+0xac>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	701a      	strb	r2, [r3, #0]
		Response();
 8002cb0:	f7ff f842 	bl	8001d38 <Response>
	}
	if (l_done_2) {
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <control_led+0xc0>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d023      	beq.n	8002d04 <control_led+0xa8>
		if (led_mod_2) {
 8002cbc:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <control_led+0xc4>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d013      	beq.n	8002cec <control_led+0x90>
			HAL_Delay(300);
 8002cc4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002cc8:	f000 ffd0 	bl	8003c6c <HAL_Delay>
			led_state_2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8002ccc:	2102      	movs	r1, #2
 8002cce:	4812      	ldr	r0, [pc, #72]	; (8002d18 <control_led+0xbc>)
 8002cd0:	f001 fefa 	bl	8004ac8 <HAL_GPIO_ReadPin>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <control_led+0xc8>)
 8002cda:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, led_state_2);
 8002cdc:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <control_led+0xc8>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	2108      	movs	r1, #8
 8002ce4:	480c      	ldr	r0, [pc, #48]	; (8002d18 <control_led+0xbc>)
 8002ce6:	f001 ff07 	bl	8004af8 <HAL_GPIO_WritePin>
 8002cea:	e006      	b.n	8002cfa <control_led+0x9e>
		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, led_state_2);
 8002cec:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <control_led+0xc8>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	2108      	movs	r1, #8
 8002cf4:	4808      	ldr	r0, [pc, #32]	; (8002d18 <control_led+0xbc>)
 8002cf6:	f001 feff 	bl	8004af8 <HAL_GPIO_WritePin>
		}
		l_done_2 = 0;
 8002cfa:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <control_led+0xc0>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	701a      	strb	r2, [r3, #0]
		Response();
 8002d00:	f7ff f81a 	bl	8001d38 <Response>
	}
}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	200010b2 	.word	0x200010b2
 8002d0c:	200010b0 	.word	0x200010b0
 8002d10:	40020000 	.word	0x40020000
 8002d14:	200010ae 	.word	0x200010ae
 8002d18:	40020400 	.word	0x40020400
 8002d1c:	200010b3 	.word	0x200010b3
 8002d20:	200010b1 	.word	0x200010b1
 8002d24:	200010af 	.word	0x200010af

08002d28 <Blink_Led>:

void Blink_Led() {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
	if (g_sys_tick - led_tick >= 1000) {
 8002d2c:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <Blink_Led+0x2c>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <Blink_Led+0x30>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d3a:	d308      	bcc.n	8002d4e <Blink_Led+0x26>
//		getADC_value();
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002d3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d40:	4806      	ldr	r0, [pc, #24]	; (8002d5c <Blink_Led+0x34>)
 8002d42:	f001 fef2 	bl	8004b2a <HAL_GPIO_TogglePin>
		led_tick = g_sys_tick;
 8002d46:	4b03      	ldr	r3, [pc, #12]	; (8002d54 <Blink_Led+0x2c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a03      	ldr	r2, [pc, #12]	; (8002d58 <Blink_Led+0x30>)
 8002d4c:	6013      	str	r3, [r2, #0]
	}
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	200010a0 	.word	0x200010a0
 8002d58:	200010a8 	.word	0x200010a8
 8002d5c:	40020800 	.word	0x40020800

08002d60 <delay_us>:
			}
		}
	}
}

void delay_us(uint32_t us) {
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCounter(&htim2, 0);
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <delay_us+0x2c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GetCounter(&htim2) < us)
 8002d70:	bf00      	nop
 8002d72:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <delay_us+0x2c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d8f9      	bhi.n	8002d72 <delay_us+0x12>
		;
}
 8002d7e:	bf00      	nop
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	20000ad4 	.word	0x20000ad4

08002d90 <clear_uart_buf>:

void clear_uart_buf() {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
	memset(uart_buf, 0, strlen((char*) uart_buf));
 8002d94:	4806      	ldr	r0, [pc, #24]	; (8002db0 <clear_uart_buf+0x20>)
 8002d96:	f7fd fa23 	bl	80001e0 <strlen>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4803      	ldr	r0, [pc, #12]	; (8002db0 <clear_uart_buf+0x20>)
 8002da2:	f005 fc29 	bl	80085f8 <memset>
	uart_buf_cnt = 0;
 8002da6:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <clear_uart_buf+0x24>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
}
 8002dac:	bf00      	nop
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20000c38 	.word	0x20000c38
 8002db4:	2000109c 	.word	0x2000109c

08002db8 <init_dht22>:

void init_dht22() {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
	gpio_set_mode(OUTPUT);
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	f7fe ff87 	bl	8001cd0 <gpio_set_mode>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <init_dht22+0x1c>)
 8002dca:	f001 fe95 	bl	8004af8 <HAL_GPIO_WritePin>
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40020400 	.word	0x40020400

08002dd8 <dht22_GetValue>:

void dht22_GetValue(dht22 *dht) {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
	uint8_t bytes[5];

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8002de0:	2200      	movs	r2, #0
 8002de2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002de6:	488a      	ldr	r0, [pc, #552]	; (8003010 <dht22_GetValue+0x238>)
 8002de8:	f001 fe86 	bl	8004af8 <HAL_GPIO_WritePin>
	delay_us(1000);
 8002dec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002df0:	f7ff ffb6 	bl	8002d60 <delay_us>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8002df4:	2201      	movs	r2, #1
 8002df6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dfa:	4885      	ldr	r0, [pc, #532]	; (8003010 <dht22_GetValue+0x238>)
 8002dfc:	f001 fe7c 	bl	8004af8 <HAL_GPIO_WritePin>
	delay_us(20);
 8002e00:	2014      	movs	r0, #20
 8002e02:	f7ff ffad 	bl	8002d60 <delay_us>

	gpio_set_mode(INPUT);
 8002e06:	2000      	movs	r0, #0
 8002e08:	f7fe ff62 	bl	8001cd0 <gpio_set_mode>
//		tem = -1;
//		hum = -1;
//		return;				// pb9 should be 1
//	}
//	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9));					// wait input become low
	delay_us(120);
 8002e0c:	2078      	movs	r0, #120	; 0x78
 8002e0e:	f7ff ffa7 	bl	8002d60 <delay_us>

	for (int j = 0; j < 5; j++) {
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
 8002e16:	e087      	b.n	8002f28 <dht22_GetValue+0x150>
		uint8_t result = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	76fb      	strb	r3, [r7, #27]
		for (int i = 0; i < 8; i++) { //for each bit in each byte (8 total)
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	e076      	b.n	8002f10 <dht22_GetValue+0x138>
			time_out = g_sys_tick;					// wait input become high
 8002e22:	4b7c      	ldr	r3, [pc, #496]	; (8003014 <dht22_GetValue+0x23c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a7c      	ldr	r2, [pc, #496]	; (8003018 <dht22_GetValue+0x240>)
 8002e28:	6013      	str	r3, [r2, #0]
			while (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)) {
 8002e2a:	e021      	b.n	8002e70 <dht22_GetValue+0x98>
				if (g_sys_tick - time_out >= DHT_TIMEOUT) {
 8002e2c:	4b79      	ldr	r3, [pc, #484]	; (8003014 <dht22_GetValue+0x23c>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4b79      	ldr	r3, [pc, #484]	; (8003018 <dht22_GetValue+0x240>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d91a      	bls.n	8002e70 <dht22_GetValue+0x98>
					if (isDebug) {
 8002e3a:	4b78      	ldr	r3, [pc, #480]	; (800301c <dht22_GetValue+0x244>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00d      	beq.n	8002e5e <dht22_GetValue+0x86>
						sprintf((char*) tx, "input h");
 8002e42:	4977      	ldr	r1, [pc, #476]	; (8003020 <dht22_GetValue+0x248>)
 8002e44:	4877      	ldr	r0, [pc, #476]	; (8003024 <dht22_GetValue+0x24c>)
 8002e46:	f005 fbfb 	bl	8008640 <sprintf>
						HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002e4a:	4876      	ldr	r0, [pc, #472]	; (8003024 <dht22_GetValue+0x24c>)
 8002e4c:	f7fd f9c8 	bl	80001e0 <strlen>
 8002e50:	4603      	mov	r3, r0
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	23c8      	movs	r3, #200	; 0xc8
 8002e56:	4973      	ldr	r1, [pc, #460]	; (8003024 <dht22_GetValue+0x24c>)
 8002e58:	4873      	ldr	r0, [pc, #460]	; (8003028 <dht22_GetValue+0x250>)
 8002e5a:	f004 f928 	bl	80070ae <HAL_UART_Transmit>
					}
					tem = -1;
 8002e5e:	4b73      	ldr	r3, [pc, #460]	; (800302c <dht22_GetValue+0x254>)
 8002e60:	4a73      	ldr	r2, [pc, #460]	; (8003030 <dht22_GetValue+0x258>)
 8002e62:	601a      	str	r2, [r3, #0]
					hum = -1;
 8002e64:	4b73      	ldr	r3, [pc, #460]	; (8003034 <dht22_GetValue+0x25c>)
 8002e66:	4a72      	ldr	r2, [pc, #456]	; (8003030 <dht22_GetValue+0x258>)
 8002e68:	601a      	str	r2, [r3, #0]
					init_dht22();
 8002e6a:	f7ff ffa5 	bl	8002db8 <init_dht22>
					return;
 8002e6e:	e0cc      	b.n	800300a <dht22_GetValue+0x232>
			while (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)) {
 8002e70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e74:	4866      	ldr	r0, [pc, #408]	; (8003010 <dht22_GetValue+0x238>)
 8002e76:	f001 fe27 	bl	8004ac8 <HAL_GPIO_ReadPin>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0d5      	beq.n	8002e2c <dht22_GetValue+0x54>
				}
			}
			delay_us(30);
 8002e80:	201e      	movs	r0, #30
 8002e82:	f7ff ff6d 	bl	8002d60 <delay_us>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))// if input still high after 30us -> bit 1
 8002e86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e8a:	4861      	ldr	r0, [pc, #388]	; (8003010 <dht22_GetValue+0x238>)
 8002e8c:	f001 fe1c 	bl	8004ac8 <HAL_GPIO_ReadPin>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <dht22_GetValue+0xce>
				//result |= (1 << (7-i));
				result = (result << 1) | 0x01;
 8002e96:	7efb      	ldrb	r3, [r7, #27]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	b25b      	sxtb	r3, r3
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	b25b      	sxtb	r3, r3
 8002ea2:	76fb      	strb	r3, [r7, #27]
 8002ea4:	e002      	b.n	8002eac <dht22_GetValue+0xd4>
			else
				// else bit 0
				result = result << 1;
 8002ea6:	7efb      	ldrb	r3, [r7, #27]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	76fb      	strb	r3, [r7, #27]
			time_out = g_sys_tick;
 8002eac:	4b59      	ldr	r3, [pc, #356]	; (8003014 <dht22_GetValue+0x23c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a59      	ldr	r2, [pc, #356]	; (8003018 <dht22_GetValue+0x240>)
 8002eb2:	6013      	str	r3, [r2, #0]
			while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))	// wait dht22 transmit bit 1 complete
 8002eb4:	e021      	b.n	8002efa <dht22_GetValue+0x122>
			{
				if (g_sys_tick - time_out >= DHT_TIMEOUT) {
 8002eb6:	4b57      	ldr	r3, [pc, #348]	; (8003014 <dht22_GetValue+0x23c>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	4b57      	ldr	r3, [pc, #348]	; (8003018 <dht22_GetValue+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d91a      	bls.n	8002efa <dht22_GetValue+0x122>
					if (isDebug) {
 8002ec4:	4b55      	ldr	r3, [pc, #340]	; (800301c <dht22_GetValue+0x244>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00d      	beq.n	8002ee8 <dht22_GetValue+0x110>
						sprintf((char*) tx, "tsm cplt");
 8002ecc:	495a      	ldr	r1, [pc, #360]	; (8003038 <dht22_GetValue+0x260>)
 8002ece:	4855      	ldr	r0, [pc, #340]	; (8003024 <dht22_GetValue+0x24c>)
 8002ed0:	f005 fbb6 	bl	8008640 <sprintf>
						HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002ed4:	4853      	ldr	r0, [pc, #332]	; (8003024 <dht22_GetValue+0x24c>)
 8002ed6:	f7fd f983 	bl	80001e0 <strlen>
 8002eda:	4603      	mov	r3, r0
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	23c8      	movs	r3, #200	; 0xc8
 8002ee0:	4950      	ldr	r1, [pc, #320]	; (8003024 <dht22_GetValue+0x24c>)
 8002ee2:	4851      	ldr	r0, [pc, #324]	; (8003028 <dht22_GetValue+0x250>)
 8002ee4:	f004 f8e3 	bl	80070ae <HAL_UART_Transmit>
					}
					tem = -1;
 8002ee8:	4b50      	ldr	r3, [pc, #320]	; (800302c <dht22_GetValue+0x254>)
 8002eea:	4a51      	ldr	r2, [pc, #324]	; (8003030 <dht22_GetValue+0x258>)
 8002eec:	601a      	str	r2, [r3, #0]
					hum = -1;
 8002eee:	4b51      	ldr	r3, [pc, #324]	; (8003034 <dht22_GetValue+0x25c>)
 8002ef0:	4a4f      	ldr	r2, [pc, #316]	; (8003030 <dht22_GetValue+0x258>)
 8002ef2:	601a      	str	r2, [r3, #0]
					init_dht22();
 8002ef4:	f7ff ff60 	bl	8002db8 <init_dht22>
					return;
 8002ef8:	e087      	b.n	800300a <dht22_GetValue+0x232>
			while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))	// wait dht22 transmit bit 1 complete
 8002efa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002efe:	4844      	ldr	r0, [pc, #272]	; (8003010 <dht22_GetValue+0x238>)
 8002f00:	f001 fde2 	bl	8004ac8 <HAL_GPIO_ReadPin>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1d5      	bne.n	8002eb6 <dht22_GetValue+0xde>
		for (int i = 0; i < 8; i++) { //for each bit in each byte (8 total)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b07      	cmp	r3, #7
 8002f14:	dd85      	ble.n	8002e22 <dht22_GetValue+0x4a>
				}
			}
		}
		bytes[j] = result;
 8002f16:	f107 0208 	add.w	r2, r7, #8
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	7efa      	ldrb	r2, [r7, #27]
 8002f20:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 5; j++) {
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3301      	adds	r3, #1
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	f77f af74 	ble.w	8002e18 <dht22_GetValue+0x40>
	}

	init_dht22();
 8002f30:	f7ff ff42 	bl	8002db8 <init_dht22>

	dht->hum = bytes[0];
 8002f34:	7a3a      	ldrb	r2, [r7, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	701a      	strb	r2, [r3, #0]
	dht->hum0 = bytes[1];
 8002f3a:	7a7a      	ldrb	r2, [r7, #9]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	705a      	strb	r2, [r3, #1]
	dht->tem = bytes[2];
 8002f40:	7aba      	ldrb	r2, [r7, #10]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	709a      	strb	r2, [r3, #2]
	dht->tem0 = bytes[3];
 8002f46:	7afa      	ldrb	r2, [r7, #11]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	70da      	strb	r2, [r3, #3]
	dht->check_sum = bytes[4];
 8002f4c:	7b3a      	ldrb	r2, [r7, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	711a      	strb	r2, [r3, #4]

	uint16_t check = (uint16_t) bytes[0] + (uint16_t) bytes[1]
 8002f52:	7a3b      	ldrb	r3, [r7, #8]
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	7a7b      	ldrb	r3, [r7, #9]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	b29a      	uxth	r2, r3
			+ (uint16_t) bytes[2] + (uint16_t) bytes[3];
 8002f5e:	7abb      	ldrb	r3, [r7, #10]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	7afb      	ldrb	r3, [r7, #11]
 8002f68:	b29b      	uxth	r3, r3
	uint16_t check = (uint16_t) bytes[0] + (uint16_t) bytes[1]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	827b      	strh	r3, [r7, #18]
	if ((check % 256) != bytes[4]) {
 8002f6e:	8a7b      	ldrh	r3, [r7, #18]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	7b3b      	ldrb	r3, [r7, #12]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d01a      	beq.n	8002fb2 <dht22_GetValue+0x1da>
		if (isDebug) {
 8002f7c:	4b27      	ldr	r3, [pc, #156]	; (800301c <dht22_GetValue+0x244>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00d      	beq.n	8002fa0 <dht22_GetValue+0x1c8>
			sprintf((char*) tx, "Err cs");
 8002f84:	492d      	ldr	r1, [pc, #180]	; (800303c <dht22_GetValue+0x264>)
 8002f86:	4827      	ldr	r0, [pc, #156]	; (8003024 <dht22_GetValue+0x24c>)
 8002f88:	f005 fb5a 	bl	8008640 <sprintf>
			HAL_UART_Transmit(&huart1, tx, strlen((char*) tx), 200);
 8002f8c:	4825      	ldr	r0, [pc, #148]	; (8003024 <dht22_GetValue+0x24c>)
 8002f8e:	f7fd f927 	bl	80001e0 <strlen>
 8002f92:	4603      	mov	r3, r0
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	23c8      	movs	r3, #200	; 0xc8
 8002f98:	4922      	ldr	r1, [pc, #136]	; (8003024 <dht22_GetValue+0x24c>)
 8002f9a:	4823      	ldr	r0, [pc, #140]	; (8003028 <dht22_GetValue+0x250>)
 8002f9c:	f004 f887 	bl	80070ae <HAL_UART_Transmit>
		}
		tem = -1;
 8002fa0:	4b22      	ldr	r3, [pc, #136]	; (800302c <dht22_GetValue+0x254>)
 8002fa2:	4a23      	ldr	r2, [pc, #140]	; (8003030 <dht22_GetValue+0x258>)
 8002fa4:	601a      	str	r2, [r3, #0]
		hum = -1;
 8002fa6:	4b23      	ldr	r3, [pc, #140]	; (8003034 <dht22_GetValue+0x25c>)
 8002fa8:	4a21      	ldr	r2, [pc, #132]	; (8003030 <dht22_GetValue+0x258>)
 8002faa:	601a      	str	r2, [r3, #0]
		init_dht22();
 8002fac:	f7ff ff04 	bl	8002db8 <init_dht22>
		return;							// incorrect checksum
 8002fb0:	e02b      	b.n	800300a <dht22_GetValue+0x232>
	}

	uint16_t t = ((uint16_t) dht->tem << 8) | ((uint16_t) dht->tem0);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	789b      	ldrb	r3, [r3, #2]
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	b21a      	sxth	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	78db      	ldrb	r3, [r3, #3]
 8002fbe:	b21b      	sxth	r3, r3
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	b21b      	sxth	r3, r3
 8002fc4:	823b      	strh	r3, [r7, #16]
	uint16_t h = ((uint16_t) dht->hum << 8) | ((uint16_t) dht->hum0);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	021b      	lsls	r3, r3, #8
 8002fcc:	b21a      	sxth	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	785b      	ldrb	r3, [r3, #1]
 8002fd2:	b21b      	sxth	r3, r3
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	b21b      	sxth	r3, r3
 8002fd8:	81fb      	strh	r3, [r7, #14]

	tem = (float) t / 10;
 8002fda:	8a3b      	ldrh	r3, [r7, #16]
 8002fdc:	ee07 3a90 	vmov	s15, r3
 8002fe0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fe4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002fe8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fec:	4b0f      	ldr	r3, [pc, #60]	; (800302c <dht22_GetValue+0x254>)
 8002fee:	edc3 7a00 	vstr	s15, [r3]
	hum = (float) h / 10;
 8002ff2:	89fb      	ldrh	r3, [r7, #14]
 8002ff4:	ee07 3a90 	vmov	s15, r3
 8002ff8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ffc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003000:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003004:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <dht22_GetValue+0x25c>)
 8003006:	edc3 7a00 	vstr	s15, [r3]
}
 800300a:	3720      	adds	r7, #32
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40020400 	.word	0x40020400
 8003014:	200010a0 	.word	0x200010a0
 8003018:	200010ec 	.word	0x200010ec
 800301c:	2000115c 	.word	0x2000115c
 8003020:	0800ff60 	.word	0x0800ff60
 8003024:	20000c9c 	.word	0x20000c9c
 8003028:	20000bf4 	.word	0x20000bf4
 800302c:	200010e4 	.word	0x200010e4
 8003030:	bf800000 	.word	0xbf800000
 8003034:	200010e8 	.word	0x200010e8
 8003038:	0800ff68 	.word	0x0800ff68
 800303c:	0800ff74 	.word	0x0800ff74

08003040 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);
	if (GPIO_Pin == GPIO_PIN_0) {				// sr501 pin
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d114      	bne.n	800307a <HAL_GPIO_EXTI_Callback+0x3a>
		if (g_sys_tick - btn_tick >= 500) {
 8003050:	4b8d      	ldr	r3, [pc, #564]	; (8003288 <HAL_GPIO_EXTI_Callback+0x248>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4b8d      	ldr	r3, [pc, #564]	; (800328c <HAL_GPIO_EXTI_Callback+0x24c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800305e:	f0c0 810d 	bcc.w	800327c <HAL_GPIO_EXTI_Callback+0x23c>
			if (d_mod)
 8003062:	4b8b      	ldr	r3, [pc, #556]	; (8003290 <HAL_GPIO_EXTI_Callback+0x250>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <HAL_GPIO_EXTI_Callback+0x30>
				d_done = 1;
 800306a:	4b8a      	ldr	r3, [pc, #552]	; (8003294 <HAL_GPIO_EXTI_Callback+0x254>)
 800306c:	2201      	movs	r2, #1
 800306e:	701a      	strb	r2, [r3, #0]
			btn_tick = g_sys_tick;
 8003070:	4b85      	ldr	r3, [pc, #532]	; (8003288 <HAL_GPIO_EXTI_Callback+0x248>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a85      	ldr	r2, [pc, #532]	; (800328c <HAL_GPIO_EXTI_Callback+0x24c>)
 8003076:	6013      	str	r3, [r2, #0]
			if (speed_2 == 6)
				speed_2 = 0;
			btn_tick = g_sys_tick;
		}
	}
}
 8003078:	e100      	b.n	800327c <HAL_GPIO_EXTI_Callback+0x23c>
	} else if (GPIO_Pin == GPIO_PIN_2) {			// sr501 2 pin
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	2b04      	cmp	r3, #4
 800307e:	d114      	bne.n	80030aa <HAL_GPIO_EXTI_Callback+0x6a>
		if (g_sys_tick - btn_tick >= 500) {
 8003080:	4b81      	ldr	r3, [pc, #516]	; (8003288 <HAL_GPIO_EXTI_Callback+0x248>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4b81      	ldr	r3, [pc, #516]	; (800328c <HAL_GPIO_EXTI_Callback+0x24c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800308e:	f0c0 80f5 	bcc.w	800327c <HAL_GPIO_EXTI_Callback+0x23c>
			if (d_mod_2)
 8003092:	4b81      	ldr	r3, [pc, #516]	; (8003298 <HAL_GPIO_EXTI_Callback+0x258>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <HAL_GPIO_EXTI_Callback+0x60>
				d_done_2 = 1;
 800309a:	4b80      	ldr	r3, [pc, #512]	; (800329c <HAL_GPIO_EXTI_Callback+0x25c>)
 800309c:	2201      	movs	r2, #1
 800309e:	701a      	strb	r2, [r3, #0]
			btn_tick = g_sys_tick;
 80030a0:	4b79      	ldr	r3, [pc, #484]	; (8003288 <HAL_GPIO_EXTI_Callback+0x248>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a79      	ldr	r2, [pc, #484]	; (800328c <HAL_GPIO_EXTI_Callback+0x24c>)
 80030a6:	6013      	str	r3, [r2, #0]
}
 80030a8:	e0e8      	b.n	800327c <HAL_GPIO_EXTI_Callback+0x23c>
	} else if (GPIO_Pin == GPIO_PIN_3) {			// light sensor pin
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d114      	bne.n	80030da <HAL_GPIO_EXTI_Callback+0x9a>
		if (g_sys_tick - lss_tick >= 500) {
 80030b0:	4b75      	ldr	r3, [pc, #468]	; (8003288 <HAL_GPIO_EXTI_Callback+0x248>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b7a      	ldr	r3, [pc, #488]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x260>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030be:	f0c0 80dd 	bcc.w	800327c <HAL_GPIO_EXTI_Callback+0x23c>
			if (led_mod)
 80030c2:	4b78      	ldr	r3, [pc, #480]	; (80032a4 <HAL_GPIO_EXTI_Callback+0x264>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_GPIO_EXTI_Callback+0x90>
				l_done = 1;
 80030ca:	4b77      	ldr	r3, [pc, #476]	; (80032a8 <HAL_GPIO_EXTI_Callback+0x268>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
			lss_tick = g_sys_tick;
 80030d0:	4b6d      	ldr	r3, [pc, #436]	; (8003288 <HAL_GPIO_EXTI_Callback+0x248>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a72      	ldr	r2, [pc, #456]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x260>)
 80030d6:	6013      	str	r3, [r2, #0]
}
 80030d8:	e0d0      	b.n	800327c <HAL_GPIO_EXTI_Callback+0x23c>
	} else if (GPIO_Pin == GPIO_PIN_1) {			// light sensor 2 pin
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d114      	bne.n	800310a <HAL_GPIO_EXTI_Callback+0xca>
		if (g_sys_tick - lss_tick >= 500) {
 80030e0:	4b69      	ldr	r3, [pc, #420]	; (8003288 <HAL_GPIO_EXTI_Callback+0x248>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b6e      	ldr	r3, [pc, #440]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x260>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030ee:	f0c0 80c5 	bcc.w	800327c <HAL_GPIO_EXTI_Callback+0x23c>
			if (led_mod_2)
 80030f2:	4b6e      	ldr	r3, [pc, #440]	; (80032ac <HAL_GPIO_EXTI_Callback+0x26c>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <HAL_GPIO_EXTI_Callback+0xc0>
				l_done_2 = 1;
 80030fa:	4b6d      	ldr	r3, [pc, #436]	; (80032b0 <HAL_GPIO_EXTI_Callback+0x270>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]
			lss_tick = g_sys_tick;
 8003100:	4b61      	ldr	r3, [pc, #388]	; (8003288 <HAL_GPIO_EXTI_Callback+0x248>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a66      	ldr	r2, [pc, #408]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x260>)
 8003106:	6013      	str	r3, [r2, #0]
}
 8003108:	e0b8      	b.n	800327c <HAL_GPIO_EXTI_Callback+0x23c>
	} else if (GPIO_Pin == GPIO_PIN_4) {				// door button
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	2b10      	cmp	r3, #16
 800310e:	d11a      	bne.n	8003146 <HAL_GPIO_EXTI_Callback+0x106>
		if (g_sys_tick - btn_tick >= 500) {
 8003110:	4b5d      	ldr	r3, [pc, #372]	; (8003288 <HAL_GPIO_EXTI_Callback+0x248>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4b5d      	ldr	r3, [pc, #372]	; (800328c <HAL_GPIO_EXTI_Callback+0x24c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800311e:	f0c0 80ad 	bcc.w	800327c <HAL_GPIO_EXTI_Callback+0x23c>
			d_mod = 0;
 8003122:	4b5b      	ldr	r3, [pc, #364]	; (8003290 <HAL_GPIO_EXTI_Callback+0x250>)
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
			door_state ^= 1;
 8003128:	4b62      	ldr	r3, [pc, #392]	; (80032b4 <HAL_GPIO_EXTI_Callback+0x274>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	f083 0301 	eor.w	r3, r3, #1
 8003130:	b2da      	uxtb	r2, r3
 8003132:	4b60      	ldr	r3, [pc, #384]	; (80032b4 <HAL_GPIO_EXTI_Callback+0x274>)
 8003134:	701a      	strb	r2, [r3, #0]
			d_done = 1;
 8003136:	4b57      	ldr	r3, [pc, #348]	; (8003294 <HAL_GPIO_EXTI_Callback+0x254>)
 8003138:	2201      	movs	r2, #1
 800313a:	701a      	strb	r2, [r3, #0]
			btn_tick = g_sys_tick;
 800313c:	4b52      	ldr	r3, [pc, #328]	; (8003288 <HAL_GPIO_EXTI_Callback+0x248>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a52      	ldr	r2, [pc, #328]	; (800328c <HAL_GPIO_EXTI_Callback+0x24c>)
 8003142:	6013      	str	r3, [r2, #0]
}
 8003144:	e09a      	b.n	800327c <HAL_GPIO_EXTI_Callback+0x23c>
	} else if (GPIO_Pin == GPIO_PIN_8) {				// door 2 button
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800314c:	d11a      	bne.n	8003184 <HAL_GPIO_EXTI_Callback+0x144>
		if (g_sys_tick - btn_tick >= 500) {
 800314e:	4b4e      	ldr	r3, [pc, #312]	; (8003288 <HAL_GPIO_EXTI_Callback+0x248>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	4b4e      	ldr	r3, [pc, #312]	; (800328c <HAL_GPIO_EXTI_Callback+0x24c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800315c:	f0c0 808e 	bcc.w	800327c <HAL_GPIO_EXTI_Callback+0x23c>
			d_mod_2 = 0;
 8003160:	4b4d      	ldr	r3, [pc, #308]	; (8003298 <HAL_GPIO_EXTI_Callback+0x258>)
 8003162:	2200      	movs	r2, #0
 8003164:	701a      	strb	r2, [r3, #0]
			door_state_2 ^= 1;
 8003166:	4b54      	ldr	r3, [pc, #336]	; (80032b8 <HAL_GPIO_EXTI_Callback+0x278>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	f083 0301 	eor.w	r3, r3, #1
 800316e:	b2da      	uxtb	r2, r3
 8003170:	4b51      	ldr	r3, [pc, #324]	; (80032b8 <HAL_GPIO_EXTI_Callback+0x278>)
 8003172:	701a      	strb	r2, [r3, #0]
			d_done_2 = 1;
 8003174:	4b49      	ldr	r3, [pc, #292]	; (800329c <HAL_GPIO_EXTI_Callback+0x25c>)
 8003176:	2201      	movs	r2, #1
 8003178:	701a      	strb	r2, [r3, #0]
			btn_tick = g_sys_tick;
 800317a:	4b43      	ldr	r3, [pc, #268]	; (8003288 <HAL_GPIO_EXTI_Callback+0x248>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a43      	ldr	r2, [pc, #268]	; (800328c <HAL_GPIO_EXTI_Callback+0x24c>)
 8003180:	6013      	str	r3, [r2, #0]
}
 8003182:	e07b      	b.n	800327c <HAL_GPIO_EXTI_Callback+0x23c>
	} else if (GPIO_Pin == GPIO_PIN_14) {				// light button
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800318a:	d119      	bne.n	80031c0 <HAL_GPIO_EXTI_Callback+0x180>
		if (g_sys_tick - btn_tick >= 500) {
 800318c:	4b3e      	ldr	r3, [pc, #248]	; (8003288 <HAL_GPIO_EXTI_Callback+0x248>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4b3e      	ldr	r3, [pc, #248]	; (800328c <HAL_GPIO_EXTI_Callback+0x24c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800319a:	d36f      	bcc.n	800327c <HAL_GPIO_EXTI_Callback+0x23c>
			led_mod = 0;
 800319c:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <HAL_GPIO_EXTI_Callback+0x264>)
 800319e:	2200      	movs	r2, #0
 80031a0:	701a      	strb	r2, [r3, #0]
			led_state ^= 1;
 80031a2:	4b46      	ldr	r3, [pc, #280]	; (80032bc <HAL_GPIO_EXTI_Callback+0x27c>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	f083 0301 	eor.w	r3, r3, #1
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	4b43      	ldr	r3, [pc, #268]	; (80032bc <HAL_GPIO_EXTI_Callback+0x27c>)
 80031ae:	701a      	strb	r2, [r3, #0]
			l_done = 1;
 80031b0:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <HAL_GPIO_EXTI_Callback+0x268>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	701a      	strb	r2, [r3, #0]
			btn_tick = g_sys_tick;
 80031b6:	4b34      	ldr	r3, [pc, #208]	; (8003288 <HAL_GPIO_EXTI_Callback+0x248>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a34      	ldr	r2, [pc, #208]	; (800328c <HAL_GPIO_EXTI_Callback+0x24c>)
 80031bc:	6013      	str	r3, [r2, #0]
}
 80031be:	e05d      	b.n	800327c <HAL_GPIO_EXTI_Callback+0x23c>
	} else if (GPIO_Pin == GPIO_PIN_15) {				// light button 2
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c6:	d119      	bne.n	80031fc <HAL_GPIO_EXTI_Callback+0x1bc>
		if (g_sys_tick - btn_tick >= 500) {
 80031c8:	4b2f      	ldr	r3, [pc, #188]	; (8003288 <HAL_GPIO_EXTI_Callback+0x248>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4b2f      	ldr	r3, [pc, #188]	; (800328c <HAL_GPIO_EXTI_Callback+0x24c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031d6:	d351      	bcc.n	800327c <HAL_GPIO_EXTI_Callback+0x23c>
			led_mod_2 = 0;
 80031d8:	4b34      	ldr	r3, [pc, #208]	; (80032ac <HAL_GPIO_EXTI_Callback+0x26c>)
 80031da:	2200      	movs	r2, #0
 80031dc:	701a      	strb	r2, [r3, #0]
			led_state_2 ^= 1;
 80031de:	4b38      	ldr	r3, [pc, #224]	; (80032c0 <HAL_GPIO_EXTI_Callback+0x280>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	f083 0301 	eor.w	r3, r3, #1
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	4b35      	ldr	r3, [pc, #212]	; (80032c0 <HAL_GPIO_EXTI_Callback+0x280>)
 80031ea:	701a      	strb	r2, [r3, #0]
			l_done_2 = 1;
 80031ec:	4b30      	ldr	r3, [pc, #192]	; (80032b0 <HAL_GPIO_EXTI_Callback+0x270>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	701a      	strb	r2, [r3, #0]
			btn_tick = g_sys_tick;
 80031f2:	4b25      	ldr	r3, [pc, #148]	; (8003288 <HAL_GPIO_EXTI_Callback+0x248>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a25      	ldr	r2, [pc, #148]	; (800328c <HAL_GPIO_EXTI_Callback+0x24c>)
 80031f8:	6013      	str	r3, [r2, #0]
}
 80031fa:	e03f      	b.n	800327c <HAL_GPIO_EXTI_Callback+0x23c>
	} else if (GPIO_Pin == GPIO_PIN_12) {				// fan button
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003202:	d11c      	bne.n	800323e <HAL_GPIO_EXTI_Callback+0x1fe>
		if (g_sys_tick - btn_tick >= 500) {
 8003204:	4b20      	ldr	r3, [pc, #128]	; (8003288 <HAL_GPIO_EXTI_Callback+0x248>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4b20      	ldr	r3, [pc, #128]	; (800328c <HAL_GPIO_EXTI_Callback+0x24c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003212:	d333      	bcc.n	800327c <HAL_GPIO_EXTI_Callback+0x23c>
			f_done = 1;
 8003214:	4b2b      	ldr	r3, [pc, #172]	; (80032c4 <HAL_GPIO_EXTI_Callback+0x284>)
 8003216:	2201      	movs	r2, #1
 8003218:	701a      	strb	r2, [r3, #0]
			speed++;
 800321a:	4b2b      	ldr	r3, [pc, #172]	; (80032c8 <HAL_GPIO_EXTI_Callback+0x288>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	3301      	adds	r3, #1
 8003220:	b2da      	uxtb	r2, r3
 8003222:	4b29      	ldr	r3, [pc, #164]	; (80032c8 <HAL_GPIO_EXTI_Callback+0x288>)
 8003224:	701a      	strb	r2, [r3, #0]
			if (speed == 6)
 8003226:	4b28      	ldr	r3, [pc, #160]	; (80032c8 <HAL_GPIO_EXTI_Callback+0x288>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b06      	cmp	r3, #6
 800322c:	d102      	bne.n	8003234 <HAL_GPIO_EXTI_Callback+0x1f4>
				speed = 0;
 800322e:	4b26      	ldr	r3, [pc, #152]	; (80032c8 <HAL_GPIO_EXTI_Callback+0x288>)
 8003230:	2200      	movs	r2, #0
 8003232:	701a      	strb	r2, [r3, #0]
			btn_tick = g_sys_tick;
 8003234:	4b14      	ldr	r3, [pc, #80]	; (8003288 <HAL_GPIO_EXTI_Callback+0x248>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a14      	ldr	r2, [pc, #80]	; (800328c <HAL_GPIO_EXTI_Callback+0x24c>)
 800323a:	6013      	str	r3, [r2, #0]
}
 800323c:	e01e      	b.n	800327c <HAL_GPIO_EXTI_Callback+0x23c>
	} else if (GPIO_Pin == GPIO_PIN_5) {				// fan2 button
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	2b20      	cmp	r3, #32
 8003242:	d11b      	bne.n	800327c <HAL_GPIO_EXTI_Callback+0x23c>
		if (g_sys_tick - btn_tick >= 500) {
 8003244:	4b10      	ldr	r3, [pc, #64]	; (8003288 <HAL_GPIO_EXTI_Callback+0x248>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4b10      	ldr	r3, [pc, #64]	; (800328c <HAL_GPIO_EXTI_Callback+0x24c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003252:	d313      	bcc.n	800327c <HAL_GPIO_EXTI_Callback+0x23c>
			f_done_2 = 1;
 8003254:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <HAL_GPIO_EXTI_Callback+0x28c>)
 8003256:	2201      	movs	r2, #1
 8003258:	701a      	strb	r2, [r3, #0]
			speed_2++;
 800325a:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <HAL_GPIO_EXTI_Callback+0x290>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	3301      	adds	r3, #1
 8003260:	b2da      	uxtb	r2, r3
 8003262:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <HAL_GPIO_EXTI_Callback+0x290>)
 8003264:	701a      	strb	r2, [r3, #0]
			if (speed_2 == 6)
 8003266:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <HAL_GPIO_EXTI_Callback+0x290>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b06      	cmp	r3, #6
 800326c:	d102      	bne.n	8003274 <HAL_GPIO_EXTI_Callback+0x234>
				speed_2 = 0;
 800326e:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <HAL_GPIO_EXTI_Callback+0x290>)
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]
			btn_tick = g_sys_tick;
 8003274:	4b04      	ldr	r3, [pc, #16]	; (8003288 <HAL_GPIO_EXTI_Callback+0x248>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a04      	ldr	r2, [pc, #16]	; (800328c <HAL_GPIO_EXTI_Callback+0x24c>)
 800327a:	6013      	str	r3, [r2, #0]
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	200010a0 	.word	0x200010a0
 800328c:	200010f0 	.word	0x200010f0
 8003290:	200010ba 	.word	0x200010ba
 8003294:	200010be 	.word	0x200010be
 8003298:	200010bb 	.word	0x200010bb
 800329c:	200010bf 	.word	0x200010bf
 80032a0:	200010b4 	.word	0x200010b4
 80032a4:	200010b0 	.word	0x200010b0
 80032a8:	200010b2 	.word	0x200010b2
 80032ac:	200010b1 	.word	0x200010b1
 80032b0:	200010b3 	.word	0x200010b3
 80032b4:	200010bc 	.word	0x200010bc
 80032b8:	200010bd 	.word	0x200010bd
 80032bc:	200010ae 	.word	0x200010ae
 80032c0:	200010af 	.word	0x200010af
 80032c4:	200010c6 	.word	0x200010c6
 80032c8:	200010c4 	.word	0x200010c4
 80032cc:	200010c7 	.word	0x200010c7
 80032d0:	200010c5 	.word	0x200010c5

080032d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance) {
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4b11      	ldr	r3, [pc, #68]	; (8003328 <HAL_UART_RxCpltCallback+0x54>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d11a      	bne.n	800331e <HAL_UART_RxCpltCallback+0x4a>
		if (uart_buf_cnt < sizeof(uart_buf)) {
 80032e8:	4b10      	ldr	r3, [pc, #64]	; (800332c <HAL_UART_RxCpltCallback+0x58>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b63      	cmp	r3, #99	; 0x63
 80032ee:	d806      	bhi.n	80032fe <HAL_UART_RxCpltCallback+0x2a>
			uart_buf[uart_buf_cnt] = uart_chr;
 80032f0:	4b0e      	ldr	r3, [pc, #56]	; (800332c <HAL_UART_RxCpltCallback+0x58>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	461a      	mov	r2, r3
 80032f6:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <HAL_UART_RxCpltCallback+0x5c>)
 80032f8:	7819      	ldrb	r1, [r3, #0]
 80032fa:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <HAL_UART_RxCpltCallback+0x60>)
 80032fc:	5499      	strb	r1, [r3, r2]
		}
		uart_last_rcv = g_sys_tick;
 80032fe:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <HAL_UART_RxCpltCallback+0x64>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	b2da      	uxtb	r2, r3
 8003304:	4b0d      	ldr	r3, [pc, #52]	; (800333c <HAL_UART_RxCpltCallback+0x68>)
 8003306:	701a      	strb	r2, [r3, #0]
		uart_buf_cnt++;
 8003308:	4b08      	ldr	r3, [pc, #32]	; (800332c <HAL_UART_RxCpltCallback+0x58>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	3301      	adds	r3, #1
 800330e:	b2da      	uxtb	r2, r3
 8003310:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_UART_RxCpltCallback+0x58>)
 8003312:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &uart_chr, sizeof(uart_chr));
 8003314:	2201      	movs	r2, #1
 8003316:	4906      	ldr	r1, [pc, #24]	; (8003330 <HAL_UART_RxCpltCallback+0x5c>)
 8003318:	4803      	ldr	r0, [pc, #12]	; (8003328 <HAL_UART_RxCpltCallback+0x54>)
 800331a:	f003 ff5a 	bl	80071d2 <HAL_UART_Receive_IT>
	}
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000bf4 	.word	0x20000bf4
 800332c:	2000109c 	.word	0x2000109c
 8003330:	2000109d 	.word	0x2000109d
 8003334:	20000c38 	.word	0x20000c38
 8003338:	200010a0 	.word	0x200010a0
 800333c:	2000109e 	.word	0x2000109e

08003340 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance) {
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d10c      	bne.n	800336e <HAL_TIM_PeriodElapsedCallback+0x2e>
		g_sys_tick++;
 8003354:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3301      	adds	r3, #1
 800335a:	4a09      	ldr	r2, [pc, #36]	; (8003380 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800335c:	6013      	str	r3, [r2, #0]
		if (g_sys_tick >= 0xFFFFFFFF)
 800335e:	4b08      	ldr	r3, [pc, #32]	; (8003380 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003366:	d102      	bne.n	800336e <HAL_TIM_PeriodElapsedCallback+0x2e>
			g_sys_tick = 0;
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
	}
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	20000b1c 	.word	0x20000b1c
 8003380:	200010a0 	.word	0x200010a0

08003384 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == hspi2.Instance) {
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <HAL_SPI_TxRxCpltCallback+0x28>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d102      	bne.n	800339e <HAL_SPI_TxRxCpltCallback+0x1a>
		rx_spi_flg = 1;
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <HAL_SPI_TxRxCpltCallback+0x2c>)
 800339a:	2201      	movs	r2, #1
 800339c:	701a      	strb	r2, [r3, #0]
	}
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	20000a34 	.word	0x20000a34
 80033b0:	200010f4 	.word	0x200010f4

080033b4 <getADC_value>:

void getADC_value() {
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80033b8:	480b      	ldr	r0, [pc, #44]	; (80033e8 <getADC_value+0x34>)
 80033ba:	f000 fcbf 	bl	8003d3c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80033be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033c2:	4809      	ldr	r0, [pc, #36]	; (80033e8 <getADC_value+0x34>)
 80033c4:	f000 fda1 	bl	8003f0a <HAL_ADC_PollForConversion>
	adc_val = HAL_ADC_GetValue(&hadc1);
 80033c8:	4807      	ldr	r0, [pc, #28]	; (80033e8 <getADC_value+0x34>)
 80033ca:	f000 fe29 	bl	8004020 <HAL_ADC_GetValue>
 80033ce:	4603      	mov	r3, r0
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	4b06      	ldr	r3, [pc, #24]	; (80033ec <getADC_value+0x38>)
 80033d4:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80033d6:	4804      	ldr	r0, [pc, #16]	; (80033e8 <getADC_value+0x34>)
 80033d8:	f000 fd64 	bl	8003ea4 <HAL_ADC_Stop>
	buz_done = 1;
 80033dc:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <getADC_value+0x3c>)
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	200009ec 	.word	0x200009ec
 80033ec:	200010d8 	.word	0x200010d8
 80033f0:	200010c0 	.word	0x200010c0

080033f4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033f8:	b672      	cpsid	i
}
 80033fa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80033fc:	e7fe      	b.n	80033fc <Error_Handler+0x8>
	...

08003400 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	607b      	str	r3, [r7, #4]
 800340a:	4b10      	ldr	r3, [pc, #64]	; (800344c <HAL_MspInit+0x4c>)
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	4a0f      	ldr	r2, [pc, #60]	; (800344c <HAL_MspInit+0x4c>)
 8003410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003414:	6453      	str	r3, [r2, #68]	; 0x44
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <HAL_MspInit+0x4c>)
 8003418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800341e:	607b      	str	r3, [r7, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003422:	2300      	movs	r3, #0
 8003424:	603b      	str	r3, [r7, #0]
 8003426:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_MspInit+0x4c>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	4a08      	ldr	r2, [pc, #32]	; (800344c <HAL_MspInit+0x4c>)
 800342c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003430:	6413      	str	r3, [r2, #64]	; 0x40
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <HAL_MspInit+0x4c>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40023800 	.word	0x40023800

08003450 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a17      	ldr	r2, [pc, #92]	; (80034cc <HAL_ADC_MspInit+0x7c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d127      	bne.n	80034c2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <HAL_ADC_MspInit+0x80>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	4a15      	ldr	r2, [pc, #84]	; (80034d0 <HAL_ADC_MspInit+0x80>)
 800347c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003480:	6453      	str	r3, [r2, #68]	; 0x44
 8003482:	4b13      	ldr	r3, [pc, #76]	; (80034d0 <HAL_ADC_MspInit+0x80>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <HAL_ADC_MspInit+0x80>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	4a0e      	ldr	r2, [pc, #56]	; (80034d0 <HAL_ADC_MspInit+0x80>)
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	6313      	str	r3, [r2, #48]	; 0x30
 800349e:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <HAL_ADC_MspInit+0x80>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80034aa:	2320      	movs	r3, #32
 80034ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ae:	2303      	movs	r3, #3
 80034b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b6:	f107 0314 	add.w	r3, r7, #20
 80034ba:	4619      	mov	r1, r3
 80034bc:	4805      	ldr	r0, [pc, #20]	; (80034d4 <HAL_ADC_MspInit+0x84>)
 80034be:	f001 f97f 	bl	80047c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80034c2:	bf00      	nop
 80034c4:	3728      	adds	r7, #40	; 0x28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40012000 	.word	0x40012000
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40020000 	.word	0x40020000

080034d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	; 0x28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a1d      	ldr	r2, [pc, #116]	; (800356c <HAL_SPI_MspInit+0x94>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d134      	bne.n	8003564 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	4b1c      	ldr	r3, [pc, #112]	; (8003570 <HAL_SPI_MspInit+0x98>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	4a1b      	ldr	r2, [pc, #108]	; (8003570 <HAL_SPI_MspInit+0x98>)
 8003504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003508:	6413      	str	r3, [r2, #64]	; 0x40
 800350a:	4b19      	ldr	r3, [pc, #100]	; (8003570 <HAL_SPI_MspInit+0x98>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <HAL_SPI_MspInit+0x98>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	4a14      	ldr	r2, [pc, #80]	; (8003570 <HAL_SPI_MspInit+0x98>)
 8003520:	f043 0302 	orr.w	r3, r3, #2
 8003524:	6313      	str	r3, [r2, #48]	; 0x30
 8003526:	4b12      	ldr	r3, [pc, #72]	; (8003570 <HAL_SPI_MspInit+0x98>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003532:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003538:	2302      	movs	r3, #2
 800353a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353c:	2300      	movs	r3, #0
 800353e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003540:	2303      	movs	r3, #3
 8003542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003544:	2305      	movs	r3, #5
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	4619      	mov	r1, r3
 800354e:	4809      	ldr	r0, [pc, #36]	; (8003574 <HAL_SPI_MspInit+0x9c>)
 8003550:	f001 f936 	bl	80047c0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 7, 0);
 8003554:	2200      	movs	r2, #0
 8003556:	2107      	movs	r1, #7
 8003558:	2024      	movs	r0, #36	; 0x24
 800355a:	f001 f868 	bl	800462e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800355e:	2024      	movs	r0, #36	; 0x24
 8003560:	f001 f881 	bl	8004666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003564:	bf00      	nop
 8003566:	3728      	adds	r7, #40	; 0x28
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40003800 	.word	0x40003800
 8003570:	40023800 	.word	0x40023800
 8003574:	40020400 	.word	0x40020400

08003578 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a22      	ldr	r2, [pc, #136]	; (8003610 <HAL_TIM_Base_MspInit+0x98>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d10e      	bne.n	80035a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	4b21      	ldr	r3, [pc, #132]	; (8003614 <HAL_TIM_Base_MspInit+0x9c>)
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	4a20      	ldr	r2, [pc, #128]	; (8003614 <HAL_TIM_Base_MspInit+0x9c>)
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	6453      	str	r3, [r2, #68]	; 0x44
 800359a:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <HAL_TIM_Base_MspInit+0x9c>)
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80035a6:	e02e      	b.n	8003606 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b0:	d10e      	bne.n	80035d0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	4b17      	ldr	r3, [pc, #92]	; (8003614 <HAL_TIM_Base_MspInit+0x9c>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	4a16      	ldr	r2, [pc, #88]	; (8003614 <HAL_TIM_Base_MspInit+0x9c>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	6413      	str	r3, [r2, #64]	; 0x40
 80035c2:	4b14      	ldr	r3, [pc, #80]	; (8003614 <HAL_TIM_Base_MspInit+0x9c>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	693b      	ldr	r3, [r7, #16]
}
 80035ce:	e01a      	b.n	8003606 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a10      	ldr	r2, [pc, #64]	; (8003618 <HAL_TIM_Base_MspInit+0xa0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d115      	bne.n	8003606 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	4b0d      	ldr	r3, [pc, #52]	; (8003614 <HAL_TIM_Base_MspInit+0x9c>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	4a0c      	ldr	r2, [pc, #48]	; (8003614 <HAL_TIM_Base_MspInit+0x9c>)
 80035e4:	f043 0302 	orr.w	r3, r3, #2
 80035e8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ea:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <HAL_TIM_Base_MspInit+0x9c>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 13, 0);
 80035f6:	2200      	movs	r2, #0
 80035f8:	210d      	movs	r1, #13
 80035fa:	201d      	movs	r0, #29
 80035fc:	f001 f817 	bl	800462e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003600:	201d      	movs	r0, #29
 8003602:	f001 f830 	bl	8004666 <HAL_NVIC_EnableIRQ>
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40010000 	.word	0x40010000
 8003614:	40023800 	.word	0x40023800
 8003618:	40000400 	.word	0x40000400

0800361c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08c      	sub	sp, #48	; 0x30
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003624:	f107 031c 	add.w	r3, r7, #28
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a32      	ldr	r2, [pc, #200]	; (8003704 <HAL_TIM_Encoder_MspInit+0xe8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d12c      	bne.n	8003698 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	4b31      	ldr	r3, [pc, #196]	; (8003708 <HAL_TIM_Encoder_MspInit+0xec>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	4a30      	ldr	r2, [pc, #192]	; (8003708 <HAL_TIM_Encoder_MspInit+0xec>)
 8003648:	f043 0304 	orr.w	r3, r3, #4
 800364c:	6413      	str	r3, [r2, #64]	; 0x40
 800364e:	4b2e      	ldr	r3, [pc, #184]	; (8003708 <HAL_TIM_Encoder_MspInit+0xec>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	61bb      	str	r3, [r7, #24]
 8003658:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	4b2a      	ldr	r3, [pc, #168]	; (8003708 <HAL_TIM_Encoder_MspInit+0xec>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	4a29      	ldr	r2, [pc, #164]	; (8003708 <HAL_TIM_Encoder_MspInit+0xec>)
 8003664:	f043 0302 	orr.w	r3, r3, #2
 8003668:	6313      	str	r3, [r2, #48]	; 0x30
 800366a:	4b27      	ldr	r3, [pc, #156]	; (8003708 <HAL_TIM_Encoder_MspInit+0xec>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003676:	23c0      	movs	r3, #192	; 0xc0
 8003678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367a:	2302      	movs	r3, #2
 800367c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003682:	2300      	movs	r3, #0
 8003684:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003686:	2302      	movs	r3, #2
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800368a:	f107 031c 	add.w	r3, r7, #28
 800368e:	4619      	mov	r1, r3
 8003690:	481e      	ldr	r0, [pc, #120]	; (800370c <HAL_TIM_Encoder_MspInit+0xf0>)
 8003692:	f001 f895 	bl	80047c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003696:	e030      	b.n	80036fa <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1c      	ldr	r2, [pc, #112]	; (8003710 <HAL_TIM_Encoder_MspInit+0xf4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d12b      	bne.n	80036fa <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	4b18      	ldr	r3, [pc, #96]	; (8003708 <HAL_TIM_Encoder_MspInit+0xec>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	4a17      	ldr	r2, [pc, #92]	; (8003708 <HAL_TIM_Encoder_MspInit+0xec>)
 80036ac:	f043 0308 	orr.w	r3, r3, #8
 80036b0:	6413      	str	r3, [r2, #64]	; 0x40
 80036b2:	4b15      	ldr	r3, [pc, #84]	; (8003708 <HAL_TIM_Encoder_MspInit+0xec>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	4b11      	ldr	r3, [pc, #68]	; (8003708 <HAL_TIM_Encoder_MspInit+0xec>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	4a10      	ldr	r2, [pc, #64]	; (8003708 <HAL_TIM_Encoder_MspInit+0xec>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	6313      	str	r3, [r2, #48]	; 0x30
 80036ce:	4b0e      	ldr	r3, [pc, #56]	; (8003708 <HAL_TIM_Encoder_MspInit+0xec>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80036da:	2303      	movs	r3, #3
 80036dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036de:	2302      	movs	r3, #2
 80036e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e6:	2300      	movs	r3, #0
 80036e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80036ea:	2302      	movs	r3, #2
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ee:	f107 031c 	add.w	r3, r7, #28
 80036f2:	4619      	mov	r1, r3
 80036f4:	4807      	ldr	r0, [pc, #28]	; (8003714 <HAL_TIM_Encoder_MspInit+0xf8>)
 80036f6:	f001 f863 	bl	80047c0 <HAL_GPIO_Init>
}
 80036fa:	bf00      	nop
 80036fc:	3730      	adds	r7, #48	; 0x30
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40000800 	.word	0x40000800
 8003708:	40023800 	.word	0x40023800
 800370c:	40020400 	.word	0x40020400
 8003710:	40000c00 	.word	0x40000c00
 8003714:	40020000 	.word	0x40020000

08003718 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	; 0x28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	605a      	str	r2, [r3, #4]
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	60da      	str	r2, [r3, #12]
 800372e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a24      	ldr	r2, [pc, #144]	; (80037c8 <HAL_TIM_MspPostInit+0xb0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d11f      	bne.n	800377a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800373a:	2300      	movs	r3, #0
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	4b23      	ldr	r3, [pc, #140]	; (80037cc <HAL_TIM_MspPostInit+0xb4>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	4a22      	ldr	r2, [pc, #136]	; (80037cc <HAL_TIM_MspPostInit+0xb4>)
 8003744:	f043 0301 	orr.w	r3, r3, #1
 8003748:	6313      	str	r3, [r2, #48]	; 0x30
 800374a:	4b20      	ldr	r3, [pc, #128]	; (80037cc <HAL_TIM_MspPostInit+0xb4>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8003756:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800375a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375c:	2302      	movs	r3, #2
 800375e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003760:	2300      	movs	r3, #0
 8003762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003764:	2300      	movs	r3, #0
 8003766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003768:	2301      	movs	r3, #1
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800376c:	f107 0314 	add.w	r3, r7, #20
 8003770:	4619      	mov	r1, r3
 8003772:	4817      	ldr	r0, [pc, #92]	; (80037d0 <HAL_TIM_MspPostInit+0xb8>)
 8003774:	f001 f824 	bl	80047c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003778:	e022      	b.n	80037c0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a15      	ldr	r2, [pc, #84]	; (80037d4 <HAL_TIM_MspPostInit+0xbc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d11d      	bne.n	80037c0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	4b10      	ldr	r3, [pc, #64]	; (80037cc <HAL_TIM_MspPostInit+0xb4>)
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	4a0f      	ldr	r2, [pc, #60]	; (80037cc <HAL_TIM_MspPostInit+0xb4>)
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	6313      	str	r3, [r2, #48]	; 0x30
 8003794:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <HAL_TIM_MspPostInit+0xb4>)
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037a0:	23c0      	movs	r3, #192	; 0xc0
 80037a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a4:	2302      	movs	r3, #2
 80037a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a8:	2300      	movs	r3, #0
 80037aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ac:	2300      	movs	r3, #0
 80037ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037b0:	2302      	movs	r3, #2
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b4:	f107 0314 	add.w	r3, r7, #20
 80037b8:	4619      	mov	r1, r3
 80037ba:	4805      	ldr	r0, [pc, #20]	; (80037d0 <HAL_TIM_MspPostInit+0xb8>)
 80037bc:	f001 f800 	bl	80047c0 <HAL_GPIO_Init>
}
 80037c0:	bf00      	nop
 80037c2:	3728      	adds	r7, #40	; 0x28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40010000 	.word	0x40010000
 80037cc:	40023800 	.word	0x40023800
 80037d0:	40020000 	.word	0x40020000
 80037d4:	40000400 	.word	0x40000400

080037d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	; 0x28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e0:	f107 0314 	add.w	r3, r7, #20
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	60da      	str	r2, [r3, #12]
 80037ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a1d      	ldr	r2, [pc, #116]	; (800386c <HAL_UART_MspInit+0x94>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d134      	bne.n	8003864 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	4b1c      	ldr	r3, [pc, #112]	; (8003870 <HAL_UART_MspInit+0x98>)
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	4a1b      	ldr	r2, [pc, #108]	; (8003870 <HAL_UART_MspInit+0x98>)
 8003804:	f043 0310 	orr.w	r3, r3, #16
 8003808:	6453      	str	r3, [r2, #68]	; 0x44
 800380a:	4b19      	ldr	r3, [pc, #100]	; (8003870 <HAL_UART_MspInit+0x98>)
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	4b15      	ldr	r3, [pc, #84]	; (8003870 <HAL_UART_MspInit+0x98>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	4a14      	ldr	r2, [pc, #80]	; (8003870 <HAL_UART_MspInit+0x98>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	6313      	str	r3, [r2, #48]	; 0x30
 8003826:	4b12      	ldr	r3, [pc, #72]	; (8003870 <HAL_UART_MspInit+0x98>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003832:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003838:	2302      	movs	r3, #2
 800383a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383c:	2300      	movs	r3, #0
 800383e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003840:	2303      	movs	r3, #3
 8003842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003844:	2307      	movs	r3, #7
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003848:	f107 0314 	add.w	r3, r7, #20
 800384c:	4619      	mov	r1, r3
 800384e:	4809      	ldr	r0, [pc, #36]	; (8003874 <HAL_UART_MspInit+0x9c>)
 8003850:	f000 ffb6 	bl	80047c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 8003854:	2200      	movs	r2, #0
 8003856:	210e      	movs	r1, #14
 8003858:	2025      	movs	r0, #37	; 0x25
 800385a:	f000 fee8 	bl	800462e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800385e:	2025      	movs	r0, #37	; 0x25
 8003860:	f000 ff01 	bl	8004666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003864:	bf00      	nop
 8003866:	3728      	adds	r7, #40	; 0x28
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40011000 	.word	0x40011000
 8003870:	40023800 	.word	0x40023800
 8003874:	40020000 	.word	0x40020000

08003878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800387c:	e7fe      	b.n	800387c <NMI_Handler+0x4>

0800387e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800387e:	b480      	push	{r7}
 8003880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003882:	e7fe      	b.n	8003882 <HardFault_Handler+0x4>

08003884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003888:	e7fe      	b.n	8003888 <MemManage_Handler+0x4>

0800388a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800388a:	b480      	push	{r7}
 800388c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800388e:	e7fe      	b.n	800388e <BusFault_Handler+0x4>

08003890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003894:	e7fe      	b.n	8003894 <UsageFault_Handler+0x4>

08003896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003896:	b480      	push	{r7}
 8003898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038a8:	bf00      	nop
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038b2:	b480      	push	{r7}
 80038b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038b6:	bf00      	nop
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038c4:	f000 f9b2 	bl	8003c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038c8:	bf00      	nop
 80038ca:	bd80      	pop	{r7, pc}

080038cc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SR501_Pin);
 80038d0:	2001      	movs	r0, #1
 80038d2:	f001 f945 	bl	8004b60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}

080038da <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LSS2_Pin);
 80038de:	2002      	movs	r0, #2
 80038e0:	f001 f93e 	bl	8004b60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80038e4:	bf00      	nop
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SR502_2_Pin);
 80038ec:	2004      	movs	r0, #4
 80038ee:	f001 f937 	bl	8004b60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LSS_Pin);
 80038fa:	2008      	movs	r0, #8
 80038fc:	f001 f930 	bl	8004b60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003900:	bf00      	nop
 8003902:	bd80      	pop	{r7, pc}

08003904 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8003908:	2010      	movs	r0, #16
 800390a:	f001 f929 	bl	8004b60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}

08003912 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8003916:	2020      	movs	r0, #32
 8003918:	f001 f922 	bl	8004b60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 800391c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003920:	f001 f91e 	bl	8004b60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003924:	bf00      	nop
 8003926:	bd80      	pop	{r7, pc}

08003928 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800392c:	4802      	ldr	r0, [pc, #8]	; (8003938 <TIM3_IRQHandler+0x10>)
 800392e:	f002 fd17 	bl	8006360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003932:	bf00      	nop
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000b1c 	.word	0x20000b1c

0800393c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003940:	4802      	ldr	r0, [pc, #8]	; (800394c <SPI2_IRQHandler+0x10>)
 8003942:	f001 fe9b 	bl	800567c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003946:	bf00      	nop
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000a34 	.word	0x20000a34

08003950 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003954:	4802      	ldr	r0, [pc, #8]	; (8003960 <USART1_IRQHandler+0x10>)
 8003956:	f003 fc6d 	bl	8007234 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800395a:	bf00      	nop
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000bf4 	.word	0x20000bf4

08003964 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN5_Pin);
 8003968:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800396c:	f001 f8f8 	bl	8004b60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN6_Pin);
 8003970:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003974:	f001 f8f4 	bl	8004b60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 8003978:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800397c:	f001 f8f0 	bl	8004b60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003980:	bf00      	nop
 8003982:	bd80      	pop	{r7, pc}

08003984 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return 1;
 8003988:	2301      	movs	r3, #1
}
 800398a:	4618      	mov	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <_kill>:

int _kill(int pid, int sig)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800399e:	f004 fbb5 	bl	800810c <__errno>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2216      	movs	r2, #22
 80039a6:	601a      	str	r2, [r3, #0]
  return -1;
 80039a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <_exit>:

void _exit (int status)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039bc:	f04f 31ff 	mov.w	r1, #4294967295
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff ffe7 	bl	8003994 <_kill>
  while (1) {}    /* Make sure we hang here */
 80039c6:	e7fe      	b.n	80039c6 <_exit+0x12>

080039c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	e00a      	b.n	80039f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80039da:	f3af 8000 	nop.w
 80039de:	4601      	mov	r1, r0
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	60ba      	str	r2, [r7, #8]
 80039e6:	b2ca      	uxtb	r2, r1
 80039e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	3301      	adds	r3, #1
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	dbf0      	blt.n	80039da <_read+0x12>
  }

  return len;
 80039f8:	687b      	ldr	r3, [r7, #4]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b086      	sub	sp, #24
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	e009      	b.n	8003a28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	60ba      	str	r2, [r7, #8]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	3301      	adds	r3, #1
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	dbf1      	blt.n	8003a14 <_write+0x12>
  }
  return len;
 8003a30:	687b      	ldr	r3, [r7, #4]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <_close>:

int _close(int file)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a62:	605a      	str	r2, [r3, #4]
  return 0;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <_isatty>:

int _isatty(int file)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a7a:	2301      	movs	r3, #1
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
	...

08003aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003aac:	4a14      	ldr	r2, [pc, #80]	; (8003b00 <_sbrk+0x5c>)
 8003aae:	4b15      	ldr	r3, [pc, #84]	; (8003b04 <_sbrk+0x60>)
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ab8:	4b13      	ldr	r3, [pc, #76]	; (8003b08 <_sbrk+0x64>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d102      	bne.n	8003ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ac0:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <_sbrk+0x64>)
 8003ac2:	4a12      	ldr	r2, [pc, #72]	; (8003b0c <_sbrk+0x68>)
 8003ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ac6:	4b10      	ldr	r3, [pc, #64]	; (8003b08 <_sbrk+0x64>)
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4413      	add	r3, r2
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d207      	bcs.n	8003ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ad4:	f004 fb1a 	bl	800810c <__errno>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	220c      	movs	r2, #12
 8003adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ade:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae2:	e009      	b.n	8003af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ae4:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <_sbrk+0x64>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aea:	4b07      	ldr	r3, [pc, #28]	; (8003b08 <_sbrk+0x64>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4413      	add	r3, r2
 8003af2:	4a05      	ldr	r2, [pc, #20]	; (8003b08 <_sbrk+0x64>)
 8003af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003af6:	68fb      	ldr	r3, [r7, #12]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	20010000 	.word	0x20010000
 8003b04:	00000400 	.word	0x00000400
 8003b08:	20001160 	.word	0x20001160
 8003b0c:	200011a8 	.word	0x200011a8

08003b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b14:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <SystemInit+0x20>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1a:	4a05      	ldr	r2, [pc, #20]	; (8003b30 <SystemInit+0x20>)
 8003b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	e000ed00 	.word	0xe000ed00

08003b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b38:	480d      	ldr	r0, [pc, #52]	; (8003b70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b3a:	490e      	ldr	r1, [pc, #56]	; (8003b74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b3c:	4a0e      	ldr	r2, [pc, #56]	; (8003b78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b40:	e002      	b.n	8003b48 <LoopCopyDataInit>

08003b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b46:	3304      	adds	r3, #4

08003b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b4c:	d3f9      	bcc.n	8003b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b4e:	4a0b      	ldr	r2, [pc, #44]	; (8003b7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b50:	4c0b      	ldr	r4, [pc, #44]	; (8003b80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b54:	e001      	b.n	8003b5a <LoopFillZerobss>

08003b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b58:	3204      	adds	r2, #4

08003b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b5c:	d3fb      	bcc.n	8003b56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b5e:	f7ff ffd7 	bl	8003b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b62:	f004 fad9 	bl	8008118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b66:	f7fd fc09 	bl	800137c <main>
  bx  lr    
 8003b6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b6c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b74:	200009c4 	.word	0x200009c4
  ldr r2, =_sidata
 8003b78:	08010428 	.word	0x08010428
  ldr r2, =_sbss
 8003b7c:	200009c4 	.word	0x200009c4
  ldr r4, =_ebss
 8003b80:	200011a4 	.word	0x200011a4

08003b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b84:	e7fe      	b.n	8003b84 <ADC_IRQHandler>
	...

08003b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b8c:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <HAL_Init+0x40>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a0d      	ldr	r2, [pc, #52]	; (8003bc8 <HAL_Init+0x40>)
 8003b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_Init+0x40>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a0a      	ldr	r2, [pc, #40]	; (8003bc8 <HAL_Init+0x40>)
 8003b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ba4:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <HAL_Init+0x40>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a07      	ldr	r2, [pc, #28]	; (8003bc8 <HAL_Init+0x40>)
 8003baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bb0:	2003      	movs	r0, #3
 8003bb2:	f000 fd31 	bl	8004618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bb6:	200f      	movs	r0, #15
 8003bb8:	f000 f808 	bl	8003bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bbc:	f7ff fc20 	bl	8003400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40023c00 	.word	0x40023c00

08003bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bd4:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <HAL_InitTick+0x54>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <HAL_InitTick+0x58>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 fd49 	bl	8004682 <HAL_SYSTICK_Config>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e00e      	b.n	8003c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b0f      	cmp	r3, #15
 8003bfe:	d80a      	bhi.n	8003c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c00:	2200      	movs	r2, #0
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	f04f 30ff 	mov.w	r0, #4294967295
 8003c08:	f000 fd11 	bl	800462e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c0c:	4a06      	ldr	r2, [pc, #24]	; (8003c28 <HAL_InitTick+0x5c>)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	e000      	b.n	8003c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20000004 	.word	0x20000004
 8003c24:	2000000c 	.word	0x2000000c
 8003c28:	20000008 	.word	0x20000008

08003c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <HAL_IncTick+0x20>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <HAL_IncTick+0x24>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <HAL_IncTick+0x24>)
 8003c3e:	6013      	str	r3, [r2, #0]
}
 8003c40:	bf00      	nop
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	2000000c 	.word	0x2000000c
 8003c50:	20001164 	.word	0x20001164

08003c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return uwTick;
 8003c58:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <HAL_GetTick+0x14>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20001164 	.word	0x20001164

08003c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c74:	f7ff ffee 	bl	8003c54 <HAL_GetTick>
 8003c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c84:	d005      	beq.n	8003c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c86:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <HAL_Delay+0x44>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c92:	bf00      	nop
 8003c94:	f7ff ffde 	bl	8003c54 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d8f7      	bhi.n	8003c94 <HAL_Delay+0x28>
  {
  }
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	2000000c 	.word	0x2000000c

08003cb4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e033      	b.n	8003d32 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d109      	bne.n	8003ce6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff fbbc 	bl	8003450 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	f003 0310 	and.w	r3, r3, #16
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d118      	bne.n	8003d24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003cfa:	f023 0302 	bic.w	r3, r3, #2
 8003cfe:	f043 0202 	orr.w	r2, r3, #2
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 faba 	bl	8004280 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	f023 0303 	bic.w	r3, r3, #3
 8003d1a:	f043 0201 	orr.w	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	641a      	str	r2, [r3, #64]	; 0x40
 8003d22:	e001      	b.n	8003d28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_ADC_Start+0x1a>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e097      	b.n	8003e86 <HAL_ADC_Start+0x14a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d018      	beq.n	8003d9e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0201 	orr.w	r2, r2, #1
 8003d7a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d7c:	4b45      	ldr	r3, [pc, #276]	; (8003e94 <HAL_ADC_Start+0x158>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a45      	ldr	r2, [pc, #276]	; (8003e98 <HAL_ADC_Start+0x15c>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	0c9a      	lsrs	r2, r3, #18
 8003d88:	4613      	mov	r3, r2
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	4413      	add	r3, r2
 8003d8e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003d90:	e002      	b.n	8003d98 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	3b01      	subs	r3, #1
 8003d96:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f9      	bne.n	8003d92 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d15f      	bne.n	8003e6c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d007      	beq.n	8003dde <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003dd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dea:	d106      	bne.n	8003dfa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df0:	f023 0206 	bic.w	r2, r3, #6
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	645a      	str	r2, [r3, #68]	; 0x44
 8003df8:	e002      	b.n	8003e00 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e08:	4b24      	ldr	r3, [pc, #144]	; (8003e9c <HAL_ADC_Start+0x160>)
 8003e0a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e14:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f003 031f 	and.w	r3, r3, #31
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10f      	bne.n	8003e42 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d129      	bne.n	8003e84 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	e020      	b.n	8003e84 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a16      	ldr	r2, [pc, #88]	; (8003ea0 <HAL_ADC_Start+0x164>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d11b      	bne.n	8003e84 <HAL_ADC_Start+0x148>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d114      	bne.n	8003e84 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e68:	609a      	str	r2, [r3, #8]
 8003e6a:	e00b      	b.n	8003e84 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	f043 0210 	orr.w	r2, r3, #16
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7c:	f043 0201 	orr.w	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	20000004 	.word	0x20000004
 8003e98:	431bde83 	.word	0x431bde83
 8003e9c:	40012300 	.word	0x40012300
 8003ea0:	40012000 	.word	0x40012000

08003ea4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d101      	bne.n	8003eba <HAL_ADC_Stop+0x16>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e021      	b.n	8003efe <HAL_ADC_Stop+0x5a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0201 	bic.w	r2, r2, #1
 8003ed0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d109      	bne.n	8003ef4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	f043 0201 	orr.w	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f26:	d113      	bne.n	8003f50 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f36:	d10b      	bne.n	8003f50 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	f043 0220 	orr.w	r2, r3, #32
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e063      	b.n	8004018 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003f50:	f7ff fe80 	bl	8003c54 <HAL_GetTick>
 8003f54:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f56:	e021      	b.n	8003f9c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5e:	d01d      	beq.n	8003f9c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <HAL_ADC_PollForConversion+0x6c>
 8003f66:	f7ff fe75 	bl	8003c54 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d212      	bcs.n	8003f9c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d00b      	beq.n	8003f9c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	f043 0204 	orr.w	r2, r3, #4
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e03d      	b.n	8004018 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d1d6      	bne.n	8003f58 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f06f 0212 	mvn.w	r2, #18
 8003fb2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d123      	bne.n	8004016 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d11f      	bne.n	8004016 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d006      	beq.n	8003ff2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d111      	bne.n	8004016 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d105      	bne.n	8004016 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	f043 0201 	orr.w	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800402e:	4618      	mov	r0, r3
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
	...

0800403c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x1c>
 8004054:	2302      	movs	r3, #2
 8004056:	e105      	b.n	8004264 <HAL_ADC_ConfigChannel+0x228>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b09      	cmp	r3, #9
 8004066:	d925      	bls.n	80040b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68d9      	ldr	r1, [r3, #12]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	b29b      	uxth	r3, r3
 8004074:	461a      	mov	r2, r3
 8004076:	4613      	mov	r3, r2
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	4413      	add	r3, r2
 800407c:	3b1e      	subs	r3, #30
 800407e:	2207      	movs	r2, #7
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43da      	mvns	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	400a      	ands	r2, r1
 800408c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68d9      	ldr	r1, [r3, #12]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	b29b      	uxth	r3, r3
 800409e:	4618      	mov	r0, r3
 80040a0:	4603      	mov	r3, r0
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	4403      	add	r3, r0
 80040a6:	3b1e      	subs	r3, #30
 80040a8:	409a      	lsls	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	60da      	str	r2, [r3, #12]
 80040b2:	e022      	b.n	80040fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6919      	ldr	r1, [r3, #16]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	4613      	mov	r3, r2
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	4413      	add	r3, r2
 80040c8:	2207      	movs	r2, #7
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43da      	mvns	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	400a      	ands	r2, r1
 80040d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6919      	ldr	r1, [r3, #16]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	4618      	mov	r0, r3
 80040ea:	4603      	mov	r3, r0
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	4403      	add	r3, r0
 80040f0:	409a      	lsls	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b06      	cmp	r3, #6
 8004100:	d824      	bhi.n	800414c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	3b05      	subs	r3, #5
 8004114:	221f      	movs	r2, #31
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43da      	mvns	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	400a      	ands	r2, r1
 8004122:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	b29b      	uxth	r3, r3
 8004130:	4618      	mov	r0, r3
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	3b05      	subs	r3, #5
 800413e:	fa00 f203 	lsl.w	r2, r0, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	635a      	str	r2, [r3, #52]	; 0x34
 800414a:	e04c      	b.n	80041e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b0c      	cmp	r3, #12
 8004152:	d824      	bhi.n	800419e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	3b23      	subs	r3, #35	; 0x23
 8004166:	221f      	movs	r2, #31
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	43da      	mvns	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	400a      	ands	r2, r1
 8004174:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	b29b      	uxth	r3, r3
 8004182:	4618      	mov	r0, r3
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	3b23      	subs	r3, #35	; 0x23
 8004190:	fa00 f203 	lsl.w	r2, r0, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	631a      	str	r2, [r3, #48]	; 0x30
 800419c:	e023      	b.n	80041e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	3b41      	subs	r3, #65	; 0x41
 80041b0:	221f      	movs	r2, #31
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43da      	mvns	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	400a      	ands	r2, r1
 80041be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	4618      	mov	r0, r3
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	3b41      	subs	r3, #65	; 0x41
 80041da:	fa00 f203 	lsl.w	r2, r0, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041e6:	4b22      	ldr	r3, [pc, #136]	; (8004270 <HAL_ADC_ConfigChannel+0x234>)
 80041e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a21      	ldr	r2, [pc, #132]	; (8004274 <HAL_ADC_ConfigChannel+0x238>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d109      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x1cc>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b12      	cmp	r3, #18
 80041fa:	d105      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a19      	ldr	r2, [pc, #100]	; (8004274 <HAL_ADC_ConfigChannel+0x238>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d123      	bne.n	800425a <HAL_ADC_ConfigChannel+0x21e>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b10      	cmp	r3, #16
 8004218:	d003      	beq.n	8004222 <HAL_ADC_ConfigChannel+0x1e6>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b11      	cmp	r3, #17
 8004220:	d11b      	bne.n	800425a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b10      	cmp	r3, #16
 8004234:	d111      	bne.n	800425a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004236:	4b10      	ldr	r3, [pc, #64]	; (8004278 <HAL_ADC_ConfigChannel+0x23c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a10      	ldr	r2, [pc, #64]	; (800427c <HAL_ADC_ConfigChannel+0x240>)
 800423c:	fba2 2303 	umull	r2, r3, r2, r3
 8004240:	0c9a      	lsrs	r2, r3, #18
 8004242:	4613      	mov	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800424c:	e002      	b.n	8004254 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	3b01      	subs	r3, #1
 8004252:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1f9      	bne.n	800424e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	40012300 	.word	0x40012300
 8004274:	40012000 	.word	0x40012000
 8004278:	20000004 	.word	0x20000004
 800427c:	431bde83 	.word	0x431bde83

08004280 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004288:	4b79      	ldr	r3, [pc, #484]	; (8004470 <ADC_Init+0x1f0>)
 800428a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	431a      	orrs	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6859      	ldr	r1, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	021a      	lsls	r2, r3, #8
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80042d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6859      	ldr	r1, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6899      	ldr	r1, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004312:	4a58      	ldr	r2, [pc, #352]	; (8004474 <ADC_Init+0x1f4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d022      	beq.n	800435e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004326:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6899      	ldr	r1, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004348:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6899      	ldr	r1, [r3, #8]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	e00f      	b.n	800437e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800436c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800437c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0202 	bic.w	r2, r2, #2
 800438c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6899      	ldr	r1, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	7e1b      	ldrb	r3, [r3, #24]
 8004398:	005a      	lsls	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d01b      	beq.n	80043e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6859      	ldr	r1, [r3, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	3b01      	subs	r3, #1
 80043d8:	035a      	lsls	r2, r3, #13
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]
 80043e2:	e007      	b.n	80043f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004402:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	3b01      	subs	r3, #1
 8004410:	051a      	lsls	r2, r3, #20
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004428:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6899      	ldr	r1, [r3, #8]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004436:	025a      	lsls	r2, r3, #9
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800444e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6899      	ldr	r1, [r3, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	029a      	lsls	r2, r3, #10
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	609a      	str	r2, [r3, #8]
}
 8004464:	bf00      	nop
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	40012300 	.word	0x40012300
 8004474:	0f000001 	.word	0x0f000001

08004478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004488:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <__NVIC_SetPriorityGrouping+0x44>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004494:	4013      	ands	r3, r2
 8004496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044aa:	4a04      	ldr	r2, [pc, #16]	; (80044bc <__NVIC_SetPriorityGrouping+0x44>)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	60d3      	str	r3, [r2, #12]
}
 80044b0:	bf00      	nop
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	e000ed00 	.word	0xe000ed00

080044c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044c4:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <__NVIC_GetPriorityGrouping+0x18>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	0a1b      	lsrs	r3, r3, #8
 80044ca:	f003 0307 	and.w	r3, r3, #7
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	e000ed00 	.word	0xe000ed00

080044dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	db0b      	blt.n	8004506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	f003 021f 	and.w	r2, r3, #31
 80044f4:	4907      	ldr	r1, [pc, #28]	; (8004514 <__NVIC_EnableIRQ+0x38>)
 80044f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	2001      	movs	r0, #1
 80044fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	e000e100 	.word	0xe000e100

08004518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	6039      	str	r1, [r7, #0]
 8004522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004528:	2b00      	cmp	r3, #0
 800452a:	db0a      	blt.n	8004542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	b2da      	uxtb	r2, r3
 8004530:	490c      	ldr	r1, [pc, #48]	; (8004564 <__NVIC_SetPriority+0x4c>)
 8004532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004536:	0112      	lsls	r2, r2, #4
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	440b      	add	r3, r1
 800453c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004540:	e00a      	b.n	8004558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	b2da      	uxtb	r2, r3
 8004546:	4908      	ldr	r1, [pc, #32]	; (8004568 <__NVIC_SetPriority+0x50>)
 8004548:	79fb      	ldrb	r3, [r7, #7]
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	3b04      	subs	r3, #4
 8004550:	0112      	lsls	r2, r2, #4
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	440b      	add	r3, r1
 8004556:	761a      	strb	r2, [r3, #24]
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	e000e100 	.word	0xe000e100
 8004568:	e000ed00 	.word	0xe000ed00

0800456c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800456c:	b480      	push	{r7}
 800456e:	b089      	sub	sp, #36	; 0x24
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f1c3 0307 	rsb	r3, r3, #7
 8004586:	2b04      	cmp	r3, #4
 8004588:	bf28      	it	cs
 800458a:	2304      	movcs	r3, #4
 800458c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	3304      	adds	r3, #4
 8004592:	2b06      	cmp	r3, #6
 8004594:	d902      	bls.n	800459c <NVIC_EncodePriority+0x30>
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	3b03      	subs	r3, #3
 800459a:	e000      	b.n	800459e <NVIC_EncodePriority+0x32>
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045a0:	f04f 32ff 	mov.w	r2, #4294967295
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	43da      	mvns	r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	401a      	ands	r2, r3
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045b4:	f04f 31ff 	mov.w	r1, #4294967295
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	fa01 f303 	lsl.w	r3, r1, r3
 80045be:	43d9      	mvns	r1, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c4:	4313      	orrs	r3, r2
         );
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3724      	adds	r7, #36	; 0x24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
	...

080045d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3b01      	subs	r3, #1
 80045e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045e4:	d301      	bcc.n	80045ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045e6:	2301      	movs	r3, #1
 80045e8:	e00f      	b.n	800460a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045ea:	4a0a      	ldr	r2, [pc, #40]	; (8004614 <SysTick_Config+0x40>)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045f2:	210f      	movs	r1, #15
 80045f4:	f04f 30ff 	mov.w	r0, #4294967295
 80045f8:	f7ff ff8e 	bl	8004518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <SysTick_Config+0x40>)
 80045fe:	2200      	movs	r2, #0
 8004600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004602:	4b04      	ldr	r3, [pc, #16]	; (8004614 <SysTick_Config+0x40>)
 8004604:	2207      	movs	r2, #7
 8004606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	e000e010 	.word	0xe000e010

08004618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f7ff ff29 	bl	8004478 <__NVIC_SetPriorityGrouping>
}
 8004626:	bf00      	nop
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800462e:	b580      	push	{r7, lr}
 8004630:	b086      	sub	sp, #24
 8004632:	af00      	add	r7, sp, #0
 8004634:	4603      	mov	r3, r0
 8004636:	60b9      	str	r1, [r7, #8]
 8004638:	607a      	str	r2, [r7, #4]
 800463a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800463c:	2300      	movs	r3, #0
 800463e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004640:	f7ff ff3e 	bl	80044c0 <__NVIC_GetPriorityGrouping>
 8004644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	6978      	ldr	r0, [r7, #20]
 800464c:	f7ff ff8e 	bl	800456c <NVIC_EncodePriority>
 8004650:	4602      	mov	r2, r0
 8004652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004656:	4611      	mov	r1, r2
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff ff5d 	bl	8004518 <__NVIC_SetPriority>
}
 800465e:	bf00      	nop
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b082      	sub	sp, #8
 800466a:	af00      	add	r7, sp, #0
 800466c:	4603      	mov	r3, r0
 800466e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff ff31 	bl	80044dc <__NVIC_EnableIRQ>
}
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b082      	sub	sp, #8
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7ff ffa2 	bl	80045d4 <SysTick_Config>
 8004690:	4603      	mov	r3, r0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046a8:	f7ff fad4 	bl	8003c54 <HAL_GetTick>
 80046ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d008      	beq.n	80046cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2280      	movs	r2, #128	; 0x80
 80046be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e052      	b.n	8004772 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0216 	bic.w	r2, r2, #22
 80046da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695a      	ldr	r2, [r3, #20]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d103      	bne.n	80046fc <HAL_DMA_Abort+0x62>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d007      	beq.n	800470c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0208 	bic.w	r2, r2, #8
 800470a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0201 	bic.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800471c:	e013      	b.n	8004746 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800471e:	f7ff fa99 	bl	8003c54 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b05      	cmp	r3, #5
 800472a:	d90c      	bls.n	8004746 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2203      	movs	r2, #3
 8004736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e015      	b.n	8004772 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1e4      	bne.n	800471e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004758:	223f      	movs	r2, #63	; 0x3f
 800475a:	409a      	lsls	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d004      	beq.n	8004798 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2280      	movs	r2, #128	; 0x80
 8004792:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e00c      	b.n	80047b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2205      	movs	r2, #5
 800479c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0201 	bic.w	r2, r2, #1
 80047ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
	...

080047c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b089      	sub	sp, #36	; 0x24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	e159      	b.n	8004a90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047dc:	2201      	movs	r2, #1
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	4013      	ands	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	f040 8148 	bne.w	8004a8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	2b01      	cmp	r3, #1
 8004804:	d005      	beq.n	8004812 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800480e:	2b02      	cmp	r3, #2
 8004810:	d130      	bne.n	8004874 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	2203      	movs	r2, #3
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	43db      	mvns	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4313      	orrs	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004848:	2201      	movs	r2, #1
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4013      	ands	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	091b      	lsrs	r3, r3, #4
 800485e:	f003 0201 	and.w	r2, r3, #1
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4313      	orrs	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f003 0303 	and.w	r3, r3, #3
 800487c:	2b03      	cmp	r3, #3
 800487e:	d017      	beq.n	80048b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	2203      	movs	r2, #3
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	43db      	mvns	r3, r3
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4013      	ands	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d123      	bne.n	8004904 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	08da      	lsrs	r2, r3, #3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3208      	adds	r2, #8
 80048c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	220f      	movs	r2, #15
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	08da      	lsrs	r2, r3, #3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3208      	adds	r2, #8
 80048fe:	69b9      	ldr	r1, [r7, #24]
 8004900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	2203      	movs	r2, #3
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	43db      	mvns	r3, r3
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4013      	ands	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f003 0203 	and.w	r2, r3, #3
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4313      	orrs	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80a2 	beq.w	8004a8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	4b57      	ldr	r3, [pc, #348]	; (8004aa8 <HAL_GPIO_Init+0x2e8>)
 800494c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494e:	4a56      	ldr	r2, [pc, #344]	; (8004aa8 <HAL_GPIO_Init+0x2e8>)
 8004950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004954:	6453      	str	r3, [r2, #68]	; 0x44
 8004956:	4b54      	ldr	r3, [pc, #336]	; (8004aa8 <HAL_GPIO_Init+0x2e8>)
 8004958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004962:	4a52      	ldr	r2, [pc, #328]	; (8004aac <HAL_GPIO_Init+0x2ec>)
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	089b      	lsrs	r3, r3, #2
 8004968:	3302      	adds	r3, #2
 800496a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800496e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	220f      	movs	r2, #15
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	43db      	mvns	r3, r3
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	4013      	ands	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a49      	ldr	r2, [pc, #292]	; (8004ab0 <HAL_GPIO_Init+0x2f0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d019      	beq.n	80049c2 <HAL_GPIO_Init+0x202>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a48      	ldr	r2, [pc, #288]	; (8004ab4 <HAL_GPIO_Init+0x2f4>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <HAL_GPIO_Init+0x1fe>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a47      	ldr	r2, [pc, #284]	; (8004ab8 <HAL_GPIO_Init+0x2f8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00d      	beq.n	80049ba <HAL_GPIO_Init+0x1fa>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a46      	ldr	r2, [pc, #280]	; (8004abc <HAL_GPIO_Init+0x2fc>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d007      	beq.n	80049b6 <HAL_GPIO_Init+0x1f6>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a45      	ldr	r2, [pc, #276]	; (8004ac0 <HAL_GPIO_Init+0x300>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d101      	bne.n	80049b2 <HAL_GPIO_Init+0x1f2>
 80049ae:	2304      	movs	r3, #4
 80049b0:	e008      	b.n	80049c4 <HAL_GPIO_Init+0x204>
 80049b2:	2307      	movs	r3, #7
 80049b4:	e006      	b.n	80049c4 <HAL_GPIO_Init+0x204>
 80049b6:	2303      	movs	r3, #3
 80049b8:	e004      	b.n	80049c4 <HAL_GPIO_Init+0x204>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e002      	b.n	80049c4 <HAL_GPIO_Init+0x204>
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <HAL_GPIO_Init+0x204>
 80049c2:	2300      	movs	r3, #0
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	f002 0203 	and.w	r2, r2, #3
 80049ca:	0092      	lsls	r2, r2, #2
 80049cc:	4093      	lsls	r3, r2
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049d4:	4935      	ldr	r1, [pc, #212]	; (8004aac <HAL_GPIO_Init+0x2ec>)
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	089b      	lsrs	r3, r3, #2
 80049da:	3302      	adds	r3, #2
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049e2:	4b38      	ldr	r3, [pc, #224]	; (8004ac4 <HAL_GPIO_Init+0x304>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	43db      	mvns	r3, r3
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	4013      	ands	r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a06:	4a2f      	ldr	r2, [pc, #188]	; (8004ac4 <HAL_GPIO_Init+0x304>)
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a0c:	4b2d      	ldr	r3, [pc, #180]	; (8004ac4 <HAL_GPIO_Init+0x304>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	43db      	mvns	r3, r3
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a30:	4a24      	ldr	r2, [pc, #144]	; (8004ac4 <HAL_GPIO_Init+0x304>)
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a36:	4b23      	ldr	r3, [pc, #140]	; (8004ac4 <HAL_GPIO_Init+0x304>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	4013      	ands	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a5a:	4a1a      	ldr	r2, [pc, #104]	; (8004ac4 <HAL_GPIO_Init+0x304>)
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a60:	4b18      	ldr	r3, [pc, #96]	; (8004ac4 <HAL_GPIO_Init+0x304>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a84:	4a0f      	ldr	r2, [pc, #60]	; (8004ac4 <HAL_GPIO_Init+0x304>)
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	61fb      	str	r3, [r7, #28]
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	2b0f      	cmp	r3, #15
 8004a94:	f67f aea2 	bls.w	80047dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a98:	bf00      	nop
 8004a9a:	bf00      	nop
 8004a9c:	3724      	adds	r7, #36	; 0x24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	40013800 	.word	0x40013800
 8004ab0:	40020000 	.word	0x40020000
 8004ab4:	40020400 	.word	0x40020400
 8004ab8:	40020800 	.word	0x40020800
 8004abc:	40020c00 	.word	0x40020c00
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	40013c00 	.word	0x40013c00

08004ac8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	887b      	ldrh	r3, [r7, #2]
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	73fb      	strb	r3, [r7, #15]
 8004ae4:	e001      	b.n	8004aea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	807b      	strh	r3, [r7, #2]
 8004b04:	4613      	mov	r3, r2
 8004b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b08:	787b      	ldrb	r3, [r7, #1]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b0e:	887a      	ldrh	r2, [r7, #2]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b14:	e003      	b.n	8004b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b16:	887b      	ldrh	r3, [r7, #2]
 8004b18:	041a      	lsls	r2, r3, #16
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	619a      	str	r2, [r3, #24]
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	460b      	mov	r3, r1
 8004b34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b3c:	887a      	ldrh	r2, [r7, #2]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4013      	ands	r3, r2
 8004b42:	041a      	lsls	r2, r3, #16
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	43d9      	mvns	r1, r3
 8004b48:	887b      	ldrh	r3, [r7, #2]
 8004b4a:	400b      	ands	r3, r1
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	619a      	str	r2, [r3, #24]
}
 8004b52:	bf00      	nop
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
	...

08004b60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	4603      	mov	r3, r0
 8004b68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b6a:	4b08      	ldr	r3, [pc, #32]	; (8004b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b6c:	695a      	ldr	r2, [r3, #20]
 8004b6e:	88fb      	ldrh	r3, [r7, #6]
 8004b70:	4013      	ands	r3, r2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d006      	beq.n	8004b84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b76:	4a05      	ldr	r2, [pc, #20]	; (8004b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b78:	88fb      	ldrh	r3, [r7, #6]
 8004b7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b7c:	88fb      	ldrh	r3, [r7, #6]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fe fa5e 	bl	8003040 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b84:	bf00      	nop
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40013c00 	.word	0x40013c00

08004b90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e267      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d075      	beq.n	8004c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bae:	4b88      	ldr	r3, [pc, #544]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d00c      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bba:	4b85      	ldr	r3, [pc, #532]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d112      	bne.n	8004bec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bc6:	4b82      	ldr	r3, [pc, #520]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bd2:	d10b      	bne.n	8004bec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd4:	4b7e      	ldr	r3, [pc, #504]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d05b      	beq.n	8004c98 <HAL_RCC_OscConfig+0x108>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d157      	bne.n	8004c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e242      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf4:	d106      	bne.n	8004c04 <HAL_RCC_OscConfig+0x74>
 8004bf6:	4b76      	ldr	r3, [pc, #472]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a75      	ldr	r2, [pc, #468]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	e01d      	b.n	8004c40 <HAL_RCC_OscConfig+0xb0>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c0c:	d10c      	bne.n	8004c28 <HAL_RCC_OscConfig+0x98>
 8004c0e:	4b70      	ldr	r3, [pc, #448]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a6f      	ldr	r2, [pc, #444]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	4b6d      	ldr	r3, [pc, #436]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a6c      	ldr	r2, [pc, #432]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	e00b      	b.n	8004c40 <HAL_RCC_OscConfig+0xb0>
 8004c28:	4b69      	ldr	r3, [pc, #420]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a68      	ldr	r2, [pc, #416]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	4b66      	ldr	r3, [pc, #408]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a65      	ldr	r2, [pc, #404]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d013      	beq.n	8004c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c48:	f7ff f804 	bl	8003c54 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c50:	f7ff f800 	bl	8003c54 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b64      	cmp	r3, #100	; 0x64
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e207      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c62:	4b5b      	ldr	r3, [pc, #364]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0xc0>
 8004c6e:	e014      	b.n	8004c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c70:	f7fe fff0 	bl	8003c54 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c78:	f7fe ffec 	bl	8003c54 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b64      	cmp	r3, #100	; 0x64
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e1f3      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c8a:	4b51      	ldr	r3, [pc, #324]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1f0      	bne.n	8004c78 <HAL_RCC_OscConfig+0xe8>
 8004c96:	e000      	b.n	8004c9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d063      	beq.n	8004d6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ca6:	4b4a      	ldr	r3, [pc, #296]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 030c 	and.w	r3, r3, #12
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00b      	beq.n	8004cca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cb2:	4b47      	ldr	r3, [pc, #284]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d11c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cbe:	4b44      	ldr	r3, [pc, #272]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d116      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cca:	4b41      	ldr	r3, [pc, #260]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d005      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x152>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d001      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e1c7      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce2:	4b3b      	ldr	r3, [pc, #236]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	4937      	ldr	r1, [pc, #220]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cf6:	e03a      	b.n	8004d6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d020      	beq.n	8004d42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d00:	4b34      	ldr	r3, [pc, #208]	; (8004dd4 <HAL_RCC_OscConfig+0x244>)
 8004d02:	2201      	movs	r2, #1
 8004d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d06:	f7fe ffa5 	bl	8003c54 <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d0c:	e008      	b.n	8004d20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d0e:	f7fe ffa1 	bl	8003c54 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e1a8      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d20:	4b2b      	ldr	r3, [pc, #172]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0f0      	beq.n	8004d0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d2c:	4b28      	ldr	r3, [pc, #160]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4925      	ldr	r1, [pc, #148]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	600b      	str	r3, [r1, #0]
 8004d40:	e015      	b.n	8004d6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d42:	4b24      	ldr	r3, [pc, #144]	; (8004dd4 <HAL_RCC_OscConfig+0x244>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d48:	f7fe ff84 	bl	8003c54 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d50:	f7fe ff80 	bl	8003c54 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e187      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d62:	4b1b      	ldr	r3, [pc, #108]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1f0      	bne.n	8004d50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d036      	beq.n	8004de8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d016      	beq.n	8004db0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d82:	4b15      	ldr	r3, [pc, #84]	; (8004dd8 <HAL_RCC_OscConfig+0x248>)
 8004d84:	2201      	movs	r2, #1
 8004d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d88:	f7fe ff64 	bl	8003c54 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d90:	f7fe ff60 	bl	8003c54 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e167      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004da2:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0f0      	beq.n	8004d90 <HAL_RCC_OscConfig+0x200>
 8004dae:	e01b      	b.n	8004de8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004db0:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <HAL_RCC_OscConfig+0x248>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db6:	f7fe ff4d 	bl	8003c54 <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dbc:	e00e      	b.n	8004ddc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dbe:	f7fe ff49 	bl	8003c54 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d907      	bls.n	8004ddc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e150      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	42470000 	.word	0x42470000
 8004dd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ddc:	4b88      	ldr	r3, [pc, #544]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1ea      	bne.n	8004dbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 8097 	beq.w	8004f24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004df6:	2300      	movs	r3, #0
 8004df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dfa:	4b81      	ldr	r3, [pc, #516]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10f      	bne.n	8004e26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e06:	2300      	movs	r3, #0
 8004e08:	60bb      	str	r3, [r7, #8]
 8004e0a:	4b7d      	ldr	r3, [pc, #500]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	4a7c      	ldr	r2, [pc, #496]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e14:	6413      	str	r3, [r2, #64]	; 0x40
 8004e16:	4b7a      	ldr	r3, [pc, #488]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e1e:	60bb      	str	r3, [r7, #8]
 8004e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e22:	2301      	movs	r3, #1
 8004e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e26:	4b77      	ldr	r3, [pc, #476]	; (8005004 <HAL_RCC_OscConfig+0x474>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d118      	bne.n	8004e64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e32:	4b74      	ldr	r3, [pc, #464]	; (8005004 <HAL_RCC_OscConfig+0x474>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a73      	ldr	r2, [pc, #460]	; (8005004 <HAL_RCC_OscConfig+0x474>)
 8004e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e3e:	f7fe ff09 	bl	8003c54 <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e44:	e008      	b.n	8004e58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e46:	f7fe ff05 	bl	8003c54 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e10c      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e58:	4b6a      	ldr	r3, [pc, #424]	; (8005004 <HAL_RCC_OscConfig+0x474>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0f0      	beq.n	8004e46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d106      	bne.n	8004e7a <HAL_RCC_OscConfig+0x2ea>
 8004e6c:	4b64      	ldr	r3, [pc, #400]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e70:	4a63      	ldr	r2, [pc, #396]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e72:	f043 0301 	orr.w	r3, r3, #1
 8004e76:	6713      	str	r3, [r2, #112]	; 0x70
 8004e78:	e01c      	b.n	8004eb4 <HAL_RCC_OscConfig+0x324>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b05      	cmp	r3, #5
 8004e80:	d10c      	bne.n	8004e9c <HAL_RCC_OscConfig+0x30c>
 8004e82:	4b5f      	ldr	r3, [pc, #380]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e86:	4a5e      	ldr	r2, [pc, #376]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e88:	f043 0304 	orr.w	r3, r3, #4
 8004e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e8e:	4b5c      	ldr	r3, [pc, #368]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e92:	4a5b      	ldr	r2, [pc, #364]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e94:	f043 0301 	orr.w	r3, r3, #1
 8004e98:	6713      	str	r3, [r2, #112]	; 0x70
 8004e9a:	e00b      	b.n	8004eb4 <HAL_RCC_OscConfig+0x324>
 8004e9c:	4b58      	ldr	r3, [pc, #352]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea0:	4a57      	ldr	r2, [pc, #348]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004ea2:	f023 0301 	bic.w	r3, r3, #1
 8004ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea8:	4b55      	ldr	r3, [pc, #340]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eac:	4a54      	ldr	r2, [pc, #336]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004eae:	f023 0304 	bic.w	r3, r3, #4
 8004eb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d015      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ebc:	f7fe feca 	bl	8003c54 <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec2:	e00a      	b.n	8004eda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ec4:	f7fe fec6 	bl	8003c54 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e0cb      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eda:	4b49      	ldr	r3, [pc, #292]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0ee      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x334>
 8004ee6:	e014      	b.n	8004f12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee8:	f7fe feb4 	bl	8003c54 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eee:	e00a      	b.n	8004f06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ef0:	f7fe feb0 	bl	8003c54 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e0b5      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f06:	4b3e      	ldr	r3, [pc, #248]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1ee      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f12:	7dfb      	ldrb	r3, [r7, #23]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d105      	bne.n	8004f24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f18:	4b39      	ldr	r3, [pc, #228]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1c:	4a38      	ldr	r2, [pc, #224]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 80a1 	beq.w	8005070 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f2e:	4b34      	ldr	r3, [pc, #208]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 030c 	and.w	r3, r3, #12
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d05c      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d141      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f42:	4b31      	ldr	r3, [pc, #196]	; (8005008 <HAL_RCC_OscConfig+0x478>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f48:	f7fe fe84 	bl	8003c54 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f50:	f7fe fe80 	bl	8003c54 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e087      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f62:	4b27      	ldr	r3, [pc, #156]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f0      	bne.n	8004f50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69da      	ldr	r2, [r3, #28]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	019b      	lsls	r3, r3, #6
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f84:	085b      	lsrs	r3, r3, #1
 8004f86:	3b01      	subs	r3, #1
 8004f88:	041b      	lsls	r3, r3, #16
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	061b      	lsls	r3, r3, #24
 8004f92:	491b      	ldr	r1, [pc, #108]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f98:	4b1b      	ldr	r3, [pc, #108]	; (8005008 <HAL_RCC_OscConfig+0x478>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9e:	f7fe fe59 	bl	8003c54 <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa6:	f7fe fe55 	bl	8003c54 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e05c      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb8:	4b11      	ldr	r3, [pc, #68]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0f0      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x416>
 8004fc4:	e054      	b.n	8005070 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc6:	4b10      	ldr	r3, [pc, #64]	; (8005008 <HAL_RCC_OscConfig+0x478>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fcc:	f7fe fe42 	bl	8003c54 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd4:	f7fe fe3e 	bl	8003c54 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e045      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe6:	4b06      	ldr	r3, [pc, #24]	; (8005000 <HAL_RCC_OscConfig+0x470>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x444>
 8004ff2:	e03d      	b.n	8005070 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d107      	bne.n	800500c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e038      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
 8005000:	40023800 	.word	0x40023800
 8005004:	40007000 	.word	0x40007000
 8005008:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800500c:	4b1b      	ldr	r3, [pc, #108]	; (800507c <HAL_RCC_OscConfig+0x4ec>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d028      	beq.n	800506c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005024:	429a      	cmp	r2, r3
 8005026:	d121      	bne.n	800506c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005032:	429a      	cmp	r2, r3
 8005034:	d11a      	bne.n	800506c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800503c:	4013      	ands	r3, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005042:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005044:	4293      	cmp	r3, r2
 8005046:	d111      	bne.n	800506c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	3b01      	subs	r3, #1
 8005056:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005058:	429a      	cmp	r2, r3
 800505a:	d107      	bne.n	800506c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005068:	429a      	cmp	r2, r3
 800506a:	d001      	beq.n	8005070 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e000      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	40023800 	.word	0x40023800

08005080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e0cc      	b.n	800522e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005094:	4b68      	ldr	r3, [pc, #416]	; (8005238 <HAL_RCC_ClockConfig+0x1b8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d90c      	bls.n	80050bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a2:	4b65      	ldr	r3, [pc, #404]	; (8005238 <HAL_RCC_ClockConfig+0x1b8>)
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050aa:	4b63      	ldr	r3, [pc, #396]	; (8005238 <HAL_RCC_ClockConfig+0x1b8>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d001      	beq.n	80050bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e0b8      	b.n	800522e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d020      	beq.n	800510a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d005      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050d4:	4b59      	ldr	r3, [pc, #356]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	4a58      	ldr	r2, [pc, #352]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80050da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0308 	and.w	r3, r3, #8
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d005      	beq.n	80050f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050ec:	4b53      	ldr	r3, [pc, #332]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	4a52      	ldr	r2, [pc, #328]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80050f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050f8:	4b50      	ldr	r3, [pc, #320]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	494d      	ldr	r1, [pc, #308]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 8005106:	4313      	orrs	r3, r2
 8005108:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d044      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d107      	bne.n	800512e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800511e:	4b47      	ldr	r3, [pc, #284]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d119      	bne.n	800515e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e07f      	b.n	800522e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d003      	beq.n	800513e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800513a:	2b03      	cmp	r3, #3
 800513c:	d107      	bne.n	800514e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800513e:	4b3f      	ldr	r3, [pc, #252]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d109      	bne.n	800515e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e06f      	b.n	800522e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800514e:	4b3b      	ldr	r3, [pc, #236]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e067      	b.n	800522e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800515e:	4b37      	ldr	r3, [pc, #220]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f023 0203 	bic.w	r2, r3, #3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	4934      	ldr	r1, [pc, #208]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 800516c:	4313      	orrs	r3, r2
 800516e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005170:	f7fe fd70 	bl	8003c54 <HAL_GetTick>
 8005174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005176:	e00a      	b.n	800518e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005178:	f7fe fd6c 	bl	8003c54 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	f241 3288 	movw	r2, #5000	; 0x1388
 8005186:	4293      	cmp	r3, r2
 8005188:	d901      	bls.n	800518e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e04f      	b.n	800522e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800518e:	4b2b      	ldr	r3, [pc, #172]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 020c 	and.w	r2, r3, #12
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	429a      	cmp	r2, r3
 800519e:	d1eb      	bne.n	8005178 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051a0:	4b25      	ldr	r3, [pc, #148]	; (8005238 <HAL_RCC_ClockConfig+0x1b8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d20c      	bcs.n	80051c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ae:	4b22      	ldr	r3, [pc, #136]	; (8005238 <HAL_RCC_ClockConfig+0x1b8>)
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b6:	4b20      	ldr	r3, [pc, #128]	; (8005238 <HAL_RCC_ClockConfig+0x1b8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d001      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e032      	b.n	800522e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d008      	beq.n	80051e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051d4:	4b19      	ldr	r3, [pc, #100]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	4916      	ldr	r1, [pc, #88]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d009      	beq.n	8005206 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051f2:	4b12      	ldr	r3, [pc, #72]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	490e      	ldr	r1, [pc, #56]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005206:	f000 f821 	bl	800524c <HAL_RCC_GetSysClockFreq>
 800520a:	4602      	mov	r2, r0
 800520c:	4b0b      	ldr	r3, [pc, #44]	; (800523c <HAL_RCC_ClockConfig+0x1bc>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	091b      	lsrs	r3, r3, #4
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	490a      	ldr	r1, [pc, #40]	; (8005240 <HAL_RCC_ClockConfig+0x1c0>)
 8005218:	5ccb      	ldrb	r3, [r1, r3]
 800521a:	fa22 f303 	lsr.w	r3, r2, r3
 800521e:	4a09      	ldr	r2, [pc, #36]	; (8005244 <HAL_RCC_ClockConfig+0x1c4>)
 8005220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005222:	4b09      	ldr	r3, [pc, #36]	; (8005248 <HAL_RCC_ClockConfig+0x1c8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe fcd0 	bl	8003bcc <HAL_InitTick>

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40023c00 	.word	0x40023c00
 800523c:	40023800 	.word	0x40023800
 8005240:	0800ff7c 	.word	0x0800ff7c
 8005244:	20000004 	.word	0x20000004
 8005248:	20000008 	.word	0x20000008

0800524c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800524c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005250:	b090      	sub	sp, #64	; 0x40
 8005252:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	637b      	str	r3, [r7, #52]	; 0x34
 8005258:	2300      	movs	r3, #0
 800525a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800525c:	2300      	movs	r3, #0
 800525e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005264:	4b59      	ldr	r3, [pc, #356]	; (80053cc <HAL_RCC_GetSysClockFreq+0x180>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f003 030c 	and.w	r3, r3, #12
 800526c:	2b08      	cmp	r3, #8
 800526e:	d00d      	beq.n	800528c <HAL_RCC_GetSysClockFreq+0x40>
 8005270:	2b08      	cmp	r3, #8
 8005272:	f200 80a1 	bhi.w	80053b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <HAL_RCC_GetSysClockFreq+0x34>
 800527a:	2b04      	cmp	r3, #4
 800527c:	d003      	beq.n	8005286 <HAL_RCC_GetSysClockFreq+0x3a>
 800527e:	e09b      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005280:	4b53      	ldr	r3, [pc, #332]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005282:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005284:	e09b      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005286:	4b53      	ldr	r3, [pc, #332]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005288:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800528a:	e098      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800528c:	4b4f      	ldr	r3, [pc, #316]	; (80053cc <HAL_RCC_GetSysClockFreq+0x180>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005294:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005296:	4b4d      	ldr	r3, [pc, #308]	; (80053cc <HAL_RCC_GetSysClockFreq+0x180>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d028      	beq.n	80052f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052a2:	4b4a      	ldr	r3, [pc, #296]	; (80053cc <HAL_RCC_GetSysClockFreq+0x180>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	099b      	lsrs	r3, r3, #6
 80052a8:	2200      	movs	r2, #0
 80052aa:	623b      	str	r3, [r7, #32]
 80052ac:	627a      	str	r2, [r7, #36]	; 0x24
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80052b4:	2100      	movs	r1, #0
 80052b6:	4b47      	ldr	r3, [pc, #284]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80052b8:	fb03 f201 	mul.w	r2, r3, r1
 80052bc:	2300      	movs	r3, #0
 80052be:	fb00 f303 	mul.w	r3, r0, r3
 80052c2:	4413      	add	r3, r2
 80052c4:	4a43      	ldr	r2, [pc, #268]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80052c6:	fba0 1202 	umull	r1, r2, r0, r2
 80052ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052cc:	460a      	mov	r2, r1
 80052ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80052d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052d2:	4413      	add	r3, r2
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d8:	2200      	movs	r2, #0
 80052da:	61bb      	str	r3, [r7, #24]
 80052dc:	61fa      	str	r2, [r7, #28]
 80052de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80052e6:	f7fb fcd7 	bl	8000c98 <__aeabi_uldivmod>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	4613      	mov	r3, r2
 80052f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f2:	e053      	b.n	800539c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052f4:	4b35      	ldr	r3, [pc, #212]	; (80053cc <HAL_RCC_GetSysClockFreq+0x180>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	099b      	lsrs	r3, r3, #6
 80052fa:	2200      	movs	r2, #0
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	617a      	str	r2, [r7, #20]
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005306:	f04f 0b00 	mov.w	fp, #0
 800530a:	4652      	mov	r2, sl
 800530c:	465b      	mov	r3, fp
 800530e:	f04f 0000 	mov.w	r0, #0
 8005312:	f04f 0100 	mov.w	r1, #0
 8005316:	0159      	lsls	r1, r3, #5
 8005318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800531c:	0150      	lsls	r0, r2, #5
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	ebb2 080a 	subs.w	r8, r2, sl
 8005326:	eb63 090b 	sbc.w	r9, r3, fp
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	f04f 0300 	mov.w	r3, #0
 8005332:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005336:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800533a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800533e:	ebb2 0408 	subs.w	r4, r2, r8
 8005342:	eb63 0509 	sbc.w	r5, r3, r9
 8005346:	f04f 0200 	mov.w	r2, #0
 800534a:	f04f 0300 	mov.w	r3, #0
 800534e:	00eb      	lsls	r3, r5, #3
 8005350:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005354:	00e2      	lsls	r2, r4, #3
 8005356:	4614      	mov	r4, r2
 8005358:	461d      	mov	r5, r3
 800535a:	eb14 030a 	adds.w	r3, r4, sl
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	eb45 030b 	adc.w	r3, r5, fp
 8005364:	607b      	str	r3, [r7, #4]
 8005366:	f04f 0200 	mov.w	r2, #0
 800536a:	f04f 0300 	mov.w	r3, #0
 800536e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005372:	4629      	mov	r1, r5
 8005374:	028b      	lsls	r3, r1, #10
 8005376:	4621      	mov	r1, r4
 8005378:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800537c:	4621      	mov	r1, r4
 800537e:	028a      	lsls	r2, r1, #10
 8005380:	4610      	mov	r0, r2
 8005382:	4619      	mov	r1, r3
 8005384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005386:	2200      	movs	r2, #0
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	60fa      	str	r2, [r7, #12]
 800538c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005390:	f7fb fc82 	bl	8000c98 <__aeabi_uldivmod>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4613      	mov	r3, r2
 800539a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800539c:	4b0b      	ldr	r3, [pc, #44]	; (80053cc <HAL_RCC_GetSysClockFreq+0x180>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	0c1b      	lsrs	r3, r3, #16
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	3301      	adds	r3, #1
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80053ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053b6:	e002      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053b8:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80053ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3740      	adds	r7, #64	; 0x40
 80053c4:	46bd      	mov	sp, r7
 80053c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ca:	bf00      	nop
 80053cc:	40023800 	.word	0x40023800
 80053d0:	00f42400 	.word	0x00f42400
 80053d4:	017d7840 	.word	0x017d7840

080053d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053dc:	4b03      	ldr	r3, [pc, #12]	; (80053ec <HAL_RCC_GetHCLKFreq+0x14>)
 80053de:	681b      	ldr	r3, [r3, #0]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	20000004 	.word	0x20000004

080053f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053f4:	f7ff fff0 	bl	80053d8 <HAL_RCC_GetHCLKFreq>
 80053f8:	4602      	mov	r2, r0
 80053fa:	4b05      	ldr	r3, [pc, #20]	; (8005410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	0a9b      	lsrs	r3, r3, #10
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	4903      	ldr	r1, [pc, #12]	; (8005414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005406:	5ccb      	ldrb	r3, [r1, r3]
 8005408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800540c:	4618      	mov	r0, r3
 800540e:	bd80      	pop	{r7, pc}
 8005410:	40023800 	.word	0x40023800
 8005414:	0800ff8c 	.word	0x0800ff8c

08005418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800541c:	f7ff ffdc 	bl	80053d8 <HAL_RCC_GetHCLKFreq>
 8005420:	4602      	mov	r2, r0
 8005422:	4b05      	ldr	r3, [pc, #20]	; (8005438 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	0b5b      	lsrs	r3, r3, #13
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	4903      	ldr	r1, [pc, #12]	; (800543c <HAL_RCC_GetPCLK2Freq+0x24>)
 800542e:	5ccb      	ldrb	r3, [r1, r3]
 8005430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005434:	4618      	mov	r0, r3
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40023800 	.word	0x40023800
 800543c:	0800ff8c 	.word	0x0800ff8c

08005440 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e07b      	b.n	800554a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	2b00      	cmp	r3, #0
 8005458:	d108      	bne.n	800546c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005462:	d009      	beq.n	8005478 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	61da      	str	r2, [r3, #28]
 800546a:	e005      	b.n	8005478 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fe f820 	bl	80034d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054c0:	431a      	orrs	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	431a      	orrs	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054f2:	431a      	orrs	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fc:	ea42 0103 	orr.w	r1, r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005504:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	0c1b      	lsrs	r3, r3, #16
 8005516:	f003 0104 	and.w	r1, r3, #4
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	f003 0210 	and.w	r2, r3, #16
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69da      	ldr	r2, [r3, #28]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005538:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
 8005560:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <HAL_SPI_TransmitReceive_IT+0x20>
 8005570:	2302      	movs	r3, #2
 8005572:	e075      	b.n	8005660 <HAL_SPI_TransmitReceive_IT+0x10c>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005582:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800558a:	7dbb      	ldrb	r3, [r7, #22]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d00d      	beq.n	80055ac <HAL_SPI_TransmitReceive_IT+0x58>
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005596:	d106      	bne.n	80055a6 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d102      	bne.n	80055a6 <HAL_SPI_TransmitReceive_IT+0x52>
 80055a0:	7dbb      	ldrb	r3, [r7, #22]
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d002      	beq.n	80055ac <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80055a6:	2302      	movs	r3, #2
 80055a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055aa:	e054      	b.n	8005656 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <HAL_SPI_TransmitReceive_IT+0x6a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <HAL_SPI_TransmitReceive_IT+0x6a>
 80055b8:	887b      	ldrh	r3, [r7, #2]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d102      	bne.n	80055c4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055c2:	e048      	b.n	8005656 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b04      	cmp	r3, #4
 80055ce:	d003      	beq.n	80055d8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2205      	movs	r2, #5
 80055d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	887a      	ldrh	r2, [r7, #2]
 80055e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	887a      	ldrh	r2, [r7, #2]
 80055ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	887a      	ldrh	r2, [r7, #2]
 80055fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	887a      	ldrh	r2, [r7, #2]
 8005600:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d006      	beq.n	8005618 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4a17      	ldr	r2, [pc, #92]	; (800566c <HAL_SPI_TransmitReceive_IT+0x118>)
 800560e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4a17      	ldr	r2, [pc, #92]	; (8005670 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8005614:	645a      	str	r2, [r3, #68]	; 0x44
 8005616:	e005      	b.n	8005624 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4a16      	ldr	r2, [pc, #88]	; (8005674 <HAL_SPI_TransmitReceive_IT+0x120>)
 800561c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4a15      	ldr	r2, [pc, #84]	; (8005678 <HAL_SPI_TransmitReceive_IT+0x124>)
 8005622:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8005632:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563e:	2b40      	cmp	r3, #64	; 0x40
 8005640:	d008      	beq.n	8005654 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	e000      	b.n	8005656 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8005654:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800565e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005660:	4618      	mov	r0, r3
 8005662:	371c      	adds	r7, #28
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	08005991 	.word	0x08005991
 8005670:	080059f1 	.word	0x080059f1
 8005674:	080058cd 	.word	0x080058cd
 8005678:	08005931 	.word	0x08005931

0800567c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b088      	sub	sp, #32
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	099b      	lsrs	r3, r3, #6
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10f      	bne.n	80056c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00a      	beq.n	80056c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	099b      	lsrs	r3, r3, #6
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d004      	beq.n	80056c0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	4798      	blx	r3
    return;
 80056be:	e0d7      	b.n	8005870 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00a      	beq.n	80056e2 <HAL_SPI_IRQHandler+0x66>
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	09db      	lsrs	r3, r3, #7
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d004      	beq.n	80056e2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	4798      	blx	r3
    return;
 80056e0:	e0c6      	b.n	8005870 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	095b      	lsrs	r3, r3, #5
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10c      	bne.n	8005708 <HAL_SPI_IRQHandler+0x8c>
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	099b      	lsrs	r3, r3, #6
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d106      	bne.n	8005708 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	0a1b      	lsrs	r3, r3, #8
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 80b4 	beq.w	8005870 <HAL_SPI_IRQHandler+0x1f4>
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	095b      	lsrs	r3, r3, #5
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 80ad 	beq.w	8005870 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	099b      	lsrs	r3, r3, #6
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d023      	beq.n	800576a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b03      	cmp	r3, #3
 800572c:	d011      	beq.n	8005752 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005732:	f043 0204 	orr.w	r2, r3, #4
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	e00b      	b.n	800576a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005752:	2300      	movs	r3, #0
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	693b      	ldr	r3, [r7, #16]
        return;
 8005768:	e082      	b.n	8005870 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	095b      	lsrs	r3, r3, #5
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d014      	beq.n	80057a0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577a:	f043 0201 	orr.w	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	0a1b      	lsrs	r3, r3, #8
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00c      	beq.n	80057c6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b0:	f043 0208 	orr.w	r2, r3, #8
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80057b8:	2300      	movs	r3, #0
 80057ba:	60bb      	str	r3, [r7, #8]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	60bb      	str	r3, [r7, #8]
 80057c4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d04f      	beq.n	800586e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057dc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d104      	bne.n	80057fa <HAL_SPI_IRQHandler+0x17e>
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d034      	beq.n	8005864 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0203 	bic.w	r2, r2, #3
 8005808:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800580e:	2b00      	cmp	r3, #0
 8005810:	d011      	beq.n	8005836 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005816:	4a18      	ldr	r2, [pc, #96]	; (8005878 <HAL_SPI_IRQHandler+0x1fc>)
 8005818:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581e:	4618      	mov	r0, r3
 8005820:	f7fe ffab 	bl	800477a <HAL_DMA_Abort_IT>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d005      	beq.n	8005836 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800583a:	2b00      	cmp	r3, #0
 800583c:	d016      	beq.n	800586c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005842:	4a0d      	ldr	r2, [pc, #52]	; (8005878 <HAL_SPI_IRQHandler+0x1fc>)
 8005844:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800584a:	4618      	mov	r0, r3
 800584c:	f7fe ff95 	bl	800477a <HAL_DMA_Abort_IT>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005862:	e003      	b.n	800586c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f813 	bl	8005890 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800586a:	e000      	b.n	800586e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800586c:	bf00      	nop
    return;
 800586e:	bf00      	nop
  }
}
 8005870:	3720      	adds	r7, #32
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	080058a5 	.word	0x080058a5

0800587c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f7ff ffe6 	bl	8005890 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80058c4:	bf00      	nop
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f103 020c 	add.w	r2, r3, #12
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	7812      	ldrb	r2, [r2, #0]
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005902:	b29b      	uxth	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10f      	bne.n	8005928 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005916:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d102      	bne.n	8005928 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f95e 	bl	8005be4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005928:	bf00      	nop
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	330c      	adds	r3, #12
 8005942:	7812      	ldrb	r2, [r2, #0]
 8005944:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005954:	b29b      	uxth	r3, r3
 8005956:	3b01      	subs	r3, #1
 8005958:	b29a      	uxth	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005962:	b29b      	uxth	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10f      	bne.n	8005988 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005976:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800597c:	b29b      	uxth	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f92e 	bl	8005be4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005988:	bf00      	nop
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a2:	b292      	uxth	r2, r2
 80059a4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	1c9a      	adds	r2, r3, #2
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10f      	bne.n	80059e8 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059d6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d102      	bne.n	80059e8 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f8fe 	bl	8005be4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80059e8:	bf00      	nop
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fc:	881a      	ldrh	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a08:	1c9a      	adds	r2, r3, #2
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10f      	bne.n	8005a46 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a34:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d102      	bne.n	8005a46 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f8cf 	bl	8005be4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005a46:	bf00      	nop
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
	...

08005a50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	603b      	str	r3, [r7, #0]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a60:	f7fe f8f8 	bl	8003c54 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	1a9b      	subs	r3, r3, r2
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a70:	f7fe f8f0 	bl	8003c54 <HAL_GetTick>
 8005a74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a76:	4b39      	ldr	r3, [pc, #228]	; (8005b5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	015b      	lsls	r3, r3, #5
 8005a7c:	0d1b      	lsrs	r3, r3, #20
 8005a7e:	69fa      	ldr	r2, [r7, #28]
 8005a80:	fb02 f303 	mul.w	r3, r2, r3
 8005a84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a86:	e054      	b.n	8005b32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8e:	d050      	beq.n	8005b32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a90:	f7fe f8e0 	bl	8003c54 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d902      	bls.n	8005aa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d13d      	bne.n	8005b22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ab4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005abe:	d111      	bne.n	8005ae4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac8:	d004      	beq.n	8005ad4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ad2:	d107      	bne.n	8005ae4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ae2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aec:	d10f      	bne.n	8005b0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e017      	b.n	8005b52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	bf0c      	ite	eq
 8005b42:	2301      	moveq	r3, #1
 8005b44:	2300      	movne	r3, #0
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	461a      	mov	r2, r3
 8005b4a:	79fb      	ldrb	r3, [r7, #7]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d19b      	bne.n	8005a88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3720      	adds	r7, #32
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20000004 	.word	0x20000004

08005b60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b6c:	4b1b      	ldr	r3, [pc, #108]	; (8005bdc <SPI_EndRxTxTransaction+0x7c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a1b      	ldr	r2, [pc, #108]	; (8005be0 <SPI_EndRxTxTransaction+0x80>)
 8005b72:	fba2 2303 	umull	r2, r3, r2, r3
 8005b76:	0d5b      	lsrs	r3, r3, #21
 8005b78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b7c:	fb02 f303 	mul.w	r3, r2, r3
 8005b80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b8a:	d112      	bne.n	8005bb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2200      	movs	r2, #0
 8005b94:	2180      	movs	r1, #128	; 0x80
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f7ff ff5a 	bl	8005a50 <SPI_WaitFlagStateUntilTimeout>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d016      	beq.n	8005bd0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba6:	f043 0220 	orr.w	r2, r3, #32
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e00f      	b.n	8005bd2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00a      	beq.n	8005bce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc8:	2b80      	cmp	r3, #128	; 0x80
 8005bca:	d0f2      	beq.n	8005bb2 <SPI_EndRxTxTransaction+0x52>
 8005bcc:	e000      	b.n	8005bd0 <SPI_EndRxTxTransaction+0x70>
        break;
 8005bce:	bf00      	nop
  }

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3718      	adds	r7, #24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000004 	.word	0x20000004
 8005be0:	165e9f81 	.word	0x165e9f81

08005be4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005bec:	4b35      	ldr	r3, [pc, #212]	; (8005cc4 <SPI_CloseRxTx_ISR+0xe0>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a35      	ldr	r2, [pc, #212]	; (8005cc8 <SPI_CloseRxTx_ISR+0xe4>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	0a5b      	lsrs	r3, r3, #9
 8005bf8:	2264      	movs	r2, #100	; 0x64
 8005bfa:	fb02 f303 	mul.w	r3, r2, r3
 8005bfe:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c00:	f7fe f828 	bl	8003c54 <HAL_GetTick>
 8005c04:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0220 	bic.w	r2, r2, #32
 8005c14:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d106      	bne.n	8005c2a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c20:	f043 0220 	orr.w	r2, r3, #32
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c28:	e009      	b.n	8005c3e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0eb      	beq.n	8005c16 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	2164      	movs	r1, #100	; 0x64
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7ff ff8c 	bl	8005b60 <SPI_EndRxTxTransaction>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d005      	beq.n	8005c5a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c52:	f043 0220 	orr.w	r2, r3, #32
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10a      	bne.n	8005c78 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c62:	2300      	movs	r3, #0
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	60fb      	str	r3, [r7, #12]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d115      	bne.n	8005cac <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d107      	bne.n	8005c9c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff fdf1 	bl	800587c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005c9a:	e00e      	b.n	8005cba <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7fd fb6d 	bl	8003384 <HAL_SPI_TxRxCpltCallback>
}
 8005caa:	e006      	b.n	8005cba <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff fdeb 	bl	8005890 <HAL_SPI_ErrorCallback>
}
 8005cba:	bf00      	nop
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20000004 	.word	0x20000004
 8005cc8:	057619f1 	.word	0x057619f1

08005ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e041      	b.n	8005d62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7fd fc40 	bl	8003578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3304      	adds	r3, #4
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	f000 fde2 	bl	80068d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d001      	beq.n	8005d84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e03c      	b.n	8005dfe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a1e      	ldr	r2, [pc, #120]	; (8005e0c <HAL_TIM_Base_Start+0xa0>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d018      	beq.n	8005dc8 <HAL_TIM_Base_Start+0x5c>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9e:	d013      	beq.n	8005dc8 <HAL_TIM_Base_Start+0x5c>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a1a      	ldr	r2, [pc, #104]	; (8005e10 <HAL_TIM_Base_Start+0xa4>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00e      	beq.n	8005dc8 <HAL_TIM_Base_Start+0x5c>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a19      	ldr	r2, [pc, #100]	; (8005e14 <HAL_TIM_Base_Start+0xa8>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d009      	beq.n	8005dc8 <HAL_TIM_Base_Start+0x5c>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a17      	ldr	r2, [pc, #92]	; (8005e18 <HAL_TIM_Base_Start+0xac>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d004      	beq.n	8005dc8 <HAL_TIM_Base_Start+0x5c>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a16      	ldr	r2, [pc, #88]	; (8005e1c <HAL_TIM_Base_Start+0xb0>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d111      	bne.n	8005dec <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 0307 	and.w	r3, r3, #7
 8005dd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b06      	cmp	r3, #6
 8005dd8:	d010      	beq.n	8005dfc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f042 0201 	orr.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dea:	e007      	b.n	8005dfc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0201 	orr.w	r2, r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	40010000 	.word	0x40010000
 8005e10:	40000400 	.word	0x40000400
 8005e14:	40000800 	.word	0x40000800
 8005e18:	40000c00 	.word	0x40000c00
 8005e1c:	40014000 	.word	0x40014000

08005e20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d001      	beq.n	8005e38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e044      	b.n	8005ec2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 0201 	orr.w	r2, r2, #1
 8005e4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a1e      	ldr	r2, [pc, #120]	; (8005ed0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d018      	beq.n	8005e8c <HAL_TIM_Base_Start_IT+0x6c>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e62:	d013      	beq.n	8005e8c <HAL_TIM_Base_Start_IT+0x6c>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a1a      	ldr	r2, [pc, #104]	; (8005ed4 <HAL_TIM_Base_Start_IT+0xb4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d00e      	beq.n	8005e8c <HAL_TIM_Base_Start_IT+0x6c>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a19      	ldr	r2, [pc, #100]	; (8005ed8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d009      	beq.n	8005e8c <HAL_TIM_Base_Start_IT+0x6c>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a17      	ldr	r2, [pc, #92]	; (8005edc <HAL_TIM_Base_Start_IT+0xbc>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d004      	beq.n	8005e8c <HAL_TIM_Base_Start_IT+0x6c>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a16      	ldr	r2, [pc, #88]	; (8005ee0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d111      	bne.n	8005eb0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b06      	cmp	r3, #6
 8005e9c:	d010      	beq.n	8005ec0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f042 0201 	orr.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eae:	e007      	b.n	8005ec0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0201 	orr.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	40010000 	.word	0x40010000
 8005ed4:	40000400 	.word	0x40000400
 8005ed8:	40000800 	.word	0x40000800
 8005edc:	40000c00 	.word	0x40000c00
 8005ee0:	40014000 	.word	0x40014000

08005ee4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e041      	b.n	8005f7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d106      	bne.n	8005f10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f839 	bl	8005f82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4619      	mov	r1, r3
 8005f22:	4610      	mov	r0, r2
 8005f24:	f000 fcd6 	bl	80068d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f8a:	bf00      	nop
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
	...

08005f98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d109      	bne.n	8005fbc <HAL_TIM_PWM_Start+0x24>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	bf14      	ite	ne
 8005fb4:	2301      	movne	r3, #1
 8005fb6:	2300      	moveq	r3, #0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	e022      	b.n	8006002 <HAL_TIM_PWM_Start+0x6a>
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d109      	bne.n	8005fd6 <HAL_TIM_PWM_Start+0x3e>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	bf14      	ite	ne
 8005fce:	2301      	movne	r3, #1
 8005fd0:	2300      	moveq	r3, #0
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	e015      	b.n	8006002 <HAL_TIM_PWM_Start+0x6a>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d109      	bne.n	8005ff0 <HAL_TIM_PWM_Start+0x58>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	bf14      	ite	ne
 8005fe8:	2301      	movne	r3, #1
 8005fea:	2300      	moveq	r3, #0
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	e008      	b.n	8006002 <HAL_TIM_PWM_Start+0x6a>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	bf14      	ite	ne
 8005ffc:	2301      	movne	r3, #1
 8005ffe:	2300      	moveq	r3, #0
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e068      	b.n	80060dc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d104      	bne.n	800601a <HAL_TIM_PWM_Start+0x82>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006018:	e013      	b.n	8006042 <HAL_TIM_PWM_Start+0xaa>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b04      	cmp	r3, #4
 800601e:	d104      	bne.n	800602a <HAL_TIM_PWM_Start+0x92>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006028:	e00b      	b.n	8006042 <HAL_TIM_PWM_Start+0xaa>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b08      	cmp	r3, #8
 800602e:	d104      	bne.n	800603a <HAL_TIM_PWM_Start+0xa2>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006038:	e003      	b.n	8006042 <HAL_TIM_PWM_Start+0xaa>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2202      	movs	r2, #2
 800603e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2201      	movs	r2, #1
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fee8 	bl	8006e20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a23      	ldr	r2, [pc, #140]	; (80060e4 <HAL_TIM_PWM_Start+0x14c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d107      	bne.n	800606a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006068:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a1d      	ldr	r2, [pc, #116]	; (80060e4 <HAL_TIM_PWM_Start+0x14c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d018      	beq.n	80060a6 <HAL_TIM_PWM_Start+0x10e>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607c:	d013      	beq.n	80060a6 <HAL_TIM_PWM_Start+0x10e>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a19      	ldr	r2, [pc, #100]	; (80060e8 <HAL_TIM_PWM_Start+0x150>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00e      	beq.n	80060a6 <HAL_TIM_PWM_Start+0x10e>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a17      	ldr	r2, [pc, #92]	; (80060ec <HAL_TIM_PWM_Start+0x154>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d009      	beq.n	80060a6 <HAL_TIM_PWM_Start+0x10e>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a16      	ldr	r2, [pc, #88]	; (80060f0 <HAL_TIM_PWM_Start+0x158>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d004      	beq.n	80060a6 <HAL_TIM_PWM_Start+0x10e>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a14      	ldr	r2, [pc, #80]	; (80060f4 <HAL_TIM_PWM_Start+0x15c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d111      	bne.n	80060ca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f003 0307 	and.w	r3, r3, #7
 80060b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2b06      	cmp	r3, #6
 80060b6:	d010      	beq.n	80060da <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0201 	orr.w	r2, r2, #1
 80060c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c8:	e007      	b.n	80060da <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f042 0201 	orr.w	r2, r2, #1
 80060d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	40010000 	.word	0x40010000
 80060e8:	40000400 	.word	0x40000400
 80060ec:	40000800 	.word	0x40000800
 80060f0:	40000c00 	.word	0x40000c00
 80060f4:	40014000 	.word	0x40014000

080060f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e097      	b.n	800623c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	d106      	bne.n	8006126 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7fd fa7b 	bl	800361c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2202      	movs	r2, #2
 800612a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6812      	ldr	r2, [r2, #0]
 8006138:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800613c:	f023 0307 	bic.w	r3, r3, #7
 8006140:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	3304      	adds	r3, #4
 800614a:	4619      	mov	r1, r3
 800614c:	4610      	mov	r0, r2
 800614e:	f000 fbc1 	bl	80068d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4313      	orrs	r3, r2
 8006172:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800617a:	f023 0303 	bic.w	r3, r3, #3
 800617e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	021b      	lsls	r3, r3, #8
 800618a:	4313      	orrs	r3, r2
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006198:	f023 030c 	bic.w	r3, r3, #12
 800619c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	021b      	lsls	r3, r3, #8
 80061b4:	4313      	orrs	r3, r2
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	011a      	lsls	r2, r3, #4
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	031b      	lsls	r3, r3, #12
 80061c8:	4313      	orrs	r3, r2
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80061d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80061de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	011b      	lsls	r3, r3, #4
 80061ea:	4313      	orrs	r3, r2
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3718      	adds	r7, #24
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006254:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800625c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006264:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800626c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d110      	bne.n	8006296 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d102      	bne.n	8006280 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800627a:	7b7b      	ldrb	r3, [r7, #13]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d001      	beq.n	8006284 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e069      	b.n	8006358 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006294:	e031      	b.n	80062fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b04      	cmp	r3, #4
 800629a:	d110      	bne.n	80062be <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800629c:	7bbb      	ldrb	r3, [r7, #14]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d102      	bne.n	80062a8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062a2:	7b3b      	ldrb	r3, [r7, #12]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d001      	beq.n	80062ac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e055      	b.n	8006358 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062bc:	e01d      	b.n	80062fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062be:	7bfb      	ldrb	r3, [r7, #15]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d108      	bne.n	80062d6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80062c4:	7bbb      	ldrb	r3, [r7, #14]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d105      	bne.n	80062d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062ca:	7b7b      	ldrb	r3, [r7, #13]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d102      	bne.n	80062d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062d0:	7b3b      	ldrb	r3, [r7, #12]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d001      	beq.n	80062da <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e03e      	b.n	8006358 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2202      	movs	r2, #2
 80062de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2202      	movs	r2, #2
 80062e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2202      	movs	r2, #2
 80062ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2202      	movs	r2, #2
 80062f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <HAL_TIM_Encoder_Start+0xc4>
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2b04      	cmp	r3, #4
 8006304:	d008      	beq.n	8006318 <HAL_TIM_Encoder_Start+0xd4>
 8006306:	e00f      	b.n	8006328 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2201      	movs	r2, #1
 800630e:	2100      	movs	r1, #0
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fd85 	bl	8006e20 <TIM_CCxChannelCmd>
      break;
 8006316:	e016      	b.n	8006346 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2201      	movs	r2, #1
 800631e:	2104      	movs	r1, #4
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fd7d 	bl	8006e20 <TIM_CCxChannelCmd>
      break;
 8006326:	e00e      	b.n	8006346 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2201      	movs	r2, #1
 800632e:	2100      	movs	r1, #0
 8006330:	4618      	mov	r0, r3
 8006332:	f000 fd75 	bl	8006e20 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2201      	movs	r2, #1
 800633c:	2104      	movs	r1, #4
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fd6e 	bl	8006e20 <TIM_CCxChannelCmd>
      break;
 8006344:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0201 	orr.w	r2, r2, #1
 8006354:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b02      	cmp	r3, #2
 8006374:	d122      	bne.n	80063bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b02      	cmp	r3, #2
 8006382:	d11b      	bne.n	80063bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f06f 0202 	mvn.w	r2, #2
 800638c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	f003 0303 	and.w	r3, r3, #3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fa77 	bl	8006896 <HAL_TIM_IC_CaptureCallback>
 80063a8:	e005      	b.n	80063b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fa69 	bl	8006882 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fa7a 	bl	80068aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	f003 0304 	and.w	r3, r3, #4
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d122      	bne.n	8006410 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	2b04      	cmp	r3, #4
 80063d6:	d11b      	bne.n	8006410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f06f 0204 	mvn.w	r2, #4
 80063e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2202      	movs	r2, #2
 80063e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fa4d 	bl	8006896 <HAL_TIM_IC_CaptureCallback>
 80063fc:	e005      	b.n	800640a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fa3f 	bl	8006882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fa50 	bl	80068aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	f003 0308 	and.w	r3, r3, #8
 800641a:	2b08      	cmp	r3, #8
 800641c:	d122      	bne.n	8006464 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	f003 0308 	and.w	r3, r3, #8
 8006428:	2b08      	cmp	r3, #8
 800642a:	d11b      	bne.n	8006464 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f06f 0208 	mvn.w	r2, #8
 8006434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2204      	movs	r2, #4
 800643a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	f003 0303 	and.w	r3, r3, #3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fa23 	bl	8006896 <HAL_TIM_IC_CaptureCallback>
 8006450:	e005      	b.n	800645e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fa15 	bl	8006882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fa26 	bl	80068aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	f003 0310 	and.w	r3, r3, #16
 800646e:	2b10      	cmp	r3, #16
 8006470:	d122      	bne.n	80064b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f003 0310 	and.w	r3, r3, #16
 800647c:	2b10      	cmp	r3, #16
 800647e:	d11b      	bne.n	80064b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f06f 0210 	mvn.w	r2, #16
 8006488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2208      	movs	r2, #8
 800648e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f9f9 	bl	8006896 <HAL_TIM_IC_CaptureCallback>
 80064a4:	e005      	b.n	80064b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f9eb 	bl	8006882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f9fc 	bl	80068aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d10e      	bne.n	80064e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d107      	bne.n	80064e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f06f 0201 	mvn.w	r2, #1
 80064dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7fc ff2e 	bl	8003340 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ee:	2b80      	cmp	r3, #128	; 0x80
 80064f0:	d10e      	bne.n	8006510 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fc:	2b80      	cmp	r3, #128	; 0x80
 80064fe:	d107      	bne.n	8006510 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fd78 	bl	8007000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651a:	2b40      	cmp	r3, #64	; 0x40
 800651c:	d10e      	bne.n	800653c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006528:	2b40      	cmp	r3, #64	; 0x40
 800652a:	d107      	bne.n	800653c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f9c1 	bl	80068be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f003 0320 	and.w	r3, r3, #32
 8006546:	2b20      	cmp	r3, #32
 8006548:	d10e      	bne.n	8006568 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f003 0320 	and.w	r3, r3, #32
 8006554:	2b20      	cmp	r3, #32
 8006556:	d107      	bne.n	8006568 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f06f 0220 	mvn.w	r2, #32
 8006560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fd42 	bl	8006fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006568:	bf00      	nop
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800657c:	2300      	movs	r3, #0
 800657e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006586:	2b01      	cmp	r3, #1
 8006588:	d101      	bne.n	800658e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800658a:	2302      	movs	r3, #2
 800658c:	e0ae      	b.n	80066ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b0c      	cmp	r3, #12
 800659a:	f200 809f 	bhi.w	80066dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800659e:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a4:	080065d9 	.word	0x080065d9
 80065a8:	080066dd 	.word	0x080066dd
 80065ac:	080066dd 	.word	0x080066dd
 80065b0:	080066dd 	.word	0x080066dd
 80065b4:	08006619 	.word	0x08006619
 80065b8:	080066dd 	.word	0x080066dd
 80065bc:	080066dd 	.word	0x080066dd
 80065c0:	080066dd 	.word	0x080066dd
 80065c4:	0800665b 	.word	0x0800665b
 80065c8:	080066dd 	.word	0x080066dd
 80065cc:	080066dd 	.word	0x080066dd
 80065d0:	080066dd 	.word	0x080066dd
 80065d4:	0800669b 	.word	0x0800669b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68b9      	ldr	r1, [r7, #8]
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 f9f8 	bl	80069d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699a      	ldr	r2, [r3, #24]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0208 	orr.w	r2, r2, #8
 80065f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699a      	ldr	r2, [r3, #24]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 0204 	bic.w	r2, r2, #4
 8006602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6999      	ldr	r1, [r3, #24]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	691a      	ldr	r2, [r3, #16]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	619a      	str	r2, [r3, #24]
      break;
 8006616:	e064      	b.n	80066e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68b9      	ldr	r1, [r7, #8]
 800661e:	4618      	mov	r0, r3
 8006620:	f000 fa3e 	bl	8006aa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699a      	ldr	r2, [r3, #24]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	699a      	ldr	r2, [r3, #24]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6999      	ldr	r1, [r3, #24]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	021a      	lsls	r2, r3, #8
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	619a      	str	r2, [r3, #24]
      break;
 8006658:	e043      	b.n	80066e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68b9      	ldr	r1, [r7, #8]
 8006660:	4618      	mov	r0, r3
 8006662:	f000 fa89 	bl	8006b78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69da      	ldr	r2, [r3, #28]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f042 0208 	orr.w	r2, r2, #8
 8006674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	69da      	ldr	r2, [r3, #28]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 0204 	bic.w	r2, r2, #4
 8006684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69d9      	ldr	r1, [r3, #28]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	691a      	ldr	r2, [r3, #16]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	430a      	orrs	r2, r1
 8006696:	61da      	str	r2, [r3, #28]
      break;
 8006698:	e023      	b.n	80066e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68b9      	ldr	r1, [r7, #8]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 fad3 	bl	8006c4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69da      	ldr	r2, [r3, #28]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	69da      	ldr	r2, [r3, #28]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	69d9      	ldr	r1, [r3, #28]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	021a      	lsls	r2, r3, #8
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	61da      	str	r2, [r3, #28]
      break;
 80066da:	e002      	b.n	80066e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	75fb      	strb	r3, [r7, #23]
      break;
 80066e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006708:	2b01      	cmp	r3, #1
 800670a:	d101      	bne.n	8006710 <HAL_TIM_ConfigClockSource+0x1c>
 800670c:	2302      	movs	r3, #2
 800670e:	e0b4      	b.n	800687a <HAL_TIM_ConfigClockSource+0x186>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800672e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006736:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006748:	d03e      	beq.n	80067c8 <HAL_TIM_ConfigClockSource+0xd4>
 800674a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800674e:	f200 8087 	bhi.w	8006860 <HAL_TIM_ConfigClockSource+0x16c>
 8006752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006756:	f000 8086 	beq.w	8006866 <HAL_TIM_ConfigClockSource+0x172>
 800675a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800675e:	d87f      	bhi.n	8006860 <HAL_TIM_ConfigClockSource+0x16c>
 8006760:	2b70      	cmp	r3, #112	; 0x70
 8006762:	d01a      	beq.n	800679a <HAL_TIM_ConfigClockSource+0xa6>
 8006764:	2b70      	cmp	r3, #112	; 0x70
 8006766:	d87b      	bhi.n	8006860 <HAL_TIM_ConfigClockSource+0x16c>
 8006768:	2b60      	cmp	r3, #96	; 0x60
 800676a:	d050      	beq.n	800680e <HAL_TIM_ConfigClockSource+0x11a>
 800676c:	2b60      	cmp	r3, #96	; 0x60
 800676e:	d877      	bhi.n	8006860 <HAL_TIM_ConfigClockSource+0x16c>
 8006770:	2b50      	cmp	r3, #80	; 0x50
 8006772:	d03c      	beq.n	80067ee <HAL_TIM_ConfigClockSource+0xfa>
 8006774:	2b50      	cmp	r3, #80	; 0x50
 8006776:	d873      	bhi.n	8006860 <HAL_TIM_ConfigClockSource+0x16c>
 8006778:	2b40      	cmp	r3, #64	; 0x40
 800677a:	d058      	beq.n	800682e <HAL_TIM_ConfigClockSource+0x13a>
 800677c:	2b40      	cmp	r3, #64	; 0x40
 800677e:	d86f      	bhi.n	8006860 <HAL_TIM_ConfigClockSource+0x16c>
 8006780:	2b30      	cmp	r3, #48	; 0x30
 8006782:	d064      	beq.n	800684e <HAL_TIM_ConfigClockSource+0x15a>
 8006784:	2b30      	cmp	r3, #48	; 0x30
 8006786:	d86b      	bhi.n	8006860 <HAL_TIM_ConfigClockSource+0x16c>
 8006788:	2b20      	cmp	r3, #32
 800678a:	d060      	beq.n	800684e <HAL_TIM_ConfigClockSource+0x15a>
 800678c:	2b20      	cmp	r3, #32
 800678e:	d867      	bhi.n	8006860 <HAL_TIM_ConfigClockSource+0x16c>
 8006790:	2b00      	cmp	r3, #0
 8006792:	d05c      	beq.n	800684e <HAL_TIM_ConfigClockSource+0x15a>
 8006794:	2b10      	cmp	r3, #16
 8006796:	d05a      	beq.n	800684e <HAL_TIM_ConfigClockSource+0x15a>
 8006798:	e062      	b.n	8006860 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6818      	ldr	r0, [r3, #0]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	6899      	ldr	r1, [r3, #8]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	f000 fb19 	bl	8006de0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	609a      	str	r2, [r3, #8]
      break;
 80067c6:	e04f      	b.n	8006868 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6818      	ldr	r0, [r3, #0]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	6899      	ldr	r1, [r3, #8]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	f000 fb02 	bl	8006de0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689a      	ldr	r2, [r3, #8]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067ea:	609a      	str	r2, [r3, #8]
      break;
 80067ec:	e03c      	b.n	8006868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6818      	ldr	r0, [r3, #0]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	6859      	ldr	r1, [r3, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	461a      	mov	r2, r3
 80067fc:	f000 fa76 	bl	8006cec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2150      	movs	r1, #80	; 0x50
 8006806:	4618      	mov	r0, r3
 8006808:	f000 facf 	bl	8006daa <TIM_ITRx_SetConfig>
      break;
 800680c:	e02c      	b.n	8006868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6818      	ldr	r0, [r3, #0]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	6859      	ldr	r1, [r3, #4]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	461a      	mov	r2, r3
 800681c:	f000 fa95 	bl	8006d4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2160      	movs	r1, #96	; 0x60
 8006826:	4618      	mov	r0, r3
 8006828:	f000 fabf 	bl	8006daa <TIM_ITRx_SetConfig>
      break;
 800682c:	e01c      	b.n	8006868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	6859      	ldr	r1, [r3, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	461a      	mov	r2, r3
 800683c:	f000 fa56 	bl	8006cec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2140      	movs	r1, #64	; 0x40
 8006846:	4618      	mov	r0, r3
 8006848:	f000 faaf 	bl	8006daa <TIM_ITRx_SetConfig>
      break;
 800684c:	e00c      	b.n	8006868 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4619      	mov	r1, r3
 8006858:	4610      	mov	r0, r2
 800685a:	f000 faa6 	bl	8006daa <TIM_ITRx_SetConfig>
      break;
 800685e:	e003      	b.n	8006868 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	73fb      	strb	r3, [r7, #15]
      break;
 8006864:	e000      	b.n	8006868 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006866:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006878:	7bfb      	ldrb	r3, [r7, #15]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800688a:	bf00      	nop
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006896:	b480      	push	{r7}
 8006898:	b083      	sub	sp, #12
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800689e:	bf00      	nop
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b083      	sub	sp, #12
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068b2:	bf00      	nop
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
	...

080068d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a34      	ldr	r2, [pc, #208]	; (80069b8 <TIM_Base_SetConfig+0xe4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d00f      	beq.n	800690c <TIM_Base_SetConfig+0x38>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f2:	d00b      	beq.n	800690c <TIM_Base_SetConfig+0x38>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a31      	ldr	r2, [pc, #196]	; (80069bc <TIM_Base_SetConfig+0xe8>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d007      	beq.n	800690c <TIM_Base_SetConfig+0x38>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a30      	ldr	r2, [pc, #192]	; (80069c0 <TIM_Base_SetConfig+0xec>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d003      	beq.n	800690c <TIM_Base_SetConfig+0x38>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a2f      	ldr	r2, [pc, #188]	; (80069c4 <TIM_Base_SetConfig+0xf0>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d108      	bne.n	800691e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	4313      	orrs	r3, r2
 800691c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a25      	ldr	r2, [pc, #148]	; (80069b8 <TIM_Base_SetConfig+0xe4>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d01b      	beq.n	800695e <TIM_Base_SetConfig+0x8a>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800692c:	d017      	beq.n	800695e <TIM_Base_SetConfig+0x8a>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a22      	ldr	r2, [pc, #136]	; (80069bc <TIM_Base_SetConfig+0xe8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d013      	beq.n	800695e <TIM_Base_SetConfig+0x8a>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a21      	ldr	r2, [pc, #132]	; (80069c0 <TIM_Base_SetConfig+0xec>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d00f      	beq.n	800695e <TIM_Base_SetConfig+0x8a>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a20      	ldr	r2, [pc, #128]	; (80069c4 <TIM_Base_SetConfig+0xf0>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d00b      	beq.n	800695e <TIM_Base_SetConfig+0x8a>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a1f      	ldr	r2, [pc, #124]	; (80069c8 <TIM_Base_SetConfig+0xf4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d007      	beq.n	800695e <TIM_Base_SetConfig+0x8a>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a1e      	ldr	r2, [pc, #120]	; (80069cc <TIM_Base_SetConfig+0xf8>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d003      	beq.n	800695e <TIM_Base_SetConfig+0x8a>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a1d      	ldr	r2, [pc, #116]	; (80069d0 <TIM_Base_SetConfig+0xfc>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d108      	bne.n	8006970 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	4313      	orrs	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	689a      	ldr	r2, [r3, #8]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a08      	ldr	r2, [pc, #32]	; (80069b8 <TIM_Base_SetConfig+0xe4>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d103      	bne.n	80069a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	691a      	ldr	r2, [r3, #16]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	615a      	str	r2, [r3, #20]
}
 80069aa:	bf00      	nop
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	40010000 	.word	0x40010000
 80069bc:	40000400 	.word	0x40000400
 80069c0:	40000800 	.word	0x40000800
 80069c4:	40000c00 	.word	0x40000c00
 80069c8:	40014000 	.word	0x40014000
 80069cc:	40014400 	.word	0x40014400
 80069d0:	40014800 	.word	0x40014800

080069d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	f023 0201 	bic.w	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0303 	bic.w	r3, r3, #3
 8006a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f023 0302 	bic.w	r3, r3, #2
 8006a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a1c      	ldr	r2, [pc, #112]	; (8006a9c <TIM_OC1_SetConfig+0xc8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d10c      	bne.n	8006a4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f023 0308 	bic.w	r3, r3, #8
 8006a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f023 0304 	bic.w	r3, r3, #4
 8006a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a13      	ldr	r2, [pc, #76]	; (8006a9c <TIM_OC1_SetConfig+0xc8>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d111      	bne.n	8006a76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	621a      	str	r2, [r3, #32]
}
 8006a90:	bf00      	nop
 8006a92:	371c      	adds	r7, #28
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	40010000 	.word	0x40010000

08006aa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b087      	sub	sp, #28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	f023 0210 	bic.w	r2, r3, #16
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	021b      	lsls	r3, r3, #8
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f023 0320 	bic.w	r3, r3, #32
 8006aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a1e      	ldr	r2, [pc, #120]	; (8006b74 <TIM_OC2_SetConfig+0xd4>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d10d      	bne.n	8006b1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	011b      	lsls	r3, r3, #4
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a15      	ldr	r2, [pc, #84]	; (8006b74 <TIM_OC2_SetConfig+0xd4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d113      	bne.n	8006b4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	621a      	str	r2, [r3, #32]
}
 8006b66:	bf00      	nop
 8006b68:	371c      	adds	r7, #28
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	40010000 	.word	0x40010000

08006b78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 0303 	bic.w	r3, r3, #3
 8006bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	021b      	lsls	r3, r3, #8
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a1d      	ldr	r2, [pc, #116]	; (8006c48 <TIM_OC3_SetConfig+0xd0>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d10d      	bne.n	8006bf2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	021b      	lsls	r3, r3, #8
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a14      	ldr	r2, [pc, #80]	; (8006c48 <TIM_OC3_SetConfig+0xd0>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d113      	bne.n	8006c22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	621a      	str	r2, [r3, #32]
}
 8006c3c:	bf00      	nop
 8006c3e:	371c      	adds	r7, #28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	40010000 	.word	0x40010000

08006c4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	021b      	lsls	r3, r3, #8
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	031b      	lsls	r3, r3, #12
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a10      	ldr	r2, [pc, #64]	; (8006ce8 <TIM_OC4_SetConfig+0x9c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d109      	bne.n	8006cc0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	019b      	lsls	r3, r3, #6
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	621a      	str	r2, [r3, #32]
}
 8006cda:	bf00      	nop
 8006cdc:	371c      	adds	r7, #28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	40010000 	.word	0x40010000

08006cec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b087      	sub	sp, #28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	f023 0201 	bic.w	r2, r3, #1
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	011b      	lsls	r3, r3, #4
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f023 030a 	bic.w	r3, r3, #10
 8006d28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	621a      	str	r2, [r3, #32]
}
 8006d3e:	bf00      	nop
 8006d40:	371c      	adds	r7, #28
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b087      	sub	sp, #28
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	60f8      	str	r0, [r7, #12]
 8006d52:	60b9      	str	r1, [r7, #8]
 8006d54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	f023 0210 	bic.w	r2, r3, #16
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	031b      	lsls	r3, r3, #12
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	011b      	lsls	r3, r3, #4
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	621a      	str	r2, [r3, #32]
}
 8006d9e:	bf00      	nop
 8006da0:	371c      	adds	r7, #28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b085      	sub	sp, #20
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	f043 0307 	orr.w	r3, r3, #7
 8006dcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	609a      	str	r2, [r3, #8]
}
 8006dd4:	bf00      	nop
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b087      	sub	sp, #28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
 8006dec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	021a      	lsls	r2, r3, #8
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	431a      	orrs	r2, r3
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	609a      	str	r2, [r3, #8]
}
 8006e14:	bf00      	nop
 8006e16:	371c      	adds	r7, #28
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b087      	sub	sp, #28
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f003 031f 	and.w	r3, r3, #31
 8006e32:	2201      	movs	r2, #1
 8006e34:	fa02 f303 	lsl.w	r3, r2, r3
 8006e38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6a1a      	ldr	r2, [r3, #32]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	43db      	mvns	r3, r3
 8006e42:	401a      	ands	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6a1a      	ldr	r2, [r3, #32]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f003 031f 	and.w	r3, r3, #31
 8006e52:	6879      	ldr	r1, [r7, #4]
 8006e54:	fa01 f303 	lsl.w	r3, r1, r3
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	621a      	str	r2, [r3, #32]
}
 8006e5e:	bf00      	nop
 8006e60:	371c      	adds	r7, #28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
	...

08006e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d101      	bne.n	8006e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e80:	2302      	movs	r3, #2
 8006e82:	e050      	b.n	8006f26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a1c      	ldr	r2, [pc, #112]	; (8006f34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d018      	beq.n	8006efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed0:	d013      	beq.n	8006efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a18      	ldr	r2, [pc, #96]	; (8006f38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d00e      	beq.n	8006efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a16      	ldr	r2, [pc, #88]	; (8006f3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d009      	beq.n	8006efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a15      	ldr	r2, [pc, #84]	; (8006f40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d004      	beq.n	8006efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a13      	ldr	r2, [pc, #76]	; (8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d10c      	bne.n	8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	40010000 	.word	0x40010000
 8006f38:	40000400 	.word	0x40000400
 8006f3c:	40000800 	.word	0x40000800
 8006f40:	40000c00 	.word	0x40000c00
 8006f44:	40014000 	.word	0x40014000

08006f48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d101      	bne.n	8006f64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f60:	2302      	movs	r3, #2
 8006f62:	e03d      	b.n	8006fe0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e03f      	b.n	80070a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d106      	bne.n	8007040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7fc fbcc 	bl	80037d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2224      	movs	r2, #36	; 0x24
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68da      	ldr	r2, [r3, #12]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007056:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fddf 	bl	8007c1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	691a      	ldr	r2, [r3, #16]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800706c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	695a      	ldr	r2, [r3, #20]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800707c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68da      	ldr	r2, [r3, #12]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800708c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2220      	movs	r2, #32
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b08a      	sub	sp, #40	; 0x28
 80070b2:	af02      	add	r7, sp, #8
 80070b4:	60f8      	str	r0, [r7, #12]
 80070b6:	60b9      	str	r1, [r7, #8]
 80070b8:	603b      	str	r3, [r7, #0]
 80070ba:	4613      	mov	r3, r2
 80070bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070be:	2300      	movs	r3, #0
 80070c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b20      	cmp	r3, #32
 80070cc:	d17c      	bne.n	80071c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <HAL_UART_Transmit+0x2c>
 80070d4:	88fb      	ldrh	r3, [r7, #6]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e075      	b.n	80071ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d101      	bne.n	80070ec <HAL_UART_Transmit+0x3e>
 80070e8:	2302      	movs	r3, #2
 80070ea:	e06e      	b.n	80071ca <HAL_UART_Transmit+0x11c>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2221      	movs	r2, #33	; 0x21
 80070fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007102:	f7fc fda7 	bl	8003c54 <HAL_GetTick>
 8007106:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	88fa      	ldrh	r2, [r7, #6]
 800710c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	88fa      	ldrh	r2, [r7, #6]
 8007112:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800711c:	d108      	bne.n	8007130 <HAL_UART_Transmit+0x82>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d104      	bne.n	8007130 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007126:	2300      	movs	r3, #0
 8007128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	61bb      	str	r3, [r7, #24]
 800712e:	e003      	b.n	8007138 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007134:	2300      	movs	r3, #0
 8007136:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007140:	e02a      	b.n	8007198 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2200      	movs	r2, #0
 800714a:	2180      	movs	r1, #128	; 0x80
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 fb1f 	bl	8007790 <UART_WaitOnFlagUntilTimeout>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d001      	beq.n	800715c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e036      	b.n	80071ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10b      	bne.n	800717a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007170:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	3302      	adds	r3, #2
 8007176:	61bb      	str	r3, [r7, #24]
 8007178:	e007      	b.n	800718a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	781a      	ldrb	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	3301      	adds	r3, #1
 8007188:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800718e:	b29b      	uxth	r3, r3
 8007190:	3b01      	subs	r3, #1
 8007192:	b29a      	uxth	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800719c:	b29b      	uxth	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1cf      	bne.n	8007142 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2200      	movs	r2, #0
 80071aa:	2140      	movs	r1, #64	; 0x40
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 faef 	bl	8007790 <UART_WaitOnFlagUntilTimeout>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d001      	beq.n	80071bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e006      	b.n	80071ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2220      	movs	r2, #32
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	e000      	b.n	80071ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80071c8:	2302      	movs	r3, #2
  }
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3720      	adds	r7, #32
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b084      	sub	sp, #16
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	60f8      	str	r0, [r7, #12]
 80071da:	60b9      	str	r1, [r7, #8]
 80071dc:	4613      	mov	r3, r2
 80071de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2b20      	cmp	r3, #32
 80071ea:	d11d      	bne.n	8007228 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d002      	beq.n	80071f8 <HAL_UART_Receive_IT+0x26>
 80071f2:	88fb      	ldrh	r3, [r7, #6]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e016      	b.n	800722a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007202:	2b01      	cmp	r3, #1
 8007204:	d101      	bne.n	800720a <HAL_UART_Receive_IT+0x38>
 8007206:	2302      	movs	r3, #2
 8007208:	e00f      	b.n	800722a <HAL_UART_Receive_IT+0x58>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007218:	88fb      	ldrh	r3, [r7, #6]
 800721a:	461a      	mov	r2, r3
 800721c:	68b9      	ldr	r1, [r7, #8]
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f000 fb24 	bl	800786c <UART_Start_Receive_IT>
 8007224:	4603      	mov	r3, r0
 8007226:	e000      	b.n	800722a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007228:	2302      	movs	r3, #2
  }
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
	...

08007234 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b0ba      	sub	sp, #232	; 0xe8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800725a:	2300      	movs	r3, #0
 800725c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007260:	2300      	movs	r3, #0
 8007262:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800726a:	f003 030f 	and.w	r3, r3, #15
 800726e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007272:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10f      	bne.n	800729a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800727a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800727e:	f003 0320 	and.w	r3, r3, #32
 8007282:	2b00      	cmp	r3, #0
 8007284:	d009      	beq.n	800729a <HAL_UART_IRQHandler+0x66>
 8007286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fc07 	bl	8007aa6 <UART_Receive_IT>
      return;
 8007298:	e256      	b.n	8007748 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800729a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 80de 	beq.w	8007460 <HAL_UART_IRQHandler+0x22c>
 80072a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d106      	bne.n	80072be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 80d1 	beq.w	8007460 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80072be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00b      	beq.n	80072e2 <HAL_UART_IRQHandler+0xae>
 80072ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d005      	beq.n	80072e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	f043 0201 	orr.w	r2, r3, #1
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072e6:	f003 0304 	and.w	r3, r3, #4
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00b      	beq.n	8007306 <HAL_UART_IRQHandler+0xd2>
 80072ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d005      	beq.n	8007306 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fe:	f043 0202 	orr.w	r2, r3, #2
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00b      	beq.n	800732a <HAL_UART_IRQHandler+0xf6>
 8007312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	d005      	beq.n	800732a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	f043 0204 	orr.w	r2, r3, #4
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800732a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800732e:	f003 0308 	and.w	r3, r3, #8
 8007332:	2b00      	cmp	r3, #0
 8007334:	d011      	beq.n	800735a <HAL_UART_IRQHandler+0x126>
 8007336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800733a:	f003 0320 	and.w	r3, r3, #32
 800733e:	2b00      	cmp	r3, #0
 8007340:	d105      	bne.n	800734e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b00      	cmp	r3, #0
 800734c:	d005      	beq.n	800735a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	f043 0208 	orr.w	r2, r3, #8
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 81ed 	beq.w	800773e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007368:	f003 0320 	and.w	r3, r3, #32
 800736c:	2b00      	cmp	r3, #0
 800736e:	d008      	beq.n	8007382 <HAL_UART_IRQHandler+0x14e>
 8007370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007374:	f003 0320 	and.w	r3, r3, #32
 8007378:	2b00      	cmp	r3, #0
 800737a:	d002      	beq.n	8007382 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fb92 	bl	8007aa6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738c:	2b40      	cmp	r3, #64	; 0x40
 800738e:	bf0c      	ite	eq
 8007390:	2301      	moveq	r3, #1
 8007392:	2300      	movne	r3, #0
 8007394:	b2db      	uxtb	r3, r3
 8007396:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739e:	f003 0308 	and.w	r3, r3, #8
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d103      	bne.n	80073ae <HAL_UART_IRQHandler+0x17a>
 80073a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d04f      	beq.n	800744e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fa9a 	bl	80078e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073be:	2b40      	cmp	r3, #64	; 0x40
 80073c0:	d141      	bne.n	8007446 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3314      	adds	r3, #20
 80073c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80073d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3314      	adds	r3, #20
 80073ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80073ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80073f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80073fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073fe:	e841 2300 	strex	r3, r2, [r1]
 8007402:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007406:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1d9      	bne.n	80073c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007412:	2b00      	cmp	r3, #0
 8007414:	d013      	beq.n	800743e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741a:	4a7d      	ldr	r2, [pc, #500]	; (8007610 <HAL_UART_IRQHandler+0x3dc>)
 800741c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007422:	4618      	mov	r0, r3
 8007424:	f7fd f9a9 	bl	800477a <HAL_DMA_Abort_IT>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d016      	beq.n	800745c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007438:	4610      	mov	r0, r2
 800743a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800743c:	e00e      	b.n	800745c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f990 	bl	8007764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007444:	e00a      	b.n	800745c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f98c 	bl	8007764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800744c:	e006      	b.n	800745c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f988 	bl	8007764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800745a:	e170      	b.n	800773e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800745c:	bf00      	nop
    return;
 800745e:	e16e      	b.n	800773e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007464:	2b01      	cmp	r3, #1
 8007466:	f040 814a 	bne.w	80076fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800746a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800746e:	f003 0310 	and.w	r3, r3, #16
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 8143 	beq.w	80076fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800747c:	f003 0310 	and.w	r3, r3, #16
 8007480:	2b00      	cmp	r3, #0
 8007482:	f000 813c 	beq.w	80076fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007486:	2300      	movs	r3, #0
 8007488:	60bb      	str	r3, [r7, #8]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	60bb      	str	r3, [r7, #8]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	60bb      	str	r3, [r7, #8]
 800749a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a6:	2b40      	cmp	r3, #64	; 0x40
 80074a8:	f040 80b4 	bne.w	8007614 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80074b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 8140 	beq.w	8007742 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074ca:	429a      	cmp	r2, r3
 80074cc:	f080 8139 	bcs.w	8007742 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074e2:	f000 8088 	beq.w	80075f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	330c      	adds	r3, #12
 80074ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80074fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007504:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	330c      	adds	r3, #12
 800750e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007512:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007516:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800751e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007522:	e841 2300 	strex	r3, r2, [r1]
 8007526:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800752a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1d9      	bne.n	80074e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3314      	adds	r3, #20
 8007538:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800753c:	e853 3f00 	ldrex	r3, [r3]
 8007540:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007542:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007544:	f023 0301 	bic.w	r3, r3, #1
 8007548:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3314      	adds	r3, #20
 8007552:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007556:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800755a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800755e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007562:	e841 2300 	strex	r3, r2, [r1]
 8007566:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1e1      	bne.n	8007532 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	3314      	adds	r3, #20
 8007574:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007578:	e853 3f00 	ldrex	r3, [r3]
 800757c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800757e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007584:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	3314      	adds	r3, #20
 800758e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007592:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007594:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007596:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007598:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800759a:	e841 2300 	strex	r3, r2, [r1]
 800759e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80075a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1e3      	bne.n	800756e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2220      	movs	r2, #32
 80075aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	330c      	adds	r3, #12
 80075ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075be:	e853 3f00 	ldrex	r3, [r3]
 80075c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075c6:	f023 0310 	bic.w	r3, r3, #16
 80075ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	330c      	adds	r3, #12
 80075d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80075d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80075da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075e0:	e841 2300 	strex	r3, r2, [r1]
 80075e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1e3      	bne.n	80075b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fd f852 	bl	800469a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075fe:	b29b      	uxth	r3, r3
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	b29b      	uxth	r3, r3
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f8b6 	bl	8007778 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800760c:	e099      	b.n	8007742 <HAL_UART_IRQHandler+0x50e>
 800760e:	bf00      	nop
 8007610:	080079af 	.word	0x080079af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800761c:	b29b      	uxth	r3, r3
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007628:	b29b      	uxth	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 808b 	beq.w	8007746 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007630:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 8086 	beq.w	8007746 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	330c      	adds	r3, #12
 8007640:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007644:	e853 3f00 	ldrex	r3, [r3]
 8007648:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800764a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800764c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007650:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	330c      	adds	r3, #12
 800765a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800765e:	647a      	str	r2, [r7, #68]	; 0x44
 8007660:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007662:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007664:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007666:	e841 2300 	strex	r3, r2, [r1]
 800766a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800766c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1e3      	bne.n	800763a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3314      	adds	r3, #20
 8007678:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	623b      	str	r3, [r7, #32]
   return(result);
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	f023 0301 	bic.w	r3, r3, #1
 8007688:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	3314      	adds	r3, #20
 8007692:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007696:	633a      	str	r2, [r7, #48]	; 0x30
 8007698:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800769c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800769e:	e841 2300 	strex	r3, r2, [r1]
 80076a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1e3      	bne.n	8007672 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2220      	movs	r2, #32
 80076ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	330c      	adds	r3, #12
 80076be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	e853 3f00 	ldrex	r3, [r3]
 80076c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f023 0310 	bic.w	r3, r3, #16
 80076ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	330c      	adds	r3, #12
 80076d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80076dc:	61fa      	str	r2, [r7, #28]
 80076de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e0:	69b9      	ldr	r1, [r7, #24]
 80076e2:	69fa      	ldr	r2, [r7, #28]
 80076e4:	e841 2300 	strex	r3, r2, [r1]
 80076e8:	617b      	str	r3, [r7, #20]
   return(result);
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e3      	bne.n	80076b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076f4:	4619      	mov	r1, r3
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f83e 	bl	8007778 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076fc:	e023      	b.n	8007746 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80076fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007706:	2b00      	cmp	r3, #0
 8007708:	d009      	beq.n	800771e <HAL_UART_IRQHandler+0x4ea>
 800770a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800770e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f95d 	bl	80079d6 <UART_Transmit_IT>
    return;
 800771c:	e014      	b.n	8007748 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800771e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00e      	beq.n	8007748 <HAL_UART_IRQHandler+0x514>
 800772a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800772e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007732:	2b00      	cmp	r3, #0
 8007734:	d008      	beq.n	8007748 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f99d 	bl	8007a76 <UART_EndTransmit_IT>
    return;
 800773c:	e004      	b.n	8007748 <HAL_UART_IRQHandler+0x514>
    return;
 800773e:	bf00      	nop
 8007740:	e002      	b.n	8007748 <HAL_UART_IRQHandler+0x514>
      return;
 8007742:	bf00      	nop
 8007744:	e000      	b.n	8007748 <HAL_UART_IRQHandler+0x514>
      return;
 8007746:	bf00      	nop
  }
}
 8007748:	37e8      	adds	r7, #232	; 0xe8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop

08007750 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	460b      	mov	r3, r1
 8007782:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b090      	sub	sp, #64	; 0x40
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	603b      	str	r3, [r7, #0]
 800779c:	4613      	mov	r3, r2
 800779e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077a0:	e050      	b.n	8007844 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a8:	d04c      	beq.n	8007844 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80077aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d007      	beq.n	80077c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80077b0:	f7fc fa50 	bl	8003c54 <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077bc:	429a      	cmp	r2, r3
 80077be:	d241      	bcs.n	8007844 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	330c      	adds	r3, #12
 80077c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	e853 3f00 	ldrex	r3, [r3]
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	330c      	adds	r3, #12
 80077de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80077e0:	637a      	str	r2, [r7, #52]	; 0x34
 80077e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077e8:	e841 2300 	strex	r3, r2, [r1]
 80077ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1e5      	bne.n	80077c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3314      	adds	r3, #20
 80077fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	e853 3f00 	ldrex	r3, [r3]
 8007802:	613b      	str	r3, [r7, #16]
   return(result);
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	f023 0301 	bic.w	r3, r3, #1
 800780a:	63bb      	str	r3, [r7, #56]	; 0x38
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3314      	adds	r3, #20
 8007812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007814:	623a      	str	r2, [r7, #32]
 8007816:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007818:	69f9      	ldr	r1, [r7, #28]
 800781a:	6a3a      	ldr	r2, [r7, #32]
 800781c:	e841 2300 	strex	r3, r2, [r1]
 8007820:	61bb      	str	r3, [r7, #24]
   return(result);
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1e5      	bne.n	80077f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2220      	movs	r2, #32
 800782c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2220      	movs	r2, #32
 8007834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e00f      	b.n	8007864 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	4013      	ands	r3, r2
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	429a      	cmp	r2, r3
 8007852:	bf0c      	ite	eq
 8007854:	2301      	moveq	r3, #1
 8007856:	2300      	movne	r3, #0
 8007858:	b2db      	uxtb	r3, r3
 800785a:	461a      	mov	r2, r3
 800785c:	79fb      	ldrb	r3, [r7, #7]
 800785e:	429a      	cmp	r2, r3
 8007860:	d09f      	beq.n	80077a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3740      	adds	r7, #64	; 0x40
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	4613      	mov	r3, r2
 8007878:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	88fa      	ldrh	r2, [r7, #6]
 8007884:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	88fa      	ldrh	r2, [r7, #6]
 800788a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2222      	movs	r2, #34	; 0x22
 8007896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d007      	beq.n	80078ba <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68da      	ldr	r2, [r3, #12]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078b8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	695a      	ldr	r2, [r3, #20]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f042 0201 	orr.w	r2, r2, #1
 80078c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f042 0220 	orr.w	r2, r2, #32
 80078d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b095      	sub	sp, #84	; 0x54
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	330c      	adds	r3, #12
 80078f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078fa:	e853 3f00 	ldrex	r3, [r3]
 80078fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007902:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	330c      	adds	r3, #12
 800790e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007910:	643a      	str	r2, [r7, #64]	; 0x40
 8007912:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007914:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007916:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007918:	e841 2300 	strex	r3, r2, [r1]
 800791c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800791e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1e5      	bne.n	80078f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	3314      	adds	r3, #20
 800792a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	e853 3f00 	ldrex	r3, [r3]
 8007932:	61fb      	str	r3, [r7, #28]
   return(result);
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	f023 0301 	bic.w	r3, r3, #1
 800793a:	64bb      	str	r3, [r7, #72]	; 0x48
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3314      	adds	r3, #20
 8007942:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007944:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007946:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800794a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800794c:	e841 2300 	strex	r3, r2, [r1]
 8007950:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1e5      	bne.n	8007924 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795c:	2b01      	cmp	r3, #1
 800795e:	d119      	bne.n	8007994 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	330c      	adds	r3, #12
 8007966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	e853 3f00 	ldrex	r3, [r3]
 800796e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f023 0310 	bic.w	r3, r3, #16
 8007976:	647b      	str	r3, [r7, #68]	; 0x44
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	330c      	adds	r3, #12
 800797e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007980:	61ba      	str	r2, [r7, #24]
 8007982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007984:	6979      	ldr	r1, [r7, #20]
 8007986:	69ba      	ldr	r2, [r7, #24]
 8007988:	e841 2300 	strex	r3, r2, [r1]
 800798c:	613b      	str	r3, [r7, #16]
   return(result);
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1e5      	bne.n	8007960 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2220      	movs	r2, #32
 8007998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80079a2:	bf00      	nop
 80079a4:	3754      	adds	r7, #84	; 0x54
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b084      	sub	sp, #16
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f7ff fecb 	bl	8007764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079ce:	bf00      	nop
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b085      	sub	sp, #20
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b21      	cmp	r3, #33	; 0x21
 80079e8:	d13e      	bne.n	8007a68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079f2:	d114      	bne.n	8007a1e <UART_Transmit_IT+0x48>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d110      	bne.n	8007a1e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a1b      	ldr	r3, [r3, #32]
 8007a00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	1c9a      	adds	r2, r3, #2
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	621a      	str	r2, [r3, #32]
 8007a1c:	e008      	b.n	8007a30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	1c59      	adds	r1, r3, #1
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6211      	str	r1, [r2, #32]
 8007a28:	781a      	ldrb	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	3b01      	subs	r3, #1
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10f      	bne.n	8007a64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68da      	ldr	r2, [r3, #12]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	e000      	b.n	8007a6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a68:	2302      	movs	r3, #2
  }
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b082      	sub	sp, #8
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68da      	ldr	r2, [r3, #12]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7ff fe5a 	bl	8007750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b08c      	sub	sp, #48	; 0x30
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b22      	cmp	r3, #34	; 0x22
 8007ab8:	f040 80ab 	bne.w	8007c12 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ac4:	d117      	bne.n	8007af6 <UART_Receive_IT+0x50>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d113      	bne.n	8007af6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aee:	1c9a      	adds	r2, r3, #2
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	629a      	str	r2, [r3, #40]	; 0x28
 8007af4:	e026      	b.n	8007b44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007afc:	2300      	movs	r3, #0
 8007afe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b08:	d007      	beq.n	8007b1a <UART_Receive_IT+0x74>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10a      	bne.n	8007b28 <UART_Receive_IT+0x82>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d106      	bne.n	8007b28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b24:	701a      	strb	r2, [r3, #0]
 8007b26:	e008      	b.n	8007b3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3e:	1c5a      	adds	r2, r3, #1
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	4619      	mov	r1, r3
 8007b52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d15a      	bne.n	8007c0e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68da      	ldr	r2, [r3, #12]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f022 0220 	bic.w	r2, r2, #32
 8007b66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68da      	ldr	r2, [r3, #12]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	695a      	ldr	r2, [r3, #20]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f022 0201 	bic.w	r2, r2, #1
 8007b86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d135      	bne.n	8007c04 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	330c      	adds	r3, #12
 8007ba4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	e853 3f00 	ldrex	r3, [r3]
 8007bac:	613b      	str	r3, [r7, #16]
   return(result);
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	f023 0310 	bic.w	r3, r3, #16
 8007bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	330c      	adds	r3, #12
 8007bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bbe:	623a      	str	r2, [r7, #32]
 8007bc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc2:	69f9      	ldr	r1, [r7, #28]
 8007bc4:	6a3a      	ldr	r2, [r7, #32]
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e5      	bne.n	8007b9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0310 	and.w	r3, r3, #16
 8007bdc:	2b10      	cmp	r3, #16
 8007bde:	d10a      	bne.n	8007bf6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007be0:	2300      	movs	r3, #0
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	60fb      	str	r3, [r7, #12]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	60fb      	str	r3, [r7, #12]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f7ff fdbb 	bl	8007778 <HAL_UARTEx_RxEventCallback>
 8007c02:	e002      	b.n	8007c0a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f7fb fb65 	bl	80032d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	e002      	b.n	8007c14 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	e000      	b.n	8007c14 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007c12:	2302      	movs	r3, #2
  }
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3730      	adds	r7, #48	; 0x30
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c20:	b0c0      	sub	sp, #256	; 0x100
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c38:	68d9      	ldr	r1, [r3, #12]
 8007c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	ea40 0301 	orr.w	r3, r0, r1
 8007c44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c4a:	689a      	ldr	r2, [r3, #8]
 8007c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	431a      	orrs	r2, r3
 8007c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	431a      	orrs	r2, r3
 8007c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c60:	69db      	ldr	r3, [r3, #28]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007c74:	f021 010c 	bic.w	r1, r1, #12
 8007c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c82:	430b      	orrs	r3, r1
 8007c84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c96:	6999      	ldr	r1, [r3, #24]
 8007c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	ea40 0301 	orr.w	r3, r0, r1
 8007ca2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	4b8f      	ldr	r3, [pc, #572]	; (8007ee8 <UART_SetConfig+0x2cc>)
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d005      	beq.n	8007cbc <UART_SetConfig+0xa0>
 8007cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	4b8d      	ldr	r3, [pc, #564]	; (8007eec <UART_SetConfig+0x2d0>)
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d104      	bne.n	8007cc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cbc:	f7fd fbac 	bl	8005418 <HAL_RCC_GetPCLK2Freq>
 8007cc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007cc4:	e003      	b.n	8007cce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cc6:	f7fd fb93 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 8007cca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd2:	69db      	ldr	r3, [r3, #28]
 8007cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cd8:	f040 810c 	bne.w	8007ef4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ce6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007cea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007cee:	4622      	mov	r2, r4
 8007cf0:	462b      	mov	r3, r5
 8007cf2:	1891      	adds	r1, r2, r2
 8007cf4:	65b9      	str	r1, [r7, #88]	; 0x58
 8007cf6:	415b      	adcs	r3, r3
 8007cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007cfe:	4621      	mov	r1, r4
 8007d00:	eb12 0801 	adds.w	r8, r2, r1
 8007d04:	4629      	mov	r1, r5
 8007d06:	eb43 0901 	adc.w	r9, r3, r1
 8007d0a:	f04f 0200 	mov.w	r2, #0
 8007d0e:	f04f 0300 	mov.w	r3, #0
 8007d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d1e:	4690      	mov	r8, r2
 8007d20:	4699      	mov	r9, r3
 8007d22:	4623      	mov	r3, r4
 8007d24:	eb18 0303 	adds.w	r3, r8, r3
 8007d28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d2c:	462b      	mov	r3, r5
 8007d2e:	eb49 0303 	adc.w	r3, r9, r3
 8007d32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007d46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	18db      	adds	r3, r3, r3
 8007d4e:	653b      	str	r3, [r7, #80]	; 0x50
 8007d50:	4613      	mov	r3, r2
 8007d52:	eb42 0303 	adc.w	r3, r2, r3
 8007d56:	657b      	str	r3, [r7, #84]	; 0x54
 8007d58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d60:	f7f8 ff9a 	bl	8000c98 <__aeabi_uldivmod>
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	4b61      	ldr	r3, [pc, #388]	; (8007ef0 <UART_SetConfig+0x2d4>)
 8007d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8007d6e:	095b      	lsrs	r3, r3, #5
 8007d70:	011c      	lsls	r4, r3, #4
 8007d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d76:	2200      	movs	r2, #0
 8007d78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007d80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007d84:	4642      	mov	r2, r8
 8007d86:	464b      	mov	r3, r9
 8007d88:	1891      	adds	r1, r2, r2
 8007d8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d8c:	415b      	adcs	r3, r3
 8007d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007d94:	4641      	mov	r1, r8
 8007d96:	eb12 0a01 	adds.w	sl, r2, r1
 8007d9a:	4649      	mov	r1, r9
 8007d9c:	eb43 0b01 	adc.w	fp, r3, r1
 8007da0:	f04f 0200 	mov.w	r2, #0
 8007da4:	f04f 0300 	mov.w	r3, #0
 8007da8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007dac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007db0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007db4:	4692      	mov	sl, r2
 8007db6:	469b      	mov	fp, r3
 8007db8:	4643      	mov	r3, r8
 8007dba:	eb1a 0303 	adds.w	r3, sl, r3
 8007dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dc2:	464b      	mov	r3, r9
 8007dc4:	eb4b 0303 	adc.w	r3, fp, r3
 8007dc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007ddc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007de0:	460b      	mov	r3, r1
 8007de2:	18db      	adds	r3, r3, r3
 8007de4:	643b      	str	r3, [r7, #64]	; 0x40
 8007de6:	4613      	mov	r3, r2
 8007de8:	eb42 0303 	adc.w	r3, r2, r3
 8007dec:	647b      	str	r3, [r7, #68]	; 0x44
 8007dee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007df2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007df6:	f7f8 ff4f 	bl	8000c98 <__aeabi_uldivmod>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	4611      	mov	r1, r2
 8007e00:	4b3b      	ldr	r3, [pc, #236]	; (8007ef0 <UART_SetConfig+0x2d4>)
 8007e02:	fba3 2301 	umull	r2, r3, r3, r1
 8007e06:	095b      	lsrs	r3, r3, #5
 8007e08:	2264      	movs	r2, #100	; 0x64
 8007e0a:	fb02 f303 	mul.w	r3, r2, r3
 8007e0e:	1acb      	subs	r3, r1, r3
 8007e10:	00db      	lsls	r3, r3, #3
 8007e12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007e16:	4b36      	ldr	r3, [pc, #216]	; (8007ef0 <UART_SetConfig+0x2d4>)
 8007e18:	fba3 2302 	umull	r2, r3, r3, r2
 8007e1c:	095b      	lsrs	r3, r3, #5
 8007e1e:	005b      	lsls	r3, r3, #1
 8007e20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e24:	441c      	add	r4, r3
 8007e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007e34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007e38:	4642      	mov	r2, r8
 8007e3a:	464b      	mov	r3, r9
 8007e3c:	1891      	adds	r1, r2, r2
 8007e3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e40:	415b      	adcs	r3, r3
 8007e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e48:	4641      	mov	r1, r8
 8007e4a:	1851      	adds	r1, r2, r1
 8007e4c:	6339      	str	r1, [r7, #48]	; 0x30
 8007e4e:	4649      	mov	r1, r9
 8007e50:	414b      	adcs	r3, r1
 8007e52:	637b      	str	r3, [r7, #52]	; 0x34
 8007e54:	f04f 0200 	mov.w	r2, #0
 8007e58:	f04f 0300 	mov.w	r3, #0
 8007e5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007e60:	4659      	mov	r1, fp
 8007e62:	00cb      	lsls	r3, r1, #3
 8007e64:	4651      	mov	r1, sl
 8007e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e6a:	4651      	mov	r1, sl
 8007e6c:	00ca      	lsls	r2, r1, #3
 8007e6e:	4610      	mov	r0, r2
 8007e70:	4619      	mov	r1, r3
 8007e72:	4603      	mov	r3, r0
 8007e74:	4642      	mov	r2, r8
 8007e76:	189b      	adds	r3, r3, r2
 8007e78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e7c:	464b      	mov	r3, r9
 8007e7e:	460a      	mov	r2, r1
 8007e80:	eb42 0303 	adc.w	r3, r2, r3
 8007e84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007e98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	18db      	adds	r3, r3, r3
 8007ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	eb42 0303 	adc.w	r3, r2, r3
 8007ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007eae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007eb2:	f7f8 fef1 	bl	8000c98 <__aeabi_uldivmod>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4b0d      	ldr	r3, [pc, #52]	; (8007ef0 <UART_SetConfig+0x2d4>)
 8007ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8007ec0:	095b      	lsrs	r3, r3, #5
 8007ec2:	2164      	movs	r1, #100	; 0x64
 8007ec4:	fb01 f303 	mul.w	r3, r1, r3
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	00db      	lsls	r3, r3, #3
 8007ecc:	3332      	adds	r3, #50	; 0x32
 8007ece:	4a08      	ldr	r2, [pc, #32]	; (8007ef0 <UART_SetConfig+0x2d4>)
 8007ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed4:	095b      	lsrs	r3, r3, #5
 8007ed6:	f003 0207 	and.w	r2, r3, #7
 8007eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4422      	add	r2, r4
 8007ee2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ee4:	e105      	b.n	80080f2 <UART_SetConfig+0x4d6>
 8007ee6:	bf00      	nop
 8007ee8:	40011000 	.word	0x40011000
 8007eec:	40011400 	.word	0x40011400
 8007ef0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007efe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007f06:	4642      	mov	r2, r8
 8007f08:	464b      	mov	r3, r9
 8007f0a:	1891      	adds	r1, r2, r2
 8007f0c:	6239      	str	r1, [r7, #32]
 8007f0e:	415b      	adcs	r3, r3
 8007f10:	627b      	str	r3, [r7, #36]	; 0x24
 8007f12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f16:	4641      	mov	r1, r8
 8007f18:	1854      	adds	r4, r2, r1
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	eb43 0501 	adc.w	r5, r3, r1
 8007f20:	f04f 0200 	mov.w	r2, #0
 8007f24:	f04f 0300 	mov.w	r3, #0
 8007f28:	00eb      	lsls	r3, r5, #3
 8007f2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f2e:	00e2      	lsls	r2, r4, #3
 8007f30:	4614      	mov	r4, r2
 8007f32:	461d      	mov	r5, r3
 8007f34:	4643      	mov	r3, r8
 8007f36:	18e3      	adds	r3, r4, r3
 8007f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f3c:	464b      	mov	r3, r9
 8007f3e:	eb45 0303 	adc.w	r3, r5, r3
 8007f42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f56:	f04f 0200 	mov.w	r2, #0
 8007f5a:	f04f 0300 	mov.w	r3, #0
 8007f5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007f62:	4629      	mov	r1, r5
 8007f64:	008b      	lsls	r3, r1, #2
 8007f66:	4621      	mov	r1, r4
 8007f68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	008a      	lsls	r2, r1, #2
 8007f70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007f74:	f7f8 fe90 	bl	8000c98 <__aeabi_uldivmod>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4b60      	ldr	r3, [pc, #384]	; (8008100 <UART_SetConfig+0x4e4>)
 8007f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8007f82:	095b      	lsrs	r3, r3, #5
 8007f84:	011c      	lsls	r4, r3, #4
 8007f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007f94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007f98:	4642      	mov	r2, r8
 8007f9a:	464b      	mov	r3, r9
 8007f9c:	1891      	adds	r1, r2, r2
 8007f9e:	61b9      	str	r1, [r7, #24]
 8007fa0:	415b      	adcs	r3, r3
 8007fa2:	61fb      	str	r3, [r7, #28]
 8007fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fa8:	4641      	mov	r1, r8
 8007faa:	1851      	adds	r1, r2, r1
 8007fac:	6139      	str	r1, [r7, #16]
 8007fae:	4649      	mov	r1, r9
 8007fb0:	414b      	adcs	r3, r1
 8007fb2:	617b      	str	r3, [r7, #20]
 8007fb4:	f04f 0200 	mov.w	r2, #0
 8007fb8:	f04f 0300 	mov.w	r3, #0
 8007fbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fc0:	4659      	mov	r1, fp
 8007fc2:	00cb      	lsls	r3, r1, #3
 8007fc4:	4651      	mov	r1, sl
 8007fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fca:	4651      	mov	r1, sl
 8007fcc:	00ca      	lsls	r2, r1, #3
 8007fce:	4610      	mov	r0, r2
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	4642      	mov	r2, r8
 8007fd6:	189b      	adds	r3, r3, r2
 8007fd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fdc:	464b      	mov	r3, r9
 8007fde:	460a      	mov	r2, r1
 8007fe0:	eb42 0303 	adc.w	r3, r2, r3
 8007fe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ff2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007ff4:	f04f 0200 	mov.w	r2, #0
 8007ff8:	f04f 0300 	mov.w	r3, #0
 8007ffc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008000:	4649      	mov	r1, r9
 8008002:	008b      	lsls	r3, r1, #2
 8008004:	4641      	mov	r1, r8
 8008006:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800800a:	4641      	mov	r1, r8
 800800c:	008a      	lsls	r2, r1, #2
 800800e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008012:	f7f8 fe41 	bl	8000c98 <__aeabi_uldivmod>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	4b39      	ldr	r3, [pc, #228]	; (8008100 <UART_SetConfig+0x4e4>)
 800801c:	fba3 1302 	umull	r1, r3, r3, r2
 8008020:	095b      	lsrs	r3, r3, #5
 8008022:	2164      	movs	r1, #100	; 0x64
 8008024:	fb01 f303 	mul.w	r3, r1, r3
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	011b      	lsls	r3, r3, #4
 800802c:	3332      	adds	r3, #50	; 0x32
 800802e:	4a34      	ldr	r2, [pc, #208]	; (8008100 <UART_SetConfig+0x4e4>)
 8008030:	fba2 2303 	umull	r2, r3, r2, r3
 8008034:	095b      	lsrs	r3, r3, #5
 8008036:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800803a:	441c      	add	r4, r3
 800803c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008040:	2200      	movs	r2, #0
 8008042:	673b      	str	r3, [r7, #112]	; 0x70
 8008044:	677a      	str	r2, [r7, #116]	; 0x74
 8008046:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800804a:	4642      	mov	r2, r8
 800804c:	464b      	mov	r3, r9
 800804e:	1891      	adds	r1, r2, r2
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	415b      	adcs	r3, r3
 8008054:	60fb      	str	r3, [r7, #12]
 8008056:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800805a:	4641      	mov	r1, r8
 800805c:	1851      	adds	r1, r2, r1
 800805e:	6039      	str	r1, [r7, #0]
 8008060:	4649      	mov	r1, r9
 8008062:	414b      	adcs	r3, r1
 8008064:	607b      	str	r3, [r7, #4]
 8008066:	f04f 0200 	mov.w	r2, #0
 800806a:	f04f 0300 	mov.w	r3, #0
 800806e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008072:	4659      	mov	r1, fp
 8008074:	00cb      	lsls	r3, r1, #3
 8008076:	4651      	mov	r1, sl
 8008078:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800807c:	4651      	mov	r1, sl
 800807e:	00ca      	lsls	r2, r1, #3
 8008080:	4610      	mov	r0, r2
 8008082:	4619      	mov	r1, r3
 8008084:	4603      	mov	r3, r0
 8008086:	4642      	mov	r2, r8
 8008088:	189b      	adds	r3, r3, r2
 800808a:	66bb      	str	r3, [r7, #104]	; 0x68
 800808c:	464b      	mov	r3, r9
 800808e:	460a      	mov	r2, r1
 8008090:	eb42 0303 	adc.w	r3, r2, r3
 8008094:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	663b      	str	r3, [r7, #96]	; 0x60
 80080a0:	667a      	str	r2, [r7, #100]	; 0x64
 80080a2:	f04f 0200 	mov.w	r2, #0
 80080a6:	f04f 0300 	mov.w	r3, #0
 80080aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80080ae:	4649      	mov	r1, r9
 80080b0:	008b      	lsls	r3, r1, #2
 80080b2:	4641      	mov	r1, r8
 80080b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080b8:	4641      	mov	r1, r8
 80080ba:	008a      	lsls	r2, r1, #2
 80080bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80080c0:	f7f8 fdea 	bl	8000c98 <__aeabi_uldivmod>
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	4b0d      	ldr	r3, [pc, #52]	; (8008100 <UART_SetConfig+0x4e4>)
 80080ca:	fba3 1302 	umull	r1, r3, r3, r2
 80080ce:	095b      	lsrs	r3, r3, #5
 80080d0:	2164      	movs	r1, #100	; 0x64
 80080d2:	fb01 f303 	mul.w	r3, r1, r3
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	011b      	lsls	r3, r3, #4
 80080da:	3332      	adds	r3, #50	; 0x32
 80080dc:	4a08      	ldr	r2, [pc, #32]	; (8008100 <UART_SetConfig+0x4e4>)
 80080de:	fba2 2303 	umull	r2, r3, r2, r3
 80080e2:	095b      	lsrs	r3, r3, #5
 80080e4:	f003 020f 	and.w	r2, r3, #15
 80080e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4422      	add	r2, r4
 80080f0:	609a      	str	r2, [r3, #8]
}
 80080f2:	bf00      	nop
 80080f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80080f8:	46bd      	mov	sp, r7
 80080fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080fe:	bf00      	nop
 8008100:	51eb851f 	.word	0x51eb851f

08008104 <atoi>:
 8008104:	220a      	movs	r2, #10
 8008106:	2100      	movs	r1, #0
 8008108:	f000 bbc4 	b.w	8008894 <strtol>

0800810c <__errno>:
 800810c:	4b01      	ldr	r3, [pc, #4]	; (8008114 <__errno+0x8>)
 800810e:	6818      	ldr	r0, [r3, #0]
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	20000010 	.word	0x20000010

08008118 <__libc_init_array>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	4d0d      	ldr	r5, [pc, #52]	; (8008150 <__libc_init_array+0x38>)
 800811c:	4c0d      	ldr	r4, [pc, #52]	; (8008154 <__libc_init_array+0x3c>)
 800811e:	1b64      	subs	r4, r4, r5
 8008120:	10a4      	asrs	r4, r4, #2
 8008122:	2600      	movs	r6, #0
 8008124:	42a6      	cmp	r6, r4
 8008126:	d109      	bne.n	800813c <__libc_init_array+0x24>
 8008128:	4d0b      	ldr	r5, [pc, #44]	; (8008158 <__libc_init_array+0x40>)
 800812a:	4c0c      	ldr	r4, [pc, #48]	; (800815c <__libc_init_array+0x44>)
 800812c:	f007 fd78 	bl	800fc20 <_init>
 8008130:	1b64      	subs	r4, r4, r5
 8008132:	10a4      	asrs	r4, r4, #2
 8008134:	2600      	movs	r6, #0
 8008136:	42a6      	cmp	r6, r4
 8008138:	d105      	bne.n	8008146 <__libc_init_array+0x2e>
 800813a:	bd70      	pop	{r4, r5, r6, pc}
 800813c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008140:	4798      	blx	r3
 8008142:	3601      	adds	r6, #1
 8008144:	e7ee      	b.n	8008124 <__libc_init_array+0xc>
 8008146:	f855 3b04 	ldr.w	r3, [r5], #4
 800814a:	4798      	blx	r3
 800814c:	3601      	adds	r6, #1
 800814e:	e7f2      	b.n	8008136 <__libc_init_array+0x1e>
 8008150:	0801041c 	.word	0x0801041c
 8008154:	0801041c 	.word	0x0801041c
 8008158:	0801041c 	.word	0x0801041c
 800815c:	08010424 	.word	0x08010424

08008160 <malloc>:
 8008160:	4b02      	ldr	r3, [pc, #8]	; (800816c <malloc+0xc>)
 8008162:	4601      	mov	r1, r0
 8008164:	6818      	ldr	r0, [r3, #0]
 8008166:	f000 b80b 	b.w	8008180 <_malloc_r>
 800816a:	bf00      	nop
 800816c:	20000010 	.word	0x20000010

08008170 <free>:
 8008170:	4b02      	ldr	r3, [pc, #8]	; (800817c <free+0xc>)
 8008172:	4601      	mov	r1, r0
 8008174:	6818      	ldr	r0, [r3, #0]
 8008176:	f003 be29 	b.w	800bdcc <_free_r>
 800817a:	bf00      	nop
 800817c:	20000010 	.word	0x20000010

08008180 <_malloc_r>:
 8008180:	f101 030b 	add.w	r3, r1, #11
 8008184:	2b16      	cmp	r3, #22
 8008186:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800818a:	4605      	mov	r5, r0
 800818c:	d906      	bls.n	800819c <_malloc_r+0x1c>
 800818e:	f033 0707 	bics.w	r7, r3, #7
 8008192:	d504      	bpl.n	800819e <_malloc_r+0x1e>
 8008194:	230c      	movs	r3, #12
 8008196:	602b      	str	r3, [r5, #0]
 8008198:	2400      	movs	r4, #0
 800819a:	e1a5      	b.n	80084e8 <_malloc_r+0x368>
 800819c:	2710      	movs	r7, #16
 800819e:	42b9      	cmp	r1, r7
 80081a0:	d8f8      	bhi.n	8008194 <_malloc_r+0x14>
 80081a2:	4628      	mov	r0, r5
 80081a4:	f000 fa30 	bl	8008608 <__malloc_lock>
 80081a8:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 80081ac:	4eb0      	ldr	r6, [pc, #704]	; (8008470 <_malloc_r+0x2f0>)
 80081ae:	d237      	bcs.n	8008220 <_malloc_r+0xa0>
 80081b0:	f107 0208 	add.w	r2, r7, #8
 80081b4:	4432      	add	r2, r6
 80081b6:	f1a2 0108 	sub.w	r1, r2, #8
 80081ba:	6854      	ldr	r4, [r2, #4]
 80081bc:	428c      	cmp	r4, r1
 80081be:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80081c2:	d102      	bne.n	80081ca <_malloc_r+0x4a>
 80081c4:	68d4      	ldr	r4, [r2, #12]
 80081c6:	42a2      	cmp	r2, r4
 80081c8:	d010      	beq.n	80081ec <_malloc_r+0x6c>
 80081ca:	6863      	ldr	r3, [r4, #4]
 80081cc:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80081d0:	f023 0303 	bic.w	r3, r3, #3
 80081d4:	60ca      	str	r2, [r1, #12]
 80081d6:	4423      	add	r3, r4
 80081d8:	6091      	str	r1, [r2, #8]
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	f042 0201 	orr.w	r2, r2, #1
 80081e0:	605a      	str	r2, [r3, #4]
 80081e2:	4628      	mov	r0, r5
 80081e4:	f000 fa16 	bl	8008614 <__malloc_unlock>
 80081e8:	3408      	adds	r4, #8
 80081ea:	e17d      	b.n	80084e8 <_malloc_r+0x368>
 80081ec:	3302      	adds	r3, #2
 80081ee:	6934      	ldr	r4, [r6, #16]
 80081f0:	49a0      	ldr	r1, [pc, #640]	; (8008474 <_malloc_r+0x2f4>)
 80081f2:	428c      	cmp	r4, r1
 80081f4:	d077      	beq.n	80082e6 <_malloc_r+0x166>
 80081f6:	6862      	ldr	r2, [r4, #4]
 80081f8:	f022 0c03 	bic.w	ip, r2, #3
 80081fc:	ebac 0007 	sub.w	r0, ip, r7
 8008200:	280f      	cmp	r0, #15
 8008202:	dd48      	ble.n	8008296 <_malloc_r+0x116>
 8008204:	19e2      	adds	r2, r4, r7
 8008206:	f040 0301 	orr.w	r3, r0, #1
 800820a:	f047 0701 	orr.w	r7, r7, #1
 800820e:	6067      	str	r7, [r4, #4]
 8008210:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8008214:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8008218:	6053      	str	r3, [r2, #4]
 800821a:	f844 000c 	str.w	r0, [r4, ip]
 800821e:	e7e0      	b.n	80081e2 <_malloc_r+0x62>
 8008220:	0a7b      	lsrs	r3, r7, #9
 8008222:	d02a      	beq.n	800827a <_malloc_r+0xfa>
 8008224:	2b04      	cmp	r3, #4
 8008226:	d812      	bhi.n	800824e <_malloc_r+0xce>
 8008228:	09bb      	lsrs	r3, r7, #6
 800822a:	3338      	adds	r3, #56	; 0x38
 800822c:	1c5a      	adds	r2, r3, #1
 800822e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8008232:	f1a2 0c08 	sub.w	ip, r2, #8
 8008236:	6854      	ldr	r4, [r2, #4]
 8008238:	4564      	cmp	r4, ip
 800823a:	d006      	beq.n	800824a <_malloc_r+0xca>
 800823c:	6862      	ldr	r2, [r4, #4]
 800823e:	f022 0203 	bic.w	r2, r2, #3
 8008242:	1bd0      	subs	r0, r2, r7
 8008244:	280f      	cmp	r0, #15
 8008246:	dd1c      	ble.n	8008282 <_malloc_r+0x102>
 8008248:	3b01      	subs	r3, #1
 800824a:	3301      	adds	r3, #1
 800824c:	e7cf      	b.n	80081ee <_malloc_r+0x6e>
 800824e:	2b14      	cmp	r3, #20
 8008250:	d801      	bhi.n	8008256 <_malloc_r+0xd6>
 8008252:	335b      	adds	r3, #91	; 0x5b
 8008254:	e7ea      	b.n	800822c <_malloc_r+0xac>
 8008256:	2b54      	cmp	r3, #84	; 0x54
 8008258:	d802      	bhi.n	8008260 <_malloc_r+0xe0>
 800825a:	0b3b      	lsrs	r3, r7, #12
 800825c:	336e      	adds	r3, #110	; 0x6e
 800825e:	e7e5      	b.n	800822c <_malloc_r+0xac>
 8008260:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008264:	d802      	bhi.n	800826c <_malloc_r+0xec>
 8008266:	0bfb      	lsrs	r3, r7, #15
 8008268:	3377      	adds	r3, #119	; 0x77
 800826a:	e7df      	b.n	800822c <_malloc_r+0xac>
 800826c:	f240 5254 	movw	r2, #1364	; 0x554
 8008270:	4293      	cmp	r3, r2
 8008272:	d804      	bhi.n	800827e <_malloc_r+0xfe>
 8008274:	0cbb      	lsrs	r3, r7, #18
 8008276:	337c      	adds	r3, #124	; 0x7c
 8008278:	e7d8      	b.n	800822c <_malloc_r+0xac>
 800827a:	233f      	movs	r3, #63	; 0x3f
 800827c:	e7d6      	b.n	800822c <_malloc_r+0xac>
 800827e:	237e      	movs	r3, #126	; 0x7e
 8008280:	e7d4      	b.n	800822c <_malloc_r+0xac>
 8008282:	2800      	cmp	r0, #0
 8008284:	68e1      	ldr	r1, [r4, #12]
 8008286:	db04      	blt.n	8008292 <_malloc_r+0x112>
 8008288:	68a3      	ldr	r3, [r4, #8]
 800828a:	60d9      	str	r1, [r3, #12]
 800828c:	608b      	str	r3, [r1, #8]
 800828e:	18a3      	adds	r3, r4, r2
 8008290:	e7a3      	b.n	80081da <_malloc_r+0x5a>
 8008292:	460c      	mov	r4, r1
 8008294:	e7d0      	b.n	8008238 <_malloc_r+0xb8>
 8008296:	2800      	cmp	r0, #0
 8008298:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800829c:	db07      	blt.n	80082ae <_malloc_r+0x12e>
 800829e:	44a4      	add	ip, r4
 80082a0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80082a4:	f043 0301 	orr.w	r3, r3, #1
 80082a8:	f8cc 3004 	str.w	r3, [ip, #4]
 80082ac:	e799      	b.n	80081e2 <_malloc_r+0x62>
 80082ae:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80082b2:	6870      	ldr	r0, [r6, #4]
 80082b4:	f080 8096 	bcs.w	80083e4 <_malloc_r+0x264>
 80082b8:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 80082bc:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80082c0:	f04f 0c01 	mov.w	ip, #1
 80082c4:	3201      	adds	r2, #1
 80082c6:	fa0c fc0e 	lsl.w	ip, ip, lr
 80082ca:	ea4c 0000 	orr.w	r0, ip, r0
 80082ce:	6070      	str	r0, [r6, #4]
 80082d0:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80082d4:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80082d8:	3808      	subs	r0, #8
 80082da:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80082de:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80082e2:	f8cc 400c 	str.w	r4, [ip, #12]
 80082e6:	2001      	movs	r0, #1
 80082e8:	109a      	asrs	r2, r3, #2
 80082ea:	fa00 f202 	lsl.w	r2, r0, r2
 80082ee:	6870      	ldr	r0, [r6, #4]
 80082f0:	4290      	cmp	r0, r2
 80082f2:	d326      	bcc.n	8008342 <_malloc_r+0x1c2>
 80082f4:	4210      	tst	r0, r2
 80082f6:	d106      	bne.n	8008306 <_malloc_r+0x186>
 80082f8:	f023 0303 	bic.w	r3, r3, #3
 80082fc:	0052      	lsls	r2, r2, #1
 80082fe:	4210      	tst	r0, r2
 8008300:	f103 0304 	add.w	r3, r3, #4
 8008304:	d0fa      	beq.n	80082fc <_malloc_r+0x17c>
 8008306:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800830a:	46c1      	mov	r9, r8
 800830c:	469e      	mov	lr, r3
 800830e:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8008312:	454c      	cmp	r4, r9
 8008314:	f040 80ba 	bne.w	800848c <_malloc_r+0x30c>
 8008318:	f10e 0e01 	add.w	lr, lr, #1
 800831c:	f01e 0f03 	tst.w	lr, #3
 8008320:	f109 0908 	add.w	r9, r9, #8
 8008324:	d1f3      	bne.n	800830e <_malloc_r+0x18e>
 8008326:	0798      	lsls	r0, r3, #30
 8008328:	f040 80e4 	bne.w	80084f4 <_malloc_r+0x374>
 800832c:	6873      	ldr	r3, [r6, #4]
 800832e:	ea23 0302 	bic.w	r3, r3, r2
 8008332:	6073      	str	r3, [r6, #4]
 8008334:	6870      	ldr	r0, [r6, #4]
 8008336:	0052      	lsls	r2, r2, #1
 8008338:	4290      	cmp	r0, r2
 800833a:	d302      	bcc.n	8008342 <_malloc_r+0x1c2>
 800833c:	2a00      	cmp	r2, #0
 800833e:	f040 80e6 	bne.w	800850e <_malloc_r+0x38e>
 8008342:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8008346:	f8da 3004 	ldr.w	r3, [sl, #4]
 800834a:	f023 0903 	bic.w	r9, r3, #3
 800834e:	45b9      	cmp	r9, r7
 8008350:	d304      	bcc.n	800835c <_malloc_r+0x1dc>
 8008352:	eba9 0207 	sub.w	r2, r9, r7
 8008356:	2a0f      	cmp	r2, #15
 8008358:	f300 8142 	bgt.w	80085e0 <_malloc_r+0x460>
 800835c:	4b46      	ldr	r3, [pc, #280]	; (8008478 <_malloc_r+0x2f8>)
 800835e:	6819      	ldr	r1, [r3, #0]
 8008360:	3110      	adds	r1, #16
 8008362:	4439      	add	r1, r7
 8008364:	2008      	movs	r0, #8
 8008366:	9101      	str	r1, [sp, #4]
 8008368:	f002 fe26 	bl	800afb8 <sysconf>
 800836c:	4a43      	ldr	r2, [pc, #268]	; (800847c <_malloc_r+0x2fc>)
 800836e:	9901      	ldr	r1, [sp, #4]
 8008370:	6813      	ldr	r3, [r2, #0]
 8008372:	3301      	adds	r3, #1
 8008374:	bf1f      	itttt	ne
 8008376:	f101 31ff 	addne.w	r1, r1, #4294967295
 800837a:	1809      	addne	r1, r1, r0
 800837c:	4243      	negne	r3, r0
 800837e:	4019      	andne	r1, r3
 8008380:	4680      	mov	r8, r0
 8008382:	4628      	mov	r0, r5
 8008384:	9101      	str	r1, [sp, #4]
 8008386:	f000 f94b 	bl	8008620 <_sbrk_r>
 800838a:	1c42      	adds	r2, r0, #1
 800838c:	eb0a 0b09 	add.w	fp, sl, r9
 8008390:	4604      	mov	r4, r0
 8008392:	f000 80f8 	beq.w	8008586 <_malloc_r+0x406>
 8008396:	4583      	cmp	fp, r0
 8008398:	9901      	ldr	r1, [sp, #4]
 800839a:	4a38      	ldr	r2, [pc, #224]	; (800847c <_malloc_r+0x2fc>)
 800839c:	d902      	bls.n	80083a4 <_malloc_r+0x224>
 800839e:	45b2      	cmp	sl, r6
 80083a0:	f040 80f1 	bne.w	8008586 <_malloc_r+0x406>
 80083a4:	4b36      	ldr	r3, [pc, #216]	; (8008480 <_malloc_r+0x300>)
 80083a6:	6818      	ldr	r0, [r3, #0]
 80083a8:	45a3      	cmp	fp, r4
 80083aa:	eb00 0e01 	add.w	lr, r0, r1
 80083ae:	f8c3 e000 	str.w	lr, [r3]
 80083b2:	f108 3cff 	add.w	ip, r8, #4294967295
 80083b6:	f040 80ac 	bne.w	8008512 <_malloc_r+0x392>
 80083ba:	ea1b 0f0c 	tst.w	fp, ip
 80083be:	f040 80a8 	bne.w	8008512 <_malloc_r+0x392>
 80083c2:	68b2      	ldr	r2, [r6, #8]
 80083c4:	4449      	add	r1, r9
 80083c6:	f041 0101 	orr.w	r1, r1, #1
 80083ca:	6051      	str	r1, [r2, #4]
 80083cc:	4a2d      	ldr	r2, [pc, #180]	; (8008484 <_malloc_r+0x304>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6811      	ldr	r1, [r2, #0]
 80083d2:	428b      	cmp	r3, r1
 80083d4:	bf88      	it	hi
 80083d6:	6013      	strhi	r3, [r2, #0]
 80083d8:	4a2b      	ldr	r2, [pc, #172]	; (8008488 <_malloc_r+0x308>)
 80083da:	6811      	ldr	r1, [r2, #0]
 80083dc:	428b      	cmp	r3, r1
 80083de:	bf88      	it	hi
 80083e0:	6013      	strhi	r3, [r2, #0]
 80083e2:	e0d0      	b.n	8008586 <_malloc_r+0x406>
 80083e4:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80083e8:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80083ec:	d218      	bcs.n	8008420 <_malloc_r+0x2a0>
 80083ee:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80083f2:	3238      	adds	r2, #56	; 0x38
 80083f4:	f102 0e01 	add.w	lr, r2, #1
 80083f8:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80083fc:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8008400:	45f0      	cmp	r8, lr
 8008402:	d12b      	bne.n	800845c <_malloc_r+0x2dc>
 8008404:	1092      	asrs	r2, r2, #2
 8008406:	f04f 0c01 	mov.w	ip, #1
 800840a:	fa0c f202 	lsl.w	r2, ip, r2
 800840e:	4310      	orrs	r0, r2
 8008410:	6070      	str	r0, [r6, #4]
 8008412:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8008416:	f8c8 4008 	str.w	r4, [r8, #8]
 800841a:	f8ce 400c 	str.w	r4, [lr, #12]
 800841e:	e762      	b.n	80082e6 <_malloc_r+0x166>
 8008420:	2a14      	cmp	r2, #20
 8008422:	d801      	bhi.n	8008428 <_malloc_r+0x2a8>
 8008424:	325b      	adds	r2, #91	; 0x5b
 8008426:	e7e5      	b.n	80083f4 <_malloc_r+0x274>
 8008428:	2a54      	cmp	r2, #84	; 0x54
 800842a:	d803      	bhi.n	8008434 <_malloc_r+0x2b4>
 800842c:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8008430:	326e      	adds	r2, #110	; 0x6e
 8008432:	e7df      	b.n	80083f4 <_malloc_r+0x274>
 8008434:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008438:	d803      	bhi.n	8008442 <_malloc_r+0x2c2>
 800843a:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800843e:	3277      	adds	r2, #119	; 0x77
 8008440:	e7d8      	b.n	80083f4 <_malloc_r+0x274>
 8008442:	f240 5e54 	movw	lr, #1364	; 0x554
 8008446:	4572      	cmp	r2, lr
 8008448:	bf9a      	itte	ls
 800844a:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800844e:	327c      	addls	r2, #124	; 0x7c
 8008450:	227e      	movhi	r2, #126	; 0x7e
 8008452:	e7cf      	b.n	80083f4 <_malloc_r+0x274>
 8008454:	f8de e008 	ldr.w	lr, [lr, #8]
 8008458:	45f0      	cmp	r8, lr
 800845a:	d005      	beq.n	8008468 <_malloc_r+0x2e8>
 800845c:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008460:	f022 0203 	bic.w	r2, r2, #3
 8008464:	4562      	cmp	r2, ip
 8008466:	d8f5      	bhi.n	8008454 <_malloc_r+0x2d4>
 8008468:	f8de 800c 	ldr.w	r8, [lr, #12]
 800846c:	e7d1      	b.n	8008412 <_malloc_r+0x292>
 800846e:	bf00      	nop
 8008470:	20000440 	.word	0x20000440
 8008474:	20000448 	.word	0x20000448
 8008478:	20001198 	.word	0x20001198
 800847c:	20000848 	.word	0x20000848
 8008480:	20001168 	.word	0x20001168
 8008484:	20001190 	.word	0x20001190
 8008488:	20001194 	.word	0x20001194
 800848c:	6860      	ldr	r0, [r4, #4]
 800848e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8008492:	f020 0003 	bic.w	r0, r0, #3
 8008496:	eba0 0a07 	sub.w	sl, r0, r7
 800849a:	f1ba 0f0f 	cmp.w	sl, #15
 800849e:	dd12      	ble.n	80084c6 <_malloc_r+0x346>
 80084a0:	68a3      	ldr	r3, [r4, #8]
 80084a2:	19e2      	adds	r2, r4, r7
 80084a4:	f047 0701 	orr.w	r7, r7, #1
 80084a8:	6067      	str	r7, [r4, #4]
 80084aa:	f8c3 c00c 	str.w	ip, [r3, #12]
 80084ae:	f8cc 3008 	str.w	r3, [ip, #8]
 80084b2:	f04a 0301 	orr.w	r3, sl, #1
 80084b6:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80084ba:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80084be:	6053      	str	r3, [r2, #4]
 80084c0:	f844 a000 	str.w	sl, [r4, r0]
 80084c4:	e68d      	b.n	80081e2 <_malloc_r+0x62>
 80084c6:	f1ba 0f00 	cmp.w	sl, #0
 80084ca:	db11      	blt.n	80084f0 <_malloc_r+0x370>
 80084cc:	4420      	add	r0, r4
 80084ce:	6843      	ldr	r3, [r0, #4]
 80084d0:	f043 0301 	orr.w	r3, r3, #1
 80084d4:	6043      	str	r3, [r0, #4]
 80084d6:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80084da:	4628      	mov	r0, r5
 80084dc:	f8c3 c00c 	str.w	ip, [r3, #12]
 80084e0:	f8cc 3008 	str.w	r3, [ip, #8]
 80084e4:	f000 f896 	bl	8008614 <__malloc_unlock>
 80084e8:	4620      	mov	r0, r4
 80084ea:	b003      	add	sp, #12
 80084ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f0:	4664      	mov	r4, ip
 80084f2:	e70e      	b.n	8008312 <_malloc_r+0x192>
 80084f4:	f858 0908 	ldr.w	r0, [r8], #-8
 80084f8:	4540      	cmp	r0, r8
 80084fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80084fe:	f43f af12 	beq.w	8008326 <_malloc_r+0x1a6>
 8008502:	e717      	b.n	8008334 <_malloc_r+0x1b4>
 8008504:	3304      	adds	r3, #4
 8008506:	0052      	lsls	r2, r2, #1
 8008508:	4210      	tst	r0, r2
 800850a:	d0fb      	beq.n	8008504 <_malloc_r+0x384>
 800850c:	e6fb      	b.n	8008306 <_malloc_r+0x186>
 800850e:	4673      	mov	r3, lr
 8008510:	e7fa      	b.n	8008508 <_malloc_r+0x388>
 8008512:	6810      	ldr	r0, [r2, #0]
 8008514:	3001      	adds	r0, #1
 8008516:	bf1b      	ittet	ne
 8008518:	eba4 0b0b 	subne.w	fp, r4, fp
 800851c:	eb0b 020e 	addne.w	r2, fp, lr
 8008520:	6014      	streq	r4, [r2, #0]
 8008522:	601a      	strne	r2, [r3, #0]
 8008524:	f014 0b07 	ands.w	fp, r4, #7
 8008528:	bf1a      	itte	ne
 800852a:	f1cb 0008 	rsbne	r0, fp, #8
 800852e:	1824      	addne	r4, r4, r0
 8008530:	4658      	moveq	r0, fp
 8008532:	1862      	adds	r2, r4, r1
 8008534:	ea02 010c 	and.w	r1, r2, ip
 8008538:	4480      	add	r8, r0
 800853a:	eba8 0801 	sub.w	r8, r8, r1
 800853e:	ea08 080c 	and.w	r8, r8, ip
 8008542:	4641      	mov	r1, r8
 8008544:	4628      	mov	r0, r5
 8008546:	9201      	str	r2, [sp, #4]
 8008548:	f000 f86a 	bl	8008620 <_sbrk_r>
 800854c:	1c43      	adds	r3, r0, #1
 800854e:	9a01      	ldr	r2, [sp, #4]
 8008550:	4b28      	ldr	r3, [pc, #160]	; (80085f4 <_malloc_r+0x474>)
 8008552:	d107      	bne.n	8008564 <_malloc_r+0x3e4>
 8008554:	f1bb 0f00 	cmp.w	fp, #0
 8008558:	d023      	beq.n	80085a2 <_malloc_r+0x422>
 800855a:	f1ab 0008 	sub.w	r0, fp, #8
 800855e:	4410      	add	r0, r2
 8008560:	f04f 0800 	mov.w	r8, #0
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	60b4      	str	r4, [r6, #8]
 8008568:	1b00      	subs	r0, r0, r4
 800856a:	4440      	add	r0, r8
 800856c:	4442      	add	r2, r8
 800856e:	f040 0001 	orr.w	r0, r0, #1
 8008572:	45b2      	cmp	sl, r6
 8008574:	601a      	str	r2, [r3, #0]
 8008576:	6060      	str	r0, [r4, #4]
 8008578:	f43f af28 	beq.w	80083cc <_malloc_r+0x24c>
 800857c:	f1b9 0f0f 	cmp.w	r9, #15
 8008580:	d812      	bhi.n	80085a8 <_malloc_r+0x428>
 8008582:	2301      	movs	r3, #1
 8008584:	6063      	str	r3, [r4, #4]
 8008586:	68b3      	ldr	r3, [r6, #8]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f023 0303 	bic.w	r3, r3, #3
 800858e:	42bb      	cmp	r3, r7
 8008590:	eba3 0207 	sub.w	r2, r3, r7
 8008594:	d301      	bcc.n	800859a <_malloc_r+0x41a>
 8008596:	2a0f      	cmp	r2, #15
 8008598:	dc22      	bgt.n	80085e0 <_malloc_r+0x460>
 800859a:	4628      	mov	r0, r5
 800859c:	f000 f83a 	bl	8008614 <__malloc_unlock>
 80085a0:	e5fa      	b.n	8008198 <_malloc_r+0x18>
 80085a2:	4610      	mov	r0, r2
 80085a4:	46d8      	mov	r8, fp
 80085a6:	e7dd      	b.n	8008564 <_malloc_r+0x3e4>
 80085a8:	f8da 2004 	ldr.w	r2, [sl, #4]
 80085ac:	f1a9 090c 	sub.w	r9, r9, #12
 80085b0:	f029 0907 	bic.w	r9, r9, #7
 80085b4:	f002 0201 	and.w	r2, r2, #1
 80085b8:	ea42 0209 	orr.w	r2, r2, r9
 80085bc:	f8ca 2004 	str.w	r2, [sl, #4]
 80085c0:	2105      	movs	r1, #5
 80085c2:	eb0a 0209 	add.w	r2, sl, r9
 80085c6:	f1b9 0f0f 	cmp.w	r9, #15
 80085ca:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80085ce:	f67f aefd 	bls.w	80083cc <_malloc_r+0x24c>
 80085d2:	f10a 0108 	add.w	r1, sl, #8
 80085d6:	4628      	mov	r0, r5
 80085d8:	f003 fbf8 	bl	800bdcc <_free_r>
 80085dc:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <_malloc_r+0x474>)
 80085de:	e6f5      	b.n	80083cc <_malloc_r+0x24c>
 80085e0:	68b4      	ldr	r4, [r6, #8]
 80085e2:	f047 0301 	orr.w	r3, r7, #1
 80085e6:	4427      	add	r7, r4
 80085e8:	f042 0201 	orr.w	r2, r2, #1
 80085ec:	6063      	str	r3, [r4, #4]
 80085ee:	60b7      	str	r7, [r6, #8]
 80085f0:	607a      	str	r2, [r7, #4]
 80085f2:	e5f6      	b.n	80081e2 <_malloc_r+0x62>
 80085f4:	20001168 	.word	0x20001168

080085f8 <memset>:
 80085f8:	4402      	add	r2, r0
 80085fa:	4603      	mov	r3, r0
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d100      	bne.n	8008602 <memset+0xa>
 8008600:	4770      	bx	lr
 8008602:	f803 1b01 	strb.w	r1, [r3], #1
 8008606:	e7f9      	b.n	80085fc <memset+0x4>

08008608 <__malloc_lock>:
 8008608:	4801      	ldr	r0, [pc, #4]	; (8008610 <__malloc_lock+0x8>)
 800860a:	f003 bcb9 	b.w	800bf80 <__retarget_lock_acquire_recursive>
 800860e:	bf00      	nop
 8008610:	2000119d 	.word	0x2000119d

08008614 <__malloc_unlock>:
 8008614:	4801      	ldr	r0, [pc, #4]	; (800861c <__malloc_unlock+0x8>)
 8008616:	f003 bcb4 	b.w	800bf82 <__retarget_lock_release_recursive>
 800861a:	bf00      	nop
 800861c:	2000119d 	.word	0x2000119d

08008620 <_sbrk_r>:
 8008620:	b538      	push	{r3, r4, r5, lr}
 8008622:	4d06      	ldr	r5, [pc, #24]	; (800863c <_sbrk_r+0x1c>)
 8008624:	2300      	movs	r3, #0
 8008626:	4604      	mov	r4, r0
 8008628:	4608      	mov	r0, r1
 800862a:	602b      	str	r3, [r5, #0]
 800862c:	f7fb fa3a 	bl	8003aa4 <_sbrk>
 8008630:	1c43      	adds	r3, r0, #1
 8008632:	d102      	bne.n	800863a <_sbrk_r+0x1a>
 8008634:	682b      	ldr	r3, [r5, #0]
 8008636:	b103      	cbz	r3, 800863a <_sbrk_r+0x1a>
 8008638:	6023      	str	r3, [r4, #0]
 800863a:	bd38      	pop	{r3, r4, r5, pc}
 800863c:	200011a0 	.word	0x200011a0

08008640 <sprintf>:
 8008640:	b40e      	push	{r1, r2, r3}
 8008642:	b500      	push	{lr}
 8008644:	b09c      	sub	sp, #112	; 0x70
 8008646:	ab1d      	add	r3, sp, #116	; 0x74
 8008648:	9002      	str	r0, [sp, #8]
 800864a:	9006      	str	r0, [sp, #24]
 800864c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008650:	4809      	ldr	r0, [pc, #36]	; (8008678 <sprintf+0x38>)
 8008652:	9107      	str	r1, [sp, #28]
 8008654:	9104      	str	r1, [sp, #16]
 8008656:	4909      	ldr	r1, [pc, #36]	; (800867c <sprintf+0x3c>)
 8008658:	f853 2b04 	ldr.w	r2, [r3], #4
 800865c:	9105      	str	r1, [sp, #20]
 800865e:	6800      	ldr	r0, [r0, #0]
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	a902      	add	r1, sp, #8
 8008664:	f000 f920 	bl	80088a8 <_svfprintf_r>
 8008668:	9b02      	ldr	r3, [sp, #8]
 800866a:	2200      	movs	r2, #0
 800866c:	701a      	strb	r2, [r3, #0]
 800866e:	b01c      	add	sp, #112	; 0x70
 8008670:	f85d eb04 	ldr.w	lr, [sp], #4
 8008674:	b003      	add	sp, #12
 8008676:	4770      	bx	lr
 8008678:	20000010 	.word	0x20000010
 800867c:	ffff0208 	.word	0xffff0208

08008680 <sscanf>:
 8008680:	b40e      	push	{r1, r2, r3}
 8008682:	b510      	push	{r4, lr}
 8008684:	b09f      	sub	sp, #124	; 0x7c
 8008686:	ac21      	add	r4, sp, #132	; 0x84
 8008688:	f44f 7101 	mov.w	r1, #516	; 0x204
 800868c:	f854 2b04 	ldr.w	r2, [r4], #4
 8008690:	9201      	str	r2, [sp, #4]
 8008692:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008696:	9004      	str	r0, [sp, #16]
 8008698:	9008      	str	r0, [sp, #32]
 800869a:	f7f7 fda1 	bl	80001e0 <strlen>
 800869e:	4b0c      	ldr	r3, [pc, #48]	; (80086d0 <sscanf+0x50>)
 80086a0:	9005      	str	r0, [sp, #20]
 80086a2:	9009      	str	r0, [sp, #36]	; 0x24
 80086a4:	930c      	str	r3, [sp, #48]	; 0x30
 80086a6:	480b      	ldr	r0, [pc, #44]	; (80086d4 <sscanf+0x54>)
 80086a8:	9a01      	ldr	r2, [sp, #4]
 80086aa:	6800      	ldr	r0, [r0, #0]
 80086ac:	9403      	str	r4, [sp, #12]
 80086ae:	2300      	movs	r3, #0
 80086b0:	9310      	str	r3, [sp, #64]	; 0x40
 80086b2:	9315      	str	r3, [sp, #84]	; 0x54
 80086b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086b8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80086bc:	a904      	add	r1, sp, #16
 80086be:	4623      	mov	r3, r4
 80086c0:	f001 fad6 	bl	8009c70 <__ssvfscanf_r>
 80086c4:	b01f      	add	sp, #124	; 0x7c
 80086c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086ca:	b003      	add	sp, #12
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	080086fb 	.word	0x080086fb
 80086d4:	20000010 	.word	0x20000010

080086d8 <__sread>:
 80086d8:	b510      	push	{r4, lr}
 80086da:	460c      	mov	r4, r1
 80086dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e0:	f004 f910 	bl	800c904 <_read_r>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	bfab      	itete	ge
 80086e8:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 80086ea:	89a3      	ldrhlt	r3, [r4, #12]
 80086ec:	181b      	addge	r3, r3, r0
 80086ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086f2:	bfac      	ite	ge
 80086f4:	6523      	strge	r3, [r4, #80]	; 0x50
 80086f6:	81a3      	strhlt	r3, [r4, #12]
 80086f8:	bd10      	pop	{r4, pc}

080086fa <__seofread>:
 80086fa:	2000      	movs	r0, #0
 80086fc:	4770      	bx	lr

080086fe <__swrite>:
 80086fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008702:	461f      	mov	r7, r3
 8008704:	898b      	ldrh	r3, [r1, #12]
 8008706:	05db      	lsls	r3, r3, #23
 8008708:	4605      	mov	r5, r0
 800870a:	460c      	mov	r4, r1
 800870c:	4616      	mov	r6, r2
 800870e:	d505      	bpl.n	800871c <__swrite+0x1e>
 8008710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008714:	2302      	movs	r3, #2
 8008716:	2200      	movs	r2, #0
 8008718:	f003 fc34 	bl	800bf84 <_lseek_r>
 800871c:	89a3      	ldrh	r3, [r4, #12]
 800871e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008722:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008726:	81a3      	strh	r3, [r4, #12]
 8008728:	4632      	mov	r2, r6
 800872a:	463b      	mov	r3, r7
 800872c:	4628      	mov	r0, r5
 800872e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008732:	f002 bc4f 	b.w	800afd4 <_write_r>

08008736 <__sseek>:
 8008736:	b510      	push	{r4, lr}
 8008738:	460c      	mov	r4, r1
 800873a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800873e:	f003 fc21 	bl	800bf84 <_lseek_r>
 8008742:	1c43      	adds	r3, r0, #1
 8008744:	89a3      	ldrh	r3, [r4, #12]
 8008746:	bf15      	itete	ne
 8008748:	6520      	strne	r0, [r4, #80]	; 0x50
 800874a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800874e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008752:	81a3      	strheq	r3, [r4, #12]
 8008754:	bf18      	it	ne
 8008756:	81a3      	strhne	r3, [r4, #12]
 8008758:	bd10      	pop	{r4, pc}

0800875a <__sclose>:
 800875a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800875e:	f002 bc5b 	b.w	800b018 <_close_r>

08008762 <strncmp>:
 8008762:	b510      	push	{r4, lr}
 8008764:	b17a      	cbz	r2, 8008786 <strncmp+0x24>
 8008766:	4603      	mov	r3, r0
 8008768:	3901      	subs	r1, #1
 800876a:	1884      	adds	r4, r0, r2
 800876c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008770:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008774:	4290      	cmp	r0, r2
 8008776:	d101      	bne.n	800877c <strncmp+0x1a>
 8008778:	42a3      	cmp	r3, r4
 800877a:	d101      	bne.n	8008780 <strncmp+0x1e>
 800877c:	1a80      	subs	r0, r0, r2
 800877e:	bd10      	pop	{r4, pc}
 8008780:	2800      	cmp	r0, #0
 8008782:	d1f3      	bne.n	800876c <strncmp+0xa>
 8008784:	e7fa      	b.n	800877c <strncmp+0x1a>
 8008786:	4610      	mov	r0, r2
 8008788:	e7f9      	b.n	800877e <strncmp+0x1c>
	...

0800878c <_strtol_l.constprop.0>:
 800878c:	2b01      	cmp	r3, #1
 800878e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008792:	d001      	beq.n	8008798 <_strtol_l.constprop.0+0xc>
 8008794:	2b24      	cmp	r3, #36	; 0x24
 8008796:	d906      	bls.n	80087a6 <_strtol_l.constprop.0+0x1a>
 8008798:	f7ff fcb8 	bl	800810c <__errno>
 800879c:	2316      	movs	r3, #22
 800879e:	6003      	str	r3, [r0, #0]
 80087a0:	2000      	movs	r0, #0
 80087a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800888c <_strtol_l.constprop.0+0x100>
 80087aa:	460d      	mov	r5, r1
 80087ac:	462e      	mov	r6, r5
 80087ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087b2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80087b6:	f017 0708 	ands.w	r7, r7, #8
 80087ba:	d1f7      	bne.n	80087ac <_strtol_l.constprop.0+0x20>
 80087bc:	2c2d      	cmp	r4, #45	; 0x2d
 80087be:	d132      	bne.n	8008826 <_strtol_l.constprop.0+0x9a>
 80087c0:	782c      	ldrb	r4, [r5, #0]
 80087c2:	2701      	movs	r7, #1
 80087c4:	1cb5      	adds	r5, r6, #2
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d05b      	beq.n	8008882 <_strtol_l.constprop.0+0xf6>
 80087ca:	2b10      	cmp	r3, #16
 80087cc:	d109      	bne.n	80087e2 <_strtol_l.constprop.0+0x56>
 80087ce:	2c30      	cmp	r4, #48	; 0x30
 80087d0:	d107      	bne.n	80087e2 <_strtol_l.constprop.0+0x56>
 80087d2:	782c      	ldrb	r4, [r5, #0]
 80087d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80087d8:	2c58      	cmp	r4, #88	; 0x58
 80087da:	d14d      	bne.n	8008878 <_strtol_l.constprop.0+0xec>
 80087dc:	786c      	ldrb	r4, [r5, #1]
 80087de:	2310      	movs	r3, #16
 80087e0:	3502      	adds	r5, #2
 80087e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80087e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80087ea:	f04f 0c00 	mov.w	ip, #0
 80087ee:	fbb8 f9f3 	udiv	r9, r8, r3
 80087f2:	4666      	mov	r6, ip
 80087f4:	fb03 8a19 	mls	sl, r3, r9, r8
 80087f8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80087fc:	f1be 0f09 	cmp.w	lr, #9
 8008800:	d816      	bhi.n	8008830 <_strtol_l.constprop.0+0xa4>
 8008802:	4674      	mov	r4, lr
 8008804:	42a3      	cmp	r3, r4
 8008806:	dd24      	ble.n	8008852 <_strtol_l.constprop.0+0xc6>
 8008808:	f1bc 0f00 	cmp.w	ip, #0
 800880c:	db1e      	blt.n	800884c <_strtol_l.constprop.0+0xc0>
 800880e:	45b1      	cmp	r9, r6
 8008810:	d31c      	bcc.n	800884c <_strtol_l.constprop.0+0xc0>
 8008812:	d101      	bne.n	8008818 <_strtol_l.constprop.0+0x8c>
 8008814:	45a2      	cmp	sl, r4
 8008816:	db19      	blt.n	800884c <_strtol_l.constprop.0+0xc0>
 8008818:	fb06 4603 	mla	r6, r6, r3, r4
 800881c:	f04f 0c01 	mov.w	ip, #1
 8008820:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008824:	e7e8      	b.n	80087f8 <_strtol_l.constprop.0+0x6c>
 8008826:	2c2b      	cmp	r4, #43	; 0x2b
 8008828:	bf04      	itt	eq
 800882a:	782c      	ldrbeq	r4, [r5, #0]
 800882c:	1cb5      	addeq	r5, r6, #2
 800882e:	e7ca      	b.n	80087c6 <_strtol_l.constprop.0+0x3a>
 8008830:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008834:	f1be 0f19 	cmp.w	lr, #25
 8008838:	d801      	bhi.n	800883e <_strtol_l.constprop.0+0xb2>
 800883a:	3c37      	subs	r4, #55	; 0x37
 800883c:	e7e2      	b.n	8008804 <_strtol_l.constprop.0+0x78>
 800883e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008842:	f1be 0f19 	cmp.w	lr, #25
 8008846:	d804      	bhi.n	8008852 <_strtol_l.constprop.0+0xc6>
 8008848:	3c57      	subs	r4, #87	; 0x57
 800884a:	e7db      	b.n	8008804 <_strtol_l.constprop.0+0x78>
 800884c:	f04f 3cff 	mov.w	ip, #4294967295
 8008850:	e7e6      	b.n	8008820 <_strtol_l.constprop.0+0x94>
 8008852:	f1bc 0f00 	cmp.w	ip, #0
 8008856:	da05      	bge.n	8008864 <_strtol_l.constprop.0+0xd8>
 8008858:	2322      	movs	r3, #34	; 0x22
 800885a:	6003      	str	r3, [r0, #0]
 800885c:	4646      	mov	r6, r8
 800885e:	b942      	cbnz	r2, 8008872 <_strtol_l.constprop.0+0xe6>
 8008860:	4630      	mov	r0, r6
 8008862:	e79e      	b.n	80087a2 <_strtol_l.constprop.0+0x16>
 8008864:	b107      	cbz	r7, 8008868 <_strtol_l.constprop.0+0xdc>
 8008866:	4276      	negs	r6, r6
 8008868:	2a00      	cmp	r2, #0
 800886a:	d0f9      	beq.n	8008860 <_strtol_l.constprop.0+0xd4>
 800886c:	f1bc 0f00 	cmp.w	ip, #0
 8008870:	d000      	beq.n	8008874 <_strtol_l.constprop.0+0xe8>
 8008872:	1e69      	subs	r1, r5, #1
 8008874:	6011      	str	r1, [r2, #0]
 8008876:	e7f3      	b.n	8008860 <_strtol_l.constprop.0+0xd4>
 8008878:	2430      	movs	r4, #48	; 0x30
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1b1      	bne.n	80087e2 <_strtol_l.constprop.0+0x56>
 800887e:	2308      	movs	r3, #8
 8008880:	e7af      	b.n	80087e2 <_strtol_l.constprop.0+0x56>
 8008882:	2c30      	cmp	r4, #48	; 0x30
 8008884:	d0a5      	beq.n	80087d2 <_strtol_l.constprop.0+0x46>
 8008886:	230a      	movs	r3, #10
 8008888:	e7ab      	b.n	80087e2 <_strtol_l.constprop.0+0x56>
 800888a:	bf00      	nop
 800888c:	08010015 	.word	0x08010015

08008890 <_strtol_r>:
 8008890:	f7ff bf7c 	b.w	800878c <_strtol_l.constprop.0>

08008894 <strtol>:
 8008894:	4613      	mov	r3, r2
 8008896:	460a      	mov	r2, r1
 8008898:	4601      	mov	r1, r0
 800889a:	4802      	ldr	r0, [pc, #8]	; (80088a4 <strtol+0x10>)
 800889c:	6800      	ldr	r0, [r0, #0]
 800889e:	f7ff bf75 	b.w	800878c <_strtol_l.constprop.0>
 80088a2:	bf00      	nop
 80088a4:	20000010 	.word	0x20000010

080088a8 <_svfprintf_r>:
 80088a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	ed2d 8b04 	vpush	{d8-d9}
 80088b0:	b0cf      	sub	sp, #316	; 0x13c
 80088b2:	4688      	mov	r8, r1
 80088b4:	4691      	mov	r9, r2
 80088b6:	461e      	mov	r6, r3
 80088b8:	4682      	mov	sl, r0
 80088ba:	f003 fb5b 	bl	800bf74 <_localeconv_r>
 80088be:	6803      	ldr	r3, [r0, #0]
 80088c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7f7 fc8c 	bl	80001e0 <strlen>
 80088c8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80088cc:	900d      	str	r0, [sp, #52]	; 0x34
 80088ce:	0618      	lsls	r0, r3, #24
 80088d0:	d51a      	bpl.n	8008908 <_svfprintf_r+0x60>
 80088d2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80088d6:	b9bb      	cbnz	r3, 8008908 <_svfprintf_r+0x60>
 80088d8:	2140      	movs	r1, #64	; 0x40
 80088da:	4650      	mov	r0, sl
 80088dc:	f7ff fc50 	bl	8008180 <_malloc_r>
 80088e0:	f8c8 0000 	str.w	r0, [r8]
 80088e4:	f8c8 0010 	str.w	r0, [r8, #16]
 80088e8:	b958      	cbnz	r0, 8008902 <_svfprintf_r+0x5a>
 80088ea:	230c      	movs	r3, #12
 80088ec:	f8ca 3000 	str.w	r3, [sl]
 80088f0:	f04f 33ff 	mov.w	r3, #4294967295
 80088f4:	930c      	str	r3, [sp, #48]	; 0x30
 80088f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80088f8:	b04f      	add	sp, #316	; 0x13c
 80088fa:	ecbd 8b04 	vpop	{d8-d9}
 80088fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008902:	2340      	movs	r3, #64	; 0x40
 8008904:	f8c8 3014 	str.w	r3, [r8, #20]
 8008908:	ed9f 7b93 	vldr	d7, [pc, #588]	; 8008b58 <_svfprintf_r+0x2b0>
 800890c:	2500      	movs	r5, #0
 800890e:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 8008912:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8008916:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 800891a:	ac25      	add	r4, sp, #148	; 0x94
 800891c:	9422      	str	r4, [sp, #136]	; 0x88
 800891e:	9505      	str	r5, [sp, #20]
 8008920:	950a      	str	r5, [sp, #40]	; 0x28
 8008922:	9512      	str	r5, [sp, #72]	; 0x48
 8008924:	9514      	str	r5, [sp, #80]	; 0x50
 8008926:	950c      	str	r5, [sp, #48]	; 0x30
 8008928:	464b      	mov	r3, r9
 800892a:	461d      	mov	r5, r3
 800892c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008930:	b10a      	cbz	r2, 8008936 <_svfprintf_r+0x8e>
 8008932:	2a25      	cmp	r2, #37	; 0x25
 8008934:	d1f9      	bne.n	800892a <_svfprintf_r+0x82>
 8008936:	ebb5 0709 	subs.w	r7, r5, r9
 800893a:	d00d      	beq.n	8008958 <_svfprintf_r+0xb0>
 800893c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800893e:	443b      	add	r3, r7
 8008940:	9324      	str	r3, [sp, #144]	; 0x90
 8008942:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008944:	3301      	adds	r3, #1
 8008946:	2b07      	cmp	r3, #7
 8008948:	e9c4 9700 	strd	r9, r7, [r4]
 800894c:	9323      	str	r3, [sp, #140]	; 0x8c
 800894e:	dc79      	bgt.n	8008a44 <_svfprintf_r+0x19c>
 8008950:	3408      	adds	r4, #8
 8008952:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008954:	443b      	add	r3, r7
 8008956:	930c      	str	r3, [sp, #48]	; 0x30
 8008958:	782b      	ldrb	r3, [r5, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	f001 8148 	beq.w	8009bf0 <_svfprintf_r+0x1348>
 8008960:	2300      	movs	r3, #0
 8008962:	f04f 32ff 	mov.w	r2, #4294967295
 8008966:	9204      	str	r2, [sp, #16]
 8008968:	3501      	adds	r5, #1
 800896a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800896e:	9310      	str	r3, [sp, #64]	; 0x40
 8008970:	469b      	mov	fp, r3
 8008972:	270a      	movs	r7, #10
 8008974:	222b      	movs	r2, #43	; 0x2b
 8008976:	462b      	mov	r3, r5
 8008978:	f813 1b01 	ldrb.w	r1, [r3], #1
 800897c:	9106      	str	r1, [sp, #24]
 800897e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008980:	9b06      	ldr	r3, [sp, #24]
 8008982:	3b20      	subs	r3, #32
 8008984:	2b5a      	cmp	r3, #90	; 0x5a
 8008986:	f200 85bf 	bhi.w	8009508 <_svfprintf_r+0xc60>
 800898a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800898e:	007e      	.short	0x007e
 8008990:	05bd05bd 	.word	0x05bd05bd
 8008994:	05bd0086 	.word	0x05bd0086
 8008998:	05bd05bd 	.word	0x05bd05bd
 800899c:	05bd0065 	.word	0x05bd0065
 80089a0:	008905bd 	.word	0x008905bd
 80089a4:	05bd0093 	.word	0x05bd0093
 80089a8:	00960090 	.word	0x00960090
 80089ac:	00b305bd 	.word	0x00b305bd
 80089b0:	00b600b6 	.word	0x00b600b6
 80089b4:	00b600b6 	.word	0x00b600b6
 80089b8:	00b600b6 	.word	0x00b600b6
 80089bc:	00b600b6 	.word	0x00b600b6
 80089c0:	05bd00b6 	.word	0x05bd00b6
 80089c4:	05bd05bd 	.word	0x05bd05bd
 80089c8:	05bd05bd 	.word	0x05bd05bd
 80089cc:	05bd05bd 	.word	0x05bd05bd
 80089d0:	05bd012c 	.word	0x05bd012c
 80089d4:	00fc00e9 	.word	0x00fc00e9
 80089d8:	012c012c 	.word	0x012c012c
 80089dc:	05bd012c 	.word	0x05bd012c
 80089e0:	05bd05bd 	.word	0x05bd05bd
 80089e4:	00c605bd 	.word	0x00c605bd
 80089e8:	05bd05bd 	.word	0x05bd05bd
 80089ec:	05bd0498 	.word	0x05bd0498
 80089f0:	05bd05bd 	.word	0x05bd05bd
 80089f4:	05bd04e2 	.word	0x05bd04e2
 80089f8:	05bd0503 	.word	0x05bd0503
 80089fc:	052505bd 	.word	0x052505bd
 8008a00:	05bd05bd 	.word	0x05bd05bd
 8008a04:	05bd05bd 	.word	0x05bd05bd
 8008a08:	05bd05bd 	.word	0x05bd05bd
 8008a0c:	05bd05bd 	.word	0x05bd05bd
 8008a10:	05bd012c 	.word	0x05bd012c
 8008a14:	00fe00e9 	.word	0x00fe00e9
 8008a18:	012c012c 	.word	0x012c012c
 8008a1c:	00c9012c 	.word	0x00c9012c
 8008a20:	00dd00fe 	.word	0x00dd00fe
 8008a24:	00d605bd 	.word	0x00d605bd
 8008a28:	047305bd 	.word	0x047305bd
 8008a2c:	04d0049a 	.word	0x04d0049a
 8008a30:	05bd00dd 	.word	0x05bd00dd
 8008a34:	007c04e2 	.word	0x007c04e2
 8008a38:	05bd0505 	.word	0x05bd0505
 8008a3c:	054405bd 	.word	0x054405bd
 8008a40:	007c05bd 	.word	0x007c05bd
 8008a44:	aa22      	add	r2, sp, #136	; 0x88
 8008a46:	4641      	mov	r1, r8
 8008a48:	4650      	mov	r0, sl
 8008a4a:	f005 f973 	bl	800dd34 <__ssprint_r>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	f040 8137 	bne.w	8008cc2 <_svfprintf_r+0x41a>
 8008a54:	ac25      	add	r4, sp, #148	; 0x94
 8008a56:	e77c      	b.n	8008952 <_svfprintf_r+0xaa>
 8008a58:	4650      	mov	r0, sl
 8008a5a:	f003 fa8b 	bl	800bf74 <_localeconv_r>
 8008a5e:	6843      	ldr	r3, [r0, #4]
 8008a60:	9314      	str	r3, [sp, #80]	; 0x50
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7f7 fbbc 	bl	80001e0 <strlen>
 8008a68:	9012      	str	r0, [sp, #72]	; 0x48
 8008a6a:	4650      	mov	r0, sl
 8008a6c:	f003 fa82 	bl	800bf74 <_localeconv_r>
 8008a70:	6883      	ldr	r3, [r0, #8]
 8008a72:	930a      	str	r3, [sp, #40]	; 0x28
 8008a74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a76:	222b      	movs	r2, #43	; 0x2b
 8008a78:	b12b      	cbz	r3, 8008a86 <_svfprintf_r+0x1de>
 8008a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a7c:	b11b      	cbz	r3, 8008a86 <_svfprintf_r+0x1de>
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	b10b      	cbz	r3, 8008a86 <_svfprintf_r+0x1de>
 8008a82:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 8008a86:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008a88:	e775      	b.n	8008976 <_svfprintf_r+0xce>
 8008a8a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1f9      	bne.n	8008a86 <_svfprintf_r+0x1de>
 8008a92:	2320      	movs	r3, #32
 8008a94:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8008a98:	e7f5      	b.n	8008a86 <_svfprintf_r+0x1de>
 8008a9a:	f04b 0b01 	orr.w	fp, fp, #1
 8008a9e:	e7f2      	b.n	8008a86 <_svfprintf_r+0x1de>
 8008aa0:	f856 3b04 	ldr.w	r3, [r6], #4
 8008aa4:	9310      	str	r3, [sp, #64]	; 0x40
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	daed      	bge.n	8008a86 <_svfprintf_r+0x1de>
 8008aaa:	425b      	negs	r3, r3
 8008aac:	9310      	str	r3, [sp, #64]	; 0x40
 8008aae:	f04b 0b04 	orr.w	fp, fp, #4
 8008ab2:	e7e8      	b.n	8008a86 <_svfprintf_r+0x1de>
 8008ab4:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8008ab8:	e7e5      	b.n	8008a86 <_svfprintf_r+0x1de>
 8008aba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008abc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008ac0:	9306      	str	r3, [sp, #24]
 8008ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ac4:	d113      	bne.n	8008aee <_svfprintf_r+0x246>
 8008ac6:	f856 0b04 	ldr.w	r0, [r6], #4
 8008aca:	950b      	str	r5, [sp, #44]	; 0x2c
 8008acc:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8008ad0:	9304      	str	r3, [sp, #16]
 8008ad2:	e7d8      	b.n	8008a86 <_svfprintf_r+0x1de>
 8008ad4:	9904      	ldr	r1, [sp, #16]
 8008ad6:	fb07 3301 	mla	r3, r7, r1, r3
 8008ada:	9304      	str	r3, [sp, #16]
 8008adc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008ae0:	9306      	str	r3, [sp, #24]
 8008ae2:	9b06      	ldr	r3, [sp, #24]
 8008ae4:	3b30      	subs	r3, #48	; 0x30
 8008ae6:	2b09      	cmp	r3, #9
 8008ae8:	d9f4      	bls.n	8008ad4 <_svfprintf_r+0x22c>
 8008aea:	950b      	str	r5, [sp, #44]	; 0x2c
 8008aec:	e748      	b.n	8008980 <_svfprintf_r+0xd8>
 8008aee:	2300      	movs	r3, #0
 8008af0:	9304      	str	r3, [sp, #16]
 8008af2:	e7f6      	b.n	8008ae2 <_svfprintf_r+0x23a>
 8008af4:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8008af8:	e7c5      	b.n	8008a86 <_svfprintf_r+0x1de>
 8008afa:	2300      	movs	r3, #0
 8008afc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008afe:	9310      	str	r3, [sp, #64]	; 0x40
 8008b00:	9b06      	ldr	r3, [sp, #24]
 8008b02:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008b04:	3b30      	subs	r3, #48	; 0x30
 8008b06:	fb07 3301 	mla	r3, r7, r1, r3
 8008b0a:	9310      	str	r3, [sp, #64]	; 0x40
 8008b0c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008b10:	9306      	str	r3, [sp, #24]
 8008b12:	3b30      	subs	r3, #48	; 0x30
 8008b14:	2b09      	cmp	r3, #9
 8008b16:	d9f3      	bls.n	8008b00 <_svfprintf_r+0x258>
 8008b18:	e7e7      	b.n	8008aea <_svfprintf_r+0x242>
 8008b1a:	f04b 0b08 	orr.w	fp, fp, #8
 8008b1e:	e7b2      	b.n	8008a86 <_svfprintf_r+0x1de>
 8008b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	2b68      	cmp	r3, #104	; 0x68
 8008b26:	bf01      	itttt	eq
 8008b28:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8008b2a:	3301      	addeq	r3, #1
 8008b2c:	930b      	streq	r3, [sp, #44]	; 0x2c
 8008b2e:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8008b32:	bf18      	it	ne
 8008b34:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8008b38:	e7a5      	b.n	8008a86 <_svfprintf_r+0x1de>
 8008b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	2b6c      	cmp	r3, #108	; 0x6c
 8008b40:	d105      	bne.n	8008b4e <_svfprintf_r+0x2a6>
 8008b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b44:	3301      	adds	r3, #1
 8008b46:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b48:	f04b 0b20 	orr.w	fp, fp, #32
 8008b4c:	e79b      	b.n	8008a86 <_svfprintf_r+0x1de>
 8008b4e:	f04b 0b10 	orr.w	fp, fp, #16
 8008b52:	e798      	b.n	8008a86 <_svfprintf_r+0x1de>
 8008b54:	f3af 8000 	nop.w
	...
 8008b60:	4632      	mov	r2, r6
 8008b62:	2000      	movs	r0, #0
 8008b64:	f852 3b04 	ldr.w	r3, [r2], #4
 8008b68:	9207      	str	r2, [sp, #28]
 8008b6a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8008b6e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8008b72:	2301      	movs	r3, #1
 8008b74:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8008b78:	9003      	str	r0, [sp, #12]
 8008b7a:	9304      	str	r3, [sp, #16]
 8008b7c:	4606      	mov	r6, r0
 8008b7e:	4605      	mov	r5, r0
 8008b80:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 8008b84:	e1bc      	b.n	8008f00 <_svfprintf_r+0x658>
 8008b86:	f04b 0b10 	orr.w	fp, fp, #16
 8008b8a:	f01b 0f20 	tst.w	fp, #32
 8008b8e:	d012      	beq.n	8008bb6 <_svfprintf_r+0x30e>
 8008b90:	1df3      	adds	r3, r6, #7
 8008b92:	f023 0307 	bic.w	r3, r3, #7
 8008b96:	461a      	mov	r2, r3
 8008b98:	685d      	ldr	r5, [r3, #4]
 8008b9a:	f852 6b08 	ldr.w	r6, [r2], #8
 8008b9e:	9207      	str	r2, [sp, #28]
 8008ba0:	2d00      	cmp	r5, #0
 8008ba2:	da06      	bge.n	8008bb2 <_svfprintf_r+0x30a>
 8008ba4:	4276      	negs	r6, r6
 8008ba6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8008baa:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8008bae:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e396      	b.n	80092e4 <_svfprintf_r+0xa3c>
 8008bb6:	4633      	mov	r3, r6
 8008bb8:	f01b 0f10 	tst.w	fp, #16
 8008bbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8008bc0:	9307      	str	r3, [sp, #28]
 8008bc2:	d002      	beq.n	8008bca <_svfprintf_r+0x322>
 8008bc4:	462e      	mov	r6, r5
 8008bc6:	17ed      	asrs	r5, r5, #31
 8008bc8:	e7ea      	b.n	8008ba0 <_svfprintf_r+0x2f8>
 8008bca:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8008bce:	d003      	beq.n	8008bd8 <_svfprintf_r+0x330>
 8008bd0:	b22e      	sxth	r6, r5
 8008bd2:	f345 35c0 	sbfx	r5, r5, #15, #1
 8008bd6:	e7e3      	b.n	8008ba0 <_svfprintf_r+0x2f8>
 8008bd8:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8008bdc:	d0f2      	beq.n	8008bc4 <_svfprintf_r+0x31c>
 8008bde:	b26e      	sxtb	r6, r5
 8008be0:	f345 15c0 	sbfx	r5, r5, #7, #1
 8008be4:	e7dc      	b.n	8008ba0 <_svfprintf_r+0x2f8>
 8008be6:	3607      	adds	r6, #7
 8008be8:	f026 0307 	bic.w	r3, r6, #7
 8008bec:	ecb3 7b02 	vldmia	r3!, {d7}
 8008bf0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8008bf4:	9307      	str	r3, [sp, #28]
 8008bf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bf8:	ee09 3a10 	vmov	s18, r3
 8008bfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c02:	ee09 3a90 	vmov	s19, r3
 8008c06:	f04f 32ff 	mov.w	r2, #4294967295
 8008c0a:	4b3a      	ldr	r3, [pc, #232]	; (8008cf4 <_svfprintf_r+0x44c>)
 8008c0c:	ec51 0b19 	vmov	r0, r1, d9
 8008c10:	f7f7 ff94 	bl	8000b3c <__aeabi_dcmpun>
 8008c14:	bb10      	cbnz	r0, 8008c5c <_svfprintf_r+0x3b4>
 8008c16:	4b37      	ldr	r3, [pc, #220]	; (8008cf4 <_svfprintf_r+0x44c>)
 8008c18:	ec51 0b19 	vmov	r0, r1, d9
 8008c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c20:	f7f7 ff6e 	bl	8000b00 <__aeabi_dcmple>
 8008c24:	b9d0      	cbnz	r0, 8008c5c <_svfprintf_r+0x3b4>
 8008c26:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	f7f7 ff5d 	bl	8000aec <__aeabi_dcmplt>
 8008c32:	b110      	cbz	r0, 8008c3a <_svfprintf_r+0x392>
 8008c34:	232d      	movs	r3, #45	; 0x2d
 8008c36:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8008c3a:	4a2f      	ldr	r2, [pc, #188]	; (8008cf8 <_svfprintf_r+0x450>)
 8008c3c:	482f      	ldr	r0, [pc, #188]	; (8008cfc <_svfprintf_r+0x454>)
 8008c3e:	9b06      	ldr	r3, [sp, #24]
 8008c40:	2100      	movs	r1, #0
 8008c42:	2b47      	cmp	r3, #71	; 0x47
 8008c44:	bfd4      	ite	le
 8008c46:	4691      	movle	r9, r2
 8008c48:	4681      	movgt	r9, r0
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8008c50:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8008c54:	2600      	movs	r6, #0
 8008c56:	4633      	mov	r3, r6
 8008c58:	f001 b800 	b.w	8009c5c <_svfprintf_r+0x13b4>
 8008c5c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008c60:	4610      	mov	r0, r2
 8008c62:	4619      	mov	r1, r3
 8008c64:	f7f7 ff6a 	bl	8000b3c <__aeabi_dcmpun>
 8008c68:	b140      	cbz	r0, 8008c7c <_svfprintf_r+0x3d4>
 8008c6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c6c:	4a24      	ldr	r2, [pc, #144]	; (8008d00 <_svfprintf_r+0x458>)
 8008c6e:	4825      	ldr	r0, [pc, #148]	; (8008d04 <_svfprintf_r+0x45c>)
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	bfbc      	itt	lt
 8008c74:	232d      	movlt	r3, #45	; 0x2d
 8008c76:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8008c7a:	e7e0      	b.n	8008c3e <_svfprintf_r+0x396>
 8008c7c:	9b06      	ldr	r3, [sp, #24]
 8008c7e:	f023 0320 	bic.w	r3, r3, #32
 8008c82:	2b41      	cmp	r3, #65	; 0x41
 8008c84:	9308      	str	r3, [sp, #32]
 8008c86:	d125      	bne.n	8008cd4 <_svfprintf_r+0x42c>
 8008c88:	2330      	movs	r3, #48	; 0x30
 8008c8a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8008c8e:	9b06      	ldr	r3, [sp, #24]
 8008c90:	2b61      	cmp	r3, #97	; 0x61
 8008c92:	bf0c      	ite	eq
 8008c94:	2378      	moveq	r3, #120	; 0x78
 8008c96:	2358      	movne	r3, #88	; 0x58
 8008c98:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8008c9c:	9b04      	ldr	r3, [sp, #16]
 8008c9e:	2b63      	cmp	r3, #99	; 0x63
 8008ca0:	f04b 0b02 	orr.w	fp, fp, #2
 8008ca4:	dd30      	ble.n	8008d08 <_svfprintf_r+0x460>
 8008ca6:	1c59      	adds	r1, r3, #1
 8008ca8:	4650      	mov	r0, sl
 8008caa:	f7ff fa69 	bl	8008180 <_malloc_r>
 8008cae:	4681      	mov	r9, r0
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	f040 81fd 	bne.w	80090b0 <_svfprintf_r+0x808>
 8008cb6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cbe:	f8a8 300c 	strh.w	r3, [r8, #12]
 8008cc2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008cc6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008cca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ccc:	bf18      	it	ne
 8008cce:	f04f 33ff 	movne.w	r3, #4294967295
 8008cd2:	e60f      	b.n	80088f4 <_svfprintf_r+0x4c>
 8008cd4:	9b04      	ldr	r3, [sp, #16]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	f000 81ec 	beq.w	80090b4 <_svfprintf_r+0x80c>
 8008cdc:	9b08      	ldr	r3, [sp, #32]
 8008cde:	2b47      	cmp	r3, #71	; 0x47
 8008ce0:	f040 81eb 	bne.w	80090ba <_svfprintf_r+0x812>
 8008ce4:	9b04      	ldr	r3, [sp, #16]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f040 81e7 	bne.w	80090ba <_svfprintf_r+0x812>
 8008cec:	9303      	str	r3, [sp, #12]
 8008cee:	2301      	movs	r3, #1
 8008cf0:	9304      	str	r3, [sp, #16]
 8008cf2:	e00c      	b.n	8008d0e <_svfprintf_r+0x466>
 8008cf4:	7fefffff 	.word	0x7fefffff
 8008cf8:	0800ff98 	.word	0x0800ff98
 8008cfc:	0800ff9c 	.word	0x0800ff9c
 8008d00:	0800ffa0 	.word	0x0800ffa0
 8008d04:	0800ffa4 	.word	0x0800ffa4
 8008d08:	9003      	str	r0, [sp, #12]
 8008d0a:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 8008d0e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8008d12:	9311      	str	r3, [sp, #68]	; 0x44
 8008d14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f280 81d1 	bge.w	80090be <_svfprintf_r+0x816>
 8008d1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d1e:	ee08 3a10 	vmov	s16, r3
 8008d22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d24:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008d28:	ee08 3a90 	vmov	s17, r3
 8008d2c:	232d      	movs	r3, #45	; 0x2d
 8008d2e:	9318      	str	r3, [sp, #96]	; 0x60
 8008d30:	9b08      	ldr	r3, [sp, #32]
 8008d32:	2b41      	cmp	r3, #65	; 0x41
 8008d34:	f040 81e1 	bne.w	80090fa <_svfprintf_r+0x852>
 8008d38:	eeb0 0a48 	vmov.f32	s0, s16
 8008d3c:	eef0 0a68 	vmov.f32	s1, s17
 8008d40:	a81c      	add	r0, sp, #112	; 0x70
 8008d42:	f003 ff9d 	bl	800cc80 <frexp>
 8008d46:	2200      	movs	r2, #0
 8008d48:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008d4c:	ec51 0b10 	vmov	r0, r1, d0
 8008d50:	f7f7 fc5a 	bl	8000608 <__aeabi_dmul>
 8008d54:	2200      	movs	r2, #0
 8008d56:	2300      	movs	r3, #0
 8008d58:	4606      	mov	r6, r0
 8008d5a:	460f      	mov	r7, r1
 8008d5c:	f7f7 febc 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d60:	b108      	cbz	r0, 8008d66 <_svfprintf_r+0x4be>
 8008d62:	2301      	movs	r3, #1
 8008d64:	931c      	str	r3, [sp, #112]	; 0x70
 8008d66:	4ba7      	ldr	r3, [pc, #668]	; (8009004 <_svfprintf_r+0x75c>)
 8008d68:	4aa7      	ldr	r2, [pc, #668]	; (8009008 <_svfprintf_r+0x760>)
 8008d6a:	9906      	ldr	r1, [sp, #24]
 8008d6c:	2961      	cmp	r1, #97	; 0x61
 8008d6e:	bf18      	it	ne
 8008d70:	461a      	movne	r2, r3
 8008d72:	9b04      	ldr	r3, [sp, #16]
 8008d74:	9217      	str	r2, [sp, #92]	; 0x5c
 8008d76:	3b01      	subs	r3, #1
 8008d78:	9305      	str	r3, [sp, #20]
 8008d7a:	464d      	mov	r5, r9
 8008d7c:	4ba3      	ldr	r3, [pc, #652]	; (800900c <_svfprintf_r+0x764>)
 8008d7e:	2200      	movs	r2, #0
 8008d80:	4630      	mov	r0, r6
 8008d82:	4639      	mov	r1, r7
 8008d84:	f7f7 fc40 	bl	8000608 <__aeabi_dmul>
 8008d88:	460f      	mov	r7, r1
 8008d8a:	4606      	mov	r6, r0
 8008d8c:	f7f7 feec 	bl	8000b68 <__aeabi_d2iz>
 8008d90:	9019      	str	r0, [sp, #100]	; 0x64
 8008d92:	f7f7 fbcf 	bl	8000534 <__aeabi_i2d>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	4639      	mov	r1, r7
 8008d9e:	f7f7 fa7b 	bl	8000298 <__aeabi_dsub>
 8008da2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008da4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008da6:	5c9b      	ldrb	r3, [r3, r2]
 8008da8:	f805 3b01 	strb.w	r3, [r5], #1
 8008dac:	9b05      	ldr	r3, [sp, #20]
 8008dae:	9309      	str	r3, [sp, #36]	; 0x24
 8008db0:	1c5a      	adds	r2, r3, #1
 8008db2:	4606      	mov	r6, r0
 8008db4:	460f      	mov	r7, r1
 8008db6:	d007      	beq.n	8008dc8 <_svfprintf_r+0x520>
 8008db8:	3b01      	subs	r3, #1
 8008dba:	9305      	str	r3, [sp, #20]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	f7f7 fe8a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	d0d9      	beq.n	8008d7c <_svfprintf_r+0x4d4>
 8008dc8:	4b91      	ldr	r3, [pc, #580]	; (8009010 <_svfprintf_r+0x768>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	4630      	mov	r0, r6
 8008dce:	4639      	mov	r1, r7
 8008dd0:	f7f7 feaa 	bl	8000b28 <__aeabi_dcmpgt>
 8008dd4:	b960      	cbnz	r0, 8008df0 <_svfprintf_r+0x548>
 8008dd6:	4b8e      	ldr	r3, [pc, #568]	; (8009010 <_svfprintf_r+0x768>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	4630      	mov	r0, r6
 8008ddc:	4639      	mov	r1, r7
 8008dde:	f7f7 fe7b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008de2:	2800      	cmp	r0, #0
 8008de4:	f000 8184 	beq.w	80090f0 <_svfprintf_r+0x848>
 8008de8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008dea:	07db      	lsls	r3, r3, #31
 8008dec:	f140 8180 	bpl.w	80090f0 <_svfprintf_r+0x848>
 8008df0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008df2:	9520      	str	r5, [sp, #128]	; 0x80
 8008df4:	7bd9      	ldrb	r1, [r3, #15]
 8008df6:	2030      	movs	r0, #48	; 0x30
 8008df8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008dfa:	1e53      	subs	r3, r2, #1
 8008dfc:	9320      	str	r3, [sp, #128]	; 0x80
 8008dfe:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8008e02:	428b      	cmp	r3, r1
 8008e04:	f000 8163 	beq.w	80090ce <_svfprintf_r+0x826>
 8008e08:	2b39      	cmp	r3, #57	; 0x39
 8008e0a:	bf0b      	itete	eq
 8008e0c:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8008e0e:	3301      	addne	r3, #1
 8008e10:	7a9b      	ldrbeq	r3, [r3, #10]
 8008e12:	b2db      	uxtbne	r3, r3
 8008e14:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008e18:	eba5 0309 	sub.w	r3, r5, r9
 8008e1c:	9305      	str	r3, [sp, #20]
 8008e1e:	9b08      	ldr	r3, [sp, #32]
 8008e20:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8008e22:	2b47      	cmp	r3, #71	; 0x47
 8008e24:	f040 81b1 	bne.w	800918a <_svfprintf_r+0x8e2>
 8008e28:	1cef      	adds	r7, r5, #3
 8008e2a:	db03      	blt.n	8008e34 <_svfprintf_r+0x58c>
 8008e2c:	9b04      	ldr	r3, [sp, #16]
 8008e2e:	42ab      	cmp	r3, r5
 8008e30:	f280 81d6 	bge.w	80091e0 <_svfprintf_r+0x938>
 8008e34:	9b06      	ldr	r3, [sp, #24]
 8008e36:	3b02      	subs	r3, #2
 8008e38:	9306      	str	r3, [sp, #24]
 8008e3a:	9906      	ldr	r1, [sp, #24]
 8008e3c:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8008e40:	f021 0120 	bic.w	r1, r1, #32
 8008e44:	2941      	cmp	r1, #65	; 0x41
 8008e46:	bf08      	it	eq
 8008e48:	320f      	addeq	r2, #15
 8008e4a:	f105 33ff 	add.w	r3, r5, #4294967295
 8008e4e:	bf06      	itte	eq
 8008e50:	b2d2      	uxtbeq	r2, r2
 8008e52:	2101      	moveq	r1, #1
 8008e54:	2100      	movne	r1, #0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	931c      	str	r3, [sp, #112]	; 0x70
 8008e5a:	bfb8      	it	lt
 8008e5c:	f1c5 0301 	rsblt	r3, r5, #1
 8008e60:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8008e64:	bfb4      	ite	lt
 8008e66:	222d      	movlt	r2, #45	; 0x2d
 8008e68:	222b      	movge	r2, #43	; 0x2b
 8008e6a:	2b09      	cmp	r3, #9
 8008e6c:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8008e70:	f340 81a4 	ble.w	80091bc <_svfprintf_r+0x914>
 8008e74:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8008e78:	260a      	movs	r6, #10
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	fb93 f5f6 	sdiv	r5, r3, r6
 8008e80:	fb06 3015 	mls	r0, r6, r5, r3
 8008e84:	3030      	adds	r0, #48	; 0x30
 8008e86:	f801 0c01 	strb.w	r0, [r1, #-1]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	2863      	cmp	r0, #99	; 0x63
 8008e8e:	f102 32ff 	add.w	r2, r2, #4294967295
 8008e92:	462b      	mov	r3, r5
 8008e94:	dcf1      	bgt.n	8008e7a <_svfprintf_r+0x5d2>
 8008e96:	3330      	adds	r3, #48	; 0x30
 8008e98:	1e88      	subs	r0, r1, #2
 8008e9a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008e9e:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 8008ea2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	42ab      	cmp	r3, r5
 8008eaa:	f0c0 8182 	bcc.w	80091b2 <_svfprintf_r+0x90a>
 8008eae:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8008eb2:	1a52      	subs	r2, r2, r1
 8008eb4:	42a8      	cmp	r0, r5
 8008eb6:	bf88      	it	hi
 8008eb8:	2200      	movhi	r2, #0
 8008eba:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 8008ebe:	441a      	add	r2, r3
 8008ec0:	ab1e      	add	r3, sp, #120	; 0x78
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	9a05      	ldr	r2, [sp, #20]
 8008ec6:	9315      	str	r3, [sp, #84]	; 0x54
 8008ec8:	2a01      	cmp	r2, #1
 8008eca:	4413      	add	r3, r2
 8008ecc:	9304      	str	r3, [sp, #16]
 8008ece:	dc02      	bgt.n	8008ed6 <_svfprintf_r+0x62e>
 8008ed0:	f01b 0f01 	tst.w	fp, #1
 8008ed4:	d003      	beq.n	8008ede <_svfprintf_r+0x636>
 8008ed6:	9b04      	ldr	r3, [sp, #16]
 8008ed8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008eda:	4413      	add	r3, r2
 8008edc:	9304      	str	r3, [sp, #16]
 8008ede:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8008ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ee6:	9311      	str	r3, [sp, #68]	; 0x44
 8008ee8:	2300      	movs	r3, #0
 8008eea:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8008eee:	461d      	mov	r5, r3
 8008ef0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008ef2:	b113      	cbz	r3, 8008efa <_svfprintf_r+0x652>
 8008ef4:	232d      	movs	r3, #45	; 0x2d
 8008ef6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8008efa:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8008efe:	2600      	movs	r6, #0
 8008f00:	9b04      	ldr	r3, [sp, #16]
 8008f02:	42b3      	cmp	r3, r6
 8008f04:	bfb8      	it	lt
 8008f06:	4633      	movlt	r3, r6
 8008f08:	9311      	str	r3, [sp, #68]	; 0x44
 8008f0a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8008f0e:	b113      	cbz	r3, 8008f16 <_svfprintf_r+0x66e>
 8008f10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f12:	3301      	adds	r3, #1
 8008f14:	9311      	str	r3, [sp, #68]	; 0x44
 8008f16:	f01b 0302 	ands.w	r3, fp, #2
 8008f1a:	9317      	str	r3, [sp, #92]	; 0x5c
 8008f1c:	bf1e      	ittt	ne
 8008f1e:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8008f20:	3302      	addne	r3, #2
 8008f22:	9311      	strne	r3, [sp, #68]	; 0x44
 8008f24:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8008f28:	9318      	str	r3, [sp, #96]	; 0x60
 8008f2a:	d11f      	bne.n	8008f6c <_svfprintf_r+0x6c4>
 8008f2c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8008f30:	1a9f      	subs	r7, r3, r2
 8008f32:	2f00      	cmp	r7, #0
 8008f34:	dd1a      	ble.n	8008f6c <_svfprintf_r+0x6c4>
 8008f36:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8008f3a:	4836      	ldr	r0, [pc, #216]	; (8009014 <_svfprintf_r+0x76c>)
 8008f3c:	6020      	str	r0, [r4, #0]
 8008f3e:	2f10      	cmp	r7, #16
 8008f40:	f103 0301 	add.w	r3, r3, #1
 8008f44:	f104 0108 	add.w	r1, r4, #8
 8008f48:	f300 82ed 	bgt.w	8009526 <_svfprintf_r+0xc7e>
 8008f4c:	6067      	str	r7, [r4, #4]
 8008f4e:	2b07      	cmp	r3, #7
 8008f50:	4417      	add	r7, r2
 8008f52:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8008f56:	f340 82f9 	ble.w	800954c <_svfprintf_r+0xca4>
 8008f5a:	aa22      	add	r2, sp, #136	; 0x88
 8008f5c:	4641      	mov	r1, r8
 8008f5e:	4650      	mov	r0, sl
 8008f60:	f004 fee8 	bl	800dd34 <__ssprint_r>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	f040 8621 	bne.w	8009bac <_svfprintf_r+0x1304>
 8008f6a:	ac25      	add	r4, sp, #148	; 0x94
 8008f6c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8008f70:	b173      	cbz	r3, 8008f90 <_svfprintf_r+0x6e8>
 8008f72:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 8008f76:	6023      	str	r3, [r4, #0]
 8008f78:	2301      	movs	r3, #1
 8008f7a:	6063      	str	r3, [r4, #4]
 8008f7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f7e:	3301      	adds	r3, #1
 8008f80:	9324      	str	r3, [sp, #144]	; 0x90
 8008f82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f84:	3301      	adds	r3, #1
 8008f86:	2b07      	cmp	r3, #7
 8008f88:	9323      	str	r3, [sp, #140]	; 0x8c
 8008f8a:	f300 82e1 	bgt.w	8009550 <_svfprintf_r+0xca8>
 8008f8e:	3408      	adds	r4, #8
 8008f90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f92:	b16b      	cbz	r3, 8008fb0 <_svfprintf_r+0x708>
 8008f94:	ab1b      	add	r3, sp, #108	; 0x6c
 8008f96:	6023      	str	r3, [r4, #0]
 8008f98:	2302      	movs	r3, #2
 8008f9a:	6063      	str	r3, [r4, #4]
 8008f9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f9e:	3302      	adds	r3, #2
 8008fa0:	9324      	str	r3, [sp, #144]	; 0x90
 8008fa2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	2b07      	cmp	r3, #7
 8008fa8:	9323      	str	r3, [sp, #140]	; 0x8c
 8008faa:	f300 82db 	bgt.w	8009564 <_svfprintf_r+0xcbc>
 8008fae:	3408      	adds	r4, #8
 8008fb0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008fb2:	2b80      	cmp	r3, #128	; 0x80
 8008fb4:	d11f      	bne.n	8008ff6 <_svfprintf_r+0x74e>
 8008fb6:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8008fba:	1a9f      	subs	r7, r3, r2
 8008fbc:	2f00      	cmp	r7, #0
 8008fbe:	dd1a      	ble.n	8008ff6 <_svfprintf_r+0x74e>
 8008fc0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8008fc4:	4814      	ldr	r0, [pc, #80]	; (8009018 <_svfprintf_r+0x770>)
 8008fc6:	6020      	str	r0, [r4, #0]
 8008fc8:	2f10      	cmp	r7, #16
 8008fca:	f103 0301 	add.w	r3, r3, #1
 8008fce:	f104 0108 	add.w	r1, r4, #8
 8008fd2:	f300 82d1 	bgt.w	8009578 <_svfprintf_r+0xcd0>
 8008fd6:	6067      	str	r7, [r4, #4]
 8008fd8:	2b07      	cmp	r3, #7
 8008fda:	4417      	add	r7, r2
 8008fdc:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8008fe0:	f340 82dd 	ble.w	800959e <_svfprintf_r+0xcf6>
 8008fe4:	aa22      	add	r2, sp, #136	; 0x88
 8008fe6:	4641      	mov	r1, r8
 8008fe8:	4650      	mov	r0, sl
 8008fea:	f004 fea3 	bl	800dd34 <__ssprint_r>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	f040 85dc 	bne.w	8009bac <_svfprintf_r+0x1304>
 8008ff4:	ac25      	add	r4, sp, #148	; 0x94
 8008ff6:	9b04      	ldr	r3, [sp, #16]
 8008ff8:	1af6      	subs	r6, r6, r3
 8008ffa:	2e00      	cmp	r6, #0
 8008ffc:	dd28      	ble.n	8009050 <_svfprintf_r+0x7a8>
 8008ffe:	4f06      	ldr	r7, [pc, #24]	; (8009018 <_svfprintf_r+0x770>)
 8009000:	e00c      	b.n	800901c <_svfprintf_r+0x774>
 8009002:	bf00      	nop
 8009004:	0800ffb9 	.word	0x0800ffb9
 8009008:	0800ffa8 	.word	0x0800ffa8
 800900c:	40300000 	.word	0x40300000
 8009010:	3fe00000 	.word	0x3fe00000
 8009014:	0800ffcc 	.word	0x0800ffcc
 8009018:	0800ffdc 	.word	0x0800ffdc
 800901c:	6027      	str	r7, [r4, #0]
 800901e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009022:	2e10      	cmp	r6, #16
 8009024:	f103 0301 	add.w	r3, r3, #1
 8009028:	f104 0108 	add.w	r1, r4, #8
 800902c:	f300 82b9 	bgt.w	80095a2 <_svfprintf_r+0xcfa>
 8009030:	6066      	str	r6, [r4, #4]
 8009032:	2b07      	cmp	r3, #7
 8009034:	4416      	add	r6, r2
 8009036:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800903a:	f340 82c5 	ble.w	80095c8 <_svfprintf_r+0xd20>
 800903e:	aa22      	add	r2, sp, #136	; 0x88
 8009040:	4641      	mov	r1, r8
 8009042:	4650      	mov	r0, sl
 8009044:	f004 fe76 	bl	800dd34 <__ssprint_r>
 8009048:	2800      	cmp	r0, #0
 800904a:	f040 85af 	bne.w	8009bac <_svfprintf_r+0x1304>
 800904e:	ac25      	add	r4, sp, #148	; 0x94
 8009050:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009054:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8009056:	f040 82bd 	bne.w	80095d4 <_svfprintf_r+0xd2c>
 800905a:	9b04      	ldr	r3, [sp, #16]
 800905c:	f8c4 9000 	str.w	r9, [r4]
 8009060:	441e      	add	r6, r3
 8009062:	6063      	str	r3, [r4, #4]
 8009064:	9624      	str	r6, [sp, #144]	; 0x90
 8009066:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009068:	3301      	adds	r3, #1
 800906a:	2b07      	cmp	r3, #7
 800906c:	9323      	str	r3, [sp, #140]	; 0x8c
 800906e:	f300 82f6 	bgt.w	800965e <_svfprintf_r+0xdb6>
 8009072:	3408      	adds	r4, #8
 8009074:	f01b 0f04 	tst.w	fp, #4
 8009078:	f040 857a 	bne.w	8009b70 <_svfprintf_r+0x12c8>
 800907c:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
 8009080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009082:	428a      	cmp	r2, r1
 8009084:	bfac      	ite	ge
 8009086:	189b      	addge	r3, r3, r2
 8009088:	185b      	addlt	r3, r3, r1
 800908a:	930c      	str	r3, [sp, #48]	; 0x30
 800908c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800908e:	b13b      	cbz	r3, 80090a0 <_svfprintf_r+0x7f8>
 8009090:	aa22      	add	r2, sp, #136	; 0x88
 8009092:	4641      	mov	r1, r8
 8009094:	4650      	mov	r0, sl
 8009096:	f004 fe4d 	bl	800dd34 <__ssprint_r>
 800909a:	2800      	cmp	r0, #0
 800909c:	f040 8586 	bne.w	8009bac <_svfprintf_r+0x1304>
 80090a0:	2300      	movs	r3, #0
 80090a2:	9323      	str	r3, [sp, #140]	; 0x8c
 80090a4:	9b03      	ldr	r3, [sp, #12]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f040 859c 	bne.w	8009be4 <_svfprintf_r+0x133c>
 80090ac:	ac25      	add	r4, sp, #148	; 0x94
 80090ae:	e0ec      	b.n	800928a <_svfprintf_r+0x9e2>
 80090b0:	9003      	str	r0, [sp, #12]
 80090b2:	e62c      	b.n	8008d0e <_svfprintf_r+0x466>
 80090b4:	9003      	str	r0, [sp, #12]
 80090b6:	2306      	movs	r3, #6
 80090b8:	e61a      	b.n	8008cf0 <_svfprintf_r+0x448>
 80090ba:	9003      	str	r0, [sp, #12]
 80090bc:	e627      	b.n	8008d0e <_svfprintf_r+0x466>
 80090be:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 80090c2:	2300      	movs	r3, #0
 80090c4:	eeb0 8a47 	vmov.f32	s16, s14
 80090c8:	eef0 8a67 	vmov.f32	s17, s15
 80090cc:	e62f      	b.n	8008d2e <_svfprintf_r+0x486>
 80090ce:	f802 0c01 	strb.w	r0, [r2, #-1]
 80090d2:	e691      	b.n	8008df8 <_svfprintf_r+0x550>
 80090d4:	f803 0b01 	strb.w	r0, [r3], #1
 80090d8:	1aca      	subs	r2, r1, r3
 80090da:	2a00      	cmp	r2, #0
 80090dc:	dafa      	bge.n	80090d4 <_svfprintf_r+0x82c>
 80090de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e2:	3201      	adds	r2, #1
 80090e4:	f103 0301 	add.w	r3, r3, #1
 80090e8:	bfb8      	it	lt
 80090ea:	2300      	movlt	r3, #0
 80090ec:	441d      	add	r5, r3
 80090ee:	e693      	b.n	8008e18 <_svfprintf_r+0x570>
 80090f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090f2:	462b      	mov	r3, r5
 80090f4:	18a9      	adds	r1, r5, r2
 80090f6:	2030      	movs	r0, #48	; 0x30
 80090f8:	e7ee      	b.n	80090d8 <_svfprintf_r+0x830>
 80090fa:	9b08      	ldr	r3, [sp, #32]
 80090fc:	2b46      	cmp	r3, #70	; 0x46
 80090fe:	d005      	beq.n	800910c <_svfprintf_r+0x864>
 8009100:	2b45      	cmp	r3, #69	; 0x45
 8009102:	d11b      	bne.n	800913c <_svfprintf_r+0x894>
 8009104:	9b04      	ldr	r3, [sp, #16]
 8009106:	1c5d      	adds	r5, r3, #1
 8009108:	2102      	movs	r1, #2
 800910a:	e001      	b.n	8009110 <_svfprintf_r+0x868>
 800910c:	9d04      	ldr	r5, [sp, #16]
 800910e:	2103      	movs	r1, #3
 8009110:	ab20      	add	r3, sp, #128	; 0x80
 8009112:	9301      	str	r3, [sp, #4]
 8009114:	ab1d      	add	r3, sp, #116	; 0x74
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	462a      	mov	r2, r5
 800911a:	ab1c      	add	r3, sp, #112	; 0x70
 800911c:	4650      	mov	r0, sl
 800911e:	eeb0 0a48 	vmov.f32	s0, s16
 8009122:	eef0 0a68 	vmov.f32	s1, s17
 8009126:	f002 f813 	bl	800b150 <_dtoa_r>
 800912a:	9b08      	ldr	r3, [sp, #32]
 800912c:	2b47      	cmp	r3, #71	; 0x47
 800912e:	4681      	mov	r9, r0
 8009130:	d106      	bne.n	8009140 <_svfprintf_r+0x898>
 8009132:	f01b 0f01 	tst.w	fp, #1
 8009136:	d103      	bne.n	8009140 <_svfprintf_r+0x898>
 8009138:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800913a:	e66d      	b.n	8008e18 <_svfprintf_r+0x570>
 800913c:	9d04      	ldr	r5, [sp, #16]
 800913e:	e7e3      	b.n	8009108 <_svfprintf_r+0x860>
 8009140:	9b08      	ldr	r3, [sp, #32]
 8009142:	2b46      	cmp	r3, #70	; 0x46
 8009144:	eb09 0605 	add.w	r6, r9, r5
 8009148:	d10f      	bne.n	800916a <_svfprintf_r+0x8c2>
 800914a:	f899 3000 	ldrb.w	r3, [r9]
 800914e:	2b30      	cmp	r3, #48	; 0x30
 8009150:	d109      	bne.n	8009166 <_svfprintf_r+0x8be>
 8009152:	ec51 0b18 	vmov	r0, r1, d8
 8009156:	2200      	movs	r2, #0
 8009158:	2300      	movs	r3, #0
 800915a:	f7f7 fcbd 	bl	8000ad8 <__aeabi_dcmpeq>
 800915e:	b910      	cbnz	r0, 8009166 <_svfprintf_r+0x8be>
 8009160:	f1c5 0501 	rsb	r5, r5, #1
 8009164:	951c      	str	r5, [sp, #112]	; 0x70
 8009166:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009168:	441e      	add	r6, r3
 800916a:	ec51 0b18 	vmov	r0, r1, d8
 800916e:	2200      	movs	r2, #0
 8009170:	2300      	movs	r3, #0
 8009172:	f7f7 fcb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009176:	b100      	cbz	r0, 800917a <_svfprintf_r+0x8d2>
 8009178:	9620      	str	r6, [sp, #128]	; 0x80
 800917a:	2230      	movs	r2, #48	; 0x30
 800917c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800917e:	429e      	cmp	r6, r3
 8009180:	d9da      	bls.n	8009138 <_svfprintf_r+0x890>
 8009182:	1c59      	adds	r1, r3, #1
 8009184:	9120      	str	r1, [sp, #128]	; 0x80
 8009186:	701a      	strb	r2, [r3, #0]
 8009188:	e7f8      	b.n	800917c <_svfprintf_r+0x8d4>
 800918a:	9b08      	ldr	r3, [sp, #32]
 800918c:	2b46      	cmp	r3, #70	; 0x46
 800918e:	f47f ae54 	bne.w	8008e3a <_svfprintf_r+0x592>
 8009192:	9a04      	ldr	r2, [sp, #16]
 8009194:	f00b 0301 	and.w	r3, fp, #1
 8009198:	2d00      	cmp	r5, #0
 800919a:	ea43 0302 	orr.w	r3, r3, r2
 800919e:	dd1a      	ble.n	80091d6 <_svfprintf_r+0x92e>
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d034      	beq.n	800920e <_svfprintf_r+0x966>
 80091a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091a6:	18eb      	adds	r3, r5, r3
 80091a8:	441a      	add	r2, r3
 80091aa:	9204      	str	r2, [sp, #16]
 80091ac:	2366      	movs	r3, #102	; 0x66
 80091ae:	9306      	str	r3, [sp, #24]
 80091b0:	e033      	b.n	800921a <_svfprintf_r+0x972>
 80091b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80091b6:	f802 6b01 	strb.w	r6, [r2], #1
 80091ba:	e675      	b.n	8008ea8 <_svfprintf_r+0x600>
 80091bc:	b941      	cbnz	r1, 80091d0 <_svfprintf_r+0x928>
 80091be:	2230      	movs	r2, #48	; 0x30
 80091c0:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 80091c4:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80091c8:	3330      	adds	r3, #48	; 0x30
 80091ca:	f802 3b01 	strb.w	r3, [r2], #1
 80091ce:	e677      	b.n	8008ec0 <_svfprintf_r+0x618>
 80091d0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80091d4:	e7f8      	b.n	80091c8 <_svfprintf_r+0x920>
 80091d6:	b1e3      	cbz	r3, 8009212 <_svfprintf_r+0x96a>
 80091d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091da:	9a04      	ldr	r2, [sp, #16]
 80091dc:	3301      	adds	r3, #1
 80091de:	e7e3      	b.n	80091a8 <_svfprintf_r+0x900>
 80091e0:	9b05      	ldr	r3, [sp, #20]
 80091e2:	429d      	cmp	r5, r3
 80091e4:	db07      	blt.n	80091f6 <_svfprintf_r+0x94e>
 80091e6:	f01b 0f01 	tst.w	fp, #1
 80091ea:	d02d      	beq.n	8009248 <_svfprintf_r+0x9a0>
 80091ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091ee:	18eb      	adds	r3, r5, r3
 80091f0:	9304      	str	r3, [sp, #16]
 80091f2:	2367      	movs	r3, #103	; 0x67
 80091f4:	e7db      	b.n	80091ae <_svfprintf_r+0x906>
 80091f6:	9b05      	ldr	r3, [sp, #20]
 80091f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091fa:	2d00      	cmp	r5, #0
 80091fc:	4413      	add	r3, r2
 80091fe:	9304      	str	r3, [sp, #16]
 8009200:	dcf7      	bgt.n	80091f2 <_svfprintf_r+0x94a>
 8009202:	9a04      	ldr	r2, [sp, #16]
 8009204:	f1c5 0301 	rsb	r3, r5, #1
 8009208:	441a      	add	r2, r3
 800920a:	9204      	str	r2, [sp, #16]
 800920c:	e7f1      	b.n	80091f2 <_svfprintf_r+0x94a>
 800920e:	9504      	str	r5, [sp, #16]
 8009210:	e7cc      	b.n	80091ac <_svfprintf_r+0x904>
 8009212:	2366      	movs	r3, #102	; 0x66
 8009214:	9306      	str	r3, [sp, #24]
 8009216:	2301      	movs	r3, #1
 8009218:	9304      	str	r3, [sp, #16]
 800921a:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 800921e:	9309      	str	r3, [sp, #36]	; 0x24
 8009220:	d025      	beq.n	800926e <_svfprintf_r+0x9c6>
 8009222:	2300      	movs	r3, #0
 8009224:	2d00      	cmp	r5, #0
 8009226:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800922a:	f77f ae61 	ble.w	8008ef0 <_svfprintf_r+0x648>
 800922e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	2bff      	cmp	r3, #255	; 0xff
 8009234:	d10a      	bne.n	800924c <_svfprintf_r+0x9a4>
 8009236:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800923a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800923c:	4413      	add	r3, r2
 800923e:	9a04      	ldr	r2, [sp, #16]
 8009240:	fb01 2303 	mla	r3, r1, r3, r2
 8009244:	9304      	str	r3, [sp, #16]
 8009246:	e653      	b.n	8008ef0 <_svfprintf_r+0x648>
 8009248:	9504      	str	r5, [sp, #16]
 800924a:	e7d2      	b.n	80091f2 <_svfprintf_r+0x94a>
 800924c:	42ab      	cmp	r3, r5
 800924e:	daf2      	bge.n	8009236 <_svfprintf_r+0x98e>
 8009250:	1aed      	subs	r5, r5, r3
 8009252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009254:	785b      	ldrb	r3, [r3, #1]
 8009256:	b133      	cbz	r3, 8009266 <_svfprintf_r+0x9be>
 8009258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800925a:	3301      	adds	r3, #1
 800925c:	9309      	str	r3, [sp, #36]	; 0x24
 800925e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009260:	3301      	adds	r3, #1
 8009262:	930a      	str	r3, [sp, #40]	; 0x28
 8009264:	e7e3      	b.n	800922e <_svfprintf_r+0x986>
 8009266:	9b08      	ldr	r3, [sp, #32]
 8009268:	3301      	adds	r3, #1
 800926a:	9308      	str	r3, [sp, #32]
 800926c:	e7df      	b.n	800922e <_svfprintf_r+0x986>
 800926e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009270:	9308      	str	r3, [sp, #32]
 8009272:	e63d      	b.n	8008ef0 <_svfprintf_r+0x648>
 8009274:	1d33      	adds	r3, r6, #4
 8009276:	f01b 0f20 	tst.w	fp, #32
 800927a:	9307      	str	r3, [sp, #28]
 800927c:	d00a      	beq.n	8009294 <_svfprintf_r+0x9ec>
 800927e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009280:	6833      	ldr	r3, [r6, #0]
 8009282:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009284:	17d2      	asrs	r2, r2, #31
 8009286:	e9c3 1200 	strd	r1, r2, [r3]
 800928a:	9e07      	ldr	r6, [sp, #28]
 800928c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8009290:	f7ff bb4a 	b.w	8008928 <_svfprintf_r+0x80>
 8009294:	f01b 0f10 	tst.w	fp, #16
 8009298:	d003      	beq.n	80092a2 <_svfprintf_r+0x9fa>
 800929a:	6833      	ldr	r3, [r6, #0]
 800929c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800929e:	601a      	str	r2, [r3, #0]
 80092a0:	e7f3      	b.n	800928a <_svfprintf_r+0x9e2>
 80092a2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80092a6:	d003      	beq.n	80092b0 <_svfprintf_r+0xa08>
 80092a8:	6833      	ldr	r3, [r6, #0]
 80092aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092ac:	801a      	strh	r2, [r3, #0]
 80092ae:	e7ec      	b.n	800928a <_svfprintf_r+0x9e2>
 80092b0:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80092b4:	d0f1      	beq.n	800929a <_svfprintf_r+0x9f2>
 80092b6:	6833      	ldr	r3, [r6, #0]
 80092b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092ba:	701a      	strb	r2, [r3, #0]
 80092bc:	e7e5      	b.n	800928a <_svfprintf_r+0x9e2>
 80092be:	f04b 0b10 	orr.w	fp, fp, #16
 80092c2:	f01b 0320 	ands.w	r3, fp, #32
 80092c6:	d01f      	beq.n	8009308 <_svfprintf_r+0xa60>
 80092c8:	1df3      	adds	r3, r6, #7
 80092ca:	f023 0307 	bic.w	r3, r3, #7
 80092ce:	461a      	mov	r2, r3
 80092d0:	685d      	ldr	r5, [r3, #4]
 80092d2:	f852 6b08 	ldr.w	r6, [r2], #8
 80092d6:	9207      	str	r2, [sp, #28]
 80092d8:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 80092dc:	2300      	movs	r3, #0
 80092de:	2200      	movs	r2, #0
 80092e0:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 80092e4:	9a04      	ldr	r2, [sp, #16]
 80092e6:	3201      	adds	r2, #1
 80092e8:	f000 848d 	beq.w	8009c06 <_svfprintf_r+0x135e>
 80092ec:	ea56 0205 	orrs.w	r2, r6, r5
 80092f0:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 80092f4:	f040 848c 	bne.w	8009c10 <_svfprintf_r+0x1368>
 80092f8:	9a04      	ldr	r2, [sp, #16]
 80092fa:	2a00      	cmp	r2, #0
 80092fc:	f000 80f9 	beq.w	80094f2 <_svfprintf_r+0xc4a>
 8009300:	2b01      	cmp	r3, #1
 8009302:	f040 8488 	bne.w	8009c16 <_svfprintf_r+0x136e>
 8009306:	e09f      	b.n	8009448 <_svfprintf_r+0xba0>
 8009308:	4632      	mov	r2, r6
 800930a:	f01b 0510 	ands.w	r5, fp, #16
 800930e:	f852 6b04 	ldr.w	r6, [r2], #4
 8009312:	9207      	str	r2, [sp, #28]
 8009314:	d001      	beq.n	800931a <_svfprintf_r+0xa72>
 8009316:	461d      	mov	r5, r3
 8009318:	e7de      	b.n	80092d8 <_svfprintf_r+0xa30>
 800931a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800931e:	d001      	beq.n	8009324 <_svfprintf_r+0xa7c>
 8009320:	b2b6      	uxth	r6, r6
 8009322:	e7d9      	b.n	80092d8 <_svfprintf_r+0xa30>
 8009324:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 8009328:	d0d6      	beq.n	80092d8 <_svfprintf_r+0xa30>
 800932a:	b2f6      	uxtb	r6, r6
 800932c:	e7f3      	b.n	8009316 <_svfprintf_r+0xa6e>
 800932e:	4633      	mov	r3, r6
 8009330:	2278      	movs	r2, #120	; 0x78
 8009332:	f853 6b04 	ldr.w	r6, [r3], #4
 8009336:	9307      	str	r3, [sp, #28]
 8009338:	2330      	movs	r3, #48	; 0x30
 800933a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800933e:	4ba3      	ldr	r3, [pc, #652]	; (80095cc <_svfprintf_r+0xd24>)
 8009340:	9316      	str	r3, [sp, #88]	; 0x58
 8009342:	2500      	movs	r5, #0
 8009344:	f04b 0b02 	orr.w	fp, fp, #2
 8009348:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800934c:	2302      	movs	r3, #2
 800934e:	9206      	str	r2, [sp, #24]
 8009350:	e7c5      	b.n	80092de <_svfprintf_r+0xa36>
 8009352:	4633      	mov	r3, r6
 8009354:	2500      	movs	r5, #0
 8009356:	f853 9b04 	ldr.w	r9, [r3], #4
 800935a:	9307      	str	r3, [sp, #28]
 800935c:	9b04      	ldr	r3, [sp, #16]
 800935e:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8009362:	1c58      	adds	r0, r3, #1
 8009364:	d010      	beq.n	8009388 <_svfprintf_r+0xae0>
 8009366:	461a      	mov	r2, r3
 8009368:	4629      	mov	r1, r5
 800936a:	4648      	mov	r0, r9
 800936c:	f7f6 ff40 	bl	80001f0 <memchr>
 8009370:	9003      	str	r0, [sp, #12]
 8009372:	2800      	cmp	r0, #0
 8009374:	f000 80d4 	beq.w	8009520 <_svfprintf_r+0xc78>
 8009378:	eba0 0309 	sub.w	r3, r0, r9
 800937c:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8009380:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8009384:	462e      	mov	r6, r5
 8009386:	e5bb      	b.n	8008f00 <_svfprintf_r+0x658>
 8009388:	4648      	mov	r0, r9
 800938a:	f7f6 ff29 	bl	80001e0 <strlen>
 800938e:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8009392:	e45f      	b.n	8008c54 <_svfprintf_r+0x3ac>
 8009394:	f04b 0b10 	orr.w	fp, fp, #16
 8009398:	f01b 0320 	ands.w	r3, fp, #32
 800939c:	d009      	beq.n	80093b2 <_svfprintf_r+0xb0a>
 800939e:	1df3      	adds	r3, r6, #7
 80093a0:	f023 0307 	bic.w	r3, r3, #7
 80093a4:	461a      	mov	r2, r3
 80093a6:	685d      	ldr	r5, [r3, #4]
 80093a8:	f852 6b08 	ldr.w	r6, [r2], #8
 80093ac:	9207      	str	r2, [sp, #28]
 80093ae:	2301      	movs	r3, #1
 80093b0:	e795      	b.n	80092de <_svfprintf_r+0xa36>
 80093b2:	4632      	mov	r2, r6
 80093b4:	f01b 0510 	ands.w	r5, fp, #16
 80093b8:	f852 6b04 	ldr.w	r6, [r2], #4
 80093bc:	9207      	str	r2, [sp, #28]
 80093be:	d001      	beq.n	80093c4 <_svfprintf_r+0xb1c>
 80093c0:	461d      	mov	r5, r3
 80093c2:	e7f4      	b.n	80093ae <_svfprintf_r+0xb06>
 80093c4:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 80093c8:	d001      	beq.n	80093ce <_svfprintf_r+0xb26>
 80093ca:	b2b6      	uxth	r6, r6
 80093cc:	e7ef      	b.n	80093ae <_svfprintf_r+0xb06>
 80093ce:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 80093d2:	d0ec      	beq.n	80093ae <_svfprintf_r+0xb06>
 80093d4:	b2f6      	uxtb	r6, r6
 80093d6:	e7f3      	b.n	80093c0 <_svfprintf_r+0xb18>
 80093d8:	4b7d      	ldr	r3, [pc, #500]	; (80095d0 <_svfprintf_r+0xd28>)
 80093da:	9316      	str	r3, [sp, #88]	; 0x58
 80093dc:	f01b 0320 	ands.w	r3, fp, #32
 80093e0:	d01b      	beq.n	800941a <_svfprintf_r+0xb72>
 80093e2:	1df3      	adds	r3, r6, #7
 80093e4:	f023 0307 	bic.w	r3, r3, #7
 80093e8:	461a      	mov	r2, r3
 80093ea:	685d      	ldr	r5, [r3, #4]
 80093ec:	f852 6b08 	ldr.w	r6, [r2], #8
 80093f0:	9207      	str	r2, [sp, #28]
 80093f2:	f01b 0f01 	tst.w	fp, #1
 80093f6:	d00a      	beq.n	800940e <_svfprintf_r+0xb66>
 80093f8:	ea56 0305 	orrs.w	r3, r6, r5
 80093fc:	d007      	beq.n	800940e <_svfprintf_r+0xb66>
 80093fe:	2330      	movs	r3, #48	; 0x30
 8009400:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8009404:	9b06      	ldr	r3, [sp, #24]
 8009406:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800940a:	f04b 0b02 	orr.w	fp, fp, #2
 800940e:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8009412:	2302      	movs	r3, #2
 8009414:	e763      	b.n	80092de <_svfprintf_r+0xa36>
 8009416:	4b6d      	ldr	r3, [pc, #436]	; (80095cc <_svfprintf_r+0xd24>)
 8009418:	e7df      	b.n	80093da <_svfprintf_r+0xb32>
 800941a:	4632      	mov	r2, r6
 800941c:	f01b 0510 	ands.w	r5, fp, #16
 8009420:	f852 6b04 	ldr.w	r6, [r2], #4
 8009424:	9207      	str	r2, [sp, #28]
 8009426:	d001      	beq.n	800942c <_svfprintf_r+0xb84>
 8009428:	461d      	mov	r5, r3
 800942a:	e7e2      	b.n	80093f2 <_svfprintf_r+0xb4a>
 800942c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8009430:	d001      	beq.n	8009436 <_svfprintf_r+0xb8e>
 8009432:	b2b6      	uxth	r6, r6
 8009434:	e7dd      	b.n	80093f2 <_svfprintf_r+0xb4a>
 8009436:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 800943a:	d0da      	beq.n	80093f2 <_svfprintf_r+0xb4a>
 800943c:	b2f6      	uxtb	r6, r6
 800943e:	e7f3      	b.n	8009428 <_svfprintf_r+0xb80>
 8009440:	2e0a      	cmp	r6, #10
 8009442:	f175 0300 	sbcs.w	r3, r5, #0
 8009446:	d205      	bcs.n	8009454 <_svfprintf_r+0xbac>
 8009448:	3630      	adds	r6, #48	; 0x30
 800944a:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 800944e:	f20d 1937 	addw	r9, sp, #311	; 0x137
 8009452:	e3fb      	b.n	8009c4c <_svfprintf_r+0x13a4>
 8009454:	2300      	movs	r3, #0
 8009456:	9305      	str	r3, [sp, #20]
 8009458:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 800945c:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8009460:	9303      	str	r3, [sp, #12]
 8009462:	220a      	movs	r2, #10
 8009464:	2300      	movs	r3, #0
 8009466:	4630      	mov	r0, r6
 8009468:	4629      	mov	r1, r5
 800946a:	f7f7 fc15 	bl	8000c98 <__aeabi_uldivmod>
 800946e:	9b05      	ldr	r3, [sp, #20]
 8009470:	3301      	adds	r3, #1
 8009472:	9305      	str	r3, [sp, #20]
 8009474:	9b03      	ldr	r3, [sp, #12]
 8009476:	3230      	adds	r2, #48	; 0x30
 8009478:	f10b 39ff 	add.w	r9, fp, #4294967295
 800947c:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8009480:	b1d3      	cbz	r3, 80094b8 <_svfprintf_r+0xc10>
 8009482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009484:	9a05      	ldr	r2, [sp, #20]
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	429a      	cmp	r2, r3
 800948a:	d115      	bne.n	80094b8 <_svfprintf_r+0xc10>
 800948c:	2aff      	cmp	r2, #255	; 0xff
 800948e:	d013      	beq.n	80094b8 <_svfprintf_r+0xc10>
 8009490:	2e0a      	cmp	r6, #10
 8009492:	f175 0300 	sbcs.w	r3, r5, #0
 8009496:	d30f      	bcc.n	80094b8 <_svfprintf_r+0xc10>
 8009498:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800949a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800949c:	eba9 0903 	sub.w	r9, r9, r3
 80094a0:	461a      	mov	r2, r3
 80094a2:	4648      	mov	r0, r9
 80094a4:	f003 fc62 	bl	800cd6c <strncpy>
 80094a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094aa:	785b      	ldrb	r3, [r3, #1]
 80094ac:	b11b      	cbz	r3, 80094b6 <_svfprintf_r+0xc0e>
 80094ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094b0:	3301      	adds	r3, #1
 80094b2:	930a      	str	r3, [sp, #40]	; 0x28
 80094b4:	2300      	movs	r3, #0
 80094b6:	9305      	str	r3, [sp, #20]
 80094b8:	2300      	movs	r3, #0
 80094ba:	220a      	movs	r2, #10
 80094bc:	4630      	mov	r0, r6
 80094be:	4629      	mov	r1, r5
 80094c0:	f7f7 fbea 	bl	8000c98 <__aeabi_uldivmod>
 80094c4:	2e0a      	cmp	r6, #10
 80094c6:	f175 0300 	sbcs.w	r3, r5, #0
 80094ca:	f0c0 83bf 	bcc.w	8009c4c <_svfprintf_r+0x13a4>
 80094ce:	4606      	mov	r6, r0
 80094d0:	460d      	mov	r5, r1
 80094d2:	46cb      	mov	fp, r9
 80094d4:	e7c5      	b.n	8009462 <_svfprintf_r+0xbba>
 80094d6:	f006 030f 	and.w	r3, r6, #15
 80094da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80094dc:	0936      	lsrs	r6, r6, #4
 80094de:	5cd3      	ldrb	r3, [r2, r3]
 80094e0:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80094e4:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 80094e8:	092d      	lsrs	r5, r5, #4
 80094ea:	ea56 0305 	orrs.w	r3, r6, r5
 80094ee:	d1f2      	bne.n	80094d6 <_svfprintf_r+0xc2e>
 80094f0:	e3ac      	b.n	8009c4c <_svfprintf_r+0x13a4>
 80094f2:	b933      	cbnz	r3, 8009502 <_svfprintf_r+0xc5a>
 80094f4:	f01b 0f01 	tst.w	fp, #1
 80094f8:	d003      	beq.n	8009502 <_svfprintf_r+0xc5a>
 80094fa:	2330      	movs	r3, #48	; 0x30
 80094fc:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8009500:	e7a5      	b.n	800944e <_svfprintf_r+0xba6>
 8009502:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 8009506:	e3a1      	b.n	8009c4c <_svfprintf_r+0x13a4>
 8009508:	9b06      	ldr	r3, [sp, #24]
 800950a:	2b00      	cmp	r3, #0
 800950c:	f000 8370 	beq.w	8009bf0 <_svfprintf_r+0x1348>
 8009510:	2000      	movs	r0, #0
 8009512:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8009516:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800951a:	9607      	str	r6, [sp, #28]
 800951c:	f7ff bb29 	b.w	8008b72 <_svfprintf_r+0x2ca>
 8009520:	9e03      	ldr	r6, [sp, #12]
 8009522:	f7ff bb98 	b.w	8008c56 <_svfprintf_r+0x3ae>
 8009526:	2010      	movs	r0, #16
 8009528:	4402      	add	r2, r0
 800952a:	2b07      	cmp	r3, #7
 800952c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009530:	6060      	str	r0, [r4, #4]
 8009532:	dd08      	ble.n	8009546 <_svfprintf_r+0xc9e>
 8009534:	aa22      	add	r2, sp, #136	; 0x88
 8009536:	4641      	mov	r1, r8
 8009538:	4650      	mov	r0, sl
 800953a:	f004 fbfb 	bl	800dd34 <__ssprint_r>
 800953e:	2800      	cmp	r0, #0
 8009540:	f040 8334 	bne.w	8009bac <_svfprintf_r+0x1304>
 8009544:	a925      	add	r1, sp, #148	; 0x94
 8009546:	3f10      	subs	r7, #16
 8009548:	460c      	mov	r4, r1
 800954a:	e4f4      	b.n	8008f36 <_svfprintf_r+0x68e>
 800954c:	460c      	mov	r4, r1
 800954e:	e50d      	b.n	8008f6c <_svfprintf_r+0x6c4>
 8009550:	aa22      	add	r2, sp, #136	; 0x88
 8009552:	4641      	mov	r1, r8
 8009554:	4650      	mov	r0, sl
 8009556:	f004 fbed 	bl	800dd34 <__ssprint_r>
 800955a:	2800      	cmp	r0, #0
 800955c:	f040 8326 	bne.w	8009bac <_svfprintf_r+0x1304>
 8009560:	ac25      	add	r4, sp, #148	; 0x94
 8009562:	e515      	b.n	8008f90 <_svfprintf_r+0x6e8>
 8009564:	aa22      	add	r2, sp, #136	; 0x88
 8009566:	4641      	mov	r1, r8
 8009568:	4650      	mov	r0, sl
 800956a:	f004 fbe3 	bl	800dd34 <__ssprint_r>
 800956e:	2800      	cmp	r0, #0
 8009570:	f040 831c 	bne.w	8009bac <_svfprintf_r+0x1304>
 8009574:	ac25      	add	r4, sp, #148	; 0x94
 8009576:	e51b      	b.n	8008fb0 <_svfprintf_r+0x708>
 8009578:	2010      	movs	r0, #16
 800957a:	4402      	add	r2, r0
 800957c:	2b07      	cmp	r3, #7
 800957e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009582:	6060      	str	r0, [r4, #4]
 8009584:	dd08      	ble.n	8009598 <_svfprintf_r+0xcf0>
 8009586:	aa22      	add	r2, sp, #136	; 0x88
 8009588:	4641      	mov	r1, r8
 800958a:	4650      	mov	r0, sl
 800958c:	f004 fbd2 	bl	800dd34 <__ssprint_r>
 8009590:	2800      	cmp	r0, #0
 8009592:	f040 830b 	bne.w	8009bac <_svfprintf_r+0x1304>
 8009596:	a925      	add	r1, sp, #148	; 0x94
 8009598:	3f10      	subs	r7, #16
 800959a:	460c      	mov	r4, r1
 800959c:	e510      	b.n	8008fc0 <_svfprintf_r+0x718>
 800959e:	460c      	mov	r4, r1
 80095a0:	e529      	b.n	8008ff6 <_svfprintf_r+0x74e>
 80095a2:	2010      	movs	r0, #16
 80095a4:	4402      	add	r2, r0
 80095a6:	2b07      	cmp	r3, #7
 80095a8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80095ac:	6060      	str	r0, [r4, #4]
 80095ae:	dd08      	ble.n	80095c2 <_svfprintf_r+0xd1a>
 80095b0:	aa22      	add	r2, sp, #136	; 0x88
 80095b2:	4641      	mov	r1, r8
 80095b4:	4650      	mov	r0, sl
 80095b6:	f004 fbbd 	bl	800dd34 <__ssprint_r>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	f040 82f6 	bne.w	8009bac <_svfprintf_r+0x1304>
 80095c0:	a925      	add	r1, sp, #148	; 0x94
 80095c2:	3e10      	subs	r6, #16
 80095c4:	460c      	mov	r4, r1
 80095c6:	e529      	b.n	800901c <_svfprintf_r+0x774>
 80095c8:	460c      	mov	r4, r1
 80095ca:	e541      	b.n	8009050 <_svfprintf_r+0x7a8>
 80095cc:	0800ffa8 	.word	0x0800ffa8
 80095d0:	0800ffb9 	.word	0x0800ffb9
 80095d4:	9b06      	ldr	r3, [sp, #24]
 80095d6:	2b65      	cmp	r3, #101	; 0x65
 80095d8:	f340 8230 	ble.w	8009a3c <_svfprintf_r+0x1194>
 80095dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80095e0:	2200      	movs	r2, #0
 80095e2:	2300      	movs	r3, #0
 80095e4:	f7f7 fa78 	bl	8000ad8 <__aeabi_dcmpeq>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	d068      	beq.n	80096be <_svfprintf_r+0xe16>
 80095ec:	4b6d      	ldr	r3, [pc, #436]	; (80097a4 <_svfprintf_r+0xefc>)
 80095ee:	6023      	str	r3, [r4, #0]
 80095f0:	2301      	movs	r3, #1
 80095f2:	441e      	add	r6, r3
 80095f4:	6063      	str	r3, [r4, #4]
 80095f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80095f8:	9624      	str	r6, [sp, #144]	; 0x90
 80095fa:	3301      	adds	r3, #1
 80095fc:	2b07      	cmp	r3, #7
 80095fe:	9323      	str	r3, [sp, #140]	; 0x8c
 8009600:	dc37      	bgt.n	8009672 <_svfprintf_r+0xdca>
 8009602:	3408      	adds	r4, #8
 8009604:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009606:	9a05      	ldr	r2, [sp, #20]
 8009608:	4293      	cmp	r3, r2
 800960a:	db03      	blt.n	8009614 <_svfprintf_r+0xd6c>
 800960c:	f01b 0f01 	tst.w	fp, #1
 8009610:	f43f ad30 	beq.w	8009074 <_svfprintf_r+0x7cc>
 8009614:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009616:	6023      	str	r3, [r4, #0]
 8009618:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800961a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800961c:	6063      	str	r3, [r4, #4]
 800961e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009620:	4413      	add	r3, r2
 8009622:	9324      	str	r3, [sp, #144]	; 0x90
 8009624:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009626:	3301      	adds	r3, #1
 8009628:	2b07      	cmp	r3, #7
 800962a:	9323      	str	r3, [sp, #140]	; 0x8c
 800962c:	dc2b      	bgt.n	8009686 <_svfprintf_r+0xdde>
 800962e:	3408      	adds	r4, #8
 8009630:	9b05      	ldr	r3, [sp, #20]
 8009632:	1e5d      	subs	r5, r3, #1
 8009634:	2d00      	cmp	r5, #0
 8009636:	f77f ad1d 	ble.w	8009074 <_svfprintf_r+0x7cc>
 800963a:	4e5b      	ldr	r6, [pc, #364]	; (80097a8 <_svfprintf_r+0xf00>)
 800963c:	2710      	movs	r7, #16
 800963e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009642:	2d10      	cmp	r5, #16
 8009644:	f103 0301 	add.w	r3, r3, #1
 8009648:	f104 0108 	add.w	r1, r4, #8
 800964c:	6026      	str	r6, [r4, #0]
 800964e:	dc24      	bgt.n	800969a <_svfprintf_r+0xdf2>
 8009650:	6065      	str	r5, [r4, #4]
 8009652:	2b07      	cmp	r3, #7
 8009654:	4415      	add	r5, r2
 8009656:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800965a:	f340 8286 	ble.w	8009b6a <_svfprintf_r+0x12c2>
 800965e:	aa22      	add	r2, sp, #136	; 0x88
 8009660:	4641      	mov	r1, r8
 8009662:	4650      	mov	r0, sl
 8009664:	f004 fb66 	bl	800dd34 <__ssprint_r>
 8009668:	2800      	cmp	r0, #0
 800966a:	f040 829f 	bne.w	8009bac <_svfprintf_r+0x1304>
 800966e:	ac25      	add	r4, sp, #148	; 0x94
 8009670:	e500      	b.n	8009074 <_svfprintf_r+0x7cc>
 8009672:	aa22      	add	r2, sp, #136	; 0x88
 8009674:	4641      	mov	r1, r8
 8009676:	4650      	mov	r0, sl
 8009678:	f004 fb5c 	bl	800dd34 <__ssprint_r>
 800967c:	2800      	cmp	r0, #0
 800967e:	f040 8295 	bne.w	8009bac <_svfprintf_r+0x1304>
 8009682:	ac25      	add	r4, sp, #148	; 0x94
 8009684:	e7be      	b.n	8009604 <_svfprintf_r+0xd5c>
 8009686:	aa22      	add	r2, sp, #136	; 0x88
 8009688:	4641      	mov	r1, r8
 800968a:	4650      	mov	r0, sl
 800968c:	f004 fb52 	bl	800dd34 <__ssprint_r>
 8009690:	2800      	cmp	r0, #0
 8009692:	f040 828b 	bne.w	8009bac <_svfprintf_r+0x1304>
 8009696:	ac25      	add	r4, sp, #148	; 0x94
 8009698:	e7ca      	b.n	8009630 <_svfprintf_r+0xd88>
 800969a:	3210      	adds	r2, #16
 800969c:	2b07      	cmp	r3, #7
 800969e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80096a2:	6067      	str	r7, [r4, #4]
 80096a4:	dd08      	ble.n	80096b8 <_svfprintf_r+0xe10>
 80096a6:	aa22      	add	r2, sp, #136	; 0x88
 80096a8:	4641      	mov	r1, r8
 80096aa:	4650      	mov	r0, sl
 80096ac:	f004 fb42 	bl	800dd34 <__ssprint_r>
 80096b0:	2800      	cmp	r0, #0
 80096b2:	f040 827b 	bne.w	8009bac <_svfprintf_r+0x1304>
 80096b6:	a925      	add	r1, sp, #148	; 0x94
 80096b8:	3d10      	subs	r5, #16
 80096ba:	460c      	mov	r4, r1
 80096bc:	e7bf      	b.n	800963e <_svfprintf_r+0xd96>
 80096be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	dc73      	bgt.n	80097ac <_svfprintf_r+0xf04>
 80096c4:	4b37      	ldr	r3, [pc, #220]	; (80097a4 <_svfprintf_r+0xefc>)
 80096c6:	6023      	str	r3, [r4, #0]
 80096c8:	2301      	movs	r3, #1
 80096ca:	441e      	add	r6, r3
 80096cc:	6063      	str	r3, [r4, #4]
 80096ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80096d0:	9624      	str	r6, [sp, #144]	; 0x90
 80096d2:	3301      	adds	r3, #1
 80096d4:	2b07      	cmp	r3, #7
 80096d6:	9323      	str	r3, [sp, #140]	; 0x8c
 80096d8:	dc3d      	bgt.n	8009756 <_svfprintf_r+0xeae>
 80096da:	3408      	adds	r4, #8
 80096dc:	9905      	ldr	r1, [sp, #20]
 80096de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80096e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80096e2:	430a      	orrs	r2, r1
 80096e4:	f00b 0101 	and.w	r1, fp, #1
 80096e8:	430a      	orrs	r2, r1
 80096ea:	f43f acc3 	beq.w	8009074 <_svfprintf_r+0x7cc>
 80096ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80096f0:	6022      	str	r2, [r4, #0]
 80096f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096f4:	6062      	str	r2, [r4, #4]
 80096f6:	4413      	add	r3, r2
 80096f8:	9324      	str	r3, [sp, #144]	; 0x90
 80096fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80096fc:	3301      	adds	r3, #1
 80096fe:	2b07      	cmp	r3, #7
 8009700:	9323      	str	r3, [sp, #140]	; 0x8c
 8009702:	dc32      	bgt.n	800976a <_svfprintf_r+0xec2>
 8009704:	3408      	adds	r4, #8
 8009706:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8009708:	2d00      	cmp	r5, #0
 800970a:	da1b      	bge.n	8009744 <_svfprintf_r+0xe9c>
 800970c:	4e26      	ldr	r6, [pc, #152]	; (80097a8 <_svfprintf_r+0xf00>)
 800970e:	426d      	negs	r5, r5
 8009710:	4623      	mov	r3, r4
 8009712:	2710      	movs	r7, #16
 8009714:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8009718:	2d10      	cmp	r5, #16
 800971a:	f102 0201 	add.w	r2, r2, #1
 800971e:	f104 0408 	add.w	r4, r4, #8
 8009722:	601e      	str	r6, [r3, #0]
 8009724:	dc2b      	bgt.n	800977e <_svfprintf_r+0xed6>
 8009726:	605d      	str	r5, [r3, #4]
 8009728:	2a07      	cmp	r2, #7
 800972a:	440d      	add	r5, r1
 800972c:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8009730:	dd08      	ble.n	8009744 <_svfprintf_r+0xe9c>
 8009732:	aa22      	add	r2, sp, #136	; 0x88
 8009734:	4641      	mov	r1, r8
 8009736:	4650      	mov	r0, sl
 8009738:	f004 fafc 	bl	800dd34 <__ssprint_r>
 800973c:	2800      	cmp	r0, #0
 800973e:	f040 8235 	bne.w	8009bac <_svfprintf_r+0x1304>
 8009742:	ac25      	add	r4, sp, #148	; 0x94
 8009744:	9b05      	ldr	r3, [sp, #20]
 8009746:	9a05      	ldr	r2, [sp, #20]
 8009748:	6063      	str	r3, [r4, #4]
 800974a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800974c:	f8c4 9000 	str.w	r9, [r4]
 8009750:	4413      	add	r3, r2
 8009752:	9324      	str	r3, [sp, #144]	; 0x90
 8009754:	e487      	b.n	8009066 <_svfprintf_r+0x7be>
 8009756:	aa22      	add	r2, sp, #136	; 0x88
 8009758:	4641      	mov	r1, r8
 800975a:	4650      	mov	r0, sl
 800975c:	f004 faea 	bl	800dd34 <__ssprint_r>
 8009760:	2800      	cmp	r0, #0
 8009762:	f040 8223 	bne.w	8009bac <_svfprintf_r+0x1304>
 8009766:	ac25      	add	r4, sp, #148	; 0x94
 8009768:	e7b8      	b.n	80096dc <_svfprintf_r+0xe34>
 800976a:	aa22      	add	r2, sp, #136	; 0x88
 800976c:	4641      	mov	r1, r8
 800976e:	4650      	mov	r0, sl
 8009770:	f004 fae0 	bl	800dd34 <__ssprint_r>
 8009774:	2800      	cmp	r0, #0
 8009776:	f040 8219 	bne.w	8009bac <_svfprintf_r+0x1304>
 800977a:	ac25      	add	r4, sp, #148	; 0x94
 800977c:	e7c3      	b.n	8009706 <_svfprintf_r+0xe5e>
 800977e:	3110      	adds	r1, #16
 8009780:	2a07      	cmp	r2, #7
 8009782:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8009786:	605f      	str	r7, [r3, #4]
 8009788:	dd08      	ble.n	800979c <_svfprintf_r+0xef4>
 800978a:	aa22      	add	r2, sp, #136	; 0x88
 800978c:	4641      	mov	r1, r8
 800978e:	4650      	mov	r0, sl
 8009790:	f004 fad0 	bl	800dd34 <__ssprint_r>
 8009794:	2800      	cmp	r0, #0
 8009796:	f040 8209 	bne.w	8009bac <_svfprintf_r+0x1304>
 800979a:	ac25      	add	r4, sp, #148	; 0x94
 800979c:	3d10      	subs	r5, #16
 800979e:	4623      	mov	r3, r4
 80097a0:	e7b8      	b.n	8009714 <_svfprintf_r+0xe6c>
 80097a2:	bf00      	nop
 80097a4:	0800ffca 	.word	0x0800ffca
 80097a8:	0800ffdc 	.word	0x0800ffdc
 80097ac:	9f05      	ldr	r7, [sp, #20]
 80097ae:	42af      	cmp	r7, r5
 80097b0:	bfa8      	it	ge
 80097b2:	462f      	movge	r7, r5
 80097b4:	2f00      	cmp	r7, #0
 80097b6:	dd0a      	ble.n	80097ce <_svfprintf_r+0xf26>
 80097b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80097ba:	3301      	adds	r3, #1
 80097bc:	443e      	add	r6, r7
 80097be:	2b07      	cmp	r3, #7
 80097c0:	e9c4 9700 	strd	r9, r7, [r4]
 80097c4:	9624      	str	r6, [sp, #144]	; 0x90
 80097c6:	9323      	str	r3, [sp, #140]	; 0x8c
 80097c8:	f300 8085 	bgt.w	80098d6 <_svfprintf_r+0x102e>
 80097cc:	3408      	adds	r4, #8
 80097ce:	2f00      	cmp	r7, #0
 80097d0:	bfac      	ite	ge
 80097d2:	1bee      	subge	r6, r5, r7
 80097d4:	462e      	movlt	r6, r5
 80097d6:	2e00      	cmp	r6, #0
 80097d8:	dd19      	ble.n	800980e <_svfprintf_r+0xf66>
 80097da:	4f97      	ldr	r7, [pc, #604]	; (8009a38 <_svfprintf_r+0x1190>)
 80097dc:	6027      	str	r7, [r4, #0]
 80097de:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80097e2:	2e10      	cmp	r6, #16
 80097e4:	f103 0301 	add.w	r3, r3, #1
 80097e8:	f104 0108 	add.w	r1, r4, #8
 80097ec:	dc7d      	bgt.n	80098ea <_svfprintf_r+0x1042>
 80097ee:	6066      	str	r6, [r4, #4]
 80097f0:	2b07      	cmp	r3, #7
 80097f2:	4416      	add	r6, r2
 80097f4:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80097f8:	f340 808a 	ble.w	8009910 <_svfprintf_r+0x1068>
 80097fc:	aa22      	add	r2, sp, #136	; 0x88
 80097fe:	4641      	mov	r1, r8
 8009800:	4650      	mov	r0, sl
 8009802:	f004 fa97 	bl	800dd34 <__ssprint_r>
 8009806:	2800      	cmp	r0, #0
 8009808:	f040 81d0 	bne.w	8009bac <_svfprintf_r+0x1304>
 800980c:	ac25      	add	r4, sp, #148	; 0x94
 800980e:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8009812:	444d      	add	r5, r9
 8009814:	d00a      	beq.n	800982c <_svfprintf_r+0xf84>
 8009816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009818:	2b00      	cmp	r3, #0
 800981a:	d17b      	bne.n	8009914 <_svfprintf_r+0x106c>
 800981c:	9b08      	ldr	r3, [sp, #32]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d17b      	bne.n	800991a <_svfprintf_r+0x1072>
 8009822:	9b05      	ldr	r3, [sp, #20]
 8009824:	444b      	add	r3, r9
 8009826:	429d      	cmp	r5, r3
 8009828:	bf28      	it	cs
 800982a:	461d      	movcs	r5, r3
 800982c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800982e:	9a05      	ldr	r2, [sp, #20]
 8009830:	4293      	cmp	r3, r2
 8009832:	db02      	blt.n	800983a <_svfprintf_r+0xf92>
 8009834:	f01b 0f01 	tst.w	fp, #1
 8009838:	d00e      	beq.n	8009858 <_svfprintf_r+0xfb0>
 800983a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800983c:	6023      	str	r3, [r4, #0]
 800983e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009840:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009842:	6063      	str	r3, [r4, #4]
 8009844:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009846:	4413      	add	r3, r2
 8009848:	9324      	str	r3, [sp, #144]	; 0x90
 800984a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800984c:	3301      	adds	r3, #1
 800984e:	2b07      	cmp	r3, #7
 8009850:	9323      	str	r3, [sp, #140]	; 0x8c
 8009852:	f300 80dd 	bgt.w	8009a10 <_svfprintf_r+0x1168>
 8009856:	3408      	adds	r4, #8
 8009858:	9b05      	ldr	r3, [sp, #20]
 800985a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800985c:	eb09 0203 	add.w	r2, r9, r3
 8009860:	1b9e      	subs	r6, r3, r6
 8009862:	1b52      	subs	r2, r2, r5
 8009864:	4296      	cmp	r6, r2
 8009866:	bfa8      	it	ge
 8009868:	4616      	movge	r6, r2
 800986a:	2e00      	cmp	r6, #0
 800986c:	dd0b      	ble.n	8009886 <_svfprintf_r+0xfde>
 800986e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009870:	4433      	add	r3, r6
 8009872:	9324      	str	r3, [sp, #144]	; 0x90
 8009874:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009876:	3301      	adds	r3, #1
 8009878:	2b07      	cmp	r3, #7
 800987a:	e9c4 5600 	strd	r5, r6, [r4]
 800987e:	9323      	str	r3, [sp, #140]	; 0x8c
 8009880:	f300 80d0 	bgt.w	8009a24 <_svfprintf_r+0x117c>
 8009884:	3408      	adds	r4, #8
 8009886:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8009888:	9b05      	ldr	r3, [sp, #20]
 800988a:	2e00      	cmp	r6, #0
 800988c:	eba3 0505 	sub.w	r5, r3, r5
 8009890:	bfa8      	it	ge
 8009892:	1bad      	subge	r5, r5, r6
 8009894:	2d00      	cmp	r5, #0
 8009896:	f77f abed 	ble.w	8009074 <_svfprintf_r+0x7cc>
 800989a:	4e67      	ldr	r6, [pc, #412]	; (8009a38 <_svfprintf_r+0x1190>)
 800989c:	2710      	movs	r7, #16
 800989e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80098a2:	2d10      	cmp	r5, #16
 80098a4:	f103 0301 	add.w	r3, r3, #1
 80098a8:	f104 0108 	add.w	r1, r4, #8
 80098ac:	6026      	str	r6, [r4, #0]
 80098ae:	f77f aecf 	ble.w	8009650 <_svfprintf_r+0xda8>
 80098b2:	3210      	adds	r2, #16
 80098b4:	2b07      	cmp	r3, #7
 80098b6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80098ba:	6067      	str	r7, [r4, #4]
 80098bc:	dd08      	ble.n	80098d0 <_svfprintf_r+0x1028>
 80098be:	aa22      	add	r2, sp, #136	; 0x88
 80098c0:	4641      	mov	r1, r8
 80098c2:	4650      	mov	r0, sl
 80098c4:	f004 fa36 	bl	800dd34 <__ssprint_r>
 80098c8:	2800      	cmp	r0, #0
 80098ca:	f040 816f 	bne.w	8009bac <_svfprintf_r+0x1304>
 80098ce:	a925      	add	r1, sp, #148	; 0x94
 80098d0:	3d10      	subs	r5, #16
 80098d2:	460c      	mov	r4, r1
 80098d4:	e7e3      	b.n	800989e <_svfprintf_r+0xff6>
 80098d6:	aa22      	add	r2, sp, #136	; 0x88
 80098d8:	4641      	mov	r1, r8
 80098da:	4650      	mov	r0, sl
 80098dc:	f004 fa2a 	bl	800dd34 <__ssprint_r>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	f040 8163 	bne.w	8009bac <_svfprintf_r+0x1304>
 80098e6:	ac25      	add	r4, sp, #148	; 0x94
 80098e8:	e771      	b.n	80097ce <_svfprintf_r+0xf26>
 80098ea:	2010      	movs	r0, #16
 80098ec:	4402      	add	r2, r0
 80098ee:	2b07      	cmp	r3, #7
 80098f0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80098f4:	6060      	str	r0, [r4, #4]
 80098f6:	dd08      	ble.n	800990a <_svfprintf_r+0x1062>
 80098f8:	aa22      	add	r2, sp, #136	; 0x88
 80098fa:	4641      	mov	r1, r8
 80098fc:	4650      	mov	r0, sl
 80098fe:	f004 fa19 	bl	800dd34 <__ssprint_r>
 8009902:	2800      	cmp	r0, #0
 8009904:	f040 8152 	bne.w	8009bac <_svfprintf_r+0x1304>
 8009908:	a925      	add	r1, sp, #148	; 0x94
 800990a:	3e10      	subs	r6, #16
 800990c:	460c      	mov	r4, r1
 800990e:	e765      	b.n	80097dc <_svfprintf_r+0xf34>
 8009910:	460c      	mov	r4, r1
 8009912:	e77c      	b.n	800980e <_svfprintf_r+0xf66>
 8009914:	9b08      	ldr	r3, [sp, #32]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d04a      	beq.n	80099b0 <_svfprintf_r+0x1108>
 800991a:	9b08      	ldr	r3, [sp, #32]
 800991c:	3b01      	subs	r3, #1
 800991e:	9308      	str	r3, [sp, #32]
 8009920:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009922:	6023      	str	r3, [r4, #0]
 8009924:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009926:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009928:	6063      	str	r3, [r4, #4]
 800992a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800992c:	4413      	add	r3, r2
 800992e:	9324      	str	r3, [sp, #144]	; 0x90
 8009930:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009932:	3301      	adds	r3, #1
 8009934:	2b07      	cmp	r3, #7
 8009936:	9323      	str	r3, [sp, #140]	; 0x8c
 8009938:	dc41      	bgt.n	80099be <_svfprintf_r+0x1116>
 800993a:	3408      	adds	r4, #8
 800993c:	9b05      	ldr	r3, [sp, #20]
 800993e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009940:	eb09 0703 	add.w	r7, r9, r3
 8009944:	1b7b      	subs	r3, r7, r5
 8009946:	7817      	ldrb	r7, [r2, #0]
 8009948:	429f      	cmp	r7, r3
 800994a:	bfa8      	it	ge
 800994c:	461f      	movge	r7, r3
 800994e:	2f00      	cmp	r7, #0
 8009950:	dd0a      	ble.n	8009968 <_svfprintf_r+0x10c0>
 8009952:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009954:	443b      	add	r3, r7
 8009956:	9324      	str	r3, [sp, #144]	; 0x90
 8009958:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800995a:	3301      	adds	r3, #1
 800995c:	2b07      	cmp	r3, #7
 800995e:	e9c4 5700 	strd	r5, r7, [r4]
 8009962:	9323      	str	r3, [sp, #140]	; 0x8c
 8009964:	dc35      	bgt.n	80099d2 <_svfprintf_r+0x112a>
 8009966:	3408      	adds	r4, #8
 8009968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800996a:	781e      	ldrb	r6, [r3, #0]
 800996c:	2f00      	cmp	r7, #0
 800996e:	bfa8      	it	ge
 8009970:	1bf6      	subge	r6, r6, r7
 8009972:	2e00      	cmp	r6, #0
 8009974:	dd18      	ble.n	80099a8 <_svfprintf_r+0x1100>
 8009976:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800997a:	482f      	ldr	r0, [pc, #188]	; (8009a38 <_svfprintf_r+0x1190>)
 800997c:	6020      	str	r0, [r4, #0]
 800997e:	2e10      	cmp	r6, #16
 8009980:	f103 0301 	add.w	r3, r3, #1
 8009984:	f104 0108 	add.w	r1, r4, #8
 8009988:	dc2d      	bgt.n	80099e6 <_svfprintf_r+0x113e>
 800998a:	4432      	add	r2, r6
 800998c:	2b07      	cmp	r3, #7
 800998e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009992:	6066      	str	r6, [r4, #4]
 8009994:	dd3a      	ble.n	8009a0c <_svfprintf_r+0x1164>
 8009996:	aa22      	add	r2, sp, #136	; 0x88
 8009998:	4641      	mov	r1, r8
 800999a:	4650      	mov	r0, sl
 800999c:	f004 f9ca 	bl	800dd34 <__ssprint_r>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	f040 8103 	bne.w	8009bac <_svfprintf_r+0x1304>
 80099a6:	ac25      	add	r4, sp, #148	; 0x94
 80099a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	441d      	add	r5, r3
 80099ae:	e732      	b.n	8009816 <_svfprintf_r+0xf6e>
 80099b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099b2:	3b01      	subs	r3, #1
 80099b4:	930a      	str	r3, [sp, #40]	; 0x28
 80099b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b8:	3b01      	subs	r3, #1
 80099ba:	9309      	str	r3, [sp, #36]	; 0x24
 80099bc:	e7b0      	b.n	8009920 <_svfprintf_r+0x1078>
 80099be:	aa22      	add	r2, sp, #136	; 0x88
 80099c0:	4641      	mov	r1, r8
 80099c2:	4650      	mov	r0, sl
 80099c4:	f004 f9b6 	bl	800dd34 <__ssprint_r>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	f040 80ef 	bne.w	8009bac <_svfprintf_r+0x1304>
 80099ce:	ac25      	add	r4, sp, #148	; 0x94
 80099d0:	e7b4      	b.n	800993c <_svfprintf_r+0x1094>
 80099d2:	aa22      	add	r2, sp, #136	; 0x88
 80099d4:	4641      	mov	r1, r8
 80099d6:	4650      	mov	r0, sl
 80099d8:	f004 f9ac 	bl	800dd34 <__ssprint_r>
 80099dc:	2800      	cmp	r0, #0
 80099de:	f040 80e5 	bne.w	8009bac <_svfprintf_r+0x1304>
 80099e2:	ac25      	add	r4, sp, #148	; 0x94
 80099e4:	e7c0      	b.n	8009968 <_svfprintf_r+0x10c0>
 80099e6:	2010      	movs	r0, #16
 80099e8:	4402      	add	r2, r0
 80099ea:	2b07      	cmp	r3, #7
 80099ec:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80099f0:	6060      	str	r0, [r4, #4]
 80099f2:	dd08      	ble.n	8009a06 <_svfprintf_r+0x115e>
 80099f4:	aa22      	add	r2, sp, #136	; 0x88
 80099f6:	4641      	mov	r1, r8
 80099f8:	4650      	mov	r0, sl
 80099fa:	f004 f99b 	bl	800dd34 <__ssprint_r>
 80099fe:	2800      	cmp	r0, #0
 8009a00:	f040 80d4 	bne.w	8009bac <_svfprintf_r+0x1304>
 8009a04:	a925      	add	r1, sp, #148	; 0x94
 8009a06:	3e10      	subs	r6, #16
 8009a08:	460c      	mov	r4, r1
 8009a0a:	e7b4      	b.n	8009976 <_svfprintf_r+0x10ce>
 8009a0c:	460c      	mov	r4, r1
 8009a0e:	e7cb      	b.n	80099a8 <_svfprintf_r+0x1100>
 8009a10:	aa22      	add	r2, sp, #136	; 0x88
 8009a12:	4641      	mov	r1, r8
 8009a14:	4650      	mov	r0, sl
 8009a16:	f004 f98d 	bl	800dd34 <__ssprint_r>
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	f040 80c6 	bne.w	8009bac <_svfprintf_r+0x1304>
 8009a20:	ac25      	add	r4, sp, #148	; 0x94
 8009a22:	e719      	b.n	8009858 <_svfprintf_r+0xfb0>
 8009a24:	aa22      	add	r2, sp, #136	; 0x88
 8009a26:	4641      	mov	r1, r8
 8009a28:	4650      	mov	r0, sl
 8009a2a:	f004 f983 	bl	800dd34 <__ssprint_r>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	f040 80bc 	bne.w	8009bac <_svfprintf_r+0x1304>
 8009a34:	ac25      	add	r4, sp, #148	; 0x94
 8009a36:	e726      	b.n	8009886 <_svfprintf_r+0xfde>
 8009a38:	0800ffdc 	.word	0x0800ffdc
 8009a3c:	9a05      	ldr	r2, [sp, #20]
 8009a3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a40:	2a01      	cmp	r2, #1
 8009a42:	f106 0601 	add.w	r6, r6, #1
 8009a46:	f103 0301 	add.w	r3, r3, #1
 8009a4a:	f104 0508 	add.w	r5, r4, #8
 8009a4e:	dc02      	bgt.n	8009a56 <_svfprintf_r+0x11ae>
 8009a50:	f01b 0f01 	tst.w	fp, #1
 8009a54:	d07e      	beq.n	8009b54 <_svfprintf_r+0x12ac>
 8009a56:	2201      	movs	r2, #1
 8009a58:	2b07      	cmp	r3, #7
 8009a5a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8009a5e:	f8c4 9000 	str.w	r9, [r4]
 8009a62:	6062      	str	r2, [r4, #4]
 8009a64:	dd08      	ble.n	8009a78 <_svfprintf_r+0x11d0>
 8009a66:	aa22      	add	r2, sp, #136	; 0x88
 8009a68:	4641      	mov	r1, r8
 8009a6a:	4650      	mov	r0, sl
 8009a6c:	f004 f962 	bl	800dd34 <__ssprint_r>
 8009a70:	2800      	cmp	r0, #0
 8009a72:	f040 809b 	bne.w	8009bac <_svfprintf_r+0x1304>
 8009a76:	ad25      	add	r5, sp, #148	; 0x94
 8009a78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a7a:	602b      	str	r3, [r5, #0]
 8009a7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a80:	606b      	str	r3, [r5, #4]
 8009a82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009a84:	4413      	add	r3, r2
 8009a86:	9324      	str	r3, [sp, #144]	; 0x90
 8009a88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	2b07      	cmp	r3, #7
 8009a8e:	9323      	str	r3, [sp, #140]	; 0x8c
 8009a90:	dc32      	bgt.n	8009af8 <_svfprintf_r+0x1250>
 8009a92:	3508      	adds	r5, #8
 8009a94:	9b05      	ldr	r3, [sp, #20]
 8009a96:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009a9a:	1e5c      	subs	r4, r3, #1
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	f7f7 f81a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d130      	bne.n	8009b0a <_svfprintf_r+0x1262>
 8009aa8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8009aaa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009aac:	9a05      	ldr	r2, [sp, #20]
 8009aae:	3101      	adds	r1, #1
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	f109 0001 	add.w	r0, r9, #1
 8009ab6:	4413      	add	r3, r2
 8009ab8:	2907      	cmp	r1, #7
 8009aba:	e9c5 0400 	strd	r0, r4, [r5]
 8009abe:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 8009ac2:	dd50      	ble.n	8009b66 <_svfprintf_r+0x12be>
 8009ac4:	aa22      	add	r2, sp, #136	; 0x88
 8009ac6:	4641      	mov	r1, r8
 8009ac8:	4650      	mov	r0, sl
 8009aca:	f004 f933 	bl	800dd34 <__ssprint_r>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d16c      	bne.n	8009bac <_svfprintf_r+0x1304>
 8009ad2:	ad25      	add	r5, sp, #148	; 0x94
 8009ad4:	ab1e      	add	r3, sp, #120	; 0x78
 8009ad6:	602b      	str	r3, [r5, #0]
 8009ad8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ada:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009adc:	606b      	str	r3, [r5, #4]
 8009ade:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009ae0:	4413      	add	r3, r2
 8009ae2:	9324      	str	r3, [sp, #144]	; 0x90
 8009ae4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	2b07      	cmp	r3, #7
 8009aea:	9323      	str	r3, [sp, #140]	; 0x8c
 8009aec:	f73f adb7 	bgt.w	800965e <_svfprintf_r+0xdb6>
 8009af0:	f105 0408 	add.w	r4, r5, #8
 8009af4:	f7ff babe 	b.w	8009074 <_svfprintf_r+0x7cc>
 8009af8:	aa22      	add	r2, sp, #136	; 0x88
 8009afa:	4641      	mov	r1, r8
 8009afc:	4650      	mov	r0, sl
 8009afe:	f004 f919 	bl	800dd34 <__ssprint_r>
 8009b02:	2800      	cmp	r0, #0
 8009b04:	d152      	bne.n	8009bac <_svfprintf_r+0x1304>
 8009b06:	ad25      	add	r5, sp, #148	; 0x94
 8009b08:	e7c4      	b.n	8009a94 <_svfprintf_r+0x11ec>
 8009b0a:	2c00      	cmp	r4, #0
 8009b0c:	dde2      	ble.n	8009ad4 <_svfprintf_r+0x122c>
 8009b0e:	4e56      	ldr	r6, [pc, #344]	; (8009c68 <_svfprintf_r+0x13c0>)
 8009b10:	2710      	movs	r7, #16
 8009b12:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009b16:	2c10      	cmp	r4, #16
 8009b18:	f103 0301 	add.w	r3, r3, #1
 8009b1c:	f105 0108 	add.w	r1, r5, #8
 8009b20:	602e      	str	r6, [r5, #0]
 8009b22:	dc07      	bgt.n	8009b34 <_svfprintf_r+0x128c>
 8009b24:	606c      	str	r4, [r5, #4]
 8009b26:	2b07      	cmp	r3, #7
 8009b28:	4414      	add	r4, r2
 8009b2a:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8009b2e:	dcc9      	bgt.n	8009ac4 <_svfprintf_r+0x121c>
 8009b30:	460d      	mov	r5, r1
 8009b32:	e7cf      	b.n	8009ad4 <_svfprintf_r+0x122c>
 8009b34:	3210      	adds	r2, #16
 8009b36:	2b07      	cmp	r3, #7
 8009b38:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009b3c:	606f      	str	r7, [r5, #4]
 8009b3e:	dd06      	ble.n	8009b4e <_svfprintf_r+0x12a6>
 8009b40:	aa22      	add	r2, sp, #136	; 0x88
 8009b42:	4641      	mov	r1, r8
 8009b44:	4650      	mov	r0, sl
 8009b46:	f004 f8f5 	bl	800dd34 <__ssprint_r>
 8009b4a:	bb78      	cbnz	r0, 8009bac <_svfprintf_r+0x1304>
 8009b4c:	a925      	add	r1, sp, #148	; 0x94
 8009b4e:	3c10      	subs	r4, #16
 8009b50:	460d      	mov	r5, r1
 8009b52:	e7de      	b.n	8009b12 <_svfprintf_r+0x126a>
 8009b54:	2201      	movs	r2, #1
 8009b56:	2b07      	cmp	r3, #7
 8009b58:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8009b5c:	f8c4 9000 	str.w	r9, [r4]
 8009b60:	6062      	str	r2, [r4, #4]
 8009b62:	ddb7      	ble.n	8009ad4 <_svfprintf_r+0x122c>
 8009b64:	e7ae      	b.n	8009ac4 <_svfprintf_r+0x121c>
 8009b66:	3508      	adds	r5, #8
 8009b68:	e7b4      	b.n	8009ad4 <_svfprintf_r+0x122c>
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	f7ff ba82 	b.w	8009074 <_svfprintf_r+0x7cc>
 8009b70:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8009b74:	1a9d      	subs	r5, r3, r2
 8009b76:	2d00      	cmp	r5, #0
 8009b78:	f77f aa80 	ble.w	800907c <_svfprintf_r+0x7d4>
 8009b7c:	4e3b      	ldr	r6, [pc, #236]	; (8009c6c <_svfprintf_r+0x13c4>)
 8009b7e:	2710      	movs	r7, #16
 8009b80:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009b84:	2d10      	cmp	r5, #16
 8009b86:	f103 0301 	add.w	r3, r3, #1
 8009b8a:	6026      	str	r6, [r4, #0]
 8009b8c:	dc18      	bgt.n	8009bc0 <_svfprintf_r+0x1318>
 8009b8e:	6065      	str	r5, [r4, #4]
 8009b90:	2b07      	cmp	r3, #7
 8009b92:	4415      	add	r5, r2
 8009b94:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8009b98:	f77f aa70 	ble.w	800907c <_svfprintf_r+0x7d4>
 8009b9c:	aa22      	add	r2, sp, #136	; 0x88
 8009b9e:	4641      	mov	r1, r8
 8009ba0:	4650      	mov	r0, sl
 8009ba2:	f004 f8c7 	bl	800dd34 <__ssprint_r>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	f43f aa68 	beq.w	800907c <_svfprintf_r+0x7d4>
 8009bac:	9b03      	ldr	r3, [sp, #12]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f43f a887 	beq.w	8008cc2 <_svfprintf_r+0x41a>
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	4650      	mov	r0, sl
 8009bb8:	f002 f908 	bl	800bdcc <_free_r>
 8009bbc:	f7ff b881 	b.w	8008cc2 <_svfprintf_r+0x41a>
 8009bc0:	3210      	adds	r2, #16
 8009bc2:	2b07      	cmp	r3, #7
 8009bc4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009bc8:	6067      	str	r7, [r4, #4]
 8009bca:	dc02      	bgt.n	8009bd2 <_svfprintf_r+0x132a>
 8009bcc:	3408      	adds	r4, #8
 8009bce:	3d10      	subs	r5, #16
 8009bd0:	e7d6      	b.n	8009b80 <_svfprintf_r+0x12d8>
 8009bd2:	aa22      	add	r2, sp, #136	; 0x88
 8009bd4:	4641      	mov	r1, r8
 8009bd6:	4650      	mov	r0, sl
 8009bd8:	f004 f8ac 	bl	800dd34 <__ssprint_r>
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d1e5      	bne.n	8009bac <_svfprintf_r+0x1304>
 8009be0:	ac25      	add	r4, sp, #148	; 0x94
 8009be2:	e7f4      	b.n	8009bce <_svfprintf_r+0x1326>
 8009be4:	9903      	ldr	r1, [sp, #12]
 8009be6:	4650      	mov	r0, sl
 8009be8:	f002 f8f0 	bl	800bdcc <_free_r>
 8009bec:	f7ff ba5e 	b.w	80090ac <_svfprintf_r+0x804>
 8009bf0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f43f a865 	beq.w	8008cc2 <_svfprintf_r+0x41a>
 8009bf8:	aa22      	add	r2, sp, #136	; 0x88
 8009bfa:	4641      	mov	r1, r8
 8009bfc:	4650      	mov	r0, sl
 8009bfe:	f004 f899 	bl	800dd34 <__ssprint_r>
 8009c02:	f7ff b85e 	b.w	8008cc2 <_svfprintf_r+0x41a>
 8009c06:	ea56 0205 	orrs.w	r2, r6, r5
 8009c0a:	465f      	mov	r7, fp
 8009c0c:	f43f ab78 	beq.w	8009300 <_svfprintf_r+0xa58>
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	f43f ac15 	beq.w	8009440 <_svfprintf_r+0xb98>
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 8009c1c:	f43f ac5b 	beq.w	80094d6 <_svfprintf_r+0xc2e>
 8009c20:	f006 0307 	and.w	r3, r6, #7
 8009c24:	08f6      	lsrs	r6, r6, #3
 8009c26:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 8009c2a:	08ed      	lsrs	r5, r5, #3
 8009c2c:	3330      	adds	r3, #48	; 0x30
 8009c2e:	ea56 0105 	orrs.w	r1, r6, r5
 8009c32:	464a      	mov	r2, r9
 8009c34:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8009c38:	d1f2      	bne.n	8009c20 <_svfprintf_r+0x1378>
 8009c3a:	07f9      	lsls	r1, r7, #31
 8009c3c:	d506      	bpl.n	8009c4c <_svfprintf_r+0x13a4>
 8009c3e:	2b30      	cmp	r3, #48	; 0x30
 8009c40:	d004      	beq.n	8009c4c <_svfprintf_r+0x13a4>
 8009c42:	2330      	movs	r3, #48	; 0x30
 8009c44:	f809 3c01 	strb.w	r3, [r9, #-1]
 8009c48:	f1a2 0902 	sub.w	r9, r2, #2
 8009c4c:	ab4e      	add	r3, sp, #312	; 0x138
 8009c4e:	eba3 0309 	sub.w	r3, r3, r9
 8009c52:	9e04      	ldr	r6, [sp, #16]
 8009c54:	9304      	str	r3, [sp, #16]
 8009c56:	2300      	movs	r3, #0
 8009c58:	46bb      	mov	fp, r7
 8009c5a:	9303      	str	r3, [sp, #12]
 8009c5c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8009c60:	461d      	mov	r5, r3
 8009c62:	f7ff b94d 	b.w	8008f00 <_svfprintf_r+0x658>
 8009c66:	bf00      	nop
 8009c68:	0800ffdc 	.word	0x0800ffdc
 8009c6c:	0800ffcc 	.word	0x0800ffcc

08009c70 <__ssvfscanf_r>:
 8009c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c74:	ed2d 8b02 	vpush	{d8}
 8009c78:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 8009c7c:	461e      	mov	r6, r3
 8009c7e:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8009c82:	af02      	add	r7, sp, #8
 8009c84:	049d      	lsls	r5, r3, #18
 8009c86:	ee08 0a10 	vmov	s16, r0
 8009c8a:	460c      	mov	r4, r1
 8009c8c:	617a      	str	r2, [r7, #20]
 8009c8e:	d406      	bmi.n	8009c9e <__ssvfscanf_r+0x2e>
 8009c90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009c94:	818b      	strh	r3, [r1, #12]
 8009c96:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8009c98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c9c:	664b      	str	r3, [r1, #100]	; 0x64
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8009ca4:	61bb      	str	r3, [r7, #24]
 8009ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009caa:	627b      	str	r3, [r7, #36]	; 0x24
 8009cac:	697a      	ldr	r2, [r7, #20]
 8009cae:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009cb2:	617a      	str	r2, [r7, #20]
 8009cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f000 80d6 	beq.w	8009e68 <__ssvfscanf_r+0x1f8>
 8009cbc:	4a85      	ldr	r2, [pc, #532]	; (8009ed4 <__ssvfscanf_r+0x264>)
 8009cbe:	f813 8002 	ldrb.w	r8, [r3, r2]
 8009cc2:	f018 0808 	ands.w	r8, r8, #8
 8009cc6:	d019      	beq.n	8009cfc <__ssvfscanf_r+0x8c>
 8009cc8:	6863      	ldr	r3, [r4, #4]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	dd0e      	ble.n	8009cec <__ssvfscanf_r+0x7c>
 8009cce:	6823      	ldr	r3, [r4, #0]
 8009cd0:	4980      	ldr	r1, [pc, #512]	; (8009ed4 <__ssvfscanf_r+0x264>)
 8009cd2:	781a      	ldrb	r2, [r3, #0]
 8009cd4:	5c8a      	ldrb	r2, [r1, r2]
 8009cd6:	0710      	lsls	r0, r2, #28
 8009cd8:	d5e8      	bpl.n	8009cac <__ssvfscanf_r+0x3c>
 8009cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cdc:	3201      	adds	r2, #1
 8009cde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ce0:	6862      	ldr	r2, [r4, #4]
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	3a01      	subs	r2, #1
 8009ce6:	6062      	str	r2, [r4, #4]
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	e7ed      	b.n	8009cc8 <__ssvfscanf_r+0x58>
 8009cec:	ee18 0a10 	vmov	r0, s16
 8009cf0:	4621      	mov	r1, r4
 8009cf2:	f004 f8d7 	bl	800dea4 <__ssrefill_r>
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	d0e9      	beq.n	8009cce <__ssvfscanf_r+0x5e>
 8009cfa:	e7d7      	b.n	8009cac <__ssvfscanf_r+0x3c>
 8009cfc:	2b25      	cmp	r3, #37	; 0x25
 8009cfe:	d165      	bne.n	8009dcc <__ssvfscanf_r+0x15c>
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 8009d06:	46c1      	mov	r9, r8
 8009d08:	220a      	movs	r2, #10
 8009d0a:	6979      	ldr	r1, [r7, #20]
 8009d0c:	781d      	ldrb	r5, [r3, #0]
 8009d0e:	3101      	adds	r1, #1
 8009d10:	6179      	str	r1, [r7, #20]
 8009d12:	f1a5 0125 	sub.w	r1, r5, #37	; 0x25
 8009d16:	2955      	cmp	r1, #85	; 0x55
 8009d18:	f200 816e 	bhi.w	8009ff8 <__ssvfscanf_r+0x388>
 8009d1c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009d20:	016c0056 	.word	0x016c0056
 8009d24:	016c016c 	.word	0x016c016c
 8009d28:	007d016c 	.word	0x007d016c
 8009d2c:	016c016c 	.word	0x016c016c
 8009d30:	016c016c 	.word	0x016c016c
 8009d34:	00ba016c 	.word	0x00ba016c
 8009d38:	00ba00ba 	.word	0x00ba00ba
 8009d3c:	00ba00ba 	.word	0x00ba00ba
 8009d40:	00ba00ba 	.word	0x00ba00ba
 8009d44:	00ba00ba 	.word	0x00ba00ba
 8009d48:	016c00ba 	.word	0x016c00ba
 8009d4c:	016c016c 	.word	0x016c016c
 8009d50:	016c016c 	.word	0x016c016c
 8009d54:	016c016c 	.word	0x016c016c
 8009d58:	016c00e0 	.word	0x016c00e0
 8009d5c:	00c40104 	.word	0x00c40104
 8009d60:	00e000e0 	.word	0x00e000e0
 8009d64:	016c00e0 	.word	0x016c00e0
 8009d68:	016c016c 	.word	0x016c016c
 8009d6c:	00a1016c 	.word	0x00a1016c
 8009d70:	016c016c 	.word	0x016c016c
 8009d74:	016c00c8 	.word	0x016c00c8
 8009d78:	016c016c 	.word	0x016c016c
 8009d7c:	016c00f6 	.word	0x016c00f6
 8009d80:	016c016c 	.word	0x016c016c
 8009d84:	00d4016c 	.word	0x00d4016c
 8009d88:	016c016c 	.word	0x016c016c
 8009d8c:	016c00fa 	.word	0x016c00fa
 8009d90:	016c016c 	.word	0x016c016c
 8009d94:	016c016c 	.word	0x016c016c
 8009d98:	016c00e0 	.word	0x016c00e0
 8009d9c:	00c60106 	.word	0x00c60106
 8009da0:	00e000e0 	.word	0x00e000e0
 8009da4:	009400e0 	.word	0x009400e0
 8009da8:	00a1012e 	.word	0x00a1012e
 8009dac:	0086016c 	.word	0x0086016c
 8009db0:	010d00ad 	.word	0x010d00ad
 8009db4:	010a00ca 	.word	0x010a00ca
 8009db8:	016c016c 	.word	0x016c016c
 8009dbc:	00a900f8 	.word	0x00a900f8
 8009dc0:	016c00d0 	.word	0x016c00d0
 8009dc4:	00d4016c 	.word	0x00d4016c
 8009dc8:	00a9016c 	.word	0x00a9016c
 8009dcc:	6863      	ldr	r3, [r4, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	dd0f      	ble.n	8009df2 <__ssvfscanf_r+0x182>
 8009dd2:	6823      	ldr	r3, [r4, #0]
 8009dd4:	697a      	ldr	r2, [r7, #20]
 8009dd6:	7819      	ldrb	r1, [r3, #0]
 8009dd8:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8009ddc:	4291      	cmp	r1, r2
 8009dde:	d143      	bne.n	8009e68 <__ssvfscanf_r+0x1f8>
 8009de0:	6862      	ldr	r2, [r4, #4]
 8009de2:	3301      	adds	r3, #1
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de8:	3a01      	subs	r2, #1
 8009dea:	6062      	str	r2, [r4, #4]
 8009dec:	3301      	adds	r3, #1
 8009dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009df0:	e75c      	b.n	8009cac <__ssvfscanf_r+0x3c>
 8009df2:	ee18 0a10 	vmov	r0, s16
 8009df6:	4621      	mov	r1, r4
 8009df8:	f004 f854 	bl	800dea4 <__ssrefill_r>
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	d0e8      	beq.n	8009dd2 <__ssvfscanf_r+0x162>
 8009e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e02:	b113      	cbz	r3, 8009e0a <__ssvfscanf_r+0x19a>
 8009e04:	89a3      	ldrh	r3, [r4, #12]
 8009e06:	065b      	lsls	r3, r3, #25
 8009e08:	d52e      	bpl.n	8009e68 <__ssvfscanf_r+0x1f8>
 8009e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f040 80f8 	bne.w	800a002 <__ssvfscanf_r+0x392>
 8009e12:	f04f 33ff 	mov.w	r3, #4294967295
 8009e16:	627b      	str	r3, [r7, #36]	; 0x24
 8009e18:	e103      	b.n	800a022 <__ssvfscanf_r+0x3b2>
 8009e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1c:	ea53 0309 	orrs.w	r3, r3, r9
 8009e20:	633b      	str	r3, [r7, #48]	; 0x30
 8009e22:	d121      	bne.n	8009e68 <__ssvfscanf_r+0x1f8>
 8009e24:	f04f 0910 	mov.w	r9, #16
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	e76e      	b.n	8009d0a <__ssvfscanf_r+0x9a>
 8009e2c:	f019 0f0f 	tst.w	r9, #15
 8009e30:	d11a      	bne.n	8009e68 <__ssvfscanf_r+0x1f8>
 8009e32:	7859      	ldrb	r1, [r3, #1]
 8009e34:	296c      	cmp	r1, #108	; 0x6c
 8009e36:	d104      	bne.n	8009e42 <__ssvfscanf_r+0x1d2>
 8009e38:	3302      	adds	r3, #2
 8009e3a:	617b      	str	r3, [r7, #20]
 8009e3c:	f049 0902 	orr.w	r9, r9, #2
 8009e40:	e7f2      	b.n	8009e28 <__ssvfscanf_r+0x1b8>
 8009e42:	f049 0901 	orr.w	r9, r9, #1
 8009e46:	e7ef      	b.n	8009e28 <__ssvfscanf_r+0x1b8>
 8009e48:	f019 0f0f 	tst.w	r9, #15
 8009e4c:	d10c      	bne.n	8009e68 <__ssvfscanf_r+0x1f8>
 8009e4e:	7859      	ldrb	r1, [r3, #1]
 8009e50:	2968      	cmp	r1, #104	; 0x68
 8009e52:	bf03      	ittte	eq
 8009e54:	3302      	addeq	r3, #2
 8009e56:	617b      	streq	r3, [r7, #20]
 8009e58:	f049 0908 	orreq.w	r9, r9, #8
 8009e5c:	f049 0904 	orrne.w	r9, r9, #4
 8009e60:	e7e2      	b.n	8009e28 <__ssvfscanf_r+0x1b8>
 8009e62:	f019 0f0f 	tst.w	r9, #15
 8009e66:	d0e9      	beq.n	8009e3c <__ssvfscanf_r+0x1cc>
 8009e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f040 80d4 	bne.w	800a018 <__ssvfscanf_r+0x3a8>
 8009e70:	e0d7      	b.n	800a022 <__ssvfscanf_r+0x3b2>
 8009e72:	f019 0f0f 	tst.w	r9, #15
 8009e76:	d0d7      	beq.n	8009e28 <__ssvfscanf_r+0x1b8>
 8009e78:	e7f6      	b.n	8009e68 <__ssvfscanf_r+0x1f8>
 8009e7a:	f019 038f 	ands.w	r3, r9, #143	; 0x8f
 8009e7e:	d1f3      	bne.n	8009e68 <__ssvfscanf_r+0x1f8>
 8009e80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009e82:	b921      	cbnz	r1, 8009e8e <__ssvfscanf_r+0x21e>
 8009e84:	b082      	sub	sp, #8
 8009e86:	a902      	add	r1, sp, #8
 8009e88:	e9c1 3300 	strd	r3, r3, [r1]
 8009e8c:	6379      	str	r1, [r7, #52]	; 0x34
 8009e8e:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 8009e92:	e7c9      	b.n	8009e28 <__ssvfscanf_r+0x1b8>
 8009e94:	f019 0f8f 	tst.w	r9, #143	; 0x8f
 8009e98:	d1e6      	bne.n	8009e68 <__ssvfscanf_r+0x1f8>
 8009e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9c:	fb02 5503 	mla	r5, r2, r3, r5
 8009ea0:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8009ea6:	e7bf      	b.n	8009e28 <__ssvfscanf_r+0x1b8>
 8009ea8:	f049 0901 	orr.w	r9, r9, #1
 8009eac:	4b0a      	ldr	r3, [pc, #40]	; (8009ed8 <__ssvfscanf_r+0x268>)
 8009eae:	e008      	b.n	8009ec2 <__ssvfscanf_r+0x252>
 8009eb0:	f049 0901 	orr.w	r9, r9, #1
 8009eb4:	4b09      	ldr	r3, [pc, #36]	; (8009edc <__ssvfscanf_r+0x26c>)
 8009eb6:	61bb      	str	r3, [r7, #24]
 8009eb8:	2308      	movs	r3, #8
 8009eba:	61fb      	str	r3, [r7, #28]
 8009ebc:	2503      	movs	r5, #3
 8009ebe:	e010      	b.n	8009ee2 <__ssvfscanf_r+0x272>
 8009ec0:	4b06      	ldr	r3, [pc, #24]	; (8009edc <__ssvfscanf_r+0x26c>)
 8009ec2:	61bb      	str	r3, [r7, #24]
 8009ec4:	230a      	movs	r3, #10
 8009ec6:	e7f8      	b.n	8009eba <__ssvfscanf_r+0x24a>
 8009ec8:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 8009ecc:	4b03      	ldr	r3, [pc, #12]	; (8009edc <__ssvfscanf_r+0x26c>)
 8009ece:	61bb      	str	r3, [r7, #24]
 8009ed0:	2310      	movs	r3, #16
 8009ed2:	e7f2      	b.n	8009eba <__ssvfscanf_r+0x24a>
 8009ed4:	08010015 	.word	0x08010015
 8009ed8:	08008891 	.word	0x08008891
 8009edc:	0800dbfd 	.word	0x0800dbfd
 8009ee0:	2504      	movs	r5, #4
 8009ee2:	6863      	ldr	r3, [r4, #4]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	dd4d      	ble.n	8009f84 <__ssvfscanf_r+0x314>
 8009ee8:	f019 0f40 	tst.w	r9, #64	; 0x40
 8009eec:	d105      	bne.n	8009efa <__ssvfscanf_r+0x28a>
 8009eee:	6823      	ldr	r3, [r4, #0]
 8009ef0:	49a9      	ldr	r1, [pc, #676]	; (800a198 <__ssvfscanf_r+0x528>)
 8009ef2:	781a      	ldrb	r2, [r3, #0]
 8009ef4:	5c52      	ldrb	r2, [r2, r1]
 8009ef6:	0711      	lsls	r1, r2, #28
 8009ef8:	d44c      	bmi.n	8009f94 <__ssvfscanf_r+0x324>
 8009efa:	3d01      	subs	r5, #1
 8009efc:	2d03      	cmp	r5, #3
 8009efe:	d85c      	bhi.n	8009fba <__ssvfscanf_r+0x34a>
 8009f00:	e8df f015 	tbh	[pc, r5, lsl #1]
 8009f04:	039201d4 	.word	0x039201d4
 8009f08:	062b0538 	.word	0x062b0538
 8009f0c:	f049 0901 	orr.w	r9, r9, #1
 8009f10:	2502      	movs	r5, #2
 8009f12:	e7e6      	b.n	8009ee2 <__ssvfscanf_r+0x272>
 8009f14:	6979      	ldr	r1, [r7, #20]
 8009f16:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8009f1a:	f002 fee9 	bl	800ccf0 <__sccl>
 8009f1e:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 8009f22:	6178      	str	r0, [r7, #20]
 8009f24:	2501      	movs	r5, #1
 8009f26:	e7dc      	b.n	8009ee2 <__ssvfscanf_r+0x272>
 8009f28:	f049 0901 	orr.w	r9, r9, #1
 8009f2c:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 8009f30:	2500      	movs	r5, #0
 8009f32:	e7d6      	b.n	8009ee2 <__ssvfscanf_r+0x272>
 8009f34:	f449 7908 	orr.w	r9, r9, #544	; 0x220
 8009f38:	e7c8      	b.n	8009ecc <__ssvfscanf_r+0x25c>
 8009f3a:	f019 0f10 	tst.w	r9, #16
 8009f3e:	f47f aeb5 	bne.w	8009cac <__ssvfscanf_r+0x3c>
 8009f42:	f019 0f08 	tst.w	r9, #8
 8009f46:	f856 3b04 	ldr.w	r3, [r6], #4
 8009f4a:	d002      	beq.n	8009f52 <__ssvfscanf_r+0x2e2>
 8009f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f4e:	701a      	strb	r2, [r3, #0]
 8009f50:	e6ac      	b.n	8009cac <__ssvfscanf_r+0x3c>
 8009f52:	f019 0f04 	tst.w	r9, #4
 8009f56:	d002      	beq.n	8009f5e <__ssvfscanf_r+0x2ee>
 8009f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f5a:	801a      	strh	r2, [r3, #0]
 8009f5c:	e6a6      	b.n	8009cac <__ssvfscanf_r+0x3c>
 8009f5e:	f019 0f01 	tst.w	r9, #1
 8009f62:	d002      	beq.n	8009f6a <__ssvfscanf_r+0x2fa>
 8009f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f66:	601a      	str	r2, [r3, #0]
 8009f68:	e6a0      	b.n	8009cac <__ssvfscanf_r+0x3c>
 8009f6a:	f019 0f02 	tst.w	r9, #2
 8009f6e:	d0f9      	beq.n	8009f64 <__ssvfscanf_r+0x2f4>
 8009f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f74:	17d2      	asrs	r2, r2, #31
 8009f76:	e9c3 1200 	strd	r1, r2, [r3]
 8009f7a:	e697      	b.n	8009cac <__ssvfscanf_r+0x3c>
 8009f7c:	4b87      	ldr	r3, [pc, #540]	; (800a19c <__ssvfscanf_r+0x52c>)
 8009f7e:	61bb      	str	r3, [r7, #24]
 8009f80:	2300      	movs	r3, #0
 8009f82:	e79a      	b.n	8009eba <__ssvfscanf_r+0x24a>
 8009f84:	ee18 0a10 	vmov	r0, s16
 8009f88:	4621      	mov	r1, r4
 8009f8a:	f003 ff8b 	bl	800dea4 <__ssrefill_r>
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	d0aa      	beq.n	8009ee8 <__ssvfscanf_r+0x278>
 8009f92:	e735      	b.n	8009e00 <__ssvfscanf_r+0x190>
 8009f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f96:	3201      	adds	r2, #1
 8009f98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f9a:	6862      	ldr	r2, [r4, #4]
 8009f9c:	3a01      	subs	r2, #1
 8009f9e:	2a00      	cmp	r2, #0
 8009fa0:	6062      	str	r2, [r4, #4]
 8009fa2:	dd02      	ble.n	8009faa <__ssvfscanf_r+0x33a>
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	6023      	str	r3, [r4, #0]
 8009fa8:	e7a1      	b.n	8009eee <__ssvfscanf_r+0x27e>
 8009faa:	ee18 0a10 	vmov	r0, s16
 8009fae:	4621      	mov	r1, r4
 8009fb0:	f003 ff78 	bl	800dea4 <__ssrefill_r>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d09a      	beq.n	8009eee <__ssvfscanf_r+0x27e>
 8009fb8:	e722      	b.n	8009e00 <__ssvfscanf_r+0x190>
 8009fba:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8009fbc:	2d01      	cmp	r5, #1
 8009fbe:	bf38      	it	cc
 8009fc0:	2501      	movcc	r5, #1
 8009fc2:	f019 0801 	ands.w	r8, r9, #1
 8009fc6:	f009 0b10 	and.w	fp, r9, #16
 8009fca:	f000 80f7 	beq.w	800a1bc <__ssvfscanf_r+0x54c>
 8009fce:	f1bb 0f00 	cmp.w	fp, #0
 8009fd2:	f040 80b5 	bne.w	800a140 <__ssvfscanf_r+0x4d0>
 8009fd6:	4633      	mov	r3, r6
 8009fd8:	f019 0f80 	tst.w	r9, #128	; 0x80
 8009fdc:	f853 6b04 	ldr.w	r6, [r3], #4
 8009fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8009fe2:	f000 80b4 	beq.w	800a14e <__ssvfscanf_r+0x4de>
 8009fe6:	b13e      	cbz	r6, 8009ff8 <__ssvfscanf_r+0x388>
 8009fe8:	2080      	movs	r0, #128	; 0x80
 8009fea:	f7fe f8b9 	bl	8008160 <malloc>
 8009fee:	4680      	mov	r8, r0
 8009ff0:	b9f8      	cbnz	r0, 800a032 <__ssvfscanf_r+0x3c2>
 8009ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8009ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ffa:	b193      	cbz	r3, 800a022 <__ssvfscanf_r+0x3b2>
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffe:	3301      	adds	r3, #1
 800a000:	d10a      	bne.n	800a018 <__ssvfscanf_r+0x3a8>
 800a002:	2400      	movs	r4, #0
 800a004:	4626      	mov	r6, r4
 800a006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a008:	681d      	ldr	r5, [r3, #0]
 800a00a:	88db      	ldrh	r3, [r3, #6]
 800a00c:	42a3      	cmp	r3, r4
 800a00e:	f300 87c4 	bgt.w	800af9a <__ssvfscanf_r+0x132a>
 800a012:	f04f 33ff 	mov.w	r3, #4294967295
 800a016:	627b      	str	r3, [r7, #36]	; 0x24
 800a018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a01a:	6818      	ldr	r0, [r3, #0]
 800a01c:	b108      	cbz	r0, 800a022 <__ssvfscanf_r+0x3b2>
 800a01e:	f7fe f8a7 	bl	8008170 <free>
 800a022:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a024:	f507 772d 	add.w	r7, r7, #692	; 0x2b4
 800a028:	46bd      	mov	sp, r7
 800a02a:	ecbd 8b02 	vpop	{d8}
 800a02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a034:	6030      	str	r0, [r6, #0]
 800a036:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800a03a:	889b      	ldrh	r3, [r3, #4]
 800a03c:	4599      	cmp	r9, r3
 800a03e:	d312      	bcc.n	800a066 <__ssvfscanf_r+0x3f6>
 800a040:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 800a044:	4293      	cmp	r3, r2
 800a046:	d8d4      	bhi.n	8009ff2 <__ssvfscanf_r+0x382>
 800a048:	3308      	adds	r3, #8
 800a04a:	fa1f fa83 	uxth.w	sl, r3
 800a04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a050:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800a054:	6818      	ldr	r0, [r3, #0]
 800a056:	f002 fc67 	bl	800c928 <realloc>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	d0c9      	beq.n	8009ff2 <__ssvfscanf_r+0x382>
 800a05e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a060:	6018      	str	r0, [r3, #0]
 800a062:	f8a3 a004 	strh.w	sl, [r3, #4]
 800a066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a068:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f109 0201 	add.w	r2, r9, #1
 800a070:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 800a074:	46b2      	mov	sl, r6
 800a076:	80ca      	strh	r2, [r1, #6]
 800a078:	4646      	mov	r6, r8
 800a07a:	f04f 0920 	mov.w	r9, #32
 800a07e:	2200      	movs	r2, #0
 800a080:	62ba      	str	r2, [r7, #40]	; 0x28
 800a082:	f001 ff71 	bl	800bf68 <__locale_mb_cur_max>
 800a086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a088:	4290      	cmp	r0, r2
 800a08a:	f43f aeb9 	beq.w	8009e00 <__ssvfscanf_r+0x190>
 800a08e:	6821      	ldr	r1, [r4, #0]
 800a090:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 800a094:	f811 0b01 	ldrb.w	r0, [r1], #1
 800a098:	f80c 0002 	strb.w	r0, [ip, r2]
 800a09c:	1c53      	adds	r3, r2, #1
 800a09e:	6862      	ldr	r2, [r4, #4]
 800a0a0:	3a01      	subs	r2, #1
 800a0a2:	e9c4 1200 	strd	r1, r2, [r4]
 800a0a6:	6a3a      	ldr	r2, [r7, #32]
 800a0a8:	2a03      	cmp	r2, #3
 800a0aa:	d102      	bne.n	800a0b2 <__ssvfscanf_r+0x442>
 800a0ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0ae:	2a04      	cmp	r2, #4
 800a0b0:	d007      	beq.n	800a0c2 <__ssvfscanf_r+0x452>
 800a0b2:	2208      	movs	r2, #8
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800a0ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0bc:	f7fe fa9c 	bl	80085f8 <memset>
 800a0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a0c8:	9200      	str	r2, [sp, #0]
 800a0ca:	ee18 0a10 	vmov	r0, s16
 800a0ce:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800a0d2:	4631      	mov	r1, r6
 800a0d4:	f001 ff68 	bl	800bfa8 <_mbrtowc_r>
 800a0d8:	1c42      	adds	r2, r0, #1
 800a0da:	6238      	str	r0, [r7, #32]
 800a0dc:	f43f ae90 	beq.w	8009e00 <__ssvfscanf_r+0x190>
 800a0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	d137      	bne.n	800a156 <__ssvfscanf_r+0x4e6>
 800a0e6:	f1bb 0f00 	cmp.w	fp, #0
 800a0ea:	d101      	bne.n	800a0f0 <__ssvfscanf_r+0x480>
 800a0ec:	f8c6 b000 	str.w	fp, [r6]
 800a0f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0f2:	441a      	add	r2, r3
 800a0f4:	6a3b      	ldr	r3, [r7, #32]
 800a0f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a0f8:	2b03      	cmp	r3, #3
 800a0fa:	d102      	bne.n	800a102 <__ssvfscanf_r+0x492>
 800a0fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0fe:	2b04      	cmp	r3, #4
 800a100:	d000      	beq.n	800a104 <__ssvfscanf_r+0x494>
 800a102:	3d01      	subs	r5, #1
 800a104:	f1bb 0f00 	cmp.w	fp, #0
 800a108:	d118      	bne.n	800a13c <__ssvfscanf_r+0x4cc>
 800a10a:	f1ba 0f00 	cmp.w	sl, #0
 800a10e:	d014      	beq.n	800a13a <__ssvfscanf_r+0x4ca>
 800a110:	eba6 0308 	sub.w	r3, r6, r8
 800a114:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 800a118:	d80f      	bhi.n	800a13a <__ssvfscanf_r+0x4ca>
 800a11a:	4640      	mov	r0, r8
 800a11c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a120:	62bb      	str	r3, [r7, #40]	; 0x28
 800a122:	f002 fc01 	bl	800c928 <realloc>
 800a126:	4680      	mov	r8, r0
 800a128:	2800      	cmp	r0, #0
 800a12a:	f43f af62 	beq.w	8009ff2 <__ssvfscanf_r+0x382>
 800a12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a130:	f8ca 0000 	str.w	r0, [sl]
 800a134:	18c6      	adds	r6, r0, r3
 800a136:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800a13a:	3604      	adds	r6, #4
 800a13c:	2200      	movs	r2, #0
 800a13e:	e00e      	b.n	800a15e <__ssvfscanf_r+0x4ee>
 800a140:	f04f 0900 	mov.w	r9, #0
 800a144:	633e      	str	r6, [r7, #48]	; 0x30
 800a146:	46c8      	mov	r8, r9
 800a148:	46ca      	mov	sl, r9
 800a14a:	464e      	mov	r6, r9
 800a14c:	e797      	b.n	800a07e <__ssvfscanf_r+0x40e>
 800a14e:	46d9      	mov	r9, fp
 800a150:	46d8      	mov	r8, fp
 800a152:	46da      	mov	sl, fp
 800a154:	e793      	b.n	800a07e <__ssvfscanf_r+0x40e>
 800a156:	6a3a      	ldr	r2, [r7, #32]
 800a158:	3202      	adds	r2, #2
 800a15a:	d1c9      	bne.n	800a0f0 <__ssvfscanf_r+0x480>
 800a15c:	461a      	mov	r2, r3
 800a15e:	6863      	ldr	r3, [r4, #4]
 800a160:	2b00      	cmp	r3, #0
 800a162:	dc15      	bgt.n	800a190 <__ssvfscanf_r+0x520>
 800a164:	ee18 0a10 	vmov	r0, s16
 800a168:	4621      	mov	r1, r4
 800a16a:	62ba      	str	r2, [r7, #40]	; 0x28
 800a16c:	f003 fe9a 	bl	800dea4 <__ssrefill_r>
 800a170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a172:	b168      	cbz	r0, 800a190 <__ssvfscanf_r+0x520>
 800a174:	2a00      	cmp	r2, #0
 800a176:	f47f ae43 	bne.w	8009e00 <__ssvfscanf_r+0x190>
 800a17a:	f1ba 0f00 	cmp.w	sl, #0
 800a17e:	d10f      	bne.n	800a1a0 <__ssvfscanf_r+0x530>
 800a180:	f1bb 0f00 	cmp.w	fp, #0
 800a184:	d102      	bne.n	800a18c <__ssvfscanf_r+0x51c>
 800a186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a188:	3301      	adds	r3, #1
 800a18a:	627b      	str	r3, [r7, #36]	; 0x24
 800a18c:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800a18e:	e58d      	b.n	8009cac <__ssvfscanf_r+0x3c>
 800a190:	2d00      	cmp	r5, #0
 800a192:	f47f af75 	bne.w	800a080 <__ssvfscanf_r+0x410>
 800a196:	e7f0      	b.n	800a17a <__ssvfscanf_r+0x50a>
 800a198:	08010015 	.word	0x08010015
 800a19c:	08008891 	.word	0x08008891
 800a1a0:	eba6 0108 	sub.w	r1, r6, r8
 800a1a4:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 800a1a8:	d9ea      	bls.n	800a180 <__ssvfscanf_r+0x510>
 800a1aa:	f8da 0000 	ldr.w	r0, [sl]
 800a1ae:	f002 fbbb 	bl	800c928 <realloc>
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	d0e4      	beq.n	800a180 <__ssvfscanf_r+0x510>
 800a1b6:	f8ca 0000 	str.w	r0, [sl]
 800a1ba:	e7e1      	b.n	800a180 <__ssvfscanf_r+0x510>
 800a1bc:	f1bb 0f00 	cmp.w	fp, #0
 800a1c0:	d01b      	beq.n	800a1fa <__ssvfscanf_r+0x58a>
 800a1c2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a1c6:	429d      	cmp	r5, r3
 800a1c8:	dd11      	ble.n	800a1ee <__ssvfscanf_r+0x57e>
 800a1ca:	4498      	add	r8, r3
 800a1cc:	1aed      	subs	r5, r5, r3
 800a1ce:	4413      	add	r3, r2
 800a1d0:	ee18 0a10 	vmov	r0, s16
 800a1d4:	6023      	str	r3, [r4, #0]
 800a1d6:	4621      	mov	r1, r4
 800a1d8:	f003 fe64 	bl	800dea4 <__ssrefill_r>
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	d0f0      	beq.n	800a1c2 <__ssvfscanf_r+0x552>
 800a1e0:	f1b8 0f00 	cmp.w	r8, #0
 800a1e4:	f43f ae0c 	beq.w	8009e00 <__ssvfscanf_r+0x190>
 800a1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ea:	4443      	add	r3, r8
 800a1ec:	e5ff      	b.n	8009dee <__ssvfscanf_r+0x17e>
 800a1ee:	1b5b      	subs	r3, r3, r5
 800a1f0:	442a      	add	r2, r5
 800a1f2:	44a8      	add	r8, r5
 800a1f4:	6063      	str	r3, [r4, #4]
 800a1f6:	6022      	str	r2, [r4, #0]
 800a1f8:	e7f6      	b.n	800a1e8 <__ssvfscanf_r+0x578>
 800a1fa:	46b0      	mov	r8, r6
 800a1fc:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 800a200:	f858 6b04 	ldr.w	r6, [r8], #4
 800a204:	d031      	beq.n	800a26a <__ssvfscanf_r+0x5fa>
 800a206:	2e00      	cmp	r6, #0
 800a208:	f43f ae2e 	beq.w	8009e68 <__ssvfscanf_r+0x1f8>
 800a20c:	4628      	mov	r0, r5
 800a20e:	f7fd ffa7 	bl	8008160 <malloc>
 800a212:	4682      	mov	sl, r0
 800a214:	2800      	cmp	r0, #0
 800a216:	f43f adf8 	beq.w	8009e0a <__ssvfscanf_r+0x19a>
 800a21a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a21c:	6030      	str	r0, [r6, #0]
 800a21e:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 800a222:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 800a226:	45cb      	cmp	fp, r9
 800a228:	d315      	bcc.n	800a256 <__ssvfscanf_r+0x5e6>
 800a22a:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800a22e:	4599      	cmp	r9, r3
 800a230:	f63f aee7 	bhi.w	800a002 <__ssvfscanf_r+0x392>
 800a234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a236:	f109 0908 	add.w	r9, r9, #8
 800a23a:	fa1f f989 	uxth.w	r9, r9
 800a23e:	6818      	ldr	r0, [r3, #0]
 800a240:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800a244:	f002 fb70 	bl	800c928 <realloc>
 800a248:	2800      	cmp	r0, #0
 800a24a:	f43f aeda 	beq.w	800a002 <__ssvfscanf_r+0x392>
 800a24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a250:	6018      	str	r0, [r3, #0]
 800a252:	f8a3 9004 	strh.w	r9, [r3, #4]
 800a256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a258:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f10b 0201 	add.w	r2, fp, #1
 800a260:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800a264:	46b1      	mov	r9, r6
 800a266:	80ca      	strh	r2, [r1, #6]
 800a268:	4656      	mov	r6, sl
 800a26a:	4631      	mov	r1, r6
 800a26c:	ee18 0a10 	vmov	r0, s16
 800a270:	9400      	str	r4, [sp, #0]
 800a272:	462b      	mov	r3, r5
 800a274:	2201      	movs	r2, #1
 800a276:	f003 fe32 	bl	800dede <_sfread_r>
 800a27a:	4606      	mov	r6, r0
 800a27c:	2800      	cmp	r0, #0
 800a27e:	f43f adbf 	beq.w	8009e00 <__ssvfscanf_r+0x190>
 800a282:	f1b9 0f00 	cmp.w	r9, #0
 800a286:	d009      	beq.n	800a29c <__ssvfscanf_r+0x62c>
 800a288:	4285      	cmp	r5, r0
 800a28a:	d907      	bls.n	800a29c <__ssvfscanf_r+0x62c>
 800a28c:	4601      	mov	r1, r0
 800a28e:	f8d9 0000 	ldr.w	r0, [r9]
 800a292:	f002 fb49 	bl	800c928 <realloc>
 800a296:	b108      	cbz	r0, 800a29c <__ssvfscanf_r+0x62c>
 800a298:	f8c9 0000 	str.w	r0, [r9]
 800a29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29e:	4433      	add	r3, r6
 800a2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	627b      	str	r3, [r7, #36]	; 0x24
 800a2a8:	4646      	mov	r6, r8
 800a2aa:	e4ff      	b.n	8009cac <__ssvfscanf_r+0x3c>
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	bf08      	it	eq
 800a2b2:	f04f 33ff 	moveq.w	r3, #4294967295
 800a2b6:	f019 0501 	ands.w	r5, r9, #1
 800a2ba:	633b      	str	r3, [r7, #48]	; 0x30
 800a2bc:	f009 0b10 	and.w	fp, r9, #16
 800a2c0:	f000 8107 	beq.w	800a4d2 <__ssvfscanf_r+0x862>
 800a2c4:	f1bb 0f00 	cmp.w	fp, #0
 800a2c8:	f040 80a7 	bne.w	800a41a <__ssvfscanf_r+0x7aa>
 800a2cc:	4633      	mov	r3, r6
 800a2ce:	f019 0f80 	tst.w	r9, #128	; 0x80
 800a2d2:	f853 5b04 	ldr.w	r5, [r3], #4
 800a2d6:	613b      	str	r3, [r7, #16]
 800a2d8:	f000 80a8 	beq.w	800a42c <__ssvfscanf_r+0x7bc>
 800a2dc:	2d00      	cmp	r5, #0
 800a2de:	f43f ae8b 	beq.w	8009ff8 <__ssvfscanf_r+0x388>
 800a2e2:	2080      	movs	r0, #128	; 0x80
 800a2e4:	f7fd ff3c 	bl	8008160 <malloc>
 800a2e8:	4680      	mov	r8, r0
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	f43f ae81 	beq.w	8009ff2 <__ssvfscanf_r+0x382>
 800a2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2f2:	6028      	str	r0, [r5, #0]
 800a2f4:	88de      	ldrh	r6, [r3, #6]
 800a2f6:	889b      	ldrh	r3, [r3, #4]
 800a2f8:	429e      	cmp	r6, r3
 800a2fa:	d314      	bcc.n	800a326 <__ssvfscanf_r+0x6b6>
 800a2fc:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 800a300:	4293      	cmp	r3, r2
 800a302:	f63f ae76 	bhi.w	8009ff2 <__ssvfscanf_r+0x382>
 800a306:	3308      	adds	r3, #8
 800a308:	fa1f f983 	uxth.w	r9, r3
 800a30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a30e:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800a312:	6818      	ldr	r0, [r3, #0]
 800a314:	f002 fb08 	bl	800c928 <realloc>
 800a318:	2800      	cmp	r0, #0
 800a31a:	f43f ae6a 	beq.w	8009ff2 <__ssvfscanf_r+0x382>
 800a31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a320:	6018      	str	r0, [r3, #0]
 800a322:	f8a3 9004 	strh.w	r9, [r3, #4]
 800a326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a328:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	62bd      	str	r5, [r7, #40]	; 0x28
 800a32e:	1c72      	adds	r2, r6, #1
 800a330:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 800a334:	80ca      	strh	r2, [r1, #6]
 800a336:	4645      	mov	r5, r8
 800a338:	f04f 0a20 	mov.w	sl, #32
 800a33c:	2600      	movs	r6, #0
 800a33e:	f001 fe13 	bl	800bf68 <__locale_mb_cur_max>
 800a342:	42b0      	cmp	r0, r6
 800a344:	f43f ad5c 	beq.w	8009e00 <__ssvfscanf_r+0x190>
 800a348:	6823      	ldr	r3, [r4, #0]
 800a34a:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800a34e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a352:	558a      	strb	r2, [r1, r6]
 800a354:	6862      	ldr	r2, [r4, #4]
 800a356:	3a01      	subs	r2, #1
 800a358:	e9c4 3200 	strd	r3, r2, [r4]
 800a35c:	6a3b      	ldr	r3, [r7, #32]
 800a35e:	2b03      	cmp	r3, #3
 800a360:	f106 0901 	add.w	r9, r6, #1
 800a364:	d102      	bne.n	800a36c <__ssvfscanf_r+0x6fc>
 800a366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a368:	2b04      	cmp	r3, #4
 800a36a:	d005      	beq.n	800a378 <__ssvfscanf_r+0x708>
 800a36c:	2208      	movs	r2, #8
 800a36e:	2100      	movs	r1, #0
 800a370:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800a374:	f7fe f940 	bl	80085f8 <memset>
 800a378:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a37c:	9300      	str	r3, [sp, #0]
 800a37e:	ee18 0a10 	vmov	r0, s16
 800a382:	464b      	mov	r3, r9
 800a384:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800a388:	4629      	mov	r1, r5
 800a38a:	f001 fe0d 	bl	800bfa8 <_mbrtowc_r>
 800a38e:	4603      	mov	r3, r0
 800a390:	6238      	str	r0, [r7, #32]
 800a392:	1c58      	adds	r0, r3, #1
 800a394:	f43f ad34 	beq.w	8009e00 <__ssvfscanf_r+0x190>
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d14c      	bne.n	800a436 <__ssvfscanf_r+0x7c6>
 800a39c:	602b      	str	r3, [r5, #0]
 800a39e:	682e      	ldr	r6, [r5, #0]
 800a3a0:	1c71      	adds	r1, r6, #1
 800a3a2:	d059      	beq.n	800a458 <__ssvfscanf_r+0x7e8>
 800a3a4:	2208      	movs	r2, #8
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800a3ac:	f7fe f924 	bl	80085f8 <memset>
 800a3b0:	4b9c      	ldr	r3, [pc, #624]	; (800a624 <__ssvfscanf_r+0x9b4>)
 800a3b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3b6:	60fb      	str	r3, [r7, #12]
 800a3b8:	4632      	mov	r2, r6
 800a3ba:	ee18 0a10 	vmov	r0, s16
 800a3be:	68fe      	ldr	r6, [r7, #12]
 800a3c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a3c4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a3c8:	47b0      	blx	r6
 800a3ca:	2801      	cmp	r0, #1
 800a3cc:	d146      	bne.n	800a45c <__ssvfscanf_r+0x7ec>
 800a3ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a3d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a3d6:	5c9b      	ldrb	r3, [r3, r2]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d14b      	bne.n	800a474 <__ssvfscanf_r+0x804>
 800a3dc:	f507 76a8 	add.w	r6, r7, #336	; 0x150
 800a3e0:	f1b9 0f00 	cmp.w	r9, #0
 800a3e4:	d13c      	bne.n	800a460 <__ssvfscanf_r+0x7f0>
 800a3e6:	f1bb 0f00 	cmp.w	fp, #0
 800a3ea:	d114      	bne.n	800a416 <__ssvfscanf_r+0x7a6>
 800a3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ee:	f8c5 b000 	str.w	fp, [r5]
 800a3f2:	b16b      	cbz	r3, 800a410 <__ssvfscanf_r+0x7a0>
 800a3f4:	eba5 0108 	sub.w	r1, r5, r8
 800a3f8:	108b      	asrs	r3, r1, #2
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	459a      	cmp	sl, r3
 800a3fe:	d907      	bls.n	800a410 <__ssvfscanf_r+0x7a0>
 800a400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a402:	3104      	adds	r1, #4
 800a404:	6818      	ldr	r0, [r3, #0]
 800a406:	f002 fa8f 	bl	800c928 <realloc>
 800a40a:	b108      	cbz	r0, 800a410 <__ssvfscanf_r+0x7a0>
 800a40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40e:	6018      	str	r0, [r3, #0]
 800a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a412:	3301      	adds	r3, #1
 800a414:	627b      	str	r3, [r7, #36]	; 0x24
 800a416:	693e      	ldr	r6, [r7, #16]
 800a418:	e448      	b.n	8009cac <__ssvfscanf_r+0x3c>
 800a41a:	f04f 0a00 	mov.w	sl, #0
 800a41e:	613e      	str	r6, [r7, #16]
 800a420:	46d0      	mov	r8, sl
 800a422:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 800a426:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 800a42a:	e787      	b.n	800a33c <__ssvfscanf_r+0x6cc>
 800a42c:	46da      	mov	sl, fp
 800a42e:	46d8      	mov	r8, fp
 800a430:	f8c7 b028 	str.w	fp, [r7, #40]	; 0x28
 800a434:	e782      	b.n	800a33c <__ssvfscanf_r+0x6cc>
 800a436:	6a3b      	ldr	r3, [r7, #32]
 800a438:	3302      	adds	r3, #2
 800a43a:	d1b0      	bne.n	800a39e <__ssvfscanf_r+0x72e>
 800a43c:	6863      	ldr	r3, [r4, #4]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	dc42      	bgt.n	800a4c8 <__ssvfscanf_r+0x858>
 800a442:	ee18 0a10 	vmov	r0, s16
 800a446:	4621      	mov	r1, r4
 800a448:	f003 fd2c 	bl	800dea4 <__ssrefill_r>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d03b      	beq.n	800a4c8 <__ssvfscanf_r+0x858>
 800a450:	f1b9 0f00 	cmp.w	r9, #0
 800a454:	d0c7      	beq.n	800a3e6 <__ssvfscanf_r+0x776>
 800a456:	e4d3      	b.n	8009e00 <__ssvfscanf_r+0x190>
 800a458:	4632      	mov	r2, r6
 800a45a:	e7ba      	b.n	800a3d2 <__ssvfscanf_r+0x762>
 800a45c:	2200      	movs	r2, #0
 800a45e:	e7b8      	b.n	800a3d2 <__ssvfscanf_r+0x762>
 800a460:	f109 39ff 	add.w	r9, r9, #4294967295
 800a464:	ee18 0a10 	vmov	r0, s16
 800a468:	f816 1009 	ldrb.w	r1, [r6, r9]
 800a46c:	4622      	mov	r2, r4
 800a46e:	f003 fcdc 	bl	800de2a <_sungetc_r>
 800a472:	e7b5      	b.n	800a3e0 <__ssvfscanf_r+0x770>
 800a474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a476:	444b      	add	r3, r9
 800a478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a47a:	6a3b      	ldr	r3, [r7, #32]
 800a47c:	2b03      	cmp	r3, #3
 800a47e:	d102      	bne.n	800a486 <__ssvfscanf_r+0x816>
 800a480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a482:	2b04      	cmp	r3, #4
 800a484:	d002      	beq.n	800a48c <__ssvfscanf_r+0x81c>
 800a486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a488:	3b01      	subs	r3, #1
 800a48a:	633b      	str	r3, [r7, #48]	; 0x30
 800a48c:	f1bb 0f00 	cmp.w	fp, #0
 800a490:	d117      	bne.n	800a4c2 <__ssvfscanf_r+0x852>
 800a492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a494:	3504      	adds	r5, #4
 800a496:	b1a3      	cbz	r3, 800a4c2 <__ssvfscanf_r+0x852>
 800a498:	eba5 0608 	sub.w	r6, r5, r8
 800a49c:	ebba 0fa6 	cmp.w	sl, r6, asr #2
 800a4a0:	d80d      	bhi.n	800a4be <__ssvfscanf_r+0x84e>
 800a4a2:	4640      	mov	r0, r8
 800a4a4:	ea4f 01ca 	mov.w	r1, sl, lsl #3
 800a4a8:	f002 fa3e 	bl	800c928 <realloc>
 800a4ac:	4680      	mov	r8, r0
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	f43f ad9f 	beq.w	8009ff2 <__ssvfscanf_r+0x382>
 800a4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b6:	1985      	adds	r5, r0, r6
 800a4b8:	6018      	str	r0, [r3, #0]
 800a4ba:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800a4be:	46d9      	mov	r9, fp
 800a4c0:	e7bc      	b.n	800a43c <__ssvfscanf_r+0x7cc>
 800a4c2:	f04f 0900 	mov.w	r9, #0
 800a4c6:	e7b9      	b.n	800a43c <__ssvfscanf_r+0x7cc>
 800a4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d08b      	beq.n	800a3e6 <__ssvfscanf_r+0x776>
 800a4ce:	464e      	mov	r6, r9
 800a4d0:	e735      	b.n	800a33e <__ssvfscanf_r+0x6ce>
 800a4d2:	f1bb 0f00 	cmp.w	fp, #0
 800a4d6:	d01d      	beq.n	800a514 <__ssvfscanf_r+0x8a4>
 800a4d8:	f107 0850 	add.w	r8, r7, #80	; 0x50
 800a4dc:	6823      	ldr	r3, [r4, #0]
 800a4de:	781a      	ldrb	r2, [r3, #0]
 800a4e0:	f818 2002 	ldrb.w	r2, [r8, r2]
 800a4e4:	b90a      	cbnz	r2, 800a4ea <__ssvfscanf_r+0x87a>
 800a4e6:	b995      	cbnz	r5, 800a50e <__ssvfscanf_r+0x89e>
 800a4e8:	e4be      	b.n	8009e68 <__ssvfscanf_r+0x1f8>
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	6862      	ldr	r2, [r4, #4]
 800a4ee:	6023      	str	r3, [r4, #0]
 800a4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f2:	3501      	adds	r5, #1
 800a4f4:	3a01      	subs	r2, #1
 800a4f6:	42ab      	cmp	r3, r5
 800a4f8:	6062      	str	r2, [r4, #4]
 800a4fa:	d008      	beq.n	800a50e <__ssvfscanf_r+0x89e>
 800a4fc:	2a00      	cmp	r2, #0
 800a4fe:	dced      	bgt.n	800a4dc <__ssvfscanf_r+0x86c>
 800a500:	ee18 0a10 	vmov	r0, s16
 800a504:	4621      	mov	r1, r4
 800a506:	f003 fccd 	bl	800dea4 <__ssrefill_r>
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d0e6      	beq.n	800a4dc <__ssvfscanf_r+0x86c>
 800a50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a510:	442b      	add	r3, r5
 800a512:	e46c      	b.n	8009dee <__ssvfscanf_r+0x17e>
 800a514:	46b3      	mov	fp, r6
 800a516:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 800a51a:	f85b 6b04 	ldr.w	r6, [fp], #4
 800a51e:	d07f      	beq.n	800a620 <__ssvfscanf_r+0x9b0>
 800a520:	2e00      	cmp	r6, #0
 800a522:	f43f aca1 	beq.w	8009e68 <__ssvfscanf_r+0x1f8>
 800a526:	2020      	movs	r0, #32
 800a528:	f7fd fe1a 	bl	8008160 <malloc>
 800a52c:	4680      	mov	r8, r0
 800a52e:	2800      	cmp	r0, #0
 800a530:	f43f ac6b 	beq.w	8009e0a <__ssvfscanf_r+0x19a>
 800a534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a536:	6030      	str	r0, [r6, #0]
 800a538:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800a53c:	889d      	ldrh	r5, [r3, #4]
 800a53e:	45a9      	cmp	r9, r5
 800a540:	d311      	bcc.n	800a566 <__ssvfscanf_r+0x8f6>
 800a542:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800a546:	429d      	cmp	r5, r3
 800a548:	f63f ad5b 	bhi.w	800a002 <__ssvfscanf_r+0x392>
 800a54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a54e:	3508      	adds	r5, #8
 800a550:	b2ad      	uxth	r5, r5
 800a552:	6818      	ldr	r0, [r3, #0]
 800a554:	00a9      	lsls	r1, r5, #2
 800a556:	f002 f9e7 	bl	800c928 <realloc>
 800a55a:	2800      	cmp	r0, #0
 800a55c:	f43f ad51 	beq.w	800a002 <__ssvfscanf_r+0x392>
 800a560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a562:	6018      	str	r0, [r3, #0]
 800a564:	809d      	strh	r5, [r3, #4]
 800a566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a568:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f109 0201 	add.w	r2, r9, #1
 800a570:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 800a574:	46b2      	mov	sl, r6
 800a576:	80ca      	strh	r2, [r1, #6]
 800a578:	4646      	mov	r6, r8
 800a57a:	f04f 0920 	mov.w	r9, #32
 800a57e:	4635      	mov	r5, r6
 800a580:	f107 0850 	add.w	r8, r7, #80	; 0x50
 800a584:	6823      	ldr	r3, [r4, #0]
 800a586:	781a      	ldrb	r2, [r3, #0]
 800a588:	f818 2002 	ldrb.w	r2, [r8, r2]
 800a58c:	b36a      	cbz	r2, 800a5ea <__ssvfscanf_r+0x97a>
 800a58e:	6862      	ldr	r2, [r4, #4]
 800a590:	3a01      	subs	r2, #1
 800a592:	6062      	str	r2, [r4, #4]
 800a594:	1c5a      	adds	r2, r3, #1
 800a596:	6022      	str	r2, [r4, #0]
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	f806 3b01 	strb.w	r3, [r6], #1
 800a59e:	f1ba 0f00 	cmp.w	sl, #0
 800a5a2:	d011      	beq.n	800a5c8 <__ssvfscanf_r+0x958>
 800a5a4:	1b73      	subs	r3, r6, r5
 800a5a6:	454b      	cmp	r3, r9
 800a5a8:	d30e      	bcc.n	800a5c8 <__ssvfscanf_r+0x958>
 800a5aa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	4649      	mov	r1, r9
 800a5b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5b4:	f002 f9b8 	bl	800c928 <realloc>
 800a5b8:	4605      	mov	r5, r0
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	f43f ac25 	beq.w	8009e0a <__ssvfscanf_r+0x19a>
 800a5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c2:	f8ca 0000 	str.w	r0, [sl]
 800a5c6:	18c6      	adds	r6, r0, r3
 800a5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	633b      	str	r3, [r7, #48]	; 0x30
 800a5ce:	d00c      	beq.n	800a5ea <__ssvfscanf_r+0x97a>
 800a5d0:	6863      	ldr	r3, [r4, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	dcd6      	bgt.n	800a584 <__ssvfscanf_r+0x914>
 800a5d6:	ee18 0a10 	vmov	r0, s16
 800a5da:	4621      	mov	r1, r4
 800a5dc:	f003 fc62 	bl	800dea4 <__ssrefill_r>
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	d0cf      	beq.n	800a584 <__ssvfscanf_r+0x914>
 800a5e4:	42ae      	cmp	r6, r5
 800a5e6:	f43f ac0b 	beq.w	8009e00 <__ssvfscanf_r+0x190>
 800a5ea:	1b75      	subs	r5, r6, r5
 800a5ec:	f43f ac3c 	beq.w	8009e68 <__ssvfscanf_r+0x1f8>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	7033      	strb	r3, [r6, #0]
 800a5f4:	f1ba 0f00 	cmp.w	sl, #0
 800a5f8:	d009      	beq.n	800a60e <__ssvfscanf_r+0x99e>
 800a5fa:	1c69      	adds	r1, r5, #1
 800a5fc:	4589      	cmp	r9, r1
 800a5fe:	d906      	bls.n	800a60e <__ssvfscanf_r+0x99e>
 800a600:	f8da 0000 	ldr.w	r0, [sl]
 800a604:	f002 f990 	bl	800c928 <realloc>
 800a608:	b108      	cbz	r0, 800a60e <__ssvfscanf_r+0x99e>
 800a60a:	f8ca 0000 	str.w	r0, [sl]
 800a60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a610:	3301      	adds	r3, #1
 800a612:	627b      	str	r3, [r7, #36]	; 0x24
 800a614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a616:	442b      	add	r3, r5
 800a618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a61a:	465e      	mov	r6, fp
 800a61c:	f7ff bb46 	b.w	8009cac <__ssvfscanf_r+0x3c>
 800a620:	46ca      	mov	sl, r9
 800a622:	e7ac      	b.n	800a57e <__ssvfscanf_r+0x90e>
 800a624:	20000854 	.word	0x20000854
 800a628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	bf08      	it	eq
 800a62e:	f04f 33ff 	moveq.w	r3, #4294967295
 800a632:	f019 0501 	ands.w	r5, r9, #1
 800a636:	633b      	str	r3, [r7, #48]	; 0x30
 800a638:	f009 0810 	and.w	r8, r9, #16
 800a63c:	f000 80fb 	beq.w	800a836 <__ssvfscanf_r+0xbc6>
 800a640:	f1b8 0f00 	cmp.w	r8, #0
 800a644:	f040 80a0 	bne.w	800a788 <__ssvfscanf_r+0xb18>
 800a648:	4633      	mov	r3, r6
 800a64a:	f019 0f80 	tst.w	r9, #128	; 0x80
 800a64e:	f853 6b04 	ldr.w	r6, [r3], #4
 800a652:	62bb      	str	r3, [r7, #40]	; 0x28
 800a654:	f000 80a0 	beq.w	800a798 <__ssvfscanf_r+0xb28>
 800a658:	2e00      	cmp	r6, #0
 800a65a:	f43f accd 	beq.w	8009ff8 <__ssvfscanf_r+0x388>
 800a65e:	2080      	movs	r0, #128	; 0x80
 800a660:	f7fd fd7e 	bl	8008160 <malloc>
 800a664:	4605      	mov	r5, r0
 800a666:	2800      	cmp	r0, #0
 800a668:	f43f acc3 	beq.w	8009ff2 <__ssvfscanf_r+0x382>
 800a66c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a66e:	6030      	str	r0, [r6, #0]
 800a670:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800a674:	889b      	ldrh	r3, [r3, #4]
 800a676:	4599      	cmp	r9, r3
 800a678:	d314      	bcc.n	800a6a4 <__ssvfscanf_r+0xa34>
 800a67a:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 800a67e:	4293      	cmp	r3, r2
 800a680:	f63f acb7 	bhi.w	8009ff2 <__ssvfscanf_r+0x382>
 800a684:	3308      	adds	r3, #8
 800a686:	fa1f fa83 	uxth.w	sl, r3
 800a68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a68c:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800a690:	6818      	ldr	r0, [r3, #0]
 800a692:	f002 f949 	bl	800c928 <realloc>
 800a696:	2800      	cmp	r0, #0
 800a698:	f43f acab 	beq.w	8009ff2 <__ssvfscanf_r+0x382>
 800a69c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a69e:	6018      	str	r0, [r3, #0]
 800a6a0:	f8a3 a004 	strh.w	sl, [r3, #4]
 800a6a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f109 0201 	add.w	r2, r9, #1
 800a6ae:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 800a6b2:	46b2      	mov	sl, r6
 800a6b4:	80ca      	strh	r2, [r1, #6]
 800a6b6:	462e      	mov	r6, r5
 800a6b8:	f04f 0920 	mov.w	r9, #32
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f107 0b48 	add.w	fp, r7, #72	; 0x48
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	49aa      	ldr	r1, [pc, #680]	; (800a970 <__ssvfscanf_r+0xd00>)
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	5c5b      	ldrb	r3, [r3, r1]
 800a6ca:	0718      	lsls	r0, r3, #28
 800a6cc:	d441      	bmi.n	800a752 <__ssvfscanf_r+0xae2>
 800a6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d03e      	beq.n	800a752 <__ssvfscanf_r+0xae2>
 800a6d4:	613a      	str	r2, [r7, #16]
 800a6d6:	f001 fc47 	bl	800bf68 <__locale_mb_cur_max>
 800a6da:	693a      	ldr	r2, [r7, #16]
 800a6dc:	4290      	cmp	r0, r2
 800a6de:	f43f ab8f 	beq.w	8009e00 <__ssvfscanf_r+0x190>
 800a6e2:	6821      	ldr	r1, [r4, #0]
 800a6e4:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 800a6e8:	f811 0b01 	ldrb.w	r0, [r1], #1
 800a6ec:	f80c 0002 	strb.w	r0, [ip, r2]
 800a6f0:	1c53      	adds	r3, r2, #1
 800a6f2:	6862      	ldr	r2, [r4, #4]
 800a6f4:	3a01      	subs	r2, #1
 800a6f6:	e9c4 1200 	strd	r1, r2, [r4]
 800a6fa:	6a3a      	ldr	r2, [r7, #32]
 800a6fc:	2a03      	cmp	r2, #3
 800a6fe:	d103      	bne.n	800a708 <__ssvfscanf_r+0xa98>
 800a700:	f8db 2000 	ldr.w	r2, [fp]
 800a704:	2a04      	cmp	r2, #4
 800a706:	d006      	beq.n	800a716 <__ssvfscanf_r+0xaa6>
 800a708:	2208      	movs	r2, #8
 800a70a:	2100      	movs	r1, #0
 800a70c:	4658      	mov	r0, fp
 800a70e:	623b      	str	r3, [r7, #32]
 800a710:	f7fd ff72 	bl	80085f8 <memset>
 800a714:	6a3b      	ldr	r3, [r7, #32]
 800a716:	f8cd b000 	str.w	fp, [sp]
 800a71a:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800a71e:	ee18 0a10 	vmov	r0, s16
 800a722:	4631      	mov	r1, r6
 800a724:	613b      	str	r3, [r7, #16]
 800a726:	f001 fc3f 	bl	800bfa8 <_mbrtowc_r>
 800a72a:	1c42      	adds	r2, r0, #1
 800a72c:	6238      	str	r0, [r7, #32]
 800a72e:	f43f ab67 	beq.w	8009e00 <__ssvfscanf_r+0x190>
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	2800      	cmp	r0, #0
 800a736:	d133      	bne.n	800a7a0 <__ssvfscanf_r+0xb30>
 800a738:	6030      	str	r0, [r6, #0]
 800a73a:	6830      	ldr	r0, [r6, #0]
 800a73c:	613b      	str	r3, [r7, #16]
 800a73e:	f001 fc05 	bl	800bf4c <iswspace>
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	4602      	mov	r2, r0
 800a746:	2800      	cmp	r0, #0
 800a748:	d049      	beq.n	800a7de <__ssvfscanf_r+0xb6e>
 800a74a:	f507 7ba8 	add.w	fp, r7, #336	; 0x150
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d13a      	bne.n	800a7c8 <__ssvfscanf_r+0xb58>
 800a752:	f1b8 0f00 	cmp.w	r8, #0
 800a756:	d114      	bne.n	800a782 <__ssvfscanf_r+0xb12>
 800a758:	f8c6 8000 	str.w	r8, [r6]
 800a75c:	f1ba 0f00 	cmp.w	sl, #0
 800a760:	d00c      	beq.n	800a77c <__ssvfscanf_r+0xb0c>
 800a762:	1b71      	subs	r1, r6, r5
 800a764:	108b      	asrs	r3, r1, #2
 800a766:	3301      	adds	r3, #1
 800a768:	4599      	cmp	r9, r3
 800a76a:	d907      	bls.n	800a77c <__ssvfscanf_r+0xb0c>
 800a76c:	f8da 0000 	ldr.w	r0, [sl]
 800a770:	3104      	adds	r1, #4
 800a772:	f002 f8d9 	bl	800c928 <realloc>
 800a776:	b108      	cbz	r0, 800a77c <__ssvfscanf_r+0xb0c>
 800a778:	f8ca 0000 	str.w	r0, [sl]
 800a77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77e:	3301      	adds	r3, #1
 800a780:	627b      	str	r3, [r7, #36]	; 0x24
 800a782:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800a784:	f7ff ba92 	b.w	8009cac <__ssvfscanf_r+0x3c>
 800a788:	f04f 0900 	mov.w	r9, #0
 800a78c:	62be      	str	r6, [r7, #40]	; 0x28
 800a78e:	464d      	mov	r5, r9
 800a790:	46ca      	mov	sl, r9
 800a792:	f107 063c 	add.w	r6, r7, #60	; 0x3c
 800a796:	e791      	b.n	800a6bc <__ssvfscanf_r+0xa4c>
 800a798:	46c1      	mov	r9, r8
 800a79a:	4645      	mov	r5, r8
 800a79c:	46c2      	mov	sl, r8
 800a79e:	e78d      	b.n	800a6bc <__ssvfscanf_r+0xa4c>
 800a7a0:	6a3a      	ldr	r2, [r7, #32]
 800a7a2:	3202      	adds	r2, #2
 800a7a4:	d1c9      	bne.n	800a73a <__ssvfscanf_r+0xaca>
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	6863      	ldr	r3, [r4, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	dc89      	bgt.n	800a6c2 <__ssvfscanf_r+0xa52>
 800a7ae:	ee18 0a10 	vmov	r0, s16
 800a7b2:	4621      	mov	r1, r4
 800a7b4:	613a      	str	r2, [r7, #16]
 800a7b6:	f003 fb75 	bl	800dea4 <__ssrefill_r>
 800a7ba:	693a      	ldr	r2, [r7, #16]
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	d080      	beq.n	800a6c2 <__ssvfscanf_r+0xa52>
 800a7c0:	2a00      	cmp	r2, #0
 800a7c2:	f47f ab1d 	bne.w	8009e00 <__ssvfscanf_r+0x190>
 800a7c6:	e7c4      	b.n	800a752 <__ssvfscanf_r+0xae2>
 800a7c8:	3b01      	subs	r3, #1
 800a7ca:	ee18 0a10 	vmov	r0, s16
 800a7ce:	f81b 1003 	ldrb.w	r1, [fp, r3]
 800a7d2:	633b      	str	r3, [r7, #48]	; 0x30
 800a7d4:	4622      	mov	r2, r4
 800a7d6:	f003 fb28 	bl	800de2a <_sungetc_r>
 800a7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7dc:	e7b7      	b.n	800a74e <__ssvfscanf_r+0xade>
 800a7de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7e0:	4419      	add	r1, r3
 800a7e2:	6a3b      	ldr	r3, [r7, #32]
 800a7e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a7e6:	2b03      	cmp	r3, #3
 800a7e8:	d103      	bne.n	800a7f2 <__ssvfscanf_r+0xb82>
 800a7ea:	f8db 3000 	ldr.w	r3, [fp]
 800a7ee:	2b04      	cmp	r3, #4
 800a7f0:	d002      	beq.n	800a7f8 <__ssvfscanf_r+0xb88>
 800a7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f4:	3b01      	subs	r3, #1
 800a7f6:	633b      	str	r3, [r7, #48]	; 0x30
 800a7f8:	f1b8 0f00 	cmp.w	r8, #0
 800a7fc:	d1d4      	bne.n	800a7a8 <__ssvfscanf_r+0xb38>
 800a7fe:	3604      	adds	r6, #4
 800a800:	f1ba 0f00 	cmp.w	sl, #0
 800a804:	d015      	beq.n	800a832 <__ssvfscanf_r+0xbc2>
 800a806:	1b73      	subs	r3, r6, r5
 800a808:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 800a80c:	d80f      	bhi.n	800a82e <__ssvfscanf_r+0xbbe>
 800a80e:	4628      	mov	r0, r5
 800a810:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a814:	613b      	str	r3, [r7, #16]
 800a816:	f002 f887 	bl	800c928 <realloc>
 800a81a:	4605      	mov	r5, r0
 800a81c:	2800      	cmp	r0, #0
 800a81e:	f43f abe8 	beq.w	8009ff2 <__ssvfscanf_r+0x382>
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	f8ca 0000 	str.w	r0, [sl]
 800a828:	18c6      	adds	r6, r0, r3
 800a82a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800a82e:	4642      	mov	r2, r8
 800a830:	e7ba      	b.n	800a7a8 <__ssvfscanf_r+0xb38>
 800a832:	4652      	mov	r2, sl
 800a834:	e7b8      	b.n	800a7a8 <__ssvfscanf_r+0xb38>
 800a836:	f1b8 0f00 	cmp.w	r8, #0
 800a83a:	d01a      	beq.n	800a872 <__ssvfscanf_r+0xc02>
 800a83c:	6823      	ldr	r3, [r4, #0]
 800a83e:	494c      	ldr	r1, [pc, #304]	; (800a970 <__ssvfscanf_r+0xd00>)
 800a840:	781a      	ldrb	r2, [r3, #0]
 800a842:	5c52      	ldrb	r2, [r2, r1]
 800a844:	0711      	lsls	r1, r2, #28
 800a846:	f53f ae62 	bmi.w	800a50e <__ssvfscanf_r+0x89e>
 800a84a:	3301      	adds	r3, #1
 800a84c:	6862      	ldr	r2, [r4, #4]
 800a84e:	6023      	str	r3, [r4, #0]
 800a850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a852:	3501      	adds	r5, #1
 800a854:	3a01      	subs	r2, #1
 800a856:	429d      	cmp	r5, r3
 800a858:	6062      	str	r2, [r4, #4]
 800a85a:	f43f ae58 	beq.w	800a50e <__ssvfscanf_r+0x89e>
 800a85e:	2a00      	cmp	r2, #0
 800a860:	dcec      	bgt.n	800a83c <__ssvfscanf_r+0xbcc>
 800a862:	ee18 0a10 	vmov	r0, s16
 800a866:	4621      	mov	r1, r4
 800a868:	f003 fb1c 	bl	800dea4 <__ssrefill_r>
 800a86c:	2800      	cmp	r0, #0
 800a86e:	d0e5      	beq.n	800a83c <__ssvfscanf_r+0xbcc>
 800a870:	e64d      	b.n	800a50e <__ssvfscanf_r+0x89e>
 800a872:	46b3      	mov	fp, r6
 800a874:	f019 0580 	ands.w	r5, r9, #128	; 0x80
 800a878:	f85b 6b04 	ldr.w	r6, [fp], #4
 800a87c:	d076      	beq.n	800a96c <__ssvfscanf_r+0xcfc>
 800a87e:	2e00      	cmp	r6, #0
 800a880:	f43f aaf2 	beq.w	8009e68 <__ssvfscanf_r+0x1f8>
 800a884:	2020      	movs	r0, #32
 800a886:	f7fd fc6b 	bl	8008160 <malloc>
 800a88a:	4680      	mov	r8, r0
 800a88c:	2800      	cmp	r0, #0
 800a88e:	f43f aabc 	beq.w	8009e0a <__ssvfscanf_r+0x19a>
 800a892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a894:	6030      	str	r0, [r6, #0]
 800a896:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800a89a:	889d      	ldrh	r5, [r3, #4]
 800a89c:	45a9      	cmp	r9, r5
 800a89e:	d311      	bcc.n	800a8c4 <__ssvfscanf_r+0xc54>
 800a8a0:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800a8a4:	429d      	cmp	r5, r3
 800a8a6:	f63f abac 	bhi.w	800a002 <__ssvfscanf_r+0x392>
 800a8aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ac:	3508      	adds	r5, #8
 800a8ae:	b2ad      	uxth	r5, r5
 800a8b0:	6818      	ldr	r0, [r3, #0]
 800a8b2:	00a9      	lsls	r1, r5, #2
 800a8b4:	f002 f838 	bl	800c928 <realloc>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	f43f aba2 	beq.w	800a002 <__ssvfscanf_r+0x392>
 800a8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c0:	6018      	str	r0, [r3, #0]
 800a8c2:	809d      	strh	r5, [r3, #4]
 800a8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f109 0201 	add.w	r2, r9, #1
 800a8ce:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 800a8d2:	80ca      	strh	r2, [r1, #6]
 800a8d4:	46b1      	mov	r9, r6
 800a8d6:	2520      	movs	r5, #32
 800a8d8:	4646      	mov	r6, r8
 800a8da:	46b0      	mov	r8, r6
 800a8dc:	6823      	ldr	r3, [r4, #0]
 800a8de:	4924      	ldr	r1, [pc, #144]	; (800a970 <__ssvfscanf_r+0xd00>)
 800a8e0:	781a      	ldrb	r2, [r3, #0]
 800a8e2:	5c52      	ldrb	r2, [r2, r1]
 800a8e4:	0712      	lsls	r2, r2, #28
 800a8e6:	d429      	bmi.n	800a93c <__ssvfscanf_r+0xccc>
 800a8e8:	6862      	ldr	r2, [r4, #4]
 800a8ea:	3a01      	subs	r2, #1
 800a8ec:	6062      	str	r2, [r4, #4]
 800a8ee:	1c5a      	adds	r2, r3, #1
 800a8f0:	6022      	str	r2, [r4, #0]
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	f806 3b01 	strb.w	r3, [r6], #1
 800a8f8:	f1b9 0f00 	cmp.w	r9, #0
 800a8fc:	d010      	beq.n	800a920 <__ssvfscanf_r+0xcb0>
 800a8fe:	eba6 0a08 	sub.w	sl, r6, r8
 800a902:	45aa      	cmp	sl, r5
 800a904:	d30c      	bcc.n	800a920 <__ssvfscanf_r+0xcb0>
 800a906:	006d      	lsls	r5, r5, #1
 800a908:	4640      	mov	r0, r8
 800a90a:	4629      	mov	r1, r5
 800a90c:	f002 f80c 	bl	800c928 <realloc>
 800a910:	4680      	mov	r8, r0
 800a912:	2800      	cmp	r0, #0
 800a914:	f43f aa79 	beq.w	8009e0a <__ssvfscanf_r+0x19a>
 800a918:	eb00 060a 	add.w	r6, r0, sl
 800a91c:	f8c9 0000 	str.w	r0, [r9]
 800a920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a922:	3b01      	subs	r3, #1
 800a924:	633b      	str	r3, [r7, #48]	; 0x30
 800a926:	d009      	beq.n	800a93c <__ssvfscanf_r+0xccc>
 800a928:	6863      	ldr	r3, [r4, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	dcd6      	bgt.n	800a8dc <__ssvfscanf_r+0xc6c>
 800a92e:	ee18 0a10 	vmov	r0, s16
 800a932:	4621      	mov	r1, r4
 800a934:	f003 fab6 	bl	800dea4 <__ssrefill_r>
 800a938:	2800      	cmp	r0, #0
 800a93a:	d0cf      	beq.n	800a8dc <__ssvfscanf_r+0xc6c>
 800a93c:	2300      	movs	r3, #0
 800a93e:	7033      	strb	r3, [r6, #0]
 800a940:	eba6 0608 	sub.w	r6, r6, r8
 800a944:	f1b9 0f00 	cmp.w	r9, #0
 800a948:	d009      	beq.n	800a95e <__ssvfscanf_r+0xcee>
 800a94a:	1c71      	adds	r1, r6, #1
 800a94c:	428d      	cmp	r5, r1
 800a94e:	d906      	bls.n	800a95e <__ssvfscanf_r+0xcee>
 800a950:	f8d9 0000 	ldr.w	r0, [r9]
 800a954:	f001 ffe8 	bl	800c928 <realloc>
 800a958:	b108      	cbz	r0, 800a95e <__ssvfscanf_r+0xcee>
 800a95a:	f8c9 0000 	str.w	r0, [r9]
 800a95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a960:	4433      	add	r3, r6
 800a962:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a966:	3301      	adds	r3, #1
 800a968:	627b      	str	r3, [r7, #36]	; 0x24
 800a96a:	e656      	b.n	800a61a <__ssvfscanf_r+0x9aa>
 800a96c:	46a9      	mov	r9, r5
 800a96e:	e7b4      	b.n	800a8da <__ssvfscanf_r+0xc6a>
 800a970:	08010015 	.word	0x08010015
 800a974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a976:	3b01      	subs	r3, #1
 800a978:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800a97c:	bf81      	itttt	hi
 800a97e:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 800a980:	f46f 7cae 	mvnhi.w	ip, #348	; 0x15c
 800a984:	eb03 0b0c 	addhi.w	fp, r3, ip
 800a988:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a98c:	bf88      	it	hi
 800a98e:	633b      	strhi	r3, [r7, #48]	; 0x30
 800a990:	f449 6358 	orr.w	r3, r9, #3456	; 0xd80
 800a994:	f8df 9414 	ldr.w	r9, [pc, #1044]	; 800adac <__ssvfscanf_r+0x113c>
 800a998:	62bb      	str	r3, [r7, #40]	; 0x28
 800a99a:	bf98      	it	ls
 800a99c:	f04f 0b00 	movls.w	fp, #0
 800a9a0:	f04f 0a00 	mov.w	sl, #0
 800a9a4:	f507 78a8 	add.w	r8, r7, #336	; 0x150
 800a9a8:	6822      	ldr	r2, [r4, #0]
 800a9aa:	7813      	ldrb	r3, [r2, #0]
 800a9ac:	2b39      	cmp	r3, #57	; 0x39
 800a9ae:	d80f      	bhi.n	800a9d0 <__ssvfscanf_r+0xd60>
 800a9b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a9b2:	d91a      	bls.n	800a9ea <__ssvfscanf_r+0xd7a>
 800a9b4:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a9b8:	290e      	cmp	r1, #14
 800a9ba:	d816      	bhi.n	800a9ea <__ssvfscanf_r+0xd7a>
 800a9bc:	e8df f001 	tbb	[pc, r1]
 800a9c0:	157f157f 	.word	0x157f157f
 800a9c4:	70704215 	.word	0x70704215
 800a9c8:	70707070 	.word	0x70707070
 800a9cc:	7870      	.short	0x7870
 800a9ce:	78          	.byte	0x78
 800a9cf:	00          	.byte	0x00
 800a9d0:	2b66      	cmp	r3, #102	; 0x66
 800a9d2:	d835      	bhi.n	800aa40 <__ssvfscanf_r+0xdd0>
 800a9d4:	2b60      	cmp	r3, #96	; 0x60
 800a9d6:	d803      	bhi.n	800a9e0 <__ssvfscanf_r+0xd70>
 800a9d8:	2b46      	cmp	r3, #70	; 0x46
 800a9da:	d804      	bhi.n	800a9e6 <__ssvfscanf_r+0xd76>
 800a9dc:	2b40      	cmp	r3, #64	; 0x40
 800a9de:	d904      	bls.n	800a9ea <__ssvfscanf_r+0xd7a>
 800a9e0:	69f9      	ldr	r1, [r7, #28]
 800a9e2:	290a      	cmp	r1, #10
 800a9e4:	e069      	b.n	800aaba <__ssvfscanf_r+0xe4a>
 800a9e6:	2b58      	cmp	r3, #88	; 0x58
 800a9e8:	d06f      	beq.n	800aaca <__ssvfscanf_r+0xe5a>
 800a9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ec:	05d8      	lsls	r0, r3, #23
 800a9ee:	d512      	bpl.n	800aa16 <__ssvfscanf_r+0xda6>
 800a9f0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800a9f4:	4598      	cmp	r8, r3
 800a9f6:	d909      	bls.n	800aa0c <__ssvfscanf_r+0xd9c>
 800a9f8:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 800a9fc:	ee18 0a10 	vmov	r0, s16
 800aa00:	4622      	mov	r2, r4
 800aa02:	f003 fa12 	bl	800de2a <_sungetc_r>
 800aa06:	f108 39ff 	add.w	r9, r8, #4294967295
 800aa0a:	46c8      	mov	r8, r9
 800aa0c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800aa10:	4598      	cmp	r8, r3
 800aa12:	f43f aa29 	beq.w	8009e68 <__ssvfscanf_r+0x1f8>
 800aa16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa18:	f013 0210 	ands.w	r2, r3, #16
 800aa1c:	d175      	bne.n	800ab0a <__ssvfscanf_r+0xe9a>
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	69bd      	ldr	r5, [r7, #24]
 800aa22:	f888 2000 	strb.w	r2, [r8]
 800aa26:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800aa2a:	ee18 0a10 	vmov	r0, s16
 800aa2e:	47a8      	blx	r5
 800aa30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa32:	0699      	lsls	r1, r3, #26
 800aa34:	f106 0904 	add.w	r9, r6, #4
 800aa38:	d55e      	bpl.n	800aaf8 <__ssvfscanf_r+0xe88>
 800aa3a:	6833      	ldr	r3, [r6, #0]
 800aa3c:	6018      	str	r0, [r3, #0]
 800aa3e:	e060      	b.n	800ab02 <__ssvfscanf_r+0xe92>
 800aa40:	2b78      	cmp	r3, #120	; 0x78
 800aa42:	e7d1      	b.n	800a9e8 <__ssvfscanf_r+0xd78>
 800aa44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa46:	050d      	lsls	r5, r1, #20
 800aa48:	d50d      	bpl.n	800aa66 <__ssvfscanf_r+0xdf6>
 800aa4a:	69f9      	ldr	r1, [r7, #28]
 800aa4c:	b929      	cbnz	r1, 800aa5a <__ssvfscanf_r+0xdea>
 800aa4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa50:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800aa54:	62b9      	str	r1, [r7, #40]	; 0x28
 800aa56:	2108      	movs	r1, #8
 800aa58:	61f9      	str	r1, [r7, #28]
 800aa5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa5c:	0548      	lsls	r0, r1, #21
 800aa5e:	d505      	bpl.n	800aa6c <__ssvfscanf_r+0xdfc>
 800aa60:	f421 61b0 	bic.w	r1, r1, #1408	; 0x580
 800aa64:	62b9      	str	r1, [r7, #40]	; 0x28
 800aa66:	f808 3b01 	strb.w	r3, [r8], #1
 800aa6a:	e00d      	b.n	800aa88 <__ssvfscanf_r+0xe18>
 800aa6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6e:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 800aa72:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa74:	f1bb 0f00 	cmp.w	fp, #0
 800aa78:	d004      	beq.n	800aa84 <__ssvfscanf_r+0xe14>
 800aa7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa82:	633b      	str	r3, [r7, #48]	; 0x30
 800aa84:	f10a 0a01 	add.w	sl, sl, #1
 800aa88:	6863      	ldr	r3, [r4, #4]
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	6063      	str	r3, [r4, #4]
 800aa90:	dd2a      	ble.n	800aae8 <__ssvfscanf_r+0xe78>
 800aa92:	3201      	adds	r2, #1
 800aa94:	6022      	str	r2, [r4, #0]
 800aa96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	633b      	str	r3, [r7, #48]	; 0x30
 800aa9c:	d184      	bne.n	800a9a8 <__ssvfscanf_r+0xd38>
 800aa9e:	e7a4      	b.n	800a9ea <__ssvfscanf_r+0xd7a>
 800aaa0:	69f9      	ldr	r1, [r7, #28]
 800aaa2:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 800aaa6:	61f9      	str	r1, [r7, #28]
 800aaa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aaaa:	f421 6138 	bic.w	r1, r1, #2944	; 0xb80
 800aaae:	e7d9      	b.n	800aa64 <__ssvfscanf_r+0xdf4>
 800aab0:	69f9      	ldr	r1, [r7, #28]
 800aab2:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 800aab6:	61f9      	str	r1, [r7, #28]
 800aab8:	2908      	cmp	r1, #8
 800aaba:	dcf5      	bgt.n	800aaa8 <__ssvfscanf_r+0xe38>
 800aabc:	e795      	b.n	800a9ea <__ssvfscanf_r+0xd7a>
 800aabe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aac0:	060d      	lsls	r5, r1, #24
 800aac2:	d592      	bpl.n	800a9ea <__ssvfscanf_r+0xd7a>
 800aac4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800aac8:	e7cc      	b.n	800aa64 <__ssvfscanf_r+0xdf4>
 800aaca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aacc:	f401 61c0 	and.w	r1, r1, #1536	; 0x600
 800aad0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800aad4:	d189      	bne.n	800a9ea <__ssvfscanf_r+0xd7a>
 800aad6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aad8:	f421 7500 	bic.w	r5, r1, #512	; 0x200
 800aadc:	f445 61a0 	orr.w	r1, r5, #1280	; 0x500
 800aae0:	62b9      	str	r1, [r7, #40]	; 0x28
 800aae2:	2110      	movs	r1, #16
 800aae4:	61f9      	str	r1, [r7, #28]
 800aae6:	e7be      	b.n	800aa66 <__ssvfscanf_r+0xdf6>
 800aae8:	ee18 0a10 	vmov	r0, s16
 800aaec:	4621      	mov	r1, r4
 800aaee:	f003 f9d9 	bl	800dea4 <__ssrefill_r>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	d0cf      	beq.n	800aa96 <__ssvfscanf_r+0xe26>
 800aaf6:	e778      	b.n	800a9ea <__ssvfscanf_r+0xd7a>
 800aaf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafa:	071a      	lsls	r2, r3, #28
 800aafc:	d50e      	bpl.n	800ab1c <__ssvfscanf_r+0xeac>
 800aafe:	6833      	ldr	r3, [r6, #0]
 800ab00:	7018      	strb	r0, [r3, #0]
 800ab02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab04:	3301      	adds	r3, #1
 800ab06:	627b      	str	r3, [r7, #36]	; 0x24
 800ab08:	464e      	mov	r6, r9
 800ab0a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800ab0e:	eba8 0803 	sub.w	r8, r8, r3
 800ab12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab14:	44c2      	add	sl, r8
 800ab16:	4453      	add	r3, sl
 800ab18:	f7ff b969 	b.w	8009dee <__ssvfscanf_r+0x17e>
 800ab1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1e:	075b      	lsls	r3, r3, #29
 800ab20:	d502      	bpl.n	800ab28 <__ssvfscanf_r+0xeb8>
 800ab22:	6833      	ldr	r3, [r6, #0]
 800ab24:	8018      	strh	r0, [r3, #0]
 800ab26:	e7ec      	b.n	800ab02 <__ssvfscanf_r+0xe92>
 800ab28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2a:	f013 0201 	ands.w	r2, r3, #1
 800ab2e:	d184      	bne.n	800aa3a <__ssvfscanf_r+0xdca>
 800ab30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab32:	079d      	lsls	r5, r3, #30
 800ab34:	d581      	bpl.n	800aa3a <__ssvfscanf_r+0xdca>
 800ab36:	4b9c      	ldr	r3, [pc, #624]	; (800ada8 <__ssvfscanf_r+0x1138>)
 800ab38:	69b9      	ldr	r1, [r7, #24]
 800ab3a:	4299      	cmp	r1, r3
 800ab3c:	ee18 0a10 	vmov	r0, s16
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800ab46:	d105      	bne.n	800ab54 <__ssvfscanf_r+0xee4>
 800ab48:	f003 f8f2 	bl	800dd30 <_strtoull_r>
 800ab4c:	6833      	ldr	r3, [r6, #0]
 800ab4e:	e9c3 0100 	strd	r0, r1, [r3]
 800ab52:	e7d6      	b.n	800ab02 <__ssvfscanf_r+0xe92>
 800ab54:	f002 ffde 	bl	800db14 <_strtoll_r>
 800ab58:	e7f8      	b.n	800ab4c <__ssvfscanf_r+0xedc>
 800ab5a:	ee18 0a10 	vmov	r0, s16
 800ab5e:	f001 fa09 	bl	800bf74 <_localeconv_r>
 800ab62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab64:	6802      	ldr	r2, [r0, #0]
 800ab66:	3b01      	subs	r3, #1
 800ab68:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800ab6c:	f04f 0b00 	mov.w	fp, #0
 800ab70:	bf88      	it	hi
 800ab72:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 800ab74:	f8c7 b028 	str.w	fp, [r7, #40]	; 0x28
 800ab78:	e9c7 bb03 	strd	fp, fp, [r7, #12]
 800ab7c:	bf84      	itt	hi
 800ab7e:	f46f 70ae 	mvnhi.w	r0, #348	; 0x15c
 800ab82:	f240 115d 	movwhi	r1, #349	; 0x15d
 800ab86:	f449 65f0 	orr.w	r5, r9, #1920	; 0x780
 800ab8a:	bf86      	itte	hi
 800ab8c:	181b      	addhi	r3, r3, r0
 800ab8e:	6339      	strhi	r1, [r7, #48]	; 0x30
 800ab90:	2300      	movls	r3, #0
 800ab92:	46da      	mov	sl, fp
 800ab94:	f507 79a8 	add.w	r9, r7, #336	; 0x150
 800ab98:	f8d4 e000 	ldr.w	lr, [r4]
 800ab9c:	f89e 0000 	ldrb.w	r0, [lr]
 800aba0:	f1a0 0c2b 	sub.w	ip, r0, #43	; 0x2b
 800aba4:	f1bc 0f4e 	cmp.w	ip, #78	; 0x4e
 800aba8:	f200 811e 	bhi.w	800ade8 <__ssvfscanf_r+0x1178>
 800abac:	e8df f01c 	tbh	[pc, ip, lsl #1]
 800abb0:	011c0087 	.word	0x011c0087
 800abb4:	011c0087 	.word	0x011c0087
 800abb8:	004f011c 	.word	0x004f011c
 800abbc:	006f006f 	.word	0x006f006f
 800abc0:	006f006f 	.word	0x006f006f
 800abc4:	006f006f 	.word	0x006f006f
 800abc8:	006f006f 	.word	0x006f006f
 800abcc:	011c006f 	.word	0x011c006f
 800abd0:	011c011c 	.word	0x011c011c
 800abd4:	011c011c 	.word	0x011c011c
 800abd8:	011c011c 	.word	0x011c011c
 800abdc:	006d00ad 	.word	0x006d00ad
 800abe0:	006d006d 	.word	0x006d006d
 800abe4:	00e50119 	.word	0x00e50119
 800abe8:	011c011c 	.word	0x011c011c
 800abec:	011c00cf 	.word	0x011c00cf
 800abf0:	011c011c 	.word	0x011c011c
 800abf4:	008e011c 	.word	0x008e011c
 800abf8:	0100011c 	.word	0x0100011c
 800abfc:	011c011c 	.word	0x011c011c
 800ac00:	00f0011c 	.word	0x00f0011c
 800ac04:	011c011c 	.word	0x011c011c
 800ac08:	0073011c 	.word	0x0073011c
 800ac0c:	011c00f6 	.word	0x011c00f6
 800ac10:	011c011c 	.word	0x011c011c
 800ac14:	011c011c 	.word	0x011c011c
 800ac18:	011c011c 	.word	0x011c011c
 800ac1c:	006d00ad 	.word	0x006d00ad
 800ac20:	006d006d 	.word	0x006d006d
 800ac24:	00e50119 	.word	0x00e50119
 800ac28:	011c011c 	.word	0x011c011c
 800ac2c:	011c00cf 	.word	0x011c00cf
 800ac30:	011c011c 	.word	0x011c011c
 800ac34:	008e011c 	.word	0x008e011c
 800ac38:	0100011c 	.word	0x0100011c
 800ac3c:	011c011c 	.word	0x011c011c
 800ac40:	00f0011c 	.word	0x00f0011c
 800ac44:	011c011c 	.word	0x011c011c
 800ac48:	0073011c 	.word	0x0073011c
 800ac4c:	00f6      	.short	0x00f6
 800ac4e:	05e9      	lsls	r1, r5, #23
 800ac50:	d51d      	bpl.n	800ac8e <__ssvfscanf_r+0x101e>
 800ac52:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800ac56:	f10a 0a01 	add.w	sl, sl, #1
 800ac5a:	b11b      	cbz	r3, 800ac64 <__ssvfscanf_r+0xff4>
 800ac5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac5e:	3001      	adds	r0, #1
 800ac60:	3b01      	subs	r3, #1
 800ac62:	6338      	str	r0, [r7, #48]	; 0x30
 800ac64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac68:	3001      	adds	r0, #1
 800ac6a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ac6c:	6860      	ldr	r0, [r4, #4]
 800ac6e:	3801      	subs	r0, #1
 800ac70:	3901      	subs	r1, #1
 800ac72:	2800      	cmp	r0, #0
 800ac74:	6339      	str	r1, [r7, #48]	; 0x30
 800ac76:	6060      	str	r0, [r4, #4]
 800ac78:	f340 80c7 	ble.w	800ae0a <__ssvfscanf_r+0x119a>
 800ac7c:	f10e 0101 	add.w	r1, lr, #1
 800ac80:	6021      	str	r1, [r4, #0]
 800ac82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac84:	2900      	cmp	r1, #0
 800ac86:	d187      	bne.n	800ab98 <__ssvfscanf_r+0xf28>
 800ac88:	e04a      	b.n	800ad20 <__ssvfscanf_r+0x10b0>
 800ac8a:	0529      	lsls	r1, r5, #20
 800ac8c:	d548      	bpl.n	800ad20 <__ssvfscanf_r+0x10b0>
 800ac8e:	eb1b 0f08 	cmn.w	fp, r8
 800ac92:	d03f      	beq.n	800ad14 <__ssvfscanf_r+0x10a4>
 800ac94:	e044      	b.n	800ad20 <__ssvfscanf_r+0x10b0>
 800ac96:	f405 6c18 	and.w	ip, r5, #2432	; 0x980
 800ac9a:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 800ac9e:	d13f      	bne.n	800ad20 <__ssvfscanf_r+0x10b0>
 800aca0:	f1ba 0f01 	cmp.w	sl, #1
 800aca4:	d13c      	bne.n	800ad20 <__ssvfscanf_r+0x10b0>
 800aca6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aca8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800acac:	3901      	subs	r1, #1
 800acae:	f809 cb01 	strb.w	ip, [r9], #1
 800acb2:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 800acb6:	6339      	str	r1, [r7, #48]	; 0x30
 800acb8:	f04f 0a00 	mov.w	sl, #0
 800acbc:	e003      	b.n	800acc6 <__ssvfscanf_r+0x1056>
 800acbe:	0629      	lsls	r1, r5, #24
 800acc0:	d52e      	bpl.n	800ad20 <__ssvfscanf_r+0x10b0>
 800acc2:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800acc6:	f809 0b01 	strb.w	r0, [r9], #1
 800acca:	e7cb      	b.n	800ac64 <__ssvfscanf_r+0xff4>
 800accc:	f1bb 0f00 	cmp.w	fp, #0
 800acd0:	d10c      	bne.n	800acec <__ssvfscanf_r+0x107c>
 800acd2:	f1ba 0f00 	cmp.w	sl, #0
 800acd6:	d10d      	bne.n	800acf4 <__ssvfscanf_r+0x1084>
 800acd8:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 800acdc:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 800ace0:	d108      	bne.n	800acf4 <__ssvfscanf_r+0x1084>
 800ace2:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 800ace6:	f04f 0b01 	mov.w	fp, #1
 800acea:	e7ec      	b.n	800acc6 <__ssvfscanf_r+0x1056>
 800acec:	f1bb 0f02 	cmp.w	fp, #2
 800acf0:	f000 8085 	beq.w	800adfe <__ssvfscanf_r+0x118e>
 800acf4:	f1b8 0f01 	cmp.w	r8, #1
 800acf8:	d002      	beq.n	800ad00 <__ssvfscanf_r+0x1090>
 800acfa:	f1b8 0f04 	cmp.w	r8, #4
 800acfe:	d10f      	bne.n	800ad20 <__ssvfscanf_r+0x10b0>
 800ad00:	f108 0801 	add.w	r8, r8, #1
 800ad04:	fa5f f888 	uxtb.w	r8, r8
 800ad08:	e7dd      	b.n	800acc6 <__ssvfscanf_r+0x1056>
 800ad0a:	0529      	lsls	r1, r5, #20
 800ad0c:	d505      	bpl.n	800ad1a <__ssvfscanf_r+0x10aa>
 800ad0e:	eb1b 0f08 	cmn.w	fp, r8
 800ad12:	d102      	bne.n	800ad1a <__ssvfscanf_r+0x10aa>
 800ad14:	f425 75c0 	bic.w	r5, r5, #384	; 0x180
 800ad18:	e7d5      	b.n	800acc6 <__ssvfscanf_r+0x1056>
 800ad1a:	f1bb 0f01 	cmp.w	fp, #1
 800ad1e:	d071      	beq.n	800ae04 <__ssvfscanf_r+0x1194>
 800ad20:	f1ba 0f00 	cmp.w	sl, #0
 800ad24:	d001      	beq.n	800ad2a <__ssvfscanf_r+0x10ba>
 800ad26:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800ad2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ad2e:	f1bb 0f01 	cmp.w	fp, #1
 800ad32:	d877      	bhi.n	800ae24 <__ssvfscanf_r+0x11b4>
 800ad34:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 800ad38:	45a9      	cmp	r9, r5
 800ad3a:	f67f a895 	bls.w	8009e68 <__ssvfscanf_r+0x1f8>
 800ad3e:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800ad42:	ee18 0a10 	vmov	r0, s16
 800ad46:	4622      	mov	r2, r4
 800ad48:	f003 f86f 	bl	800de2a <_sungetc_r>
 800ad4c:	e7f4      	b.n	800ad38 <__ssvfscanf_r+0x10c8>
 800ad4e:	f1b8 0f00 	cmp.w	r8, #0
 800ad52:	d10c      	bne.n	800ad6e <__ssvfscanf_r+0x10fe>
 800ad54:	f1ba 0f00 	cmp.w	sl, #0
 800ad58:	d1e5      	bne.n	800ad26 <__ssvfscanf_r+0x10b6>
 800ad5a:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 800ad5e:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 800ad62:	d1e2      	bne.n	800ad2a <__ssvfscanf_r+0x10ba>
 800ad64:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 800ad68:	f04f 0801 	mov.w	r8, #1
 800ad6c:	e7ab      	b.n	800acc6 <__ssvfscanf_r+0x1056>
 800ad6e:	f1b8 0f03 	cmp.w	r8, #3
 800ad72:	d0c5      	beq.n	800ad00 <__ssvfscanf_r+0x1090>
 800ad74:	f1b8 0f05 	cmp.w	r8, #5
 800ad78:	e7c1      	b.n	800acfe <__ssvfscanf_r+0x108e>
 800ad7a:	0529      	lsls	r1, r5, #20
 800ad7c:	d502      	bpl.n	800ad84 <__ssvfscanf_r+0x1114>
 800ad7e:	eb1b 0f08 	cmn.w	fp, r8
 800ad82:	d0c7      	beq.n	800ad14 <__ssvfscanf_r+0x10a4>
 800ad84:	f1b8 0f02 	cmp.w	r8, #2
 800ad88:	d1ca      	bne.n	800ad20 <__ssvfscanf_r+0x10b0>
 800ad8a:	f04f 0803 	mov.w	r8, #3
 800ad8e:	e79a      	b.n	800acc6 <__ssvfscanf_r+0x1056>
 800ad90:	f1b8 0f06 	cmp.w	r8, #6
 800ad94:	d1c4      	bne.n	800ad20 <__ssvfscanf_r+0x10b0>
 800ad96:	f04f 0807 	mov.w	r8, #7
 800ad9a:	e794      	b.n	800acc6 <__ssvfscanf_r+0x1056>
 800ad9c:	f1b8 0f07 	cmp.w	r8, #7
 800ada0:	d1be      	bne.n	800ad20 <__ssvfscanf_r+0x10b0>
 800ada2:	f04f 0808 	mov.w	r8, #8
 800ada6:	e78e      	b.n	800acc6 <__ssvfscanf_r+0x1056>
 800ada8:	0800dbfd 	.word	0x0800dbfd
 800adac:	0800fff2 	.word	0x0800fff2
 800adb0:	0529      	lsls	r1, r5, #20
 800adb2:	d5b5      	bpl.n	800ad20 <__ssvfscanf_r+0x10b0>
 800adb4:	f405 6ca0 	and.w	ip, r5, #1280	; 0x500
 800adb8:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800adbc:	d004      	beq.n	800adc8 <__ssvfscanf_r+0x1158>
 800adbe:	0569      	lsls	r1, r5, #21
 800adc0:	d5ae      	bpl.n	800ad20 <__ssvfscanf_r+0x10b0>
 800adc2:	f1ba 0f00 	cmp.w	sl, #0
 800adc6:	d0b0      	beq.n	800ad2a <__ssvfscanf_r+0x10ba>
 800adc8:	05a9      	lsls	r1, r5, #22
 800adca:	bf58      	it	pl
 800adcc:	6ab9      	ldrpl	r1, [r7, #40]	; 0x28
 800adce:	f425 6578 	bic.w	r5, r5, #3968	; 0xf80
 800add2:	bf5c      	itt	pl
 800add4:	ebaa 0101 	subpl.w	r1, sl, r1
 800add8:	e9c7 9103 	strdpl	r9, r1, [r7, #12]
 800addc:	f445 75c0 	orr.w	r5, r5, #384	; 0x180
 800ade0:	e76a      	b.n	800acb8 <__ssvfscanf_r+0x1048>
 800ade2:	0529      	lsls	r1, r5, #20
 800ade4:	d5e6      	bpl.n	800adb4 <__ssvfscanf_r+0x1144>
 800ade6:	e752      	b.n	800ac8e <__ssvfscanf_r+0x101e>
 800ade8:	f892 c000 	ldrb.w	ip, [r2]
 800adec:	4584      	cmp	ip, r0
 800adee:	d197      	bne.n	800ad20 <__ssvfscanf_r+0x10b0>
 800adf0:	05a9      	lsls	r1, r5, #22
 800adf2:	d595      	bpl.n	800ad20 <__ssvfscanf_r+0x10b0>
 800adf4:	f425 7520 	bic.w	r5, r5, #640	; 0x280
 800adf8:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 800adfc:	e763      	b.n	800acc6 <__ssvfscanf_r+0x1056>
 800adfe:	f04f 0b03 	mov.w	fp, #3
 800ae02:	e760      	b.n	800acc6 <__ssvfscanf_r+0x1056>
 800ae04:	f04f 0b02 	mov.w	fp, #2
 800ae08:	e75d      	b.n	800acc6 <__ssvfscanf_r+0x1056>
 800ae0a:	ee18 0a10 	vmov	r0, s16
 800ae0e:	4621      	mov	r1, r4
 800ae10:	e9c7 2301 	strd	r2, r3, [r7, #4]
 800ae14:	f003 f846 	bl	800dea4 <__ssrefill_r>
 800ae18:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	f43f af30 	beq.w	800ac82 <__ssvfscanf_r+0x1012>
 800ae22:	e77d      	b.n	800ad20 <__ssvfscanf_r+0x10b0>
 800ae24:	f108 33ff 	add.w	r3, r8, #4294967295
 800ae28:	2b06      	cmp	r3, #6
 800ae2a:	d829      	bhi.n	800ae80 <__ssvfscanf_r+0x1210>
 800ae2c:	f1b8 0f02 	cmp.w	r8, #2
 800ae30:	d837      	bhi.n	800aea2 <__ssvfscanf_r+0x1232>
 800ae32:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 800ae36:	45a9      	cmp	r9, r5
 800ae38:	f67f a816 	bls.w	8009e68 <__ssvfscanf_r+0x1f8>
 800ae3c:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800ae40:	ee18 0a10 	vmov	r0, s16
 800ae44:	4622      	mov	r2, r4
 800ae46:	f002 fff0 	bl	800de2a <_sungetc_r>
 800ae4a:	e7f4      	b.n	800ae36 <__ssvfscanf_r+0x11c6>
 800ae4c:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800ae50:	633b      	str	r3, [r7, #48]	; 0x30
 800ae52:	ee18 0a10 	vmov	r0, s16
 800ae56:	4622      	mov	r2, r4
 800ae58:	f002 ffe7 	bl	800de2a <_sungetc_r>
 800ae5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae62:	fa5f fb8b 	uxtb.w	fp, fp
 800ae66:	f1bb 0f02 	cmp.w	fp, #2
 800ae6a:	d1ef      	bne.n	800ae4c <__ssvfscanf_r+0x11dc>
 800ae6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6e:	f1a8 0803 	sub.w	r8, r8, #3
 800ae72:	fa5f f888 	uxtb.w	r8, r8
 800ae76:	eba3 0308 	sub.w	r3, r3, r8
 800ae7a:	eba9 0908 	sub.w	r9, r9, r8
 800ae7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae80:	05eb      	lsls	r3, r5, #23
 800ae82:	d530      	bpl.n	800aee6 <__ssvfscanf_r+0x1276>
 800ae84:	0568      	lsls	r0, r5, #21
 800ae86:	d50f      	bpl.n	800aea8 <__ssvfscanf_r+0x1238>
 800ae88:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 800ae8c:	45a9      	cmp	r9, r5
 800ae8e:	f67e afeb 	bls.w	8009e68 <__ssvfscanf_r+0x1f8>
 800ae92:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800ae96:	ee18 0a10 	vmov	r0, s16
 800ae9a:	4622      	mov	r2, r4
 800ae9c:	f002 ffc5 	bl	800de2a <_sungetc_r>
 800aea0:	e7f4      	b.n	800ae8c <__ssvfscanf_r+0x121c>
 800aea2:	46c3      	mov	fp, r8
 800aea4:	464b      	mov	r3, r9
 800aea6:	e7da      	b.n	800ae5e <__ssvfscanf_r+0x11ee>
 800aea8:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 800aeac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeae:	2965      	cmp	r1, #101	; 0x65
 800aeb0:	f109 38ff 	add.w	r8, r9, #4294967295
 800aeb4:	f103 3bff 	add.w	fp, r3, #4294967295
 800aeb8:	d00d      	beq.n	800aed6 <__ssvfscanf_r+0x1266>
 800aeba:	2945      	cmp	r1, #69	; 0x45
 800aebc:	d00b      	beq.n	800aed6 <__ssvfscanf_r+0x1266>
 800aebe:	ee18 0a10 	vmov	r0, s16
 800aec2:	4622      	mov	r2, r4
 800aec4:	f002 ffb1 	bl	800de2a <_sungetc_r>
 800aec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeca:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 800aece:	f1a9 0802 	sub.w	r8, r9, #2
 800aed2:	f1a3 0b02 	sub.w	fp, r3, #2
 800aed6:	ee18 0a10 	vmov	r0, s16
 800aeda:	4622      	mov	r2, r4
 800aedc:	f002 ffa5 	bl	800de2a <_sungetc_r>
 800aee0:	46c1      	mov	r9, r8
 800aee2:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 800aee6:	f015 0210 	ands.w	r2, r5, #16
 800aeea:	f47e aedf 	bne.w	8009cac <__ssvfscanf_r+0x3c>
 800aeee:	f405 63c0 	and.w	r3, r5, #1536	; 0x600
 800aef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aef6:	f889 2000 	strb.w	r2, [r9]
 800aefa:	d11a      	bne.n	800af32 <__ssvfscanf_r+0x12c2>
 800aefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefe:	4553      	cmp	r3, sl
 800af00:	eba3 020a 	sub.w	r2, r3, sl
 800af04:	d123      	bne.n	800af4e <__ssvfscanf_r+0x12de>
 800af06:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800af0a:	ee18 0a10 	vmov	r0, s16
 800af0e:	2200      	movs	r2, #0
 800af10:	f002 fd64 	bl	800d9dc <_strtod_r>
 800af14:	07e9      	lsls	r1, r5, #31
 800af16:	ec59 8b10 	vmov	r8, r9, d0
 800af1a:	f106 0a04 	add.w	sl, r6, #4
 800af1e:	d521      	bpl.n	800af64 <__ssvfscanf_r+0x12f4>
 800af20:	6833      	ldr	r3, [r6, #0]
 800af22:	ed83 0b00 	vstr	d0, [r3]
 800af26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af28:	3301      	adds	r3, #1
 800af2a:	627b      	str	r3, [r7, #36]	; 0x24
 800af2c:	4656      	mov	r6, sl
 800af2e:	f7fe bebd 	b.w	8009cac <__ssvfscanf_r+0x3c>
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d0e6      	beq.n	800af06 <__ssvfscanf_r+0x1296>
 800af38:	68f9      	ldr	r1, [r7, #12]
 800af3a:	230a      	movs	r3, #10
 800af3c:	ee18 0a10 	vmov	r0, s16
 800af40:	3101      	adds	r1, #1
 800af42:	f7fd fca5 	bl	8008890 <_strtol_r>
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	f8d7 900c 	ldr.w	r9, [r7, #12]
 800af4c:	1ac2      	subs	r2, r0, r3
 800af4e:	f207 23a3 	addw	r3, r7, #675	; 0x2a3
 800af52:	4599      	cmp	r9, r3
 800af54:	bf28      	it	cs
 800af56:	f207 29a2 	addwcs	r9, r7, #674	; 0x2a2
 800af5a:	4915      	ldr	r1, [pc, #84]	; (800afb0 <__ssvfscanf_r+0x1340>)
 800af5c:	4648      	mov	r0, r9
 800af5e:	f7fd fb6f 	bl	8008640 <sprintf>
 800af62:	e7d0      	b.n	800af06 <__ssvfscanf_r+0x1296>
 800af64:	07aa      	lsls	r2, r5, #30
 800af66:	6836      	ldr	r6, [r6, #0]
 800af68:	d502      	bpl.n	800af70 <__ssvfscanf_r+0x1300>
 800af6a:	ed86 0b00 	vstr	d0, [r6]
 800af6e:	e7da      	b.n	800af26 <__ssvfscanf_r+0x12b6>
 800af70:	ee10 2a10 	vmov	r2, s0
 800af74:	ee10 0a10 	vmov	r0, s0
 800af78:	464b      	mov	r3, r9
 800af7a:	4649      	mov	r1, r9
 800af7c:	f7f5 fdde 	bl	8000b3c <__aeabi_dcmpun>
 800af80:	b128      	cbz	r0, 800af8e <__ssvfscanf_r+0x131e>
 800af82:	480c      	ldr	r0, [pc, #48]	; (800afb4 <__ssvfscanf_r+0x1344>)
 800af84:	f001 feec 	bl	800cd60 <nanf>
 800af88:	ed86 0a00 	vstr	s0, [r6]
 800af8c:	e7cb      	b.n	800af26 <__ssvfscanf_r+0x12b6>
 800af8e:	4640      	mov	r0, r8
 800af90:	4649      	mov	r1, r9
 800af92:	f7f5 fe31 	bl	8000bf8 <__aeabi_d2f>
 800af96:	6030      	str	r0, [r6, #0]
 800af98:	e7c5      	b.n	800af26 <__ssvfscanf_r+0x12b6>
 800af9a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800af9e:	6818      	ldr	r0, [r3, #0]
 800afa0:	f7fd f8e6 	bl	8008170 <free>
 800afa4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800afa8:	3401      	adds	r4, #1
 800afaa:	601e      	str	r6, [r3, #0]
 800afac:	f7ff b82b 	b.w	800a006 <__ssvfscanf_r+0x396>
 800afb0:	0800ffec 	.word	0x0800ffec
 800afb4:	08010383 	.word	0x08010383

0800afb8 <sysconf>:
 800afb8:	2808      	cmp	r0, #8
 800afba:	b508      	push	{r3, lr}
 800afbc:	d006      	beq.n	800afcc <sysconf+0x14>
 800afbe:	f7fd f8a5 	bl	800810c <__errno>
 800afc2:	2316      	movs	r3, #22
 800afc4:	6003      	str	r3, [r0, #0]
 800afc6:	f04f 30ff 	mov.w	r0, #4294967295
 800afca:	bd08      	pop	{r3, pc}
 800afcc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800afd0:	e7fb      	b.n	800afca <sysconf+0x12>
	...

0800afd4 <_write_r>:
 800afd4:	b538      	push	{r3, r4, r5, lr}
 800afd6:	4d07      	ldr	r5, [pc, #28]	; (800aff4 <_write_r+0x20>)
 800afd8:	4604      	mov	r4, r0
 800afda:	4608      	mov	r0, r1
 800afdc:	4611      	mov	r1, r2
 800afde:	2200      	movs	r2, #0
 800afe0:	602a      	str	r2, [r5, #0]
 800afe2:	461a      	mov	r2, r3
 800afe4:	f7f8 fd0d 	bl	8003a02 <_write>
 800afe8:	1c43      	adds	r3, r0, #1
 800afea:	d102      	bne.n	800aff2 <_write_r+0x1e>
 800afec:	682b      	ldr	r3, [r5, #0]
 800afee:	b103      	cbz	r3, 800aff2 <_write_r+0x1e>
 800aff0:	6023      	str	r3, [r4, #0]
 800aff2:	bd38      	pop	{r3, r4, r5, pc}
 800aff4:	200011a0 	.word	0x200011a0

0800aff8 <register_fini>:
 800aff8:	4b02      	ldr	r3, [pc, #8]	; (800b004 <register_fini+0xc>)
 800affa:	b113      	cbz	r3, 800b002 <register_fini+0xa>
 800affc:	4802      	ldr	r0, [pc, #8]	; (800b008 <register_fini+0x10>)
 800affe:	f000 b805 	b.w	800b00c <atexit>
 800b002:	4770      	bx	lr
 800b004:	00000000 	.word	0x00000000
 800b008:	0800bcfd 	.word	0x0800bcfd

0800b00c <atexit>:
 800b00c:	2300      	movs	r3, #0
 800b00e:	4601      	mov	r1, r0
 800b010:	461a      	mov	r2, r3
 800b012:	4618      	mov	r0, r3
 800b014:	f002 bfe2 	b.w	800dfdc <__register_exitproc>

0800b018 <_close_r>:
 800b018:	b538      	push	{r3, r4, r5, lr}
 800b01a:	4d06      	ldr	r5, [pc, #24]	; (800b034 <_close_r+0x1c>)
 800b01c:	2300      	movs	r3, #0
 800b01e:	4604      	mov	r4, r0
 800b020:	4608      	mov	r0, r1
 800b022:	602b      	str	r3, [r5, #0]
 800b024:	f7f8 fd09 	bl	8003a3a <_close>
 800b028:	1c43      	adds	r3, r0, #1
 800b02a:	d102      	bne.n	800b032 <_close_r+0x1a>
 800b02c:	682b      	ldr	r3, [r5, #0]
 800b02e:	b103      	cbz	r3, 800b032 <_close_r+0x1a>
 800b030:	6023      	str	r3, [r4, #0]
 800b032:	bd38      	pop	{r3, r4, r5, pc}
 800b034:	200011a0 	.word	0x200011a0

0800b038 <quorem>:
 800b038:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b03c:	6903      	ldr	r3, [r0, #16]
 800b03e:	690c      	ldr	r4, [r1, #16]
 800b040:	42a3      	cmp	r3, r4
 800b042:	4607      	mov	r7, r0
 800b044:	f2c0 8081 	blt.w	800b14a <quorem+0x112>
 800b048:	3c01      	subs	r4, #1
 800b04a:	f101 0814 	add.w	r8, r1, #20
 800b04e:	f100 0514 	add.w	r5, r0, #20
 800b052:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b056:	9301      	str	r3, [sp, #4]
 800b058:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b05c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b060:	3301      	adds	r3, #1
 800b062:	429a      	cmp	r2, r3
 800b064:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b068:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b06c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b070:	d331      	bcc.n	800b0d6 <quorem+0x9e>
 800b072:	f04f 0e00 	mov.w	lr, #0
 800b076:	4640      	mov	r0, r8
 800b078:	46ac      	mov	ip, r5
 800b07a:	46f2      	mov	sl, lr
 800b07c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b080:	b293      	uxth	r3, r2
 800b082:	fb06 e303 	mla	r3, r6, r3, lr
 800b086:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	ebaa 0303 	sub.w	r3, sl, r3
 800b090:	f8dc a000 	ldr.w	sl, [ip]
 800b094:	0c12      	lsrs	r2, r2, #16
 800b096:	fa13 f38a 	uxtah	r3, r3, sl
 800b09a:	fb06 e202 	mla	r2, r6, r2, lr
 800b09e:	9300      	str	r3, [sp, #0]
 800b0a0:	9b00      	ldr	r3, [sp, #0]
 800b0a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b0a6:	b292      	uxth	r2, r2
 800b0a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b0ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0b0:	f8bd 3000 	ldrh.w	r3, [sp]
 800b0b4:	4581      	cmp	r9, r0
 800b0b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0ba:	f84c 3b04 	str.w	r3, [ip], #4
 800b0be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b0c2:	d2db      	bcs.n	800b07c <quorem+0x44>
 800b0c4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b0c8:	b92b      	cbnz	r3, 800b0d6 <quorem+0x9e>
 800b0ca:	9b01      	ldr	r3, [sp, #4]
 800b0cc:	3b04      	subs	r3, #4
 800b0ce:	429d      	cmp	r5, r3
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	d32e      	bcc.n	800b132 <quorem+0xfa>
 800b0d4:	613c      	str	r4, [r7, #16]
 800b0d6:	4638      	mov	r0, r7
 800b0d8:	f001 fa1e 	bl	800c518 <__mcmp>
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	db24      	blt.n	800b12a <quorem+0xf2>
 800b0e0:	3601      	adds	r6, #1
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	f04f 0c00 	mov.w	ip, #0
 800b0e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b0ec:	f8d0 e000 	ldr.w	lr, [r0]
 800b0f0:	b293      	uxth	r3, r2
 800b0f2:	ebac 0303 	sub.w	r3, ip, r3
 800b0f6:	0c12      	lsrs	r2, r2, #16
 800b0f8:	fa13 f38e 	uxtah	r3, r3, lr
 800b0fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b100:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b104:	b29b      	uxth	r3, r3
 800b106:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b10a:	45c1      	cmp	r9, r8
 800b10c:	f840 3b04 	str.w	r3, [r0], #4
 800b110:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b114:	d2e8      	bcs.n	800b0e8 <quorem+0xb0>
 800b116:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b11a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b11e:	b922      	cbnz	r2, 800b12a <quorem+0xf2>
 800b120:	3b04      	subs	r3, #4
 800b122:	429d      	cmp	r5, r3
 800b124:	461a      	mov	r2, r3
 800b126:	d30a      	bcc.n	800b13e <quorem+0x106>
 800b128:	613c      	str	r4, [r7, #16]
 800b12a:	4630      	mov	r0, r6
 800b12c:	b003      	add	sp, #12
 800b12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b132:	6812      	ldr	r2, [r2, #0]
 800b134:	3b04      	subs	r3, #4
 800b136:	2a00      	cmp	r2, #0
 800b138:	d1cc      	bne.n	800b0d4 <quorem+0x9c>
 800b13a:	3c01      	subs	r4, #1
 800b13c:	e7c7      	b.n	800b0ce <quorem+0x96>
 800b13e:	6812      	ldr	r2, [r2, #0]
 800b140:	3b04      	subs	r3, #4
 800b142:	2a00      	cmp	r2, #0
 800b144:	d1f0      	bne.n	800b128 <quorem+0xf0>
 800b146:	3c01      	subs	r4, #1
 800b148:	e7eb      	b.n	800b122 <quorem+0xea>
 800b14a:	2000      	movs	r0, #0
 800b14c:	e7ee      	b.n	800b12c <quorem+0xf4>
	...

0800b150 <_dtoa_r>:
 800b150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b154:	ed2d 8b04 	vpush	{d8-d9}
 800b158:	b093      	sub	sp, #76	; 0x4c
 800b15a:	ec57 6b10 	vmov	r6, r7, d0
 800b15e:	9106      	str	r1, [sp, #24]
 800b160:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800b162:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800b164:	9209      	str	r2, [sp, #36]	; 0x24
 800b166:	ee10 aa10 	vmov	sl, s0
 800b16a:	4604      	mov	r4, r0
 800b16c:	930c      	str	r3, [sp, #48]	; 0x30
 800b16e:	46bb      	mov	fp, r7
 800b170:	b141      	cbz	r1, 800b184 <_dtoa_r+0x34>
 800b172:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b174:	604a      	str	r2, [r1, #4]
 800b176:	2301      	movs	r3, #1
 800b178:	4093      	lsls	r3, r2
 800b17a:	608b      	str	r3, [r1, #8]
 800b17c:	f000 ff73 	bl	800c066 <_Bfree>
 800b180:	2300      	movs	r3, #0
 800b182:	6423      	str	r3, [r4, #64]	; 0x40
 800b184:	1e3b      	subs	r3, r7, #0
 800b186:	bfaa      	itet	ge
 800b188:	2300      	movge	r3, #0
 800b18a:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b18e:	602b      	strge	r3, [r5, #0]
 800b190:	4ba3      	ldr	r3, [pc, #652]	; (800b420 <_dtoa_r+0x2d0>)
 800b192:	bfbc      	itt	lt
 800b194:	2201      	movlt	r2, #1
 800b196:	602a      	strlt	r2, [r5, #0]
 800b198:	ea33 030b 	bics.w	r3, r3, fp
 800b19c:	d11b      	bne.n	800b1d6 <_dtoa_r+0x86>
 800b19e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1a0:	f242 730f 	movw	r3, #9999	; 0x270f
 800b1a4:	6013      	str	r3, [r2, #0]
 800b1a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1aa:	4333      	orrs	r3, r6
 800b1ac:	f000 8590 	beq.w	800bcd0 <_dtoa_r+0xb80>
 800b1b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1b2:	b90b      	cbnz	r3, 800b1b8 <_dtoa_r+0x68>
 800b1b4:	4b9b      	ldr	r3, [pc, #620]	; (800b424 <_dtoa_r+0x2d4>)
 800b1b6:	e022      	b.n	800b1fe <_dtoa_r+0xae>
 800b1b8:	4b9a      	ldr	r3, [pc, #616]	; (800b424 <_dtoa_r+0x2d4>)
 800b1ba:	9301      	str	r3, [sp, #4]
 800b1bc:	3303      	adds	r3, #3
 800b1be:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b1c0:	6013      	str	r3, [r2, #0]
 800b1c2:	9801      	ldr	r0, [sp, #4]
 800b1c4:	b013      	add	sp, #76	; 0x4c
 800b1c6:	ecbd 8b04 	vpop	{d8-d9}
 800b1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ce:	4b96      	ldr	r3, [pc, #600]	; (800b428 <_dtoa_r+0x2d8>)
 800b1d0:	9301      	str	r3, [sp, #4]
 800b1d2:	3308      	adds	r3, #8
 800b1d4:	e7f3      	b.n	800b1be <_dtoa_r+0x6e>
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	2300      	movs	r3, #0
 800b1da:	4650      	mov	r0, sl
 800b1dc:	4659      	mov	r1, fp
 800b1de:	f7f5 fc7b 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1e2:	ec4b ab19 	vmov	d9, sl, fp
 800b1e6:	4680      	mov	r8, r0
 800b1e8:	b158      	cbz	r0, 800b202 <_dtoa_r+0xb2>
 800b1ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	6013      	str	r3, [r2, #0]
 800b1f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f000 8569 	beq.w	800bcca <_dtoa_r+0xb7a>
 800b1f8:	488c      	ldr	r0, [pc, #560]	; (800b42c <_dtoa_r+0x2dc>)
 800b1fa:	6018      	str	r0, [r3, #0]
 800b1fc:	1e43      	subs	r3, r0, #1
 800b1fe:	9301      	str	r3, [sp, #4]
 800b200:	e7df      	b.n	800b1c2 <_dtoa_r+0x72>
 800b202:	ec4b ab10 	vmov	d0, sl, fp
 800b206:	aa10      	add	r2, sp, #64	; 0x40
 800b208:	a911      	add	r1, sp, #68	; 0x44
 800b20a:	4620      	mov	r0, r4
 800b20c:	f001 faa6 	bl	800c75c <__d2b>
 800b210:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b214:	ee08 0a10 	vmov	s16, r0
 800b218:	2d00      	cmp	r5, #0
 800b21a:	f000 8082 	beq.w	800b322 <_dtoa_r+0x1d2>
 800b21e:	ee19 3a90 	vmov	r3, s19
 800b222:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b226:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b22a:	4656      	mov	r6, sl
 800b22c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b230:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b234:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b238:	4b7d      	ldr	r3, [pc, #500]	; (800b430 <_dtoa_r+0x2e0>)
 800b23a:	2200      	movs	r2, #0
 800b23c:	4630      	mov	r0, r6
 800b23e:	4639      	mov	r1, r7
 800b240:	f7f5 f82a 	bl	8000298 <__aeabi_dsub>
 800b244:	a370      	add	r3, pc, #448	; (adr r3, 800b408 <_dtoa_r+0x2b8>)
 800b246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24a:	f7f5 f9dd 	bl	8000608 <__aeabi_dmul>
 800b24e:	a370      	add	r3, pc, #448	; (adr r3, 800b410 <_dtoa_r+0x2c0>)
 800b250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b254:	f7f5 f822 	bl	800029c <__adddf3>
 800b258:	4606      	mov	r6, r0
 800b25a:	4628      	mov	r0, r5
 800b25c:	460f      	mov	r7, r1
 800b25e:	f7f5 f969 	bl	8000534 <__aeabi_i2d>
 800b262:	a36d      	add	r3, pc, #436	; (adr r3, 800b418 <_dtoa_r+0x2c8>)
 800b264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b268:	f7f5 f9ce 	bl	8000608 <__aeabi_dmul>
 800b26c:	4602      	mov	r2, r0
 800b26e:	460b      	mov	r3, r1
 800b270:	4630      	mov	r0, r6
 800b272:	4639      	mov	r1, r7
 800b274:	f7f5 f812 	bl	800029c <__adddf3>
 800b278:	4606      	mov	r6, r0
 800b27a:	460f      	mov	r7, r1
 800b27c:	f7f5 fc74 	bl	8000b68 <__aeabi_d2iz>
 800b280:	2200      	movs	r2, #0
 800b282:	9000      	str	r0, [sp, #0]
 800b284:	2300      	movs	r3, #0
 800b286:	4630      	mov	r0, r6
 800b288:	4639      	mov	r1, r7
 800b28a:	f7f5 fc2f 	bl	8000aec <__aeabi_dcmplt>
 800b28e:	b150      	cbz	r0, 800b2a6 <_dtoa_r+0x156>
 800b290:	9800      	ldr	r0, [sp, #0]
 800b292:	f7f5 f94f 	bl	8000534 <__aeabi_i2d>
 800b296:	4632      	mov	r2, r6
 800b298:	463b      	mov	r3, r7
 800b29a:	f7f5 fc1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b29e:	b910      	cbnz	r0, 800b2a6 <_dtoa_r+0x156>
 800b2a0:	9b00      	ldr	r3, [sp, #0]
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	9300      	str	r3, [sp, #0]
 800b2a6:	9b00      	ldr	r3, [sp, #0]
 800b2a8:	2b16      	cmp	r3, #22
 800b2aa:	d858      	bhi.n	800b35e <_dtoa_r+0x20e>
 800b2ac:	9a00      	ldr	r2, [sp, #0]
 800b2ae:	4b61      	ldr	r3, [pc, #388]	; (800b434 <_dtoa_r+0x2e4>)
 800b2b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b8:	ec51 0b19 	vmov	r0, r1, d9
 800b2bc:	f7f5 fc16 	bl	8000aec <__aeabi_dcmplt>
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	d04e      	beq.n	800b362 <_dtoa_r+0x212>
 800b2c4:	9b00      	ldr	r3, [sp, #0]
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	9300      	str	r3, [sp, #0]
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2d0:	1b5d      	subs	r5, r3, r5
 800b2d2:	1e6b      	subs	r3, r5, #1
 800b2d4:	9305      	str	r3, [sp, #20]
 800b2d6:	bf45      	ittet	mi
 800b2d8:	f1c5 0301 	rsbmi	r3, r5, #1
 800b2dc:	9304      	strmi	r3, [sp, #16]
 800b2de:	2300      	movpl	r3, #0
 800b2e0:	2300      	movmi	r3, #0
 800b2e2:	bf4c      	ite	mi
 800b2e4:	9305      	strmi	r3, [sp, #20]
 800b2e6:	9304      	strpl	r3, [sp, #16]
 800b2e8:	9b00      	ldr	r3, [sp, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	db3b      	blt.n	800b366 <_dtoa_r+0x216>
 800b2ee:	9b05      	ldr	r3, [sp, #20]
 800b2f0:	9a00      	ldr	r2, [sp, #0]
 800b2f2:	920a      	str	r2, [sp, #40]	; 0x28
 800b2f4:	4413      	add	r3, r2
 800b2f6:	9305      	str	r3, [sp, #20]
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	9307      	str	r3, [sp, #28]
 800b2fc:	9b06      	ldr	r3, [sp, #24]
 800b2fe:	2b09      	cmp	r3, #9
 800b300:	d869      	bhi.n	800b3d6 <_dtoa_r+0x286>
 800b302:	2b05      	cmp	r3, #5
 800b304:	bfc4      	itt	gt
 800b306:	3b04      	subgt	r3, #4
 800b308:	9306      	strgt	r3, [sp, #24]
 800b30a:	9b06      	ldr	r3, [sp, #24]
 800b30c:	f1a3 0302 	sub.w	r3, r3, #2
 800b310:	bfcc      	ite	gt
 800b312:	2500      	movgt	r5, #0
 800b314:	2501      	movle	r5, #1
 800b316:	2b03      	cmp	r3, #3
 800b318:	d868      	bhi.n	800b3ec <_dtoa_r+0x29c>
 800b31a:	e8df f003 	tbb	[pc, r3]
 800b31e:	3a2d      	.short	0x3a2d
 800b320:	5a38      	.short	0x5a38
 800b322:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b326:	441d      	add	r5, r3
 800b328:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b32c:	2b20      	cmp	r3, #32
 800b32e:	bfc1      	itttt	gt
 800b330:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b334:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b338:	fa0b f303 	lslgt.w	r3, fp, r3
 800b33c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b340:	bfda      	itte	le
 800b342:	f1c3 0320 	rsble	r3, r3, #32
 800b346:	fa06 f003 	lslle.w	r0, r6, r3
 800b34a:	4318      	orrgt	r0, r3
 800b34c:	f7f5 f8e2 	bl	8000514 <__aeabi_ui2d>
 800b350:	2301      	movs	r3, #1
 800b352:	4606      	mov	r6, r0
 800b354:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b358:	3d01      	subs	r5, #1
 800b35a:	930e      	str	r3, [sp, #56]	; 0x38
 800b35c:	e76c      	b.n	800b238 <_dtoa_r+0xe8>
 800b35e:	2301      	movs	r3, #1
 800b360:	e7b4      	b.n	800b2cc <_dtoa_r+0x17c>
 800b362:	900b      	str	r0, [sp, #44]	; 0x2c
 800b364:	e7b3      	b.n	800b2ce <_dtoa_r+0x17e>
 800b366:	9b04      	ldr	r3, [sp, #16]
 800b368:	9a00      	ldr	r2, [sp, #0]
 800b36a:	1a9b      	subs	r3, r3, r2
 800b36c:	9304      	str	r3, [sp, #16]
 800b36e:	4253      	negs	r3, r2
 800b370:	9307      	str	r3, [sp, #28]
 800b372:	2300      	movs	r3, #0
 800b374:	930a      	str	r3, [sp, #40]	; 0x28
 800b376:	e7c1      	b.n	800b2fc <_dtoa_r+0x1ac>
 800b378:	2300      	movs	r3, #0
 800b37a:	9308      	str	r3, [sp, #32]
 800b37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b37e:	2b00      	cmp	r3, #0
 800b380:	dc37      	bgt.n	800b3f2 <_dtoa_r+0x2a2>
 800b382:	2301      	movs	r3, #1
 800b384:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b388:	461a      	mov	r2, r3
 800b38a:	9209      	str	r2, [sp, #36]	; 0x24
 800b38c:	e00c      	b.n	800b3a8 <_dtoa_r+0x258>
 800b38e:	2301      	movs	r3, #1
 800b390:	e7f3      	b.n	800b37a <_dtoa_r+0x22a>
 800b392:	2300      	movs	r3, #0
 800b394:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b396:	9308      	str	r3, [sp, #32]
 800b398:	9b00      	ldr	r3, [sp, #0]
 800b39a:	4413      	add	r3, r2
 800b39c:	9302      	str	r3, [sp, #8]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	9303      	str	r3, [sp, #12]
 800b3a4:	bfb8      	it	lt
 800b3a6:	2301      	movlt	r3, #1
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	6462      	str	r2, [r4, #68]	; 0x44
 800b3ac:	2204      	movs	r2, #4
 800b3ae:	f102 0014 	add.w	r0, r2, #20
 800b3b2:	4298      	cmp	r0, r3
 800b3b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b3b6:	d920      	bls.n	800b3fa <_dtoa_r+0x2aa>
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f000 fe2f 	bl	800c01c <_Balloc>
 800b3be:	9001      	str	r0, [sp, #4]
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	d13d      	bne.n	800b440 <_dtoa_r+0x2f0>
 800b3c4:	4b1c      	ldr	r3, [pc, #112]	; (800b438 <_dtoa_r+0x2e8>)
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b3cc:	481b      	ldr	r0, [pc, #108]	; (800b43c <_dtoa_r+0x2ec>)
 800b3ce:	f002 fe47 	bl	800e060 <__assert_func>
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e7de      	b.n	800b394 <_dtoa_r+0x244>
 800b3d6:	2501      	movs	r5, #1
 800b3d8:	2300      	movs	r3, #0
 800b3da:	9306      	str	r3, [sp, #24]
 800b3dc:	9508      	str	r5, [sp, #32]
 800b3de:	f04f 33ff 	mov.w	r3, #4294967295
 800b3e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	2312      	movs	r3, #18
 800b3ea:	e7ce      	b.n	800b38a <_dtoa_r+0x23a>
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	9308      	str	r3, [sp, #32]
 800b3f0:	e7f5      	b.n	800b3de <_dtoa_r+0x28e>
 800b3f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b3f8:	e7d6      	b.n	800b3a8 <_dtoa_r+0x258>
 800b3fa:	3101      	adds	r1, #1
 800b3fc:	6461      	str	r1, [r4, #68]	; 0x44
 800b3fe:	0052      	lsls	r2, r2, #1
 800b400:	e7d5      	b.n	800b3ae <_dtoa_r+0x25e>
 800b402:	bf00      	nop
 800b404:	f3af 8000 	nop.w
 800b408:	636f4361 	.word	0x636f4361
 800b40c:	3fd287a7 	.word	0x3fd287a7
 800b410:	8b60c8b3 	.word	0x8b60c8b3
 800b414:	3fc68a28 	.word	0x3fc68a28
 800b418:	509f79fb 	.word	0x509f79fb
 800b41c:	3fd34413 	.word	0x3fd34413
 800b420:	7ff00000 	.word	0x7ff00000
 800b424:	08010115 	.word	0x08010115
 800b428:	08010119 	.word	0x08010119
 800b42c:	0800ffcb 	.word	0x0800ffcb
 800b430:	3ff80000 	.word	0x3ff80000
 800b434:	08010220 	.word	0x08010220
 800b438:	08010122 	.word	0x08010122
 800b43c:	08010133 	.word	0x08010133
 800b440:	9b01      	ldr	r3, [sp, #4]
 800b442:	6423      	str	r3, [r4, #64]	; 0x40
 800b444:	9b03      	ldr	r3, [sp, #12]
 800b446:	2b0e      	cmp	r3, #14
 800b448:	f200 809d 	bhi.w	800b586 <_dtoa_r+0x436>
 800b44c:	2d00      	cmp	r5, #0
 800b44e:	f000 809a 	beq.w	800b586 <_dtoa_r+0x436>
 800b452:	9b00      	ldr	r3, [sp, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	dd32      	ble.n	800b4be <_dtoa_r+0x36e>
 800b458:	4ab7      	ldr	r2, [pc, #732]	; (800b738 <_dtoa_r+0x5e8>)
 800b45a:	f003 030f 	and.w	r3, r3, #15
 800b45e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b462:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b466:	9b00      	ldr	r3, [sp, #0]
 800b468:	05d8      	lsls	r0, r3, #23
 800b46a:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b46e:	d516      	bpl.n	800b49e <_dtoa_r+0x34e>
 800b470:	4bb2      	ldr	r3, [pc, #712]	; (800b73c <_dtoa_r+0x5ec>)
 800b472:	ec51 0b19 	vmov	r0, r1, d9
 800b476:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b47a:	f7f5 f9ef 	bl	800085c <__aeabi_ddiv>
 800b47e:	f007 070f 	and.w	r7, r7, #15
 800b482:	4682      	mov	sl, r0
 800b484:	468b      	mov	fp, r1
 800b486:	2503      	movs	r5, #3
 800b488:	4eac      	ldr	r6, [pc, #688]	; (800b73c <_dtoa_r+0x5ec>)
 800b48a:	b957      	cbnz	r7, 800b4a2 <_dtoa_r+0x352>
 800b48c:	4642      	mov	r2, r8
 800b48e:	464b      	mov	r3, r9
 800b490:	4650      	mov	r0, sl
 800b492:	4659      	mov	r1, fp
 800b494:	f7f5 f9e2 	bl	800085c <__aeabi_ddiv>
 800b498:	4682      	mov	sl, r0
 800b49a:	468b      	mov	fp, r1
 800b49c:	e028      	b.n	800b4f0 <_dtoa_r+0x3a0>
 800b49e:	2502      	movs	r5, #2
 800b4a0:	e7f2      	b.n	800b488 <_dtoa_r+0x338>
 800b4a2:	07f9      	lsls	r1, r7, #31
 800b4a4:	d508      	bpl.n	800b4b8 <_dtoa_r+0x368>
 800b4a6:	4640      	mov	r0, r8
 800b4a8:	4649      	mov	r1, r9
 800b4aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b4ae:	f7f5 f8ab 	bl	8000608 <__aeabi_dmul>
 800b4b2:	3501      	adds	r5, #1
 800b4b4:	4680      	mov	r8, r0
 800b4b6:	4689      	mov	r9, r1
 800b4b8:	107f      	asrs	r7, r7, #1
 800b4ba:	3608      	adds	r6, #8
 800b4bc:	e7e5      	b.n	800b48a <_dtoa_r+0x33a>
 800b4be:	f000 809b 	beq.w	800b5f8 <_dtoa_r+0x4a8>
 800b4c2:	9b00      	ldr	r3, [sp, #0]
 800b4c4:	4f9d      	ldr	r7, [pc, #628]	; (800b73c <_dtoa_r+0x5ec>)
 800b4c6:	425e      	negs	r6, r3
 800b4c8:	4b9b      	ldr	r3, [pc, #620]	; (800b738 <_dtoa_r+0x5e8>)
 800b4ca:	f006 020f 	and.w	r2, r6, #15
 800b4ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d6:	ec51 0b19 	vmov	r0, r1, d9
 800b4da:	f7f5 f895 	bl	8000608 <__aeabi_dmul>
 800b4de:	1136      	asrs	r6, r6, #4
 800b4e0:	4682      	mov	sl, r0
 800b4e2:	468b      	mov	fp, r1
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	2502      	movs	r5, #2
 800b4e8:	2e00      	cmp	r6, #0
 800b4ea:	d17a      	bne.n	800b5e2 <_dtoa_r+0x492>
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d1d3      	bne.n	800b498 <_dtoa_r+0x348>
 800b4f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	f000 8082 	beq.w	800b5fc <_dtoa_r+0x4ac>
 800b4f8:	4b91      	ldr	r3, [pc, #580]	; (800b740 <_dtoa_r+0x5f0>)
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	4650      	mov	r0, sl
 800b4fe:	4659      	mov	r1, fp
 800b500:	f7f5 faf4 	bl	8000aec <__aeabi_dcmplt>
 800b504:	2800      	cmp	r0, #0
 800b506:	d079      	beq.n	800b5fc <_dtoa_r+0x4ac>
 800b508:	9b03      	ldr	r3, [sp, #12]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d076      	beq.n	800b5fc <_dtoa_r+0x4ac>
 800b50e:	9b02      	ldr	r3, [sp, #8]
 800b510:	2b00      	cmp	r3, #0
 800b512:	dd36      	ble.n	800b582 <_dtoa_r+0x432>
 800b514:	9b00      	ldr	r3, [sp, #0]
 800b516:	4650      	mov	r0, sl
 800b518:	4659      	mov	r1, fp
 800b51a:	1e5f      	subs	r7, r3, #1
 800b51c:	2200      	movs	r2, #0
 800b51e:	4b89      	ldr	r3, [pc, #548]	; (800b744 <_dtoa_r+0x5f4>)
 800b520:	f7f5 f872 	bl	8000608 <__aeabi_dmul>
 800b524:	9e02      	ldr	r6, [sp, #8]
 800b526:	4682      	mov	sl, r0
 800b528:	468b      	mov	fp, r1
 800b52a:	3501      	adds	r5, #1
 800b52c:	4628      	mov	r0, r5
 800b52e:	f7f5 f801 	bl	8000534 <__aeabi_i2d>
 800b532:	4652      	mov	r2, sl
 800b534:	465b      	mov	r3, fp
 800b536:	f7f5 f867 	bl	8000608 <__aeabi_dmul>
 800b53a:	4b83      	ldr	r3, [pc, #524]	; (800b748 <_dtoa_r+0x5f8>)
 800b53c:	2200      	movs	r2, #0
 800b53e:	f7f4 fead 	bl	800029c <__adddf3>
 800b542:	46d0      	mov	r8, sl
 800b544:	46d9      	mov	r9, fp
 800b546:	4682      	mov	sl, r0
 800b548:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b54c:	2e00      	cmp	r6, #0
 800b54e:	d158      	bne.n	800b602 <_dtoa_r+0x4b2>
 800b550:	4b7e      	ldr	r3, [pc, #504]	; (800b74c <_dtoa_r+0x5fc>)
 800b552:	2200      	movs	r2, #0
 800b554:	4640      	mov	r0, r8
 800b556:	4649      	mov	r1, r9
 800b558:	f7f4 fe9e 	bl	8000298 <__aeabi_dsub>
 800b55c:	4652      	mov	r2, sl
 800b55e:	465b      	mov	r3, fp
 800b560:	4680      	mov	r8, r0
 800b562:	4689      	mov	r9, r1
 800b564:	f7f5 fae0 	bl	8000b28 <__aeabi_dcmpgt>
 800b568:	2800      	cmp	r0, #0
 800b56a:	f040 8296 	bne.w	800ba9a <_dtoa_r+0x94a>
 800b56e:	4652      	mov	r2, sl
 800b570:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b574:	4640      	mov	r0, r8
 800b576:	4649      	mov	r1, r9
 800b578:	f7f5 fab8 	bl	8000aec <__aeabi_dcmplt>
 800b57c:	2800      	cmp	r0, #0
 800b57e:	f040 828a 	bne.w	800ba96 <_dtoa_r+0x946>
 800b582:	ec5b ab19 	vmov	sl, fp, d9
 800b586:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f2c0 8149 	blt.w	800b820 <_dtoa_r+0x6d0>
 800b58e:	9a00      	ldr	r2, [sp, #0]
 800b590:	2a0e      	cmp	r2, #14
 800b592:	f300 8145 	bgt.w	800b820 <_dtoa_r+0x6d0>
 800b596:	4b68      	ldr	r3, [pc, #416]	; (800b738 <_dtoa_r+0x5e8>)
 800b598:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b59c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	f280 80d6 	bge.w	800b754 <_dtoa_r+0x604>
 800b5a8:	9b03      	ldr	r3, [sp, #12]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	f300 80d2 	bgt.w	800b754 <_dtoa_r+0x604>
 800b5b0:	f040 8270 	bne.w	800ba94 <_dtoa_r+0x944>
 800b5b4:	4b65      	ldr	r3, [pc, #404]	; (800b74c <_dtoa_r+0x5fc>)
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	4640      	mov	r0, r8
 800b5ba:	4649      	mov	r1, r9
 800b5bc:	f7f5 f824 	bl	8000608 <__aeabi_dmul>
 800b5c0:	4652      	mov	r2, sl
 800b5c2:	465b      	mov	r3, fp
 800b5c4:	f7f5 faa6 	bl	8000b14 <__aeabi_dcmpge>
 800b5c8:	9e03      	ldr	r6, [sp, #12]
 800b5ca:	4637      	mov	r7, r6
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	f040 8246 	bne.w	800ba5e <_dtoa_r+0x90e>
 800b5d2:	9d01      	ldr	r5, [sp, #4]
 800b5d4:	2331      	movs	r3, #49	; 0x31
 800b5d6:	f805 3b01 	strb.w	r3, [r5], #1
 800b5da:	9b00      	ldr	r3, [sp, #0]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	9300      	str	r3, [sp, #0]
 800b5e0:	e241      	b.n	800ba66 <_dtoa_r+0x916>
 800b5e2:	07f2      	lsls	r2, r6, #31
 800b5e4:	d505      	bpl.n	800b5f2 <_dtoa_r+0x4a2>
 800b5e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5ea:	f7f5 f80d 	bl	8000608 <__aeabi_dmul>
 800b5ee:	3501      	adds	r5, #1
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	1076      	asrs	r6, r6, #1
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	e777      	b.n	800b4e8 <_dtoa_r+0x398>
 800b5f8:	2502      	movs	r5, #2
 800b5fa:	e779      	b.n	800b4f0 <_dtoa_r+0x3a0>
 800b5fc:	9f00      	ldr	r7, [sp, #0]
 800b5fe:	9e03      	ldr	r6, [sp, #12]
 800b600:	e794      	b.n	800b52c <_dtoa_r+0x3dc>
 800b602:	9901      	ldr	r1, [sp, #4]
 800b604:	4b4c      	ldr	r3, [pc, #304]	; (800b738 <_dtoa_r+0x5e8>)
 800b606:	4431      	add	r1, r6
 800b608:	910d      	str	r1, [sp, #52]	; 0x34
 800b60a:	9908      	ldr	r1, [sp, #32]
 800b60c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b610:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b614:	2900      	cmp	r1, #0
 800b616:	d043      	beq.n	800b6a0 <_dtoa_r+0x550>
 800b618:	494d      	ldr	r1, [pc, #308]	; (800b750 <_dtoa_r+0x600>)
 800b61a:	2000      	movs	r0, #0
 800b61c:	f7f5 f91e 	bl	800085c <__aeabi_ddiv>
 800b620:	4652      	mov	r2, sl
 800b622:	465b      	mov	r3, fp
 800b624:	f7f4 fe38 	bl	8000298 <__aeabi_dsub>
 800b628:	9d01      	ldr	r5, [sp, #4]
 800b62a:	4682      	mov	sl, r0
 800b62c:	468b      	mov	fp, r1
 800b62e:	4649      	mov	r1, r9
 800b630:	4640      	mov	r0, r8
 800b632:	f7f5 fa99 	bl	8000b68 <__aeabi_d2iz>
 800b636:	4606      	mov	r6, r0
 800b638:	f7f4 ff7c 	bl	8000534 <__aeabi_i2d>
 800b63c:	4602      	mov	r2, r0
 800b63e:	460b      	mov	r3, r1
 800b640:	4640      	mov	r0, r8
 800b642:	4649      	mov	r1, r9
 800b644:	f7f4 fe28 	bl	8000298 <__aeabi_dsub>
 800b648:	3630      	adds	r6, #48	; 0x30
 800b64a:	f805 6b01 	strb.w	r6, [r5], #1
 800b64e:	4652      	mov	r2, sl
 800b650:	465b      	mov	r3, fp
 800b652:	4680      	mov	r8, r0
 800b654:	4689      	mov	r9, r1
 800b656:	f7f5 fa49 	bl	8000aec <__aeabi_dcmplt>
 800b65a:	2800      	cmp	r0, #0
 800b65c:	d163      	bne.n	800b726 <_dtoa_r+0x5d6>
 800b65e:	4642      	mov	r2, r8
 800b660:	464b      	mov	r3, r9
 800b662:	4937      	ldr	r1, [pc, #220]	; (800b740 <_dtoa_r+0x5f0>)
 800b664:	2000      	movs	r0, #0
 800b666:	f7f4 fe17 	bl	8000298 <__aeabi_dsub>
 800b66a:	4652      	mov	r2, sl
 800b66c:	465b      	mov	r3, fp
 800b66e:	f7f5 fa3d 	bl	8000aec <__aeabi_dcmplt>
 800b672:	2800      	cmp	r0, #0
 800b674:	f040 80b6 	bne.w	800b7e4 <_dtoa_r+0x694>
 800b678:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b67a:	429d      	cmp	r5, r3
 800b67c:	d081      	beq.n	800b582 <_dtoa_r+0x432>
 800b67e:	4b31      	ldr	r3, [pc, #196]	; (800b744 <_dtoa_r+0x5f4>)
 800b680:	2200      	movs	r2, #0
 800b682:	4650      	mov	r0, sl
 800b684:	4659      	mov	r1, fp
 800b686:	f7f4 ffbf 	bl	8000608 <__aeabi_dmul>
 800b68a:	4b2e      	ldr	r3, [pc, #184]	; (800b744 <_dtoa_r+0x5f4>)
 800b68c:	4682      	mov	sl, r0
 800b68e:	468b      	mov	fp, r1
 800b690:	4640      	mov	r0, r8
 800b692:	4649      	mov	r1, r9
 800b694:	2200      	movs	r2, #0
 800b696:	f7f4 ffb7 	bl	8000608 <__aeabi_dmul>
 800b69a:	4680      	mov	r8, r0
 800b69c:	4689      	mov	r9, r1
 800b69e:	e7c6      	b.n	800b62e <_dtoa_r+0x4de>
 800b6a0:	4650      	mov	r0, sl
 800b6a2:	4659      	mov	r1, fp
 800b6a4:	f7f4 ffb0 	bl	8000608 <__aeabi_dmul>
 800b6a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6aa:	9d01      	ldr	r5, [sp, #4]
 800b6ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6ae:	4682      	mov	sl, r0
 800b6b0:	468b      	mov	fp, r1
 800b6b2:	4649      	mov	r1, r9
 800b6b4:	4640      	mov	r0, r8
 800b6b6:	f7f5 fa57 	bl	8000b68 <__aeabi_d2iz>
 800b6ba:	4606      	mov	r6, r0
 800b6bc:	f7f4 ff3a 	bl	8000534 <__aeabi_i2d>
 800b6c0:	3630      	adds	r6, #48	; 0x30
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	4640      	mov	r0, r8
 800b6c8:	4649      	mov	r1, r9
 800b6ca:	f7f4 fde5 	bl	8000298 <__aeabi_dsub>
 800b6ce:	f805 6b01 	strb.w	r6, [r5], #1
 800b6d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6d4:	429d      	cmp	r5, r3
 800b6d6:	4680      	mov	r8, r0
 800b6d8:	4689      	mov	r9, r1
 800b6da:	f04f 0200 	mov.w	r2, #0
 800b6de:	d124      	bne.n	800b72a <_dtoa_r+0x5da>
 800b6e0:	4b1b      	ldr	r3, [pc, #108]	; (800b750 <_dtoa_r+0x600>)
 800b6e2:	4650      	mov	r0, sl
 800b6e4:	4659      	mov	r1, fp
 800b6e6:	f7f4 fdd9 	bl	800029c <__adddf3>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	4640      	mov	r0, r8
 800b6f0:	4649      	mov	r1, r9
 800b6f2:	f7f5 fa19 	bl	8000b28 <__aeabi_dcmpgt>
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	d174      	bne.n	800b7e4 <_dtoa_r+0x694>
 800b6fa:	4652      	mov	r2, sl
 800b6fc:	465b      	mov	r3, fp
 800b6fe:	4914      	ldr	r1, [pc, #80]	; (800b750 <_dtoa_r+0x600>)
 800b700:	2000      	movs	r0, #0
 800b702:	f7f4 fdc9 	bl	8000298 <__aeabi_dsub>
 800b706:	4602      	mov	r2, r0
 800b708:	460b      	mov	r3, r1
 800b70a:	4640      	mov	r0, r8
 800b70c:	4649      	mov	r1, r9
 800b70e:	f7f5 f9ed 	bl	8000aec <__aeabi_dcmplt>
 800b712:	2800      	cmp	r0, #0
 800b714:	f43f af35 	beq.w	800b582 <_dtoa_r+0x432>
 800b718:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b71a:	1e6b      	subs	r3, r5, #1
 800b71c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b71e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b722:	2b30      	cmp	r3, #48	; 0x30
 800b724:	d0f8      	beq.n	800b718 <_dtoa_r+0x5c8>
 800b726:	9700      	str	r7, [sp, #0]
 800b728:	e04a      	b.n	800b7c0 <_dtoa_r+0x670>
 800b72a:	4b06      	ldr	r3, [pc, #24]	; (800b744 <_dtoa_r+0x5f4>)
 800b72c:	f7f4 ff6c 	bl	8000608 <__aeabi_dmul>
 800b730:	4680      	mov	r8, r0
 800b732:	4689      	mov	r9, r1
 800b734:	e7bd      	b.n	800b6b2 <_dtoa_r+0x562>
 800b736:	bf00      	nop
 800b738:	08010220 	.word	0x08010220
 800b73c:	080101f8 	.word	0x080101f8
 800b740:	3ff00000 	.word	0x3ff00000
 800b744:	40240000 	.word	0x40240000
 800b748:	401c0000 	.word	0x401c0000
 800b74c:	40140000 	.word	0x40140000
 800b750:	3fe00000 	.word	0x3fe00000
 800b754:	9d01      	ldr	r5, [sp, #4]
 800b756:	4656      	mov	r6, sl
 800b758:	465f      	mov	r7, fp
 800b75a:	4642      	mov	r2, r8
 800b75c:	464b      	mov	r3, r9
 800b75e:	4630      	mov	r0, r6
 800b760:	4639      	mov	r1, r7
 800b762:	f7f5 f87b 	bl	800085c <__aeabi_ddiv>
 800b766:	f7f5 f9ff 	bl	8000b68 <__aeabi_d2iz>
 800b76a:	4682      	mov	sl, r0
 800b76c:	f7f4 fee2 	bl	8000534 <__aeabi_i2d>
 800b770:	4642      	mov	r2, r8
 800b772:	464b      	mov	r3, r9
 800b774:	f7f4 ff48 	bl	8000608 <__aeabi_dmul>
 800b778:	4602      	mov	r2, r0
 800b77a:	460b      	mov	r3, r1
 800b77c:	4630      	mov	r0, r6
 800b77e:	4639      	mov	r1, r7
 800b780:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b784:	f7f4 fd88 	bl	8000298 <__aeabi_dsub>
 800b788:	f805 6b01 	strb.w	r6, [r5], #1
 800b78c:	9e01      	ldr	r6, [sp, #4]
 800b78e:	9f03      	ldr	r7, [sp, #12]
 800b790:	1bae      	subs	r6, r5, r6
 800b792:	42b7      	cmp	r7, r6
 800b794:	4602      	mov	r2, r0
 800b796:	460b      	mov	r3, r1
 800b798:	d135      	bne.n	800b806 <_dtoa_r+0x6b6>
 800b79a:	f7f4 fd7f 	bl	800029c <__adddf3>
 800b79e:	4642      	mov	r2, r8
 800b7a0:	464b      	mov	r3, r9
 800b7a2:	4606      	mov	r6, r0
 800b7a4:	460f      	mov	r7, r1
 800b7a6:	f7f5 f9bf 	bl	8000b28 <__aeabi_dcmpgt>
 800b7aa:	b9d0      	cbnz	r0, 800b7e2 <_dtoa_r+0x692>
 800b7ac:	4642      	mov	r2, r8
 800b7ae:	464b      	mov	r3, r9
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	4639      	mov	r1, r7
 800b7b4:	f7f5 f990 	bl	8000ad8 <__aeabi_dcmpeq>
 800b7b8:	b110      	cbz	r0, 800b7c0 <_dtoa_r+0x670>
 800b7ba:	f01a 0f01 	tst.w	sl, #1
 800b7be:	d110      	bne.n	800b7e2 <_dtoa_r+0x692>
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	ee18 1a10 	vmov	r1, s16
 800b7c6:	f000 fc4e 	bl	800c066 <_Bfree>
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	9800      	ldr	r0, [sp, #0]
 800b7ce:	702b      	strb	r3, [r5, #0]
 800b7d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7d2:	3001      	adds	r0, #1
 800b7d4:	6018      	str	r0, [r3, #0]
 800b7d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	f43f acf2 	beq.w	800b1c2 <_dtoa_r+0x72>
 800b7de:	601d      	str	r5, [r3, #0]
 800b7e0:	e4ef      	b.n	800b1c2 <_dtoa_r+0x72>
 800b7e2:	9f00      	ldr	r7, [sp, #0]
 800b7e4:	462b      	mov	r3, r5
 800b7e6:	461d      	mov	r5, r3
 800b7e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7ec:	2a39      	cmp	r2, #57	; 0x39
 800b7ee:	d106      	bne.n	800b7fe <_dtoa_r+0x6ae>
 800b7f0:	9a01      	ldr	r2, [sp, #4]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d1f7      	bne.n	800b7e6 <_dtoa_r+0x696>
 800b7f6:	9901      	ldr	r1, [sp, #4]
 800b7f8:	2230      	movs	r2, #48	; 0x30
 800b7fa:	3701      	adds	r7, #1
 800b7fc:	700a      	strb	r2, [r1, #0]
 800b7fe:	781a      	ldrb	r2, [r3, #0]
 800b800:	3201      	adds	r2, #1
 800b802:	701a      	strb	r2, [r3, #0]
 800b804:	e78f      	b.n	800b726 <_dtoa_r+0x5d6>
 800b806:	4ba6      	ldr	r3, [pc, #664]	; (800baa0 <_dtoa_r+0x950>)
 800b808:	2200      	movs	r2, #0
 800b80a:	f7f4 fefd 	bl	8000608 <__aeabi_dmul>
 800b80e:	2200      	movs	r2, #0
 800b810:	2300      	movs	r3, #0
 800b812:	4606      	mov	r6, r0
 800b814:	460f      	mov	r7, r1
 800b816:	f7f5 f95f 	bl	8000ad8 <__aeabi_dcmpeq>
 800b81a:	2800      	cmp	r0, #0
 800b81c:	d09d      	beq.n	800b75a <_dtoa_r+0x60a>
 800b81e:	e7cf      	b.n	800b7c0 <_dtoa_r+0x670>
 800b820:	9a08      	ldr	r2, [sp, #32]
 800b822:	2a00      	cmp	r2, #0
 800b824:	f000 80d7 	beq.w	800b9d6 <_dtoa_r+0x886>
 800b828:	9a06      	ldr	r2, [sp, #24]
 800b82a:	2a01      	cmp	r2, #1
 800b82c:	f300 80ba 	bgt.w	800b9a4 <_dtoa_r+0x854>
 800b830:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b832:	2a00      	cmp	r2, #0
 800b834:	f000 80b2 	beq.w	800b99c <_dtoa_r+0x84c>
 800b838:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b83c:	9e07      	ldr	r6, [sp, #28]
 800b83e:	9d04      	ldr	r5, [sp, #16]
 800b840:	9a04      	ldr	r2, [sp, #16]
 800b842:	441a      	add	r2, r3
 800b844:	9204      	str	r2, [sp, #16]
 800b846:	9a05      	ldr	r2, [sp, #20]
 800b848:	2101      	movs	r1, #1
 800b84a:	441a      	add	r2, r3
 800b84c:	4620      	mov	r0, r4
 800b84e:	9205      	str	r2, [sp, #20]
 800b850:	f000 fcf2 	bl	800c238 <__i2b>
 800b854:	4607      	mov	r7, r0
 800b856:	2d00      	cmp	r5, #0
 800b858:	dd0c      	ble.n	800b874 <_dtoa_r+0x724>
 800b85a:	9b05      	ldr	r3, [sp, #20]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	dd09      	ble.n	800b874 <_dtoa_r+0x724>
 800b860:	42ab      	cmp	r3, r5
 800b862:	9a04      	ldr	r2, [sp, #16]
 800b864:	bfa8      	it	ge
 800b866:	462b      	movge	r3, r5
 800b868:	1ad2      	subs	r2, r2, r3
 800b86a:	9204      	str	r2, [sp, #16]
 800b86c:	9a05      	ldr	r2, [sp, #20]
 800b86e:	1aed      	subs	r5, r5, r3
 800b870:	1ad3      	subs	r3, r2, r3
 800b872:	9305      	str	r3, [sp, #20]
 800b874:	9b07      	ldr	r3, [sp, #28]
 800b876:	b31b      	cbz	r3, 800b8c0 <_dtoa_r+0x770>
 800b878:	9b08      	ldr	r3, [sp, #32]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f000 80af 	beq.w	800b9de <_dtoa_r+0x88e>
 800b880:	2e00      	cmp	r6, #0
 800b882:	dd13      	ble.n	800b8ac <_dtoa_r+0x75c>
 800b884:	4639      	mov	r1, r7
 800b886:	4632      	mov	r2, r6
 800b888:	4620      	mov	r0, r4
 800b88a:	f000 fd95 	bl	800c3b8 <__pow5mult>
 800b88e:	ee18 2a10 	vmov	r2, s16
 800b892:	4601      	mov	r1, r0
 800b894:	4607      	mov	r7, r0
 800b896:	4620      	mov	r0, r4
 800b898:	f000 fce4 	bl	800c264 <__multiply>
 800b89c:	ee18 1a10 	vmov	r1, s16
 800b8a0:	4680      	mov	r8, r0
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f000 fbdf 	bl	800c066 <_Bfree>
 800b8a8:	ee08 8a10 	vmov	s16, r8
 800b8ac:	9b07      	ldr	r3, [sp, #28]
 800b8ae:	1b9a      	subs	r2, r3, r6
 800b8b0:	d006      	beq.n	800b8c0 <_dtoa_r+0x770>
 800b8b2:	ee18 1a10 	vmov	r1, s16
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	f000 fd7e 	bl	800c3b8 <__pow5mult>
 800b8bc:	ee08 0a10 	vmov	s16, r0
 800b8c0:	2101      	movs	r1, #1
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	f000 fcb8 	bl	800c238 <__i2b>
 800b8c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	4606      	mov	r6, r0
 800b8ce:	f340 8088 	ble.w	800b9e2 <_dtoa_r+0x892>
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	4601      	mov	r1, r0
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f000 fd6e 	bl	800c3b8 <__pow5mult>
 800b8dc:	9b06      	ldr	r3, [sp, #24]
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	4606      	mov	r6, r0
 800b8e2:	f340 8081 	ble.w	800b9e8 <_dtoa_r+0x898>
 800b8e6:	f04f 0800 	mov.w	r8, #0
 800b8ea:	6933      	ldr	r3, [r6, #16]
 800b8ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b8f0:	6918      	ldr	r0, [r3, #16]
 800b8f2:	f000 fc51 	bl	800c198 <__hi0bits>
 800b8f6:	f1c0 0020 	rsb	r0, r0, #32
 800b8fa:	9b05      	ldr	r3, [sp, #20]
 800b8fc:	4418      	add	r0, r3
 800b8fe:	f010 001f 	ands.w	r0, r0, #31
 800b902:	f000 8092 	beq.w	800ba2a <_dtoa_r+0x8da>
 800b906:	f1c0 0320 	rsb	r3, r0, #32
 800b90a:	2b04      	cmp	r3, #4
 800b90c:	f340 808a 	ble.w	800ba24 <_dtoa_r+0x8d4>
 800b910:	f1c0 001c 	rsb	r0, r0, #28
 800b914:	9b04      	ldr	r3, [sp, #16]
 800b916:	4403      	add	r3, r0
 800b918:	9304      	str	r3, [sp, #16]
 800b91a:	9b05      	ldr	r3, [sp, #20]
 800b91c:	4403      	add	r3, r0
 800b91e:	4405      	add	r5, r0
 800b920:	9305      	str	r3, [sp, #20]
 800b922:	9b04      	ldr	r3, [sp, #16]
 800b924:	2b00      	cmp	r3, #0
 800b926:	dd07      	ble.n	800b938 <_dtoa_r+0x7e8>
 800b928:	ee18 1a10 	vmov	r1, s16
 800b92c:	461a      	mov	r2, r3
 800b92e:	4620      	mov	r0, r4
 800b930:	f000 fd82 	bl	800c438 <__lshift>
 800b934:	ee08 0a10 	vmov	s16, r0
 800b938:	9b05      	ldr	r3, [sp, #20]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	dd05      	ble.n	800b94a <_dtoa_r+0x7fa>
 800b93e:	4631      	mov	r1, r6
 800b940:	461a      	mov	r2, r3
 800b942:	4620      	mov	r0, r4
 800b944:	f000 fd78 	bl	800c438 <__lshift>
 800b948:	4606      	mov	r6, r0
 800b94a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d06e      	beq.n	800ba2e <_dtoa_r+0x8de>
 800b950:	ee18 0a10 	vmov	r0, s16
 800b954:	4631      	mov	r1, r6
 800b956:	f000 fddf 	bl	800c518 <__mcmp>
 800b95a:	2800      	cmp	r0, #0
 800b95c:	da67      	bge.n	800ba2e <_dtoa_r+0x8de>
 800b95e:	9b00      	ldr	r3, [sp, #0]
 800b960:	3b01      	subs	r3, #1
 800b962:	ee18 1a10 	vmov	r1, s16
 800b966:	9300      	str	r3, [sp, #0]
 800b968:	220a      	movs	r2, #10
 800b96a:	2300      	movs	r3, #0
 800b96c:	4620      	mov	r0, r4
 800b96e:	f000 fb83 	bl	800c078 <__multadd>
 800b972:	9b08      	ldr	r3, [sp, #32]
 800b974:	ee08 0a10 	vmov	s16, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f000 81b0 	beq.w	800bcde <_dtoa_r+0xb8e>
 800b97e:	2300      	movs	r3, #0
 800b980:	4639      	mov	r1, r7
 800b982:	220a      	movs	r2, #10
 800b984:	4620      	mov	r0, r4
 800b986:	f000 fb77 	bl	800c078 <__multadd>
 800b98a:	9b02      	ldr	r3, [sp, #8]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	4607      	mov	r7, r0
 800b990:	f300 808e 	bgt.w	800bab0 <_dtoa_r+0x960>
 800b994:	9b06      	ldr	r3, [sp, #24]
 800b996:	2b02      	cmp	r3, #2
 800b998:	dc51      	bgt.n	800ba3e <_dtoa_r+0x8ee>
 800b99a:	e089      	b.n	800bab0 <_dtoa_r+0x960>
 800b99c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b99e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b9a2:	e74b      	b.n	800b83c <_dtoa_r+0x6ec>
 800b9a4:	9b03      	ldr	r3, [sp, #12]
 800b9a6:	1e5e      	subs	r6, r3, #1
 800b9a8:	9b07      	ldr	r3, [sp, #28]
 800b9aa:	42b3      	cmp	r3, r6
 800b9ac:	bfbf      	itttt	lt
 800b9ae:	9b07      	ldrlt	r3, [sp, #28]
 800b9b0:	9607      	strlt	r6, [sp, #28]
 800b9b2:	1af2      	sublt	r2, r6, r3
 800b9b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b9b6:	bfb6      	itet	lt
 800b9b8:	189b      	addlt	r3, r3, r2
 800b9ba:	1b9e      	subge	r6, r3, r6
 800b9bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b9be:	9b03      	ldr	r3, [sp, #12]
 800b9c0:	bfb8      	it	lt
 800b9c2:	2600      	movlt	r6, #0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	bfb7      	itett	lt
 800b9c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b9cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b9d0:	1a9d      	sublt	r5, r3, r2
 800b9d2:	2300      	movlt	r3, #0
 800b9d4:	e734      	b.n	800b840 <_dtoa_r+0x6f0>
 800b9d6:	9e07      	ldr	r6, [sp, #28]
 800b9d8:	9d04      	ldr	r5, [sp, #16]
 800b9da:	9f08      	ldr	r7, [sp, #32]
 800b9dc:	e73b      	b.n	800b856 <_dtoa_r+0x706>
 800b9de:	9a07      	ldr	r2, [sp, #28]
 800b9e0:	e767      	b.n	800b8b2 <_dtoa_r+0x762>
 800b9e2:	9b06      	ldr	r3, [sp, #24]
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	dc18      	bgt.n	800ba1a <_dtoa_r+0x8ca>
 800b9e8:	f1ba 0f00 	cmp.w	sl, #0
 800b9ec:	d115      	bne.n	800ba1a <_dtoa_r+0x8ca>
 800b9ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9f2:	b993      	cbnz	r3, 800ba1a <_dtoa_r+0x8ca>
 800b9f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b9f8:	0d1b      	lsrs	r3, r3, #20
 800b9fa:	051b      	lsls	r3, r3, #20
 800b9fc:	b183      	cbz	r3, 800ba20 <_dtoa_r+0x8d0>
 800b9fe:	9b04      	ldr	r3, [sp, #16]
 800ba00:	3301      	adds	r3, #1
 800ba02:	9304      	str	r3, [sp, #16]
 800ba04:	9b05      	ldr	r3, [sp, #20]
 800ba06:	3301      	adds	r3, #1
 800ba08:	9305      	str	r3, [sp, #20]
 800ba0a:	f04f 0801 	mov.w	r8, #1
 800ba0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f47f af6a 	bne.w	800b8ea <_dtoa_r+0x79a>
 800ba16:	2001      	movs	r0, #1
 800ba18:	e76f      	b.n	800b8fa <_dtoa_r+0x7aa>
 800ba1a:	f04f 0800 	mov.w	r8, #0
 800ba1e:	e7f6      	b.n	800ba0e <_dtoa_r+0x8be>
 800ba20:	4698      	mov	r8, r3
 800ba22:	e7f4      	b.n	800ba0e <_dtoa_r+0x8be>
 800ba24:	f43f af7d 	beq.w	800b922 <_dtoa_r+0x7d2>
 800ba28:	4618      	mov	r0, r3
 800ba2a:	301c      	adds	r0, #28
 800ba2c:	e772      	b.n	800b914 <_dtoa_r+0x7c4>
 800ba2e:	9b03      	ldr	r3, [sp, #12]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	dc37      	bgt.n	800baa4 <_dtoa_r+0x954>
 800ba34:	9b06      	ldr	r3, [sp, #24]
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	dd34      	ble.n	800baa4 <_dtoa_r+0x954>
 800ba3a:	9b03      	ldr	r3, [sp, #12]
 800ba3c:	9302      	str	r3, [sp, #8]
 800ba3e:	9b02      	ldr	r3, [sp, #8]
 800ba40:	b96b      	cbnz	r3, 800ba5e <_dtoa_r+0x90e>
 800ba42:	4631      	mov	r1, r6
 800ba44:	2205      	movs	r2, #5
 800ba46:	4620      	mov	r0, r4
 800ba48:	f000 fb16 	bl	800c078 <__multadd>
 800ba4c:	4601      	mov	r1, r0
 800ba4e:	4606      	mov	r6, r0
 800ba50:	ee18 0a10 	vmov	r0, s16
 800ba54:	f000 fd60 	bl	800c518 <__mcmp>
 800ba58:	2800      	cmp	r0, #0
 800ba5a:	f73f adba 	bgt.w	800b5d2 <_dtoa_r+0x482>
 800ba5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba60:	9d01      	ldr	r5, [sp, #4]
 800ba62:	43db      	mvns	r3, r3
 800ba64:	9300      	str	r3, [sp, #0]
 800ba66:	f04f 0800 	mov.w	r8, #0
 800ba6a:	4631      	mov	r1, r6
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	f000 fafa 	bl	800c066 <_Bfree>
 800ba72:	2f00      	cmp	r7, #0
 800ba74:	f43f aea4 	beq.w	800b7c0 <_dtoa_r+0x670>
 800ba78:	f1b8 0f00 	cmp.w	r8, #0
 800ba7c:	d005      	beq.n	800ba8a <_dtoa_r+0x93a>
 800ba7e:	45b8      	cmp	r8, r7
 800ba80:	d003      	beq.n	800ba8a <_dtoa_r+0x93a>
 800ba82:	4641      	mov	r1, r8
 800ba84:	4620      	mov	r0, r4
 800ba86:	f000 faee 	bl	800c066 <_Bfree>
 800ba8a:	4639      	mov	r1, r7
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f000 faea 	bl	800c066 <_Bfree>
 800ba92:	e695      	b.n	800b7c0 <_dtoa_r+0x670>
 800ba94:	2600      	movs	r6, #0
 800ba96:	4637      	mov	r7, r6
 800ba98:	e7e1      	b.n	800ba5e <_dtoa_r+0x90e>
 800ba9a:	9700      	str	r7, [sp, #0]
 800ba9c:	4637      	mov	r7, r6
 800ba9e:	e598      	b.n	800b5d2 <_dtoa_r+0x482>
 800baa0:	40240000 	.word	0x40240000
 800baa4:	9b08      	ldr	r3, [sp, #32]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	f000 80c9 	beq.w	800bc3e <_dtoa_r+0xaee>
 800baac:	9b03      	ldr	r3, [sp, #12]
 800baae:	9302      	str	r3, [sp, #8]
 800bab0:	2d00      	cmp	r5, #0
 800bab2:	dd05      	ble.n	800bac0 <_dtoa_r+0x970>
 800bab4:	4639      	mov	r1, r7
 800bab6:	462a      	mov	r2, r5
 800bab8:	4620      	mov	r0, r4
 800baba:	f000 fcbd 	bl	800c438 <__lshift>
 800babe:	4607      	mov	r7, r0
 800bac0:	f1b8 0f00 	cmp.w	r8, #0
 800bac4:	d05a      	beq.n	800bb7c <_dtoa_r+0xa2c>
 800bac6:	6879      	ldr	r1, [r7, #4]
 800bac8:	4620      	mov	r0, r4
 800baca:	f000 faa7 	bl	800c01c <_Balloc>
 800bace:	4605      	mov	r5, r0
 800bad0:	b920      	cbnz	r0, 800badc <_dtoa_r+0x98c>
 800bad2:	4b87      	ldr	r3, [pc, #540]	; (800bcf0 <_dtoa_r+0xba0>)
 800bad4:	4602      	mov	r2, r0
 800bad6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bada:	e477      	b.n	800b3cc <_dtoa_r+0x27c>
 800badc:	693a      	ldr	r2, [r7, #16]
 800bade:	3202      	adds	r2, #2
 800bae0:	0092      	lsls	r2, r2, #2
 800bae2:	f107 010c 	add.w	r1, r7, #12
 800bae6:	300c      	adds	r0, #12
 800bae8:	f000 fa8a 	bl	800c000 <memcpy>
 800baec:	2201      	movs	r2, #1
 800baee:	4629      	mov	r1, r5
 800baf0:	4620      	mov	r0, r4
 800baf2:	f000 fca1 	bl	800c438 <__lshift>
 800baf6:	9b01      	ldr	r3, [sp, #4]
 800baf8:	f103 0901 	add.w	r9, r3, #1
 800bafc:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bb00:	4413      	add	r3, r2
 800bb02:	9305      	str	r3, [sp, #20]
 800bb04:	f00a 0301 	and.w	r3, sl, #1
 800bb08:	46b8      	mov	r8, r7
 800bb0a:	9304      	str	r3, [sp, #16]
 800bb0c:	4607      	mov	r7, r0
 800bb0e:	4631      	mov	r1, r6
 800bb10:	ee18 0a10 	vmov	r0, s16
 800bb14:	f7ff fa90 	bl	800b038 <quorem>
 800bb18:	4641      	mov	r1, r8
 800bb1a:	9002      	str	r0, [sp, #8]
 800bb1c:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bb20:	ee18 0a10 	vmov	r0, s16
 800bb24:	f000 fcf8 	bl	800c518 <__mcmp>
 800bb28:	463a      	mov	r2, r7
 800bb2a:	9003      	str	r0, [sp, #12]
 800bb2c:	4631      	mov	r1, r6
 800bb2e:	4620      	mov	r0, r4
 800bb30:	f000 fd0e 	bl	800c550 <__mdiff>
 800bb34:	68c2      	ldr	r2, [r0, #12]
 800bb36:	f109 3bff 	add.w	fp, r9, #4294967295
 800bb3a:	4605      	mov	r5, r0
 800bb3c:	bb02      	cbnz	r2, 800bb80 <_dtoa_r+0xa30>
 800bb3e:	4601      	mov	r1, r0
 800bb40:	ee18 0a10 	vmov	r0, s16
 800bb44:	f000 fce8 	bl	800c518 <__mcmp>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	4629      	mov	r1, r5
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	9207      	str	r2, [sp, #28]
 800bb50:	f000 fa89 	bl	800c066 <_Bfree>
 800bb54:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bb58:	ea43 0102 	orr.w	r1, r3, r2
 800bb5c:	9b04      	ldr	r3, [sp, #16]
 800bb5e:	430b      	orrs	r3, r1
 800bb60:	464d      	mov	r5, r9
 800bb62:	d10f      	bne.n	800bb84 <_dtoa_r+0xa34>
 800bb64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb68:	d02a      	beq.n	800bbc0 <_dtoa_r+0xa70>
 800bb6a:	9b03      	ldr	r3, [sp, #12]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	dd02      	ble.n	800bb76 <_dtoa_r+0xa26>
 800bb70:	9b02      	ldr	r3, [sp, #8]
 800bb72:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bb76:	f88b a000 	strb.w	sl, [fp]
 800bb7a:	e776      	b.n	800ba6a <_dtoa_r+0x91a>
 800bb7c:	4638      	mov	r0, r7
 800bb7e:	e7ba      	b.n	800baf6 <_dtoa_r+0x9a6>
 800bb80:	2201      	movs	r2, #1
 800bb82:	e7e2      	b.n	800bb4a <_dtoa_r+0x9fa>
 800bb84:	9b03      	ldr	r3, [sp, #12]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	db04      	blt.n	800bb94 <_dtoa_r+0xa44>
 800bb8a:	9906      	ldr	r1, [sp, #24]
 800bb8c:	430b      	orrs	r3, r1
 800bb8e:	9904      	ldr	r1, [sp, #16]
 800bb90:	430b      	orrs	r3, r1
 800bb92:	d122      	bne.n	800bbda <_dtoa_r+0xa8a>
 800bb94:	2a00      	cmp	r2, #0
 800bb96:	ddee      	ble.n	800bb76 <_dtoa_r+0xa26>
 800bb98:	ee18 1a10 	vmov	r1, s16
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f000 fc4a 	bl	800c438 <__lshift>
 800bba4:	4631      	mov	r1, r6
 800bba6:	ee08 0a10 	vmov	s16, r0
 800bbaa:	f000 fcb5 	bl	800c518 <__mcmp>
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	dc03      	bgt.n	800bbba <_dtoa_r+0xa6a>
 800bbb2:	d1e0      	bne.n	800bb76 <_dtoa_r+0xa26>
 800bbb4:	f01a 0f01 	tst.w	sl, #1
 800bbb8:	d0dd      	beq.n	800bb76 <_dtoa_r+0xa26>
 800bbba:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bbbe:	d1d7      	bne.n	800bb70 <_dtoa_r+0xa20>
 800bbc0:	2339      	movs	r3, #57	; 0x39
 800bbc2:	f88b 3000 	strb.w	r3, [fp]
 800bbc6:	462b      	mov	r3, r5
 800bbc8:	461d      	mov	r5, r3
 800bbca:	3b01      	subs	r3, #1
 800bbcc:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bbd0:	2a39      	cmp	r2, #57	; 0x39
 800bbd2:	d071      	beq.n	800bcb8 <_dtoa_r+0xb68>
 800bbd4:	3201      	adds	r2, #1
 800bbd6:	701a      	strb	r2, [r3, #0]
 800bbd8:	e747      	b.n	800ba6a <_dtoa_r+0x91a>
 800bbda:	2a00      	cmp	r2, #0
 800bbdc:	dd07      	ble.n	800bbee <_dtoa_r+0xa9e>
 800bbde:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bbe2:	d0ed      	beq.n	800bbc0 <_dtoa_r+0xa70>
 800bbe4:	f10a 0301 	add.w	r3, sl, #1
 800bbe8:	f88b 3000 	strb.w	r3, [fp]
 800bbec:	e73d      	b.n	800ba6a <_dtoa_r+0x91a>
 800bbee:	9b05      	ldr	r3, [sp, #20]
 800bbf0:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bbf4:	4599      	cmp	r9, r3
 800bbf6:	d047      	beq.n	800bc88 <_dtoa_r+0xb38>
 800bbf8:	ee18 1a10 	vmov	r1, s16
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	220a      	movs	r2, #10
 800bc00:	4620      	mov	r0, r4
 800bc02:	f000 fa39 	bl	800c078 <__multadd>
 800bc06:	45b8      	cmp	r8, r7
 800bc08:	ee08 0a10 	vmov	s16, r0
 800bc0c:	f04f 0300 	mov.w	r3, #0
 800bc10:	f04f 020a 	mov.w	r2, #10
 800bc14:	4641      	mov	r1, r8
 800bc16:	4620      	mov	r0, r4
 800bc18:	d106      	bne.n	800bc28 <_dtoa_r+0xad8>
 800bc1a:	f000 fa2d 	bl	800c078 <__multadd>
 800bc1e:	4680      	mov	r8, r0
 800bc20:	4607      	mov	r7, r0
 800bc22:	f109 0901 	add.w	r9, r9, #1
 800bc26:	e772      	b.n	800bb0e <_dtoa_r+0x9be>
 800bc28:	f000 fa26 	bl	800c078 <__multadd>
 800bc2c:	4639      	mov	r1, r7
 800bc2e:	4680      	mov	r8, r0
 800bc30:	2300      	movs	r3, #0
 800bc32:	220a      	movs	r2, #10
 800bc34:	4620      	mov	r0, r4
 800bc36:	f000 fa1f 	bl	800c078 <__multadd>
 800bc3a:	4607      	mov	r7, r0
 800bc3c:	e7f1      	b.n	800bc22 <_dtoa_r+0xad2>
 800bc3e:	9b03      	ldr	r3, [sp, #12]
 800bc40:	9302      	str	r3, [sp, #8]
 800bc42:	9d01      	ldr	r5, [sp, #4]
 800bc44:	ee18 0a10 	vmov	r0, s16
 800bc48:	4631      	mov	r1, r6
 800bc4a:	f7ff f9f5 	bl	800b038 <quorem>
 800bc4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bc52:	9b01      	ldr	r3, [sp, #4]
 800bc54:	f805 ab01 	strb.w	sl, [r5], #1
 800bc58:	1aea      	subs	r2, r5, r3
 800bc5a:	9b02      	ldr	r3, [sp, #8]
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	dd09      	ble.n	800bc74 <_dtoa_r+0xb24>
 800bc60:	ee18 1a10 	vmov	r1, s16
 800bc64:	2300      	movs	r3, #0
 800bc66:	220a      	movs	r2, #10
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f000 fa05 	bl	800c078 <__multadd>
 800bc6e:	ee08 0a10 	vmov	s16, r0
 800bc72:	e7e7      	b.n	800bc44 <_dtoa_r+0xaf4>
 800bc74:	9b02      	ldr	r3, [sp, #8]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	bfc8      	it	gt
 800bc7a:	461d      	movgt	r5, r3
 800bc7c:	9b01      	ldr	r3, [sp, #4]
 800bc7e:	bfd8      	it	le
 800bc80:	2501      	movle	r5, #1
 800bc82:	441d      	add	r5, r3
 800bc84:	f04f 0800 	mov.w	r8, #0
 800bc88:	ee18 1a10 	vmov	r1, s16
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	4620      	mov	r0, r4
 800bc90:	f000 fbd2 	bl	800c438 <__lshift>
 800bc94:	4631      	mov	r1, r6
 800bc96:	ee08 0a10 	vmov	s16, r0
 800bc9a:	f000 fc3d 	bl	800c518 <__mcmp>
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	dc91      	bgt.n	800bbc6 <_dtoa_r+0xa76>
 800bca2:	d102      	bne.n	800bcaa <_dtoa_r+0xb5a>
 800bca4:	f01a 0f01 	tst.w	sl, #1
 800bca8:	d18d      	bne.n	800bbc6 <_dtoa_r+0xa76>
 800bcaa:	462b      	mov	r3, r5
 800bcac:	461d      	mov	r5, r3
 800bcae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcb2:	2a30      	cmp	r2, #48	; 0x30
 800bcb4:	d0fa      	beq.n	800bcac <_dtoa_r+0xb5c>
 800bcb6:	e6d8      	b.n	800ba6a <_dtoa_r+0x91a>
 800bcb8:	9a01      	ldr	r2, [sp, #4]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d184      	bne.n	800bbc8 <_dtoa_r+0xa78>
 800bcbe:	9b00      	ldr	r3, [sp, #0]
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	2331      	movs	r3, #49	; 0x31
 800bcc6:	7013      	strb	r3, [r2, #0]
 800bcc8:	e6cf      	b.n	800ba6a <_dtoa_r+0x91a>
 800bcca:	4b0a      	ldr	r3, [pc, #40]	; (800bcf4 <_dtoa_r+0xba4>)
 800bccc:	f7ff ba97 	b.w	800b1fe <_dtoa_r+0xae>
 800bcd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f47f aa7b 	bne.w	800b1ce <_dtoa_r+0x7e>
 800bcd8:	4b07      	ldr	r3, [pc, #28]	; (800bcf8 <_dtoa_r+0xba8>)
 800bcda:	f7ff ba90 	b.w	800b1fe <_dtoa_r+0xae>
 800bcde:	9b02      	ldr	r3, [sp, #8]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	dcae      	bgt.n	800bc42 <_dtoa_r+0xaf2>
 800bce4:	9b06      	ldr	r3, [sp, #24]
 800bce6:	2b02      	cmp	r3, #2
 800bce8:	f73f aea9 	bgt.w	800ba3e <_dtoa_r+0x8ee>
 800bcec:	e7a9      	b.n	800bc42 <_dtoa_r+0xaf2>
 800bcee:	bf00      	nop
 800bcf0:	08010122 	.word	0x08010122
 800bcf4:	0800ffca 	.word	0x0800ffca
 800bcf8:	08010119 	.word	0x08010119

0800bcfc <__libc_fini_array>:
 800bcfc:	b538      	push	{r3, r4, r5, lr}
 800bcfe:	4d07      	ldr	r5, [pc, #28]	; (800bd1c <__libc_fini_array+0x20>)
 800bd00:	4c07      	ldr	r4, [pc, #28]	; (800bd20 <__libc_fini_array+0x24>)
 800bd02:	1b64      	subs	r4, r4, r5
 800bd04:	10a4      	asrs	r4, r4, #2
 800bd06:	b91c      	cbnz	r4, 800bd10 <__libc_fini_array+0x14>
 800bd08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd0c:	f003 bf8e 	b.w	800fc2c <_fini>
 800bd10:	3c01      	subs	r4, #1
 800bd12:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800bd16:	4798      	blx	r3
 800bd18:	e7f5      	b.n	800bd06 <__libc_fini_array+0xa>
 800bd1a:	bf00      	nop
 800bd1c:	08010424 	.word	0x08010424
 800bd20:	08010428 	.word	0x08010428

0800bd24 <_malloc_trim_r>:
 800bd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd28:	4606      	mov	r6, r0
 800bd2a:	2008      	movs	r0, #8
 800bd2c:	460c      	mov	r4, r1
 800bd2e:	f7ff f943 	bl	800afb8 <sysconf>
 800bd32:	4f23      	ldr	r7, [pc, #140]	; (800bdc0 <_malloc_trim_r+0x9c>)
 800bd34:	4680      	mov	r8, r0
 800bd36:	4630      	mov	r0, r6
 800bd38:	f7fc fc66 	bl	8008608 <__malloc_lock>
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	685d      	ldr	r5, [r3, #4]
 800bd40:	f025 0503 	bic.w	r5, r5, #3
 800bd44:	1b2c      	subs	r4, r5, r4
 800bd46:	3c11      	subs	r4, #17
 800bd48:	4444      	add	r4, r8
 800bd4a:	fbb4 f4f8 	udiv	r4, r4, r8
 800bd4e:	3c01      	subs	r4, #1
 800bd50:	fb08 f404 	mul.w	r4, r8, r4
 800bd54:	45a0      	cmp	r8, r4
 800bd56:	dd05      	ble.n	800bd64 <_malloc_trim_r+0x40>
 800bd58:	4630      	mov	r0, r6
 800bd5a:	f7fc fc5b 	bl	8008614 <__malloc_unlock>
 800bd5e:	2000      	movs	r0, #0
 800bd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd64:	2100      	movs	r1, #0
 800bd66:	4630      	mov	r0, r6
 800bd68:	f7fc fc5a 	bl	8008620 <_sbrk_r>
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	442b      	add	r3, r5
 800bd70:	4298      	cmp	r0, r3
 800bd72:	d1f1      	bne.n	800bd58 <_malloc_trim_r+0x34>
 800bd74:	4261      	negs	r1, r4
 800bd76:	4630      	mov	r0, r6
 800bd78:	f7fc fc52 	bl	8008620 <_sbrk_r>
 800bd7c:	3001      	adds	r0, #1
 800bd7e:	d110      	bne.n	800bda2 <_malloc_trim_r+0x7e>
 800bd80:	2100      	movs	r1, #0
 800bd82:	4630      	mov	r0, r6
 800bd84:	f7fc fc4c 	bl	8008620 <_sbrk_r>
 800bd88:	68ba      	ldr	r2, [r7, #8]
 800bd8a:	1a83      	subs	r3, r0, r2
 800bd8c:	2b0f      	cmp	r3, #15
 800bd8e:	dde3      	ble.n	800bd58 <_malloc_trim_r+0x34>
 800bd90:	490c      	ldr	r1, [pc, #48]	; (800bdc4 <_malloc_trim_r+0xa0>)
 800bd92:	6809      	ldr	r1, [r1, #0]
 800bd94:	1a40      	subs	r0, r0, r1
 800bd96:	490c      	ldr	r1, [pc, #48]	; (800bdc8 <_malloc_trim_r+0xa4>)
 800bd98:	f043 0301 	orr.w	r3, r3, #1
 800bd9c:	6008      	str	r0, [r1, #0]
 800bd9e:	6053      	str	r3, [r2, #4]
 800bda0:	e7da      	b.n	800bd58 <_malloc_trim_r+0x34>
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	4a08      	ldr	r2, [pc, #32]	; (800bdc8 <_malloc_trim_r+0xa4>)
 800bda6:	1b2d      	subs	r5, r5, r4
 800bda8:	f045 0501 	orr.w	r5, r5, #1
 800bdac:	605d      	str	r5, [r3, #4]
 800bdae:	6813      	ldr	r3, [r2, #0]
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	1b1b      	subs	r3, r3, r4
 800bdb4:	6013      	str	r3, [r2, #0]
 800bdb6:	f7fc fc2d 	bl	8008614 <__malloc_unlock>
 800bdba:	2001      	movs	r0, #1
 800bdbc:	e7d0      	b.n	800bd60 <_malloc_trim_r+0x3c>
 800bdbe:	bf00      	nop
 800bdc0:	20000440 	.word	0x20000440
 800bdc4:	20000848 	.word	0x20000848
 800bdc8:	20001168 	.word	0x20001168

0800bdcc <_free_r>:
 800bdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdce:	4605      	mov	r5, r0
 800bdd0:	460f      	mov	r7, r1
 800bdd2:	2900      	cmp	r1, #0
 800bdd4:	f000 80b1 	beq.w	800bf3a <_free_r+0x16e>
 800bdd8:	f7fc fc16 	bl	8008608 <__malloc_lock>
 800bddc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800bde0:	4856      	ldr	r0, [pc, #344]	; (800bf3c <_free_r+0x170>)
 800bde2:	f022 0401 	bic.w	r4, r2, #1
 800bde6:	f1a7 0308 	sub.w	r3, r7, #8
 800bdea:	eb03 0c04 	add.w	ip, r3, r4
 800bdee:	6881      	ldr	r1, [r0, #8]
 800bdf0:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800bdf4:	4561      	cmp	r1, ip
 800bdf6:	f026 0603 	bic.w	r6, r6, #3
 800bdfa:	f002 0201 	and.w	r2, r2, #1
 800bdfe:	d11b      	bne.n	800be38 <_free_r+0x6c>
 800be00:	4434      	add	r4, r6
 800be02:	b93a      	cbnz	r2, 800be14 <_free_r+0x48>
 800be04:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800be08:	1a9b      	subs	r3, r3, r2
 800be0a:	4414      	add	r4, r2
 800be0c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800be10:	60ca      	str	r2, [r1, #12]
 800be12:	6091      	str	r1, [r2, #8]
 800be14:	f044 0201 	orr.w	r2, r4, #1
 800be18:	605a      	str	r2, [r3, #4]
 800be1a:	6083      	str	r3, [r0, #8]
 800be1c:	4b48      	ldr	r3, [pc, #288]	; (800bf40 <_free_r+0x174>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	42a3      	cmp	r3, r4
 800be22:	d804      	bhi.n	800be2e <_free_r+0x62>
 800be24:	4b47      	ldr	r3, [pc, #284]	; (800bf44 <_free_r+0x178>)
 800be26:	4628      	mov	r0, r5
 800be28:	6819      	ldr	r1, [r3, #0]
 800be2a:	f7ff ff7b 	bl	800bd24 <_malloc_trim_r>
 800be2e:	4628      	mov	r0, r5
 800be30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800be34:	f7fc bbee 	b.w	8008614 <__malloc_unlock>
 800be38:	f8cc 6004 	str.w	r6, [ip, #4]
 800be3c:	2a00      	cmp	r2, #0
 800be3e:	d138      	bne.n	800beb2 <_free_r+0xe6>
 800be40:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800be44:	1a5b      	subs	r3, r3, r1
 800be46:	440c      	add	r4, r1
 800be48:	6899      	ldr	r1, [r3, #8]
 800be4a:	f100 0708 	add.w	r7, r0, #8
 800be4e:	42b9      	cmp	r1, r7
 800be50:	d031      	beq.n	800beb6 <_free_r+0xea>
 800be52:	68df      	ldr	r7, [r3, #12]
 800be54:	60cf      	str	r7, [r1, #12]
 800be56:	60b9      	str	r1, [r7, #8]
 800be58:	eb0c 0106 	add.w	r1, ip, r6
 800be5c:	6849      	ldr	r1, [r1, #4]
 800be5e:	07c9      	lsls	r1, r1, #31
 800be60:	d40b      	bmi.n	800be7a <_free_r+0xae>
 800be62:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800be66:	4434      	add	r4, r6
 800be68:	bb3a      	cbnz	r2, 800beba <_free_r+0xee>
 800be6a:	4e37      	ldr	r6, [pc, #220]	; (800bf48 <_free_r+0x17c>)
 800be6c:	42b1      	cmp	r1, r6
 800be6e:	d124      	bne.n	800beba <_free_r+0xee>
 800be70:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be74:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800be78:	2201      	movs	r2, #1
 800be7a:	f044 0101 	orr.w	r1, r4, #1
 800be7e:	6059      	str	r1, [r3, #4]
 800be80:	511c      	str	r4, [r3, r4]
 800be82:	2a00      	cmp	r2, #0
 800be84:	d1d3      	bne.n	800be2e <_free_r+0x62>
 800be86:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800be8a:	d21b      	bcs.n	800bec4 <_free_r+0xf8>
 800be8c:	0961      	lsrs	r1, r4, #5
 800be8e:	08e2      	lsrs	r2, r4, #3
 800be90:	2401      	movs	r4, #1
 800be92:	408c      	lsls	r4, r1
 800be94:	6841      	ldr	r1, [r0, #4]
 800be96:	3201      	adds	r2, #1
 800be98:	430c      	orrs	r4, r1
 800be9a:	6044      	str	r4, [r0, #4]
 800be9c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800bea0:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800bea4:	3908      	subs	r1, #8
 800bea6:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800beaa:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800beae:	60e3      	str	r3, [r4, #12]
 800beb0:	e7bd      	b.n	800be2e <_free_r+0x62>
 800beb2:	2200      	movs	r2, #0
 800beb4:	e7d0      	b.n	800be58 <_free_r+0x8c>
 800beb6:	2201      	movs	r2, #1
 800beb8:	e7ce      	b.n	800be58 <_free_r+0x8c>
 800beba:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800bebe:	60ce      	str	r6, [r1, #12]
 800bec0:	60b1      	str	r1, [r6, #8]
 800bec2:	e7da      	b.n	800be7a <_free_r+0xae>
 800bec4:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800bec8:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800becc:	d214      	bcs.n	800bef8 <_free_r+0x12c>
 800bece:	09a2      	lsrs	r2, r4, #6
 800bed0:	3238      	adds	r2, #56	; 0x38
 800bed2:	1c51      	adds	r1, r2, #1
 800bed4:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800bed8:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800bedc:	428e      	cmp	r6, r1
 800bede:	d125      	bne.n	800bf2c <_free_r+0x160>
 800bee0:	2401      	movs	r4, #1
 800bee2:	1092      	asrs	r2, r2, #2
 800bee4:	fa04 f202 	lsl.w	r2, r4, r2
 800bee8:	6844      	ldr	r4, [r0, #4]
 800beea:	4322      	orrs	r2, r4
 800beec:	6042      	str	r2, [r0, #4]
 800beee:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800bef2:	60b3      	str	r3, [r6, #8]
 800bef4:	60cb      	str	r3, [r1, #12]
 800bef6:	e79a      	b.n	800be2e <_free_r+0x62>
 800bef8:	2a14      	cmp	r2, #20
 800befa:	d801      	bhi.n	800bf00 <_free_r+0x134>
 800befc:	325b      	adds	r2, #91	; 0x5b
 800befe:	e7e8      	b.n	800bed2 <_free_r+0x106>
 800bf00:	2a54      	cmp	r2, #84	; 0x54
 800bf02:	d802      	bhi.n	800bf0a <_free_r+0x13e>
 800bf04:	0b22      	lsrs	r2, r4, #12
 800bf06:	326e      	adds	r2, #110	; 0x6e
 800bf08:	e7e3      	b.n	800bed2 <_free_r+0x106>
 800bf0a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800bf0e:	d802      	bhi.n	800bf16 <_free_r+0x14a>
 800bf10:	0be2      	lsrs	r2, r4, #15
 800bf12:	3277      	adds	r2, #119	; 0x77
 800bf14:	e7dd      	b.n	800bed2 <_free_r+0x106>
 800bf16:	f240 5154 	movw	r1, #1364	; 0x554
 800bf1a:	428a      	cmp	r2, r1
 800bf1c:	bf9a      	itte	ls
 800bf1e:	0ca2      	lsrls	r2, r4, #18
 800bf20:	327c      	addls	r2, #124	; 0x7c
 800bf22:	227e      	movhi	r2, #126	; 0x7e
 800bf24:	e7d5      	b.n	800bed2 <_free_r+0x106>
 800bf26:	6889      	ldr	r1, [r1, #8]
 800bf28:	428e      	cmp	r6, r1
 800bf2a:	d004      	beq.n	800bf36 <_free_r+0x16a>
 800bf2c:	684a      	ldr	r2, [r1, #4]
 800bf2e:	f022 0203 	bic.w	r2, r2, #3
 800bf32:	42a2      	cmp	r2, r4
 800bf34:	d8f7      	bhi.n	800bf26 <_free_r+0x15a>
 800bf36:	68ce      	ldr	r6, [r1, #12]
 800bf38:	e7d9      	b.n	800beee <_free_r+0x122>
 800bf3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf3c:	20000440 	.word	0x20000440
 800bf40:	2000084c 	.word	0x2000084c
 800bf44:	20001198 	.word	0x20001198
 800bf48:	20000448 	.word	0x20000448

0800bf4c <iswspace>:
 800bf4c:	2100      	movs	r1, #0
 800bf4e:	f000 b801 	b.w	800bf54 <iswspace_l>
	...

0800bf54 <iswspace_l>:
 800bf54:	28ff      	cmp	r0, #255	; 0xff
 800bf56:	bf9d      	ittte	ls
 800bf58:	4b02      	ldrls	r3, [pc, #8]	; (800bf64 <iswspace_l+0x10>)
 800bf5a:	5cc0      	ldrbls	r0, [r0, r3]
 800bf5c:	f000 0008 	andls.w	r0, r0, #8
 800bf60:	2000      	movhi	r0, #0
 800bf62:	4770      	bx	lr
 800bf64:	08010015 	.word	0x08010015

0800bf68 <__locale_mb_cur_max>:
 800bf68:	4b01      	ldr	r3, [pc, #4]	; (800bf70 <__locale_mb_cur_max+0x8>)
 800bf6a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800bf6e:	4770      	bx	lr
 800bf70:	20000854 	.word	0x20000854

0800bf74 <_localeconv_r>:
 800bf74:	4800      	ldr	r0, [pc, #0]	; (800bf78 <_localeconv_r+0x4>)
 800bf76:	4770      	bx	lr
 800bf78:	20000944 	.word	0x20000944

0800bf7c <__retarget_lock_init_recursive>:
 800bf7c:	4770      	bx	lr

0800bf7e <__retarget_lock_close_recursive>:
 800bf7e:	4770      	bx	lr

0800bf80 <__retarget_lock_acquire_recursive>:
 800bf80:	4770      	bx	lr

0800bf82 <__retarget_lock_release_recursive>:
 800bf82:	4770      	bx	lr

0800bf84 <_lseek_r>:
 800bf84:	b538      	push	{r3, r4, r5, lr}
 800bf86:	4d07      	ldr	r5, [pc, #28]	; (800bfa4 <_lseek_r+0x20>)
 800bf88:	4604      	mov	r4, r0
 800bf8a:	4608      	mov	r0, r1
 800bf8c:	4611      	mov	r1, r2
 800bf8e:	2200      	movs	r2, #0
 800bf90:	602a      	str	r2, [r5, #0]
 800bf92:	461a      	mov	r2, r3
 800bf94:	f7f7 fd78 	bl	8003a88 <_lseek>
 800bf98:	1c43      	adds	r3, r0, #1
 800bf9a:	d102      	bne.n	800bfa2 <_lseek_r+0x1e>
 800bf9c:	682b      	ldr	r3, [r5, #0]
 800bf9e:	b103      	cbz	r3, 800bfa2 <_lseek_r+0x1e>
 800bfa0:	6023      	str	r3, [r4, #0]
 800bfa2:	bd38      	pop	{r3, r4, r5, pc}
 800bfa4:	200011a0 	.word	0x200011a0

0800bfa8 <_mbrtowc_r>:
 800bfa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfaa:	4c0a      	ldr	r4, [pc, #40]	; (800bfd4 <_mbrtowc_r+0x2c>)
 800bfac:	9e08      	ldr	r6, [sp, #32]
 800bfae:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 800bfb2:	9600      	str	r6, [sp, #0]
 800bfb4:	4605      	mov	r5, r0
 800bfb6:	4614      	mov	r4, r2
 800bfb8:	b912      	cbnz	r2, 800bfc0 <_mbrtowc_r+0x18>
 800bfba:	4a07      	ldr	r2, [pc, #28]	; (800bfd8 <_mbrtowc_r+0x30>)
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	4621      	mov	r1, r4
 800bfc0:	47b8      	blx	r7
 800bfc2:	1c43      	adds	r3, r0, #1
 800bfc4:	bf01      	itttt	eq
 800bfc6:	2300      	moveq	r3, #0
 800bfc8:	6033      	streq	r3, [r6, #0]
 800bfca:	238a      	moveq	r3, #138	; 0x8a
 800bfcc:	602b      	streq	r3, [r5, #0]
 800bfce:	b003      	add	sp, #12
 800bfd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	20000854 	.word	0x20000854
 800bfd8:	08010383 	.word	0x08010383

0800bfdc <__ascii_mbtowc>:
 800bfdc:	b082      	sub	sp, #8
 800bfde:	b901      	cbnz	r1, 800bfe2 <__ascii_mbtowc+0x6>
 800bfe0:	a901      	add	r1, sp, #4
 800bfe2:	b142      	cbz	r2, 800bff6 <__ascii_mbtowc+0x1a>
 800bfe4:	b14b      	cbz	r3, 800bffa <__ascii_mbtowc+0x1e>
 800bfe6:	7813      	ldrb	r3, [r2, #0]
 800bfe8:	600b      	str	r3, [r1, #0]
 800bfea:	7812      	ldrb	r2, [r2, #0]
 800bfec:	1e10      	subs	r0, r2, #0
 800bfee:	bf18      	it	ne
 800bff0:	2001      	movne	r0, #1
 800bff2:	b002      	add	sp, #8
 800bff4:	4770      	bx	lr
 800bff6:	4610      	mov	r0, r2
 800bff8:	e7fb      	b.n	800bff2 <__ascii_mbtowc+0x16>
 800bffa:	f06f 0001 	mvn.w	r0, #1
 800bffe:	e7f8      	b.n	800bff2 <__ascii_mbtowc+0x16>

0800c000 <memcpy>:
 800c000:	440a      	add	r2, r1
 800c002:	4291      	cmp	r1, r2
 800c004:	f100 33ff 	add.w	r3, r0, #4294967295
 800c008:	d100      	bne.n	800c00c <memcpy+0xc>
 800c00a:	4770      	bx	lr
 800c00c:	b510      	push	{r4, lr}
 800c00e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c012:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c016:	4291      	cmp	r1, r2
 800c018:	d1f9      	bne.n	800c00e <memcpy+0xe>
 800c01a:	bd10      	pop	{r4, pc}

0800c01c <_Balloc>:
 800c01c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800c01e:	b570      	push	{r4, r5, r6, lr}
 800c020:	4605      	mov	r5, r0
 800c022:	460c      	mov	r4, r1
 800c024:	b17b      	cbz	r3, 800c046 <_Balloc+0x2a>
 800c026:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800c028:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c02c:	b9a0      	cbnz	r0, 800c058 <_Balloc+0x3c>
 800c02e:	2101      	movs	r1, #1
 800c030:	fa01 f604 	lsl.w	r6, r1, r4
 800c034:	1d72      	adds	r2, r6, #5
 800c036:	0092      	lsls	r2, r2, #2
 800c038:	4628      	mov	r0, r5
 800c03a:	f002 f82f 	bl	800e09c <_calloc_r>
 800c03e:	b148      	cbz	r0, 800c054 <_Balloc+0x38>
 800c040:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800c044:	e00b      	b.n	800c05e <_Balloc+0x42>
 800c046:	2221      	movs	r2, #33	; 0x21
 800c048:	2104      	movs	r1, #4
 800c04a:	f002 f827 	bl	800e09c <_calloc_r>
 800c04e:	64e8      	str	r0, [r5, #76]	; 0x4c
 800c050:	2800      	cmp	r0, #0
 800c052:	d1e8      	bne.n	800c026 <_Balloc+0xa>
 800c054:	2000      	movs	r0, #0
 800c056:	bd70      	pop	{r4, r5, r6, pc}
 800c058:	6802      	ldr	r2, [r0, #0]
 800c05a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800c05e:	2300      	movs	r3, #0
 800c060:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c064:	e7f7      	b.n	800c056 <_Balloc+0x3a>

0800c066 <_Bfree>:
 800c066:	b131      	cbz	r1, 800c076 <_Bfree+0x10>
 800c068:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800c06a:	684a      	ldr	r2, [r1, #4]
 800c06c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c070:	6008      	str	r0, [r1, #0]
 800c072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c076:	4770      	bx	lr

0800c078 <__multadd>:
 800c078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c07c:	690d      	ldr	r5, [r1, #16]
 800c07e:	4607      	mov	r7, r0
 800c080:	460c      	mov	r4, r1
 800c082:	461e      	mov	r6, r3
 800c084:	f101 0c14 	add.w	ip, r1, #20
 800c088:	2000      	movs	r0, #0
 800c08a:	f8dc 3000 	ldr.w	r3, [ip]
 800c08e:	b299      	uxth	r1, r3
 800c090:	fb02 6101 	mla	r1, r2, r1, r6
 800c094:	0c1e      	lsrs	r6, r3, #16
 800c096:	0c0b      	lsrs	r3, r1, #16
 800c098:	fb02 3306 	mla	r3, r2, r6, r3
 800c09c:	b289      	uxth	r1, r1
 800c09e:	3001      	adds	r0, #1
 800c0a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c0a4:	4285      	cmp	r5, r0
 800c0a6:	f84c 1b04 	str.w	r1, [ip], #4
 800c0aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c0ae:	dcec      	bgt.n	800c08a <__multadd+0x12>
 800c0b0:	b30e      	cbz	r6, 800c0f6 <__multadd+0x7e>
 800c0b2:	68a3      	ldr	r3, [r4, #8]
 800c0b4:	42ab      	cmp	r3, r5
 800c0b6:	dc19      	bgt.n	800c0ec <__multadd+0x74>
 800c0b8:	6861      	ldr	r1, [r4, #4]
 800c0ba:	4638      	mov	r0, r7
 800c0bc:	3101      	adds	r1, #1
 800c0be:	f7ff ffad 	bl	800c01c <_Balloc>
 800c0c2:	4680      	mov	r8, r0
 800c0c4:	b928      	cbnz	r0, 800c0d2 <__multadd+0x5a>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	4b0c      	ldr	r3, [pc, #48]	; (800c0fc <__multadd+0x84>)
 800c0ca:	480d      	ldr	r0, [pc, #52]	; (800c100 <__multadd+0x88>)
 800c0cc:	21b5      	movs	r1, #181	; 0xb5
 800c0ce:	f001 ffc7 	bl	800e060 <__assert_func>
 800c0d2:	6922      	ldr	r2, [r4, #16]
 800c0d4:	3202      	adds	r2, #2
 800c0d6:	f104 010c 	add.w	r1, r4, #12
 800c0da:	0092      	lsls	r2, r2, #2
 800c0dc:	300c      	adds	r0, #12
 800c0de:	f7ff ff8f 	bl	800c000 <memcpy>
 800c0e2:	4621      	mov	r1, r4
 800c0e4:	4638      	mov	r0, r7
 800c0e6:	f7ff ffbe 	bl	800c066 <_Bfree>
 800c0ea:	4644      	mov	r4, r8
 800c0ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c0f0:	3501      	adds	r5, #1
 800c0f2:	615e      	str	r6, [r3, #20]
 800c0f4:	6125      	str	r5, [r4, #16]
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0fc:	08010122 	.word	0x08010122
 800c100:	08010198 	.word	0x08010198

0800c104 <__s2b>:
 800c104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c108:	460c      	mov	r4, r1
 800c10a:	4615      	mov	r5, r2
 800c10c:	461f      	mov	r7, r3
 800c10e:	2209      	movs	r2, #9
 800c110:	3308      	adds	r3, #8
 800c112:	4606      	mov	r6, r0
 800c114:	fb93 f3f2 	sdiv	r3, r3, r2
 800c118:	2100      	movs	r1, #0
 800c11a:	2201      	movs	r2, #1
 800c11c:	429a      	cmp	r2, r3
 800c11e:	db09      	blt.n	800c134 <__s2b+0x30>
 800c120:	4630      	mov	r0, r6
 800c122:	f7ff ff7b 	bl	800c01c <_Balloc>
 800c126:	b940      	cbnz	r0, 800c13a <__s2b+0x36>
 800c128:	4602      	mov	r2, r0
 800c12a:	4b19      	ldr	r3, [pc, #100]	; (800c190 <__s2b+0x8c>)
 800c12c:	4819      	ldr	r0, [pc, #100]	; (800c194 <__s2b+0x90>)
 800c12e:	21ce      	movs	r1, #206	; 0xce
 800c130:	f001 ff96 	bl	800e060 <__assert_func>
 800c134:	0052      	lsls	r2, r2, #1
 800c136:	3101      	adds	r1, #1
 800c138:	e7f0      	b.n	800c11c <__s2b+0x18>
 800c13a:	9b08      	ldr	r3, [sp, #32]
 800c13c:	6143      	str	r3, [r0, #20]
 800c13e:	2d09      	cmp	r5, #9
 800c140:	f04f 0301 	mov.w	r3, #1
 800c144:	6103      	str	r3, [r0, #16]
 800c146:	dd16      	ble.n	800c176 <__s2b+0x72>
 800c148:	f104 0909 	add.w	r9, r4, #9
 800c14c:	46c8      	mov	r8, r9
 800c14e:	442c      	add	r4, r5
 800c150:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c154:	4601      	mov	r1, r0
 800c156:	3b30      	subs	r3, #48	; 0x30
 800c158:	220a      	movs	r2, #10
 800c15a:	4630      	mov	r0, r6
 800c15c:	f7ff ff8c 	bl	800c078 <__multadd>
 800c160:	45a0      	cmp	r8, r4
 800c162:	d1f5      	bne.n	800c150 <__s2b+0x4c>
 800c164:	f1a5 0408 	sub.w	r4, r5, #8
 800c168:	444c      	add	r4, r9
 800c16a:	1b2d      	subs	r5, r5, r4
 800c16c:	1963      	adds	r3, r4, r5
 800c16e:	42bb      	cmp	r3, r7
 800c170:	db04      	blt.n	800c17c <__s2b+0x78>
 800c172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c176:	340a      	adds	r4, #10
 800c178:	2509      	movs	r5, #9
 800c17a:	e7f6      	b.n	800c16a <__s2b+0x66>
 800c17c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c180:	4601      	mov	r1, r0
 800c182:	3b30      	subs	r3, #48	; 0x30
 800c184:	220a      	movs	r2, #10
 800c186:	4630      	mov	r0, r6
 800c188:	f7ff ff76 	bl	800c078 <__multadd>
 800c18c:	e7ee      	b.n	800c16c <__s2b+0x68>
 800c18e:	bf00      	nop
 800c190:	08010122 	.word	0x08010122
 800c194:	08010198 	.word	0x08010198

0800c198 <__hi0bits>:
 800c198:	0c03      	lsrs	r3, r0, #16
 800c19a:	041b      	lsls	r3, r3, #16
 800c19c:	b9d3      	cbnz	r3, 800c1d4 <__hi0bits+0x3c>
 800c19e:	0400      	lsls	r0, r0, #16
 800c1a0:	2310      	movs	r3, #16
 800c1a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c1a6:	bf04      	itt	eq
 800c1a8:	0200      	lsleq	r0, r0, #8
 800c1aa:	3308      	addeq	r3, #8
 800c1ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c1b0:	bf04      	itt	eq
 800c1b2:	0100      	lsleq	r0, r0, #4
 800c1b4:	3304      	addeq	r3, #4
 800c1b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c1ba:	bf04      	itt	eq
 800c1bc:	0080      	lsleq	r0, r0, #2
 800c1be:	3302      	addeq	r3, #2
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	db05      	blt.n	800c1d0 <__hi0bits+0x38>
 800c1c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c1c8:	f103 0301 	add.w	r3, r3, #1
 800c1cc:	bf08      	it	eq
 800c1ce:	2320      	moveq	r3, #32
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	4770      	bx	lr
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	e7e4      	b.n	800c1a2 <__hi0bits+0xa>

0800c1d8 <__lo0bits>:
 800c1d8:	6803      	ldr	r3, [r0, #0]
 800c1da:	f013 0207 	ands.w	r2, r3, #7
 800c1de:	4601      	mov	r1, r0
 800c1e0:	d00b      	beq.n	800c1fa <__lo0bits+0x22>
 800c1e2:	07da      	lsls	r2, r3, #31
 800c1e4:	d423      	bmi.n	800c22e <__lo0bits+0x56>
 800c1e6:	0798      	lsls	r0, r3, #30
 800c1e8:	bf49      	itett	mi
 800c1ea:	085b      	lsrmi	r3, r3, #1
 800c1ec:	089b      	lsrpl	r3, r3, #2
 800c1ee:	2001      	movmi	r0, #1
 800c1f0:	600b      	strmi	r3, [r1, #0]
 800c1f2:	bf5c      	itt	pl
 800c1f4:	600b      	strpl	r3, [r1, #0]
 800c1f6:	2002      	movpl	r0, #2
 800c1f8:	4770      	bx	lr
 800c1fa:	b298      	uxth	r0, r3
 800c1fc:	b9a8      	cbnz	r0, 800c22a <__lo0bits+0x52>
 800c1fe:	0c1b      	lsrs	r3, r3, #16
 800c200:	2010      	movs	r0, #16
 800c202:	b2da      	uxtb	r2, r3
 800c204:	b90a      	cbnz	r2, 800c20a <__lo0bits+0x32>
 800c206:	3008      	adds	r0, #8
 800c208:	0a1b      	lsrs	r3, r3, #8
 800c20a:	071a      	lsls	r2, r3, #28
 800c20c:	bf04      	itt	eq
 800c20e:	091b      	lsreq	r3, r3, #4
 800c210:	3004      	addeq	r0, #4
 800c212:	079a      	lsls	r2, r3, #30
 800c214:	bf04      	itt	eq
 800c216:	089b      	lsreq	r3, r3, #2
 800c218:	3002      	addeq	r0, #2
 800c21a:	07da      	lsls	r2, r3, #31
 800c21c:	d403      	bmi.n	800c226 <__lo0bits+0x4e>
 800c21e:	085b      	lsrs	r3, r3, #1
 800c220:	f100 0001 	add.w	r0, r0, #1
 800c224:	d005      	beq.n	800c232 <__lo0bits+0x5a>
 800c226:	600b      	str	r3, [r1, #0]
 800c228:	4770      	bx	lr
 800c22a:	4610      	mov	r0, r2
 800c22c:	e7e9      	b.n	800c202 <__lo0bits+0x2a>
 800c22e:	2000      	movs	r0, #0
 800c230:	4770      	bx	lr
 800c232:	2020      	movs	r0, #32
 800c234:	4770      	bx	lr
	...

0800c238 <__i2b>:
 800c238:	b510      	push	{r4, lr}
 800c23a:	460c      	mov	r4, r1
 800c23c:	2101      	movs	r1, #1
 800c23e:	f7ff feed 	bl	800c01c <_Balloc>
 800c242:	4602      	mov	r2, r0
 800c244:	b928      	cbnz	r0, 800c252 <__i2b+0x1a>
 800c246:	4b05      	ldr	r3, [pc, #20]	; (800c25c <__i2b+0x24>)
 800c248:	4805      	ldr	r0, [pc, #20]	; (800c260 <__i2b+0x28>)
 800c24a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c24e:	f001 ff07 	bl	800e060 <__assert_func>
 800c252:	2301      	movs	r3, #1
 800c254:	6144      	str	r4, [r0, #20]
 800c256:	6103      	str	r3, [r0, #16]
 800c258:	bd10      	pop	{r4, pc}
 800c25a:	bf00      	nop
 800c25c:	08010122 	.word	0x08010122
 800c260:	08010198 	.word	0x08010198

0800c264 <__multiply>:
 800c264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c268:	4691      	mov	r9, r2
 800c26a:	690a      	ldr	r2, [r1, #16]
 800c26c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c270:	429a      	cmp	r2, r3
 800c272:	bfb8      	it	lt
 800c274:	460b      	movlt	r3, r1
 800c276:	460c      	mov	r4, r1
 800c278:	bfbc      	itt	lt
 800c27a:	464c      	movlt	r4, r9
 800c27c:	4699      	movlt	r9, r3
 800c27e:	6927      	ldr	r7, [r4, #16]
 800c280:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c284:	68a3      	ldr	r3, [r4, #8]
 800c286:	6861      	ldr	r1, [r4, #4]
 800c288:	eb07 060a 	add.w	r6, r7, sl
 800c28c:	42b3      	cmp	r3, r6
 800c28e:	b085      	sub	sp, #20
 800c290:	bfb8      	it	lt
 800c292:	3101      	addlt	r1, #1
 800c294:	f7ff fec2 	bl	800c01c <_Balloc>
 800c298:	b930      	cbnz	r0, 800c2a8 <__multiply+0x44>
 800c29a:	4602      	mov	r2, r0
 800c29c:	4b44      	ldr	r3, [pc, #272]	; (800c3b0 <__multiply+0x14c>)
 800c29e:	4845      	ldr	r0, [pc, #276]	; (800c3b4 <__multiply+0x150>)
 800c2a0:	f240 115d 	movw	r1, #349	; 0x15d
 800c2a4:	f001 fedc 	bl	800e060 <__assert_func>
 800c2a8:	f100 0514 	add.w	r5, r0, #20
 800c2ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c2b0:	462b      	mov	r3, r5
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	4543      	cmp	r3, r8
 800c2b6:	d321      	bcc.n	800c2fc <__multiply+0x98>
 800c2b8:	f104 0314 	add.w	r3, r4, #20
 800c2bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c2c0:	f109 0314 	add.w	r3, r9, #20
 800c2c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c2c8:	9202      	str	r2, [sp, #8]
 800c2ca:	1b3a      	subs	r2, r7, r4
 800c2cc:	3a15      	subs	r2, #21
 800c2ce:	f022 0203 	bic.w	r2, r2, #3
 800c2d2:	3204      	adds	r2, #4
 800c2d4:	f104 0115 	add.w	r1, r4, #21
 800c2d8:	428f      	cmp	r7, r1
 800c2da:	bf38      	it	cc
 800c2dc:	2204      	movcc	r2, #4
 800c2de:	9201      	str	r2, [sp, #4]
 800c2e0:	9a02      	ldr	r2, [sp, #8]
 800c2e2:	9303      	str	r3, [sp, #12]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d80c      	bhi.n	800c302 <__multiply+0x9e>
 800c2e8:	2e00      	cmp	r6, #0
 800c2ea:	dd03      	ble.n	800c2f4 <__multiply+0x90>
 800c2ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d05a      	beq.n	800c3aa <__multiply+0x146>
 800c2f4:	6106      	str	r6, [r0, #16]
 800c2f6:	b005      	add	sp, #20
 800c2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2fc:	f843 2b04 	str.w	r2, [r3], #4
 800c300:	e7d8      	b.n	800c2b4 <__multiply+0x50>
 800c302:	f8b3 a000 	ldrh.w	sl, [r3]
 800c306:	f1ba 0f00 	cmp.w	sl, #0
 800c30a:	d024      	beq.n	800c356 <__multiply+0xf2>
 800c30c:	f104 0e14 	add.w	lr, r4, #20
 800c310:	46a9      	mov	r9, r5
 800c312:	f04f 0c00 	mov.w	ip, #0
 800c316:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c31a:	f8d9 1000 	ldr.w	r1, [r9]
 800c31e:	fa1f fb82 	uxth.w	fp, r2
 800c322:	b289      	uxth	r1, r1
 800c324:	fb0a 110b 	mla	r1, sl, fp, r1
 800c328:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c32c:	f8d9 2000 	ldr.w	r2, [r9]
 800c330:	4461      	add	r1, ip
 800c332:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c336:	fb0a c20b 	mla	r2, sl, fp, ip
 800c33a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c33e:	b289      	uxth	r1, r1
 800c340:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c344:	4577      	cmp	r7, lr
 800c346:	f849 1b04 	str.w	r1, [r9], #4
 800c34a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c34e:	d8e2      	bhi.n	800c316 <__multiply+0xb2>
 800c350:	9a01      	ldr	r2, [sp, #4]
 800c352:	f845 c002 	str.w	ip, [r5, r2]
 800c356:	9a03      	ldr	r2, [sp, #12]
 800c358:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c35c:	3304      	adds	r3, #4
 800c35e:	f1b9 0f00 	cmp.w	r9, #0
 800c362:	d020      	beq.n	800c3a6 <__multiply+0x142>
 800c364:	6829      	ldr	r1, [r5, #0]
 800c366:	f104 0c14 	add.w	ip, r4, #20
 800c36a:	46ae      	mov	lr, r5
 800c36c:	f04f 0a00 	mov.w	sl, #0
 800c370:	f8bc b000 	ldrh.w	fp, [ip]
 800c374:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c378:	fb09 220b 	mla	r2, r9, fp, r2
 800c37c:	4492      	add	sl, r2
 800c37e:	b289      	uxth	r1, r1
 800c380:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c384:	f84e 1b04 	str.w	r1, [lr], #4
 800c388:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c38c:	f8be 1000 	ldrh.w	r1, [lr]
 800c390:	0c12      	lsrs	r2, r2, #16
 800c392:	fb09 1102 	mla	r1, r9, r2, r1
 800c396:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c39a:	4567      	cmp	r7, ip
 800c39c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c3a0:	d8e6      	bhi.n	800c370 <__multiply+0x10c>
 800c3a2:	9a01      	ldr	r2, [sp, #4]
 800c3a4:	50a9      	str	r1, [r5, r2]
 800c3a6:	3504      	adds	r5, #4
 800c3a8:	e79a      	b.n	800c2e0 <__multiply+0x7c>
 800c3aa:	3e01      	subs	r6, #1
 800c3ac:	e79c      	b.n	800c2e8 <__multiply+0x84>
 800c3ae:	bf00      	nop
 800c3b0:	08010122 	.word	0x08010122
 800c3b4:	08010198 	.word	0x08010198

0800c3b8 <__pow5mult>:
 800c3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3bc:	4615      	mov	r5, r2
 800c3be:	f012 0203 	ands.w	r2, r2, #3
 800c3c2:	4606      	mov	r6, r0
 800c3c4:	460f      	mov	r7, r1
 800c3c6:	d007      	beq.n	800c3d8 <__pow5mult+0x20>
 800c3c8:	4c1a      	ldr	r4, [pc, #104]	; (800c434 <__pow5mult+0x7c>)
 800c3ca:	3a01      	subs	r2, #1
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c3d2:	f7ff fe51 	bl	800c078 <__multadd>
 800c3d6:	4607      	mov	r7, r0
 800c3d8:	10ad      	asrs	r5, r5, #2
 800c3da:	d027      	beq.n	800c42c <__pow5mult+0x74>
 800c3dc:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800c3de:	b944      	cbnz	r4, 800c3f2 <__pow5mult+0x3a>
 800c3e0:	f240 2171 	movw	r1, #625	; 0x271
 800c3e4:	4630      	mov	r0, r6
 800c3e6:	f7ff ff27 	bl	800c238 <__i2b>
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	64b0      	str	r0, [r6, #72]	; 0x48
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	6003      	str	r3, [r0, #0]
 800c3f2:	f04f 0900 	mov.w	r9, #0
 800c3f6:	07eb      	lsls	r3, r5, #31
 800c3f8:	d50a      	bpl.n	800c410 <__pow5mult+0x58>
 800c3fa:	4639      	mov	r1, r7
 800c3fc:	4622      	mov	r2, r4
 800c3fe:	4630      	mov	r0, r6
 800c400:	f7ff ff30 	bl	800c264 <__multiply>
 800c404:	4639      	mov	r1, r7
 800c406:	4680      	mov	r8, r0
 800c408:	4630      	mov	r0, r6
 800c40a:	f7ff fe2c 	bl	800c066 <_Bfree>
 800c40e:	4647      	mov	r7, r8
 800c410:	106d      	asrs	r5, r5, #1
 800c412:	d00b      	beq.n	800c42c <__pow5mult+0x74>
 800c414:	6820      	ldr	r0, [r4, #0]
 800c416:	b938      	cbnz	r0, 800c428 <__pow5mult+0x70>
 800c418:	4622      	mov	r2, r4
 800c41a:	4621      	mov	r1, r4
 800c41c:	4630      	mov	r0, r6
 800c41e:	f7ff ff21 	bl	800c264 <__multiply>
 800c422:	6020      	str	r0, [r4, #0]
 800c424:	f8c0 9000 	str.w	r9, [r0]
 800c428:	4604      	mov	r4, r0
 800c42a:	e7e4      	b.n	800c3f6 <__pow5mult+0x3e>
 800c42c:	4638      	mov	r0, r7
 800c42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c432:	bf00      	nop
 800c434:	080102e8 	.word	0x080102e8

0800c438 <__lshift>:
 800c438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c43c:	460c      	mov	r4, r1
 800c43e:	6849      	ldr	r1, [r1, #4]
 800c440:	6923      	ldr	r3, [r4, #16]
 800c442:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c446:	68a3      	ldr	r3, [r4, #8]
 800c448:	4607      	mov	r7, r0
 800c44a:	4691      	mov	r9, r2
 800c44c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c450:	f108 0601 	add.w	r6, r8, #1
 800c454:	42b3      	cmp	r3, r6
 800c456:	db0b      	blt.n	800c470 <__lshift+0x38>
 800c458:	4638      	mov	r0, r7
 800c45a:	f7ff fddf 	bl	800c01c <_Balloc>
 800c45e:	4605      	mov	r5, r0
 800c460:	b948      	cbnz	r0, 800c476 <__lshift+0x3e>
 800c462:	4602      	mov	r2, r0
 800c464:	4b2a      	ldr	r3, [pc, #168]	; (800c510 <__lshift+0xd8>)
 800c466:	482b      	ldr	r0, [pc, #172]	; (800c514 <__lshift+0xdc>)
 800c468:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c46c:	f001 fdf8 	bl	800e060 <__assert_func>
 800c470:	3101      	adds	r1, #1
 800c472:	005b      	lsls	r3, r3, #1
 800c474:	e7ee      	b.n	800c454 <__lshift+0x1c>
 800c476:	2300      	movs	r3, #0
 800c478:	f100 0114 	add.w	r1, r0, #20
 800c47c:	f100 0210 	add.w	r2, r0, #16
 800c480:	4618      	mov	r0, r3
 800c482:	4553      	cmp	r3, sl
 800c484:	db37      	blt.n	800c4f6 <__lshift+0xbe>
 800c486:	6920      	ldr	r0, [r4, #16]
 800c488:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c48c:	f104 0314 	add.w	r3, r4, #20
 800c490:	f019 091f 	ands.w	r9, r9, #31
 800c494:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c498:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c49c:	d02f      	beq.n	800c4fe <__lshift+0xc6>
 800c49e:	f1c9 0e20 	rsb	lr, r9, #32
 800c4a2:	468a      	mov	sl, r1
 800c4a4:	f04f 0c00 	mov.w	ip, #0
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	fa02 f209 	lsl.w	r2, r2, r9
 800c4ae:	ea42 020c 	orr.w	r2, r2, ip
 800c4b2:	f84a 2b04 	str.w	r2, [sl], #4
 800c4b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4ba:	4298      	cmp	r0, r3
 800c4bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c4c0:	d8f2      	bhi.n	800c4a8 <__lshift+0x70>
 800c4c2:	1b03      	subs	r3, r0, r4
 800c4c4:	3b15      	subs	r3, #21
 800c4c6:	f023 0303 	bic.w	r3, r3, #3
 800c4ca:	3304      	adds	r3, #4
 800c4cc:	f104 0215 	add.w	r2, r4, #21
 800c4d0:	4290      	cmp	r0, r2
 800c4d2:	bf38      	it	cc
 800c4d4:	2304      	movcc	r3, #4
 800c4d6:	f841 c003 	str.w	ip, [r1, r3]
 800c4da:	f1bc 0f00 	cmp.w	ip, #0
 800c4de:	d001      	beq.n	800c4e4 <__lshift+0xac>
 800c4e0:	f108 0602 	add.w	r6, r8, #2
 800c4e4:	3e01      	subs	r6, #1
 800c4e6:	4638      	mov	r0, r7
 800c4e8:	612e      	str	r6, [r5, #16]
 800c4ea:	4621      	mov	r1, r4
 800c4ec:	f7ff fdbb 	bl	800c066 <_Bfree>
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	e7c1      	b.n	800c482 <__lshift+0x4a>
 800c4fe:	3904      	subs	r1, #4
 800c500:	f853 2b04 	ldr.w	r2, [r3], #4
 800c504:	f841 2f04 	str.w	r2, [r1, #4]!
 800c508:	4298      	cmp	r0, r3
 800c50a:	d8f9      	bhi.n	800c500 <__lshift+0xc8>
 800c50c:	e7ea      	b.n	800c4e4 <__lshift+0xac>
 800c50e:	bf00      	nop
 800c510:	08010122 	.word	0x08010122
 800c514:	08010198 	.word	0x08010198

0800c518 <__mcmp>:
 800c518:	b530      	push	{r4, r5, lr}
 800c51a:	6902      	ldr	r2, [r0, #16]
 800c51c:	690c      	ldr	r4, [r1, #16]
 800c51e:	1b12      	subs	r2, r2, r4
 800c520:	d10e      	bne.n	800c540 <__mcmp+0x28>
 800c522:	f100 0314 	add.w	r3, r0, #20
 800c526:	3114      	adds	r1, #20
 800c528:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c52c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c530:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c534:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c538:	42a5      	cmp	r5, r4
 800c53a:	d003      	beq.n	800c544 <__mcmp+0x2c>
 800c53c:	d305      	bcc.n	800c54a <__mcmp+0x32>
 800c53e:	2201      	movs	r2, #1
 800c540:	4610      	mov	r0, r2
 800c542:	bd30      	pop	{r4, r5, pc}
 800c544:	4283      	cmp	r3, r0
 800c546:	d3f3      	bcc.n	800c530 <__mcmp+0x18>
 800c548:	e7fa      	b.n	800c540 <__mcmp+0x28>
 800c54a:	f04f 32ff 	mov.w	r2, #4294967295
 800c54e:	e7f7      	b.n	800c540 <__mcmp+0x28>

0800c550 <__mdiff>:
 800c550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c554:	460c      	mov	r4, r1
 800c556:	4606      	mov	r6, r0
 800c558:	4611      	mov	r1, r2
 800c55a:	4620      	mov	r0, r4
 800c55c:	4690      	mov	r8, r2
 800c55e:	f7ff ffdb 	bl	800c518 <__mcmp>
 800c562:	1e05      	subs	r5, r0, #0
 800c564:	d110      	bne.n	800c588 <__mdiff+0x38>
 800c566:	4629      	mov	r1, r5
 800c568:	4630      	mov	r0, r6
 800c56a:	f7ff fd57 	bl	800c01c <_Balloc>
 800c56e:	b930      	cbnz	r0, 800c57e <__mdiff+0x2e>
 800c570:	4b3a      	ldr	r3, [pc, #232]	; (800c65c <__mdiff+0x10c>)
 800c572:	4602      	mov	r2, r0
 800c574:	f240 2132 	movw	r1, #562	; 0x232
 800c578:	4839      	ldr	r0, [pc, #228]	; (800c660 <__mdiff+0x110>)
 800c57a:	f001 fd71 	bl	800e060 <__assert_func>
 800c57e:	2301      	movs	r3, #1
 800c580:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c584:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c588:	bfa4      	itt	ge
 800c58a:	4643      	movge	r3, r8
 800c58c:	46a0      	movge	r8, r4
 800c58e:	4630      	mov	r0, r6
 800c590:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c594:	bfa6      	itte	ge
 800c596:	461c      	movge	r4, r3
 800c598:	2500      	movge	r5, #0
 800c59a:	2501      	movlt	r5, #1
 800c59c:	f7ff fd3e 	bl	800c01c <_Balloc>
 800c5a0:	b920      	cbnz	r0, 800c5ac <__mdiff+0x5c>
 800c5a2:	4b2e      	ldr	r3, [pc, #184]	; (800c65c <__mdiff+0x10c>)
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c5aa:	e7e5      	b.n	800c578 <__mdiff+0x28>
 800c5ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c5b0:	6926      	ldr	r6, [r4, #16]
 800c5b2:	60c5      	str	r5, [r0, #12]
 800c5b4:	f104 0914 	add.w	r9, r4, #20
 800c5b8:	f108 0514 	add.w	r5, r8, #20
 800c5bc:	f100 0e14 	add.w	lr, r0, #20
 800c5c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c5c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c5c8:	f108 0210 	add.w	r2, r8, #16
 800c5cc:	46f2      	mov	sl, lr
 800c5ce:	2100      	movs	r1, #0
 800c5d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800c5d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c5d8:	fa1f f883 	uxth.w	r8, r3
 800c5dc:	fa11 f18b 	uxtah	r1, r1, fp
 800c5e0:	0c1b      	lsrs	r3, r3, #16
 800c5e2:	eba1 0808 	sub.w	r8, r1, r8
 800c5e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c5ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c5ee:	fa1f f888 	uxth.w	r8, r8
 800c5f2:	1419      	asrs	r1, r3, #16
 800c5f4:	454e      	cmp	r6, r9
 800c5f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c5fa:	f84a 3b04 	str.w	r3, [sl], #4
 800c5fe:	d8e7      	bhi.n	800c5d0 <__mdiff+0x80>
 800c600:	1b33      	subs	r3, r6, r4
 800c602:	3b15      	subs	r3, #21
 800c604:	f023 0303 	bic.w	r3, r3, #3
 800c608:	3304      	adds	r3, #4
 800c60a:	3415      	adds	r4, #21
 800c60c:	42a6      	cmp	r6, r4
 800c60e:	bf38      	it	cc
 800c610:	2304      	movcc	r3, #4
 800c612:	441d      	add	r5, r3
 800c614:	4473      	add	r3, lr
 800c616:	469e      	mov	lr, r3
 800c618:	462e      	mov	r6, r5
 800c61a:	4566      	cmp	r6, ip
 800c61c:	d30e      	bcc.n	800c63c <__mdiff+0xec>
 800c61e:	f10c 0203 	add.w	r2, ip, #3
 800c622:	1b52      	subs	r2, r2, r5
 800c624:	f022 0203 	bic.w	r2, r2, #3
 800c628:	3d03      	subs	r5, #3
 800c62a:	45ac      	cmp	ip, r5
 800c62c:	bf38      	it	cc
 800c62e:	2200      	movcc	r2, #0
 800c630:	441a      	add	r2, r3
 800c632:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c636:	b17b      	cbz	r3, 800c658 <__mdiff+0x108>
 800c638:	6107      	str	r7, [r0, #16]
 800c63a:	e7a3      	b.n	800c584 <__mdiff+0x34>
 800c63c:	f856 8b04 	ldr.w	r8, [r6], #4
 800c640:	fa11 f288 	uxtah	r2, r1, r8
 800c644:	1414      	asrs	r4, r2, #16
 800c646:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c64a:	b292      	uxth	r2, r2
 800c64c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c650:	f84e 2b04 	str.w	r2, [lr], #4
 800c654:	1421      	asrs	r1, r4, #16
 800c656:	e7e0      	b.n	800c61a <__mdiff+0xca>
 800c658:	3f01      	subs	r7, #1
 800c65a:	e7ea      	b.n	800c632 <__mdiff+0xe2>
 800c65c:	08010122 	.word	0x08010122
 800c660:	08010198 	.word	0x08010198

0800c664 <__ulp>:
 800c664:	b082      	sub	sp, #8
 800c666:	ed8d 0b00 	vstr	d0, [sp]
 800c66a:	9b01      	ldr	r3, [sp, #4]
 800c66c:	4912      	ldr	r1, [pc, #72]	; (800c6b8 <__ulp+0x54>)
 800c66e:	4019      	ands	r1, r3
 800c670:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c674:	2900      	cmp	r1, #0
 800c676:	dd05      	ble.n	800c684 <__ulp+0x20>
 800c678:	2200      	movs	r2, #0
 800c67a:	460b      	mov	r3, r1
 800c67c:	ec43 2b10 	vmov	d0, r2, r3
 800c680:	b002      	add	sp, #8
 800c682:	4770      	bx	lr
 800c684:	4249      	negs	r1, r1
 800c686:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c68a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c68e:	f04f 0200 	mov.w	r2, #0
 800c692:	f04f 0300 	mov.w	r3, #0
 800c696:	da04      	bge.n	800c6a2 <__ulp+0x3e>
 800c698:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c69c:	fa41 f300 	asr.w	r3, r1, r0
 800c6a0:	e7ec      	b.n	800c67c <__ulp+0x18>
 800c6a2:	f1a0 0114 	sub.w	r1, r0, #20
 800c6a6:	291e      	cmp	r1, #30
 800c6a8:	bfda      	itte	le
 800c6aa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c6ae:	fa20 f101 	lsrle.w	r1, r0, r1
 800c6b2:	2101      	movgt	r1, #1
 800c6b4:	460a      	mov	r2, r1
 800c6b6:	e7e1      	b.n	800c67c <__ulp+0x18>
 800c6b8:	7ff00000 	.word	0x7ff00000

0800c6bc <__b2d>:
 800c6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6be:	6905      	ldr	r5, [r0, #16]
 800c6c0:	f100 0714 	add.w	r7, r0, #20
 800c6c4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c6c8:	1f2e      	subs	r6, r5, #4
 800c6ca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c6ce:	4620      	mov	r0, r4
 800c6d0:	f7ff fd62 	bl	800c198 <__hi0bits>
 800c6d4:	f1c0 0320 	rsb	r3, r0, #32
 800c6d8:	280a      	cmp	r0, #10
 800c6da:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c758 <__b2d+0x9c>
 800c6de:	600b      	str	r3, [r1, #0]
 800c6e0:	dc14      	bgt.n	800c70c <__b2d+0x50>
 800c6e2:	f1c0 0e0b 	rsb	lr, r0, #11
 800c6e6:	fa24 f10e 	lsr.w	r1, r4, lr
 800c6ea:	42b7      	cmp	r7, r6
 800c6ec:	ea41 030c 	orr.w	r3, r1, ip
 800c6f0:	bf34      	ite	cc
 800c6f2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c6f6:	2100      	movcs	r1, #0
 800c6f8:	3015      	adds	r0, #21
 800c6fa:	fa04 f000 	lsl.w	r0, r4, r0
 800c6fe:	fa21 f10e 	lsr.w	r1, r1, lr
 800c702:	ea40 0201 	orr.w	r2, r0, r1
 800c706:	ec43 2b10 	vmov	d0, r2, r3
 800c70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c70c:	42b7      	cmp	r7, r6
 800c70e:	bf3a      	itte	cc
 800c710:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c714:	f1a5 0608 	subcc.w	r6, r5, #8
 800c718:	2100      	movcs	r1, #0
 800c71a:	380b      	subs	r0, #11
 800c71c:	d017      	beq.n	800c74e <__b2d+0x92>
 800c71e:	f1c0 0c20 	rsb	ip, r0, #32
 800c722:	fa04 f500 	lsl.w	r5, r4, r0
 800c726:	42be      	cmp	r6, r7
 800c728:	fa21 f40c 	lsr.w	r4, r1, ip
 800c72c:	ea45 0504 	orr.w	r5, r5, r4
 800c730:	bf8c      	ite	hi
 800c732:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c736:	2400      	movls	r4, #0
 800c738:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c73c:	fa01 f000 	lsl.w	r0, r1, r0
 800c740:	fa24 f40c 	lsr.w	r4, r4, ip
 800c744:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c748:	ea40 0204 	orr.w	r2, r0, r4
 800c74c:	e7db      	b.n	800c706 <__b2d+0x4a>
 800c74e:	ea44 030c 	orr.w	r3, r4, ip
 800c752:	460a      	mov	r2, r1
 800c754:	e7d7      	b.n	800c706 <__b2d+0x4a>
 800c756:	bf00      	nop
 800c758:	3ff00000 	.word	0x3ff00000

0800c75c <__d2b>:
 800c75c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c760:	4689      	mov	r9, r1
 800c762:	2101      	movs	r1, #1
 800c764:	ec57 6b10 	vmov	r6, r7, d0
 800c768:	4690      	mov	r8, r2
 800c76a:	f7ff fc57 	bl	800c01c <_Balloc>
 800c76e:	4604      	mov	r4, r0
 800c770:	b930      	cbnz	r0, 800c780 <__d2b+0x24>
 800c772:	4602      	mov	r2, r0
 800c774:	4b25      	ldr	r3, [pc, #148]	; (800c80c <__d2b+0xb0>)
 800c776:	4826      	ldr	r0, [pc, #152]	; (800c810 <__d2b+0xb4>)
 800c778:	f240 310a 	movw	r1, #778	; 0x30a
 800c77c:	f001 fc70 	bl	800e060 <__assert_func>
 800c780:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c784:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c788:	bb35      	cbnz	r5, 800c7d8 <__d2b+0x7c>
 800c78a:	2e00      	cmp	r6, #0
 800c78c:	9301      	str	r3, [sp, #4]
 800c78e:	d028      	beq.n	800c7e2 <__d2b+0x86>
 800c790:	4668      	mov	r0, sp
 800c792:	9600      	str	r6, [sp, #0]
 800c794:	f7ff fd20 	bl	800c1d8 <__lo0bits>
 800c798:	9900      	ldr	r1, [sp, #0]
 800c79a:	b300      	cbz	r0, 800c7de <__d2b+0x82>
 800c79c:	9a01      	ldr	r2, [sp, #4]
 800c79e:	f1c0 0320 	rsb	r3, r0, #32
 800c7a2:	fa02 f303 	lsl.w	r3, r2, r3
 800c7a6:	430b      	orrs	r3, r1
 800c7a8:	40c2      	lsrs	r2, r0
 800c7aa:	6163      	str	r3, [r4, #20]
 800c7ac:	9201      	str	r2, [sp, #4]
 800c7ae:	9b01      	ldr	r3, [sp, #4]
 800c7b0:	61a3      	str	r3, [r4, #24]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	bf14      	ite	ne
 800c7b6:	2202      	movne	r2, #2
 800c7b8:	2201      	moveq	r2, #1
 800c7ba:	6122      	str	r2, [r4, #16]
 800c7bc:	b1d5      	cbz	r5, 800c7f4 <__d2b+0x98>
 800c7be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c7c2:	4405      	add	r5, r0
 800c7c4:	f8c9 5000 	str.w	r5, [r9]
 800c7c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c7cc:	f8c8 0000 	str.w	r0, [r8]
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	b003      	add	sp, #12
 800c7d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c7dc:	e7d5      	b.n	800c78a <__d2b+0x2e>
 800c7de:	6161      	str	r1, [r4, #20]
 800c7e0:	e7e5      	b.n	800c7ae <__d2b+0x52>
 800c7e2:	a801      	add	r0, sp, #4
 800c7e4:	f7ff fcf8 	bl	800c1d8 <__lo0bits>
 800c7e8:	9b01      	ldr	r3, [sp, #4]
 800c7ea:	6163      	str	r3, [r4, #20]
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	6122      	str	r2, [r4, #16]
 800c7f0:	3020      	adds	r0, #32
 800c7f2:	e7e3      	b.n	800c7bc <__d2b+0x60>
 800c7f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c7f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c7fc:	f8c9 0000 	str.w	r0, [r9]
 800c800:	6918      	ldr	r0, [r3, #16]
 800c802:	f7ff fcc9 	bl	800c198 <__hi0bits>
 800c806:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c80a:	e7df      	b.n	800c7cc <__d2b+0x70>
 800c80c:	08010122 	.word	0x08010122
 800c810:	08010198 	.word	0x08010198

0800c814 <__ratio>:
 800c814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c818:	4688      	mov	r8, r1
 800c81a:	4669      	mov	r1, sp
 800c81c:	4681      	mov	r9, r0
 800c81e:	f7ff ff4d 	bl	800c6bc <__b2d>
 800c822:	a901      	add	r1, sp, #4
 800c824:	4640      	mov	r0, r8
 800c826:	ec55 4b10 	vmov	r4, r5, d0
 800c82a:	f7ff ff47 	bl	800c6bc <__b2d>
 800c82e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c832:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c836:	eba3 0c02 	sub.w	ip, r3, r2
 800c83a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c83e:	1a9b      	subs	r3, r3, r2
 800c840:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c844:	ec51 0b10 	vmov	r0, r1, d0
 800c848:	2b00      	cmp	r3, #0
 800c84a:	bfd6      	itet	le
 800c84c:	460a      	movle	r2, r1
 800c84e:	462a      	movgt	r2, r5
 800c850:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c854:	468b      	mov	fp, r1
 800c856:	462f      	mov	r7, r5
 800c858:	bfd4      	ite	le
 800c85a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c85e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c862:	4620      	mov	r0, r4
 800c864:	ee10 2a10 	vmov	r2, s0
 800c868:	465b      	mov	r3, fp
 800c86a:	4639      	mov	r1, r7
 800c86c:	f7f3 fff6 	bl	800085c <__aeabi_ddiv>
 800c870:	ec41 0b10 	vmov	d0, r0, r1
 800c874:	b003      	add	sp, #12
 800c876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c87a <__copybits>:
 800c87a:	3901      	subs	r1, #1
 800c87c:	b570      	push	{r4, r5, r6, lr}
 800c87e:	1149      	asrs	r1, r1, #5
 800c880:	6914      	ldr	r4, [r2, #16]
 800c882:	3101      	adds	r1, #1
 800c884:	f102 0314 	add.w	r3, r2, #20
 800c888:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c88c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c890:	1f05      	subs	r5, r0, #4
 800c892:	42a3      	cmp	r3, r4
 800c894:	d30c      	bcc.n	800c8b0 <__copybits+0x36>
 800c896:	1aa3      	subs	r3, r4, r2
 800c898:	3b11      	subs	r3, #17
 800c89a:	f023 0303 	bic.w	r3, r3, #3
 800c89e:	3211      	adds	r2, #17
 800c8a0:	42a2      	cmp	r2, r4
 800c8a2:	bf88      	it	hi
 800c8a4:	2300      	movhi	r3, #0
 800c8a6:	4418      	add	r0, r3
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	4288      	cmp	r0, r1
 800c8ac:	d305      	bcc.n	800c8ba <__copybits+0x40>
 800c8ae:	bd70      	pop	{r4, r5, r6, pc}
 800c8b0:	f853 6b04 	ldr.w	r6, [r3], #4
 800c8b4:	f845 6f04 	str.w	r6, [r5, #4]!
 800c8b8:	e7eb      	b.n	800c892 <__copybits+0x18>
 800c8ba:	f840 3b04 	str.w	r3, [r0], #4
 800c8be:	e7f4      	b.n	800c8aa <__copybits+0x30>

0800c8c0 <__any_on>:
 800c8c0:	f100 0214 	add.w	r2, r0, #20
 800c8c4:	6900      	ldr	r0, [r0, #16]
 800c8c6:	114b      	asrs	r3, r1, #5
 800c8c8:	4298      	cmp	r0, r3
 800c8ca:	b510      	push	{r4, lr}
 800c8cc:	db11      	blt.n	800c8f2 <__any_on+0x32>
 800c8ce:	dd0a      	ble.n	800c8e6 <__any_on+0x26>
 800c8d0:	f011 011f 	ands.w	r1, r1, #31
 800c8d4:	d007      	beq.n	800c8e6 <__any_on+0x26>
 800c8d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c8da:	fa24 f001 	lsr.w	r0, r4, r1
 800c8de:	fa00 f101 	lsl.w	r1, r0, r1
 800c8e2:	428c      	cmp	r4, r1
 800c8e4:	d10b      	bne.n	800c8fe <__any_on+0x3e>
 800c8e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d803      	bhi.n	800c8f6 <__any_on+0x36>
 800c8ee:	2000      	movs	r0, #0
 800c8f0:	bd10      	pop	{r4, pc}
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	e7f7      	b.n	800c8e6 <__any_on+0x26>
 800c8f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c8fa:	2900      	cmp	r1, #0
 800c8fc:	d0f5      	beq.n	800c8ea <__any_on+0x2a>
 800c8fe:	2001      	movs	r0, #1
 800c900:	e7f6      	b.n	800c8f0 <__any_on+0x30>
	...

0800c904 <_read_r>:
 800c904:	b538      	push	{r3, r4, r5, lr}
 800c906:	4d07      	ldr	r5, [pc, #28]	; (800c924 <_read_r+0x20>)
 800c908:	4604      	mov	r4, r0
 800c90a:	4608      	mov	r0, r1
 800c90c:	4611      	mov	r1, r2
 800c90e:	2200      	movs	r2, #0
 800c910:	602a      	str	r2, [r5, #0]
 800c912:	461a      	mov	r2, r3
 800c914:	f7f7 f858 	bl	80039c8 <_read>
 800c918:	1c43      	adds	r3, r0, #1
 800c91a:	d102      	bne.n	800c922 <_read_r+0x1e>
 800c91c:	682b      	ldr	r3, [r5, #0]
 800c91e:	b103      	cbz	r3, 800c922 <_read_r+0x1e>
 800c920:	6023      	str	r3, [r4, #0]
 800c922:	bd38      	pop	{r3, r4, r5, pc}
 800c924:	200011a0 	.word	0x200011a0

0800c928 <realloc>:
 800c928:	4b02      	ldr	r3, [pc, #8]	; (800c934 <realloc+0xc>)
 800c92a:	460a      	mov	r2, r1
 800c92c:	4601      	mov	r1, r0
 800c92e:	6818      	ldr	r0, [r3, #0]
 800c930:	f000 b802 	b.w	800c938 <_realloc_r>
 800c934:	20000010 	.word	0x20000010

0800c938 <_realloc_r>:
 800c938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c93c:	4681      	mov	r9, r0
 800c93e:	460c      	mov	r4, r1
 800c940:	b929      	cbnz	r1, 800c94e <_realloc_r+0x16>
 800c942:	4611      	mov	r1, r2
 800c944:	b003      	add	sp, #12
 800c946:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c94a:	f7fb bc19 	b.w	8008180 <_malloc_r>
 800c94e:	9201      	str	r2, [sp, #4]
 800c950:	f7fb fe5a 	bl	8008608 <__malloc_lock>
 800c954:	9a01      	ldr	r2, [sp, #4]
 800c956:	f102 080b 	add.w	r8, r2, #11
 800c95a:	f1b8 0f16 	cmp.w	r8, #22
 800c95e:	d90b      	bls.n	800c978 <_realloc_r+0x40>
 800c960:	f038 0807 	bics.w	r8, r8, #7
 800c964:	d50a      	bpl.n	800c97c <_realloc_r+0x44>
 800c966:	230c      	movs	r3, #12
 800c968:	f8c9 3000 	str.w	r3, [r9]
 800c96c:	f04f 0b00 	mov.w	fp, #0
 800c970:	4658      	mov	r0, fp
 800c972:	b003      	add	sp, #12
 800c974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c978:	f04f 0810 	mov.w	r8, #16
 800c97c:	4590      	cmp	r8, r2
 800c97e:	d3f2      	bcc.n	800c966 <_realloc_r+0x2e>
 800c980:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800c984:	f025 0603 	bic.w	r6, r5, #3
 800c988:	45b0      	cmp	r8, r6
 800c98a:	f1a4 0a08 	sub.w	sl, r4, #8
 800c98e:	f340 816e 	ble.w	800cc6e <_realloc_r+0x336>
 800c992:	499b      	ldr	r1, [pc, #620]	; (800cc00 <_realloc_r+0x2c8>)
 800c994:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800c998:	eb0a 0306 	add.w	r3, sl, r6
 800c99c:	459c      	cmp	ip, r3
 800c99e:	6859      	ldr	r1, [r3, #4]
 800c9a0:	d005      	beq.n	800c9ae <_realloc_r+0x76>
 800c9a2:	f021 0001 	bic.w	r0, r1, #1
 800c9a6:	4418      	add	r0, r3
 800c9a8:	6840      	ldr	r0, [r0, #4]
 800c9aa:	07c7      	lsls	r7, r0, #31
 800c9ac:	d427      	bmi.n	800c9fe <_realloc_r+0xc6>
 800c9ae:	f021 0103 	bic.w	r1, r1, #3
 800c9b2:	459c      	cmp	ip, r3
 800c9b4:	eb06 0701 	add.w	r7, r6, r1
 800c9b8:	d119      	bne.n	800c9ee <_realloc_r+0xb6>
 800c9ba:	f108 0010 	add.w	r0, r8, #16
 800c9be:	42b8      	cmp	r0, r7
 800c9c0:	dc1f      	bgt.n	800ca02 <_realloc_r+0xca>
 800c9c2:	eb0a 0308 	add.w	r3, sl, r8
 800c9c6:	4a8e      	ldr	r2, [pc, #568]	; (800cc00 <_realloc_r+0x2c8>)
 800c9c8:	eba7 0708 	sub.w	r7, r7, r8
 800c9cc:	f047 0701 	orr.w	r7, r7, #1
 800c9d0:	6093      	str	r3, [r2, #8]
 800c9d2:	605f      	str	r7, [r3, #4]
 800c9d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c9d8:	f003 0301 	and.w	r3, r3, #1
 800c9dc:	ea43 0308 	orr.w	r3, r3, r8
 800c9e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9e4:	4648      	mov	r0, r9
 800c9e6:	f7fb fe15 	bl	8008614 <__malloc_unlock>
 800c9ea:	46a3      	mov	fp, r4
 800c9ec:	e7c0      	b.n	800c970 <_realloc_r+0x38>
 800c9ee:	45b8      	cmp	r8, r7
 800c9f0:	dc07      	bgt.n	800ca02 <_realloc_r+0xca>
 800c9f2:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800c9f6:	60da      	str	r2, [r3, #12]
 800c9f8:	6093      	str	r3, [r2, #8]
 800c9fa:	4655      	mov	r5, sl
 800c9fc:	e07f      	b.n	800cafe <_realloc_r+0x1c6>
 800c9fe:	2100      	movs	r1, #0
 800ca00:	460b      	mov	r3, r1
 800ca02:	07e8      	lsls	r0, r5, #31
 800ca04:	f100 80e5 	bmi.w	800cbd2 <_realloc_r+0x29a>
 800ca08:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800ca0c:	ebaa 0505 	sub.w	r5, sl, r5
 800ca10:	6868      	ldr	r0, [r5, #4]
 800ca12:	f020 0003 	bic.w	r0, r0, #3
 800ca16:	eb00 0b06 	add.w	fp, r0, r6
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	f000 80a5 	beq.w	800cb6a <_realloc_r+0x232>
 800ca20:	459c      	cmp	ip, r3
 800ca22:	eb01 070b 	add.w	r7, r1, fp
 800ca26:	d14a      	bne.n	800cabe <_realloc_r+0x186>
 800ca28:	f108 0310 	add.w	r3, r8, #16
 800ca2c:	42bb      	cmp	r3, r7
 800ca2e:	f300 809c 	bgt.w	800cb6a <_realloc_r+0x232>
 800ca32:	46ab      	mov	fp, r5
 800ca34:	68eb      	ldr	r3, [r5, #12]
 800ca36:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800ca3a:	60d3      	str	r3, [r2, #12]
 800ca3c:	609a      	str	r2, [r3, #8]
 800ca3e:	1f32      	subs	r2, r6, #4
 800ca40:	2a24      	cmp	r2, #36	; 0x24
 800ca42:	d837      	bhi.n	800cab4 <_realloc_r+0x17c>
 800ca44:	2a13      	cmp	r2, #19
 800ca46:	d933      	bls.n	800cab0 <_realloc_r+0x178>
 800ca48:	6823      	ldr	r3, [r4, #0]
 800ca4a:	60ab      	str	r3, [r5, #8]
 800ca4c:	6863      	ldr	r3, [r4, #4]
 800ca4e:	60eb      	str	r3, [r5, #12]
 800ca50:	2a1b      	cmp	r2, #27
 800ca52:	d81b      	bhi.n	800ca8c <_realloc_r+0x154>
 800ca54:	3408      	adds	r4, #8
 800ca56:	f105 0310 	add.w	r3, r5, #16
 800ca5a:	6822      	ldr	r2, [r4, #0]
 800ca5c:	601a      	str	r2, [r3, #0]
 800ca5e:	6862      	ldr	r2, [r4, #4]
 800ca60:	605a      	str	r2, [r3, #4]
 800ca62:	68a2      	ldr	r2, [r4, #8]
 800ca64:	609a      	str	r2, [r3, #8]
 800ca66:	eb05 0308 	add.w	r3, r5, r8
 800ca6a:	4a65      	ldr	r2, [pc, #404]	; (800cc00 <_realloc_r+0x2c8>)
 800ca6c:	eba7 0708 	sub.w	r7, r7, r8
 800ca70:	f047 0701 	orr.w	r7, r7, #1
 800ca74:	6093      	str	r3, [r2, #8]
 800ca76:	605f      	str	r7, [r3, #4]
 800ca78:	686b      	ldr	r3, [r5, #4]
 800ca7a:	f003 0301 	and.w	r3, r3, #1
 800ca7e:	ea43 0308 	orr.w	r3, r3, r8
 800ca82:	606b      	str	r3, [r5, #4]
 800ca84:	4648      	mov	r0, r9
 800ca86:	f7fb fdc5 	bl	8008614 <__malloc_unlock>
 800ca8a:	e771      	b.n	800c970 <_realloc_r+0x38>
 800ca8c:	68a3      	ldr	r3, [r4, #8]
 800ca8e:	612b      	str	r3, [r5, #16]
 800ca90:	68e3      	ldr	r3, [r4, #12]
 800ca92:	616b      	str	r3, [r5, #20]
 800ca94:	2a24      	cmp	r2, #36	; 0x24
 800ca96:	bf01      	itttt	eq
 800ca98:	6923      	ldreq	r3, [r4, #16]
 800ca9a:	61ab      	streq	r3, [r5, #24]
 800ca9c:	6962      	ldreq	r2, [r4, #20]
 800ca9e:	61ea      	streq	r2, [r5, #28]
 800caa0:	bf19      	ittee	ne
 800caa2:	3410      	addne	r4, #16
 800caa4:	f105 0318 	addne.w	r3, r5, #24
 800caa8:	f105 0320 	addeq.w	r3, r5, #32
 800caac:	3418      	addeq	r4, #24
 800caae:	e7d4      	b.n	800ca5a <_realloc_r+0x122>
 800cab0:	465b      	mov	r3, fp
 800cab2:	e7d2      	b.n	800ca5a <_realloc_r+0x122>
 800cab4:	4621      	mov	r1, r4
 800cab6:	4658      	mov	r0, fp
 800cab8:	f001 ffe8 	bl	800ea8c <memmove>
 800cabc:	e7d3      	b.n	800ca66 <_realloc_r+0x12e>
 800cabe:	45b8      	cmp	r8, r7
 800cac0:	dc53      	bgt.n	800cb6a <_realloc_r+0x232>
 800cac2:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800cac6:	4628      	mov	r0, r5
 800cac8:	60da      	str	r2, [r3, #12]
 800caca:	6093      	str	r3, [r2, #8]
 800cacc:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800cad0:	68eb      	ldr	r3, [r5, #12]
 800cad2:	60d3      	str	r3, [r2, #12]
 800cad4:	609a      	str	r2, [r3, #8]
 800cad6:	1f32      	subs	r2, r6, #4
 800cad8:	2a24      	cmp	r2, #36	; 0x24
 800cada:	d842      	bhi.n	800cb62 <_realloc_r+0x22a>
 800cadc:	2a13      	cmp	r2, #19
 800cade:	d908      	bls.n	800caf2 <_realloc_r+0x1ba>
 800cae0:	6823      	ldr	r3, [r4, #0]
 800cae2:	60ab      	str	r3, [r5, #8]
 800cae4:	6863      	ldr	r3, [r4, #4]
 800cae6:	60eb      	str	r3, [r5, #12]
 800cae8:	2a1b      	cmp	r2, #27
 800caea:	d828      	bhi.n	800cb3e <_realloc_r+0x206>
 800caec:	3408      	adds	r4, #8
 800caee:	f105 0010 	add.w	r0, r5, #16
 800caf2:	6823      	ldr	r3, [r4, #0]
 800caf4:	6003      	str	r3, [r0, #0]
 800caf6:	6863      	ldr	r3, [r4, #4]
 800caf8:	6043      	str	r3, [r0, #4]
 800cafa:	68a3      	ldr	r3, [r4, #8]
 800cafc:	6083      	str	r3, [r0, #8]
 800cafe:	686b      	ldr	r3, [r5, #4]
 800cb00:	eba7 0008 	sub.w	r0, r7, r8
 800cb04:	280f      	cmp	r0, #15
 800cb06:	f003 0301 	and.w	r3, r3, #1
 800cb0a:	eb05 0207 	add.w	r2, r5, r7
 800cb0e:	f240 80b0 	bls.w	800cc72 <_realloc_r+0x33a>
 800cb12:	eb05 0108 	add.w	r1, r5, r8
 800cb16:	ea48 0303 	orr.w	r3, r8, r3
 800cb1a:	f040 0001 	orr.w	r0, r0, #1
 800cb1e:	606b      	str	r3, [r5, #4]
 800cb20:	6048      	str	r0, [r1, #4]
 800cb22:	6853      	ldr	r3, [r2, #4]
 800cb24:	f043 0301 	orr.w	r3, r3, #1
 800cb28:	6053      	str	r3, [r2, #4]
 800cb2a:	3108      	adds	r1, #8
 800cb2c:	4648      	mov	r0, r9
 800cb2e:	f7ff f94d 	bl	800bdcc <_free_r>
 800cb32:	4648      	mov	r0, r9
 800cb34:	f7fb fd6e 	bl	8008614 <__malloc_unlock>
 800cb38:	f105 0b08 	add.w	fp, r5, #8
 800cb3c:	e718      	b.n	800c970 <_realloc_r+0x38>
 800cb3e:	68a3      	ldr	r3, [r4, #8]
 800cb40:	612b      	str	r3, [r5, #16]
 800cb42:	68e3      	ldr	r3, [r4, #12]
 800cb44:	616b      	str	r3, [r5, #20]
 800cb46:	2a24      	cmp	r2, #36	; 0x24
 800cb48:	bf01      	itttt	eq
 800cb4a:	6923      	ldreq	r3, [r4, #16]
 800cb4c:	61ab      	streq	r3, [r5, #24]
 800cb4e:	6963      	ldreq	r3, [r4, #20]
 800cb50:	61eb      	streq	r3, [r5, #28]
 800cb52:	bf19      	ittee	ne
 800cb54:	3410      	addne	r4, #16
 800cb56:	f105 0018 	addne.w	r0, r5, #24
 800cb5a:	f105 0020 	addeq.w	r0, r5, #32
 800cb5e:	3418      	addeq	r4, #24
 800cb60:	e7c7      	b.n	800caf2 <_realloc_r+0x1ba>
 800cb62:	4621      	mov	r1, r4
 800cb64:	f001 ff92 	bl	800ea8c <memmove>
 800cb68:	e7c9      	b.n	800cafe <_realloc_r+0x1c6>
 800cb6a:	45d8      	cmp	r8, fp
 800cb6c:	dc31      	bgt.n	800cbd2 <_realloc_r+0x29a>
 800cb6e:	4628      	mov	r0, r5
 800cb70:	68eb      	ldr	r3, [r5, #12]
 800cb72:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800cb76:	60d3      	str	r3, [r2, #12]
 800cb78:	609a      	str	r2, [r3, #8]
 800cb7a:	1f32      	subs	r2, r6, #4
 800cb7c:	2a24      	cmp	r2, #36	; 0x24
 800cb7e:	d824      	bhi.n	800cbca <_realloc_r+0x292>
 800cb80:	2a13      	cmp	r2, #19
 800cb82:	d908      	bls.n	800cb96 <_realloc_r+0x25e>
 800cb84:	6823      	ldr	r3, [r4, #0]
 800cb86:	60ab      	str	r3, [r5, #8]
 800cb88:	6863      	ldr	r3, [r4, #4]
 800cb8a:	60eb      	str	r3, [r5, #12]
 800cb8c:	2a1b      	cmp	r2, #27
 800cb8e:	d80a      	bhi.n	800cba6 <_realloc_r+0x26e>
 800cb90:	3408      	adds	r4, #8
 800cb92:	f105 0010 	add.w	r0, r5, #16
 800cb96:	6823      	ldr	r3, [r4, #0]
 800cb98:	6003      	str	r3, [r0, #0]
 800cb9a:	6863      	ldr	r3, [r4, #4]
 800cb9c:	6043      	str	r3, [r0, #4]
 800cb9e:	68a3      	ldr	r3, [r4, #8]
 800cba0:	6083      	str	r3, [r0, #8]
 800cba2:	465f      	mov	r7, fp
 800cba4:	e7ab      	b.n	800cafe <_realloc_r+0x1c6>
 800cba6:	68a3      	ldr	r3, [r4, #8]
 800cba8:	612b      	str	r3, [r5, #16]
 800cbaa:	68e3      	ldr	r3, [r4, #12]
 800cbac:	616b      	str	r3, [r5, #20]
 800cbae:	2a24      	cmp	r2, #36	; 0x24
 800cbb0:	bf01      	itttt	eq
 800cbb2:	6923      	ldreq	r3, [r4, #16]
 800cbb4:	61ab      	streq	r3, [r5, #24]
 800cbb6:	6963      	ldreq	r3, [r4, #20]
 800cbb8:	61eb      	streq	r3, [r5, #28]
 800cbba:	bf19      	ittee	ne
 800cbbc:	3410      	addne	r4, #16
 800cbbe:	f105 0018 	addne.w	r0, r5, #24
 800cbc2:	f105 0020 	addeq.w	r0, r5, #32
 800cbc6:	3418      	addeq	r4, #24
 800cbc8:	e7e5      	b.n	800cb96 <_realloc_r+0x25e>
 800cbca:	4621      	mov	r1, r4
 800cbcc:	f001 ff5e 	bl	800ea8c <memmove>
 800cbd0:	e7e7      	b.n	800cba2 <_realloc_r+0x26a>
 800cbd2:	4611      	mov	r1, r2
 800cbd4:	4648      	mov	r0, r9
 800cbd6:	f7fb fad3 	bl	8008180 <_malloc_r>
 800cbda:	4683      	mov	fp, r0
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	f43f af51 	beq.w	800ca84 <_realloc_r+0x14c>
 800cbe2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800cbe6:	f023 0301 	bic.w	r3, r3, #1
 800cbea:	4453      	add	r3, sl
 800cbec:	f1a0 0208 	sub.w	r2, r0, #8
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d107      	bne.n	800cc04 <_realloc_r+0x2cc>
 800cbf4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800cbf8:	f027 0703 	bic.w	r7, r7, #3
 800cbfc:	4437      	add	r7, r6
 800cbfe:	e6fc      	b.n	800c9fa <_realloc_r+0xc2>
 800cc00:	20000440 	.word	0x20000440
 800cc04:	1f32      	subs	r2, r6, #4
 800cc06:	2a24      	cmp	r2, #36	; 0x24
 800cc08:	d82d      	bhi.n	800cc66 <_realloc_r+0x32e>
 800cc0a:	2a13      	cmp	r2, #19
 800cc0c:	d928      	bls.n	800cc60 <_realloc_r+0x328>
 800cc0e:	6823      	ldr	r3, [r4, #0]
 800cc10:	6003      	str	r3, [r0, #0]
 800cc12:	6863      	ldr	r3, [r4, #4]
 800cc14:	6043      	str	r3, [r0, #4]
 800cc16:	2a1b      	cmp	r2, #27
 800cc18:	d80e      	bhi.n	800cc38 <_realloc_r+0x300>
 800cc1a:	f104 0208 	add.w	r2, r4, #8
 800cc1e:	f100 0308 	add.w	r3, r0, #8
 800cc22:	6811      	ldr	r1, [r2, #0]
 800cc24:	6019      	str	r1, [r3, #0]
 800cc26:	6851      	ldr	r1, [r2, #4]
 800cc28:	6059      	str	r1, [r3, #4]
 800cc2a:	6892      	ldr	r2, [r2, #8]
 800cc2c:	609a      	str	r2, [r3, #8]
 800cc2e:	4621      	mov	r1, r4
 800cc30:	4648      	mov	r0, r9
 800cc32:	f7ff f8cb 	bl	800bdcc <_free_r>
 800cc36:	e725      	b.n	800ca84 <_realloc_r+0x14c>
 800cc38:	68a3      	ldr	r3, [r4, #8]
 800cc3a:	6083      	str	r3, [r0, #8]
 800cc3c:	68e3      	ldr	r3, [r4, #12]
 800cc3e:	60c3      	str	r3, [r0, #12]
 800cc40:	2a24      	cmp	r2, #36	; 0x24
 800cc42:	bf01      	itttt	eq
 800cc44:	6923      	ldreq	r3, [r4, #16]
 800cc46:	6103      	streq	r3, [r0, #16]
 800cc48:	6961      	ldreq	r1, [r4, #20]
 800cc4a:	6141      	streq	r1, [r0, #20]
 800cc4c:	bf19      	ittee	ne
 800cc4e:	f104 0210 	addne.w	r2, r4, #16
 800cc52:	f100 0310 	addne.w	r3, r0, #16
 800cc56:	f104 0218 	addeq.w	r2, r4, #24
 800cc5a:	f100 0318 	addeq.w	r3, r0, #24
 800cc5e:	e7e0      	b.n	800cc22 <_realloc_r+0x2ea>
 800cc60:	4603      	mov	r3, r0
 800cc62:	4622      	mov	r2, r4
 800cc64:	e7dd      	b.n	800cc22 <_realloc_r+0x2ea>
 800cc66:	4621      	mov	r1, r4
 800cc68:	f001 ff10 	bl	800ea8c <memmove>
 800cc6c:	e7df      	b.n	800cc2e <_realloc_r+0x2f6>
 800cc6e:	4637      	mov	r7, r6
 800cc70:	e6c3      	b.n	800c9fa <_realloc_r+0xc2>
 800cc72:	431f      	orrs	r7, r3
 800cc74:	606f      	str	r7, [r5, #4]
 800cc76:	6853      	ldr	r3, [r2, #4]
 800cc78:	f043 0301 	orr.w	r3, r3, #1
 800cc7c:	6053      	str	r3, [r2, #4]
 800cc7e:	e758      	b.n	800cb32 <_realloc_r+0x1fa>

0800cc80 <frexp>:
 800cc80:	b570      	push	{r4, r5, r6, lr}
 800cc82:	2100      	movs	r1, #0
 800cc84:	ec55 4b10 	vmov	r4, r5, d0
 800cc88:	6001      	str	r1, [r0, #0]
 800cc8a:	4916      	ldr	r1, [pc, #88]	; (800cce4 <frexp+0x64>)
 800cc8c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800cc90:	428a      	cmp	r2, r1
 800cc92:	4606      	mov	r6, r0
 800cc94:	462b      	mov	r3, r5
 800cc96:	dc22      	bgt.n	800ccde <frexp+0x5e>
 800cc98:	ee10 1a10 	vmov	r1, s0
 800cc9c:	4311      	orrs	r1, r2
 800cc9e:	d01e      	beq.n	800ccde <frexp+0x5e>
 800cca0:	4911      	ldr	r1, [pc, #68]	; (800cce8 <frexp+0x68>)
 800cca2:	4029      	ands	r1, r5
 800cca4:	b969      	cbnz	r1, 800ccc2 <frexp+0x42>
 800cca6:	4b11      	ldr	r3, [pc, #68]	; (800ccec <frexp+0x6c>)
 800cca8:	2200      	movs	r2, #0
 800ccaa:	ee10 0a10 	vmov	r0, s0
 800ccae:	4629      	mov	r1, r5
 800ccb0:	f7f3 fcaa 	bl	8000608 <__aeabi_dmul>
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ccba:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	6031      	str	r1, [r6, #0]
 800ccc2:	6831      	ldr	r1, [r6, #0]
 800ccc4:	1512      	asrs	r2, r2, #20
 800ccc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ccca:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800ccce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ccd2:	440a      	add	r2, r1
 800ccd4:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800ccd8:	6032      	str	r2, [r6, #0]
 800ccda:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800ccde:	ec45 4b10 	vmov	d0, r4, r5
 800cce2:	bd70      	pop	{r4, r5, r6, pc}
 800cce4:	7fefffff 	.word	0x7fefffff
 800cce8:	7ff00000 	.word	0x7ff00000
 800ccec:	43500000 	.word	0x43500000

0800ccf0 <__sccl>:
 800ccf0:	b570      	push	{r4, r5, r6, lr}
 800ccf2:	780b      	ldrb	r3, [r1, #0]
 800ccf4:	4604      	mov	r4, r0
 800ccf6:	2b5e      	cmp	r3, #94	; 0x5e
 800ccf8:	bf0b      	itete	eq
 800ccfa:	784b      	ldrbeq	r3, [r1, #1]
 800ccfc:	1c48      	addne	r0, r1, #1
 800ccfe:	1c88      	addeq	r0, r1, #2
 800cd00:	2200      	movne	r2, #0
 800cd02:	bf08      	it	eq
 800cd04:	2201      	moveq	r2, #1
 800cd06:	1e61      	subs	r1, r4, #1
 800cd08:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cd0c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800cd10:	42a9      	cmp	r1, r5
 800cd12:	d1fb      	bne.n	800cd0c <__sccl+0x1c>
 800cd14:	b90b      	cbnz	r3, 800cd1a <__sccl+0x2a>
 800cd16:	3801      	subs	r0, #1
 800cd18:	bd70      	pop	{r4, r5, r6, pc}
 800cd1a:	f082 0201 	eor.w	r2, r2, #1
 800cd1e:	54e2      	strb	r2, [r4, r3]
 800cd20:	4605      	mov	r5, r0
 800cd22:	4628      	mov	r0, r5
 800cd24:	f810 1b01 	ldrb.w	r1, [r0], #1
 800cd28:	292d      	cmp	r1, #45	; 0x2d
 800cd2a:	d006      	beq.n	800cd3a <__sccl+0x4a>
 800cd2c:	295d      	cmp	r1, #93	; 0x5d
 800cd2e:	d0f3      	beq.n	800cd18 <__sccl+0x28>
 800cd30:	b909      	cbnz	r1, 800cd36 <__sccl+0x46>
 800cd32:	4628      	mov	r0, r5
 800cd34:	e7f0      	b.n	800cd18 <__sccl+0x28>
 800cd36:	460b      	mov	r3, r1
 800cd38:	e7f1      	b.n	800cd1e <__sccl+0x2e>
 800cd3a:	786e      	ldrb	r6, [r5, #1]
 800cd3c:	2e5d      	cmp	r6, #93	; 0x5d
 800cd3e:	d0fa      	beq.n	800cd36 <__sccl+0x46>
 800cd40:	42b3      	cmp	r3, r6
 800cd42:	dcf8      	bgt.n	800cd36 <__sccl+0x46>
 800cd44:	3502      	adds	r5, #2
 800cd46:	4619      	mov	r1, r3
 800cd48:	3101      	adds	r1, #1
 800cd4a:	428e      	cmp	r6, r1
 800cd4c:	5462      	strb	r2, [r4, r1]
 800cd4e:	dcfb      	bgt.n	800cd48 <__sccl+0x58>
 800cd50:	1af1      	subs	r1, r6, r3
 800cd52:	3901      	subs	r1, #1
 800cd54:	1c58      	adds	r0, r3, #1
 800cd56:	42b3      	cmp	r3, r6
 800cd58:	bfa8      	it	ge
 800cd5a:	2100      	movge	r1, #0
 800cd5c:	1843      	adds	r3, r0, r1
 800cd5e:	e7e0      	b.n	800cd22 <__sccl+0x32>

0800cd60 <nanf>:
 800cd60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cd68 <nanf+0x8>
 800cd64:	4770      	bx	lr
 800cd66:	bf00      	nop
 800cd68:	7fc00000 	.word	0x7fc00000

0800cd6c <strncpy>:
 800cd6c:	b510      	push	{r4, lr}
 800cd6e:	3901      	subs	r1, #1
 800cd70:	4603      	mov	r3, r0
 800cd72:	b132      	cbz	r2, 800cd82 <strncpy+0x16>
 800cd74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cd78:	f803 4b01 	strb.w	r4, [r3], #1
 800cd7c:	3a01      	subs	r2, #1
 800cd7e:	2c00      	cmp	r4, #0
 800cd80:	d1f7      	bne.n	800cd72 <strncpy+0x6>
 800cd82:	441a      	add	r2, r3
 800cd84:	2100      	movs	r1, #0
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d100      	bne.n	800cd8c <strncpy+0x20>
 800cd8a:	bd10      	pop	{r4, pc}
 800cd8c:	f803 1b01 	strb.w	r1, [r3], #1
 800cd90:	e7f9      	b.n	800cd86 <strncpy+0x1a>

0800cd92 <sulp>:
 800cd92:	b570      	push	{r4, r5, r6, lr}
 800cd94:	4604      	mov	r4, r0
 800cd96:	460d      	mov	r5, r1
 800cd98:	ec45 4b10 	vmov	d0, r4, r5
 800cd9c:	4616      	mov	r6, r2
 800cd9e:	f7ff fc61 	bl	800c664 <__ulp>
 800cda2:	ec51 0b10 	vmov	r0, r1, d0
 800cda6:	b17e      	cbz	r6, 800cdc8 <sulp+0x36>
 800cda8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cdac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	dd09      	ble.n	800cdc8 <sulp+0x36>
 800cdb4:	051b      	lsls	r3, r3, #20
 800cdb6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cdba:	2400      	movs	r4, #0
 800cdbc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cdc0:	4622      	mov	r2, r4
 800cdc2:	462b      	mov	r3, r5
 800cdc4:	f7f3 fc20 	bl	8000608 <__aeabi_dmul>
 800cdc8:	bd70      	pop	{r4, r5, r6, pc}
 800cdca:	0000      	movs	r0, r0
 800cdcc:	0000      	movs	r0, r0
	...

0800cdd0 <_strtod_l>:
 800cdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdd4:	ed2d 8b02 	vpush	{d8}
 800cdd8:	b09d      	sub	sp, #116	; 0x74
 800cdda:	461f      	mov	r7, r3
 800cddc:	2300      	movs	r3, #0
 800cdde:	9318      	str	r3, [sp, #96]	; 0x60
 800cde0:	4ba2      	ldr	r3, [pc, #648]	; (800d06c <_strtod_l+0x29c>)
 800cde2:	9213      	str	r2, [sp, #76]	; 0x4c
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	9305      	str	r3, [sp, #20]
 800cde8:	4604      	mov	r4, r0
 800cdea:	4618      	mov	r0, r3
 800cdec:	4688      	mov	r8, r1
 800cdee:	f7f3 f9f7 	bl	80001e0 <strlen>
 800cdf2:	f04f 0a00 	mov.w	sl, #0
 800cdf6:	4605      	mov	r5, r0
 800cdf8:	f04f 0b00 	mov.w	fp, #0
 800cdfc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ce00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce02:	781a      	ldrb	r2, [r3, #0]
 800ce04:	2a2b      	cmp	r2, #43	; 0x2b
 800ce06:	d04e      	beq.n	800cea6 <_strtod_l+0xd6>
 800ce08:	d83b      	bhi.n	800ce82 <_strtod_l+0xb2>
 800ce0a:	2a0d      	cmp	r2, #13
 800ce0c:	d834      	bhi.n	800ce78 <_strtod_l+0xa8>
 800ce0e:	2a08      	cmp	r2, #8
 800ce10:	d834      	bhi.n	800ce7c <_strtod_l+0xac>
 800ce12:	2a00      	cmp	r2, #0
 800ce14:	d03e      	beq.n	800ce94 <_strtod_l+0xc4>
 800ce16:	2300      	movs	r3, #0
 800ce18:	930a      	str	r3, [sp, #40]	; 0x28
 800ce1a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ce1c:	7833      	ldrb	r3, [r6, #0]
 800ce1e:	2b30      	cmp	r3, #48	; 0x30
 800ce20:	f040 80b0 	bne.w	800cf84 <_strtod_l+0x1b4>
 800ce24:	7873      	ldrb	r3, [r6, #1]
 800ce26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ce2a:	2b58      	cmp	r3, #88	; 0x58
 800ce2c:	d168      	bne.n	800cf00 <_strtod_l+0x130>
 800ce2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce30:	9301      	str	r3, [sp, #4]
 800ce32:	ab18      	add	r3, sp, #96	; 0x60
 800ce34:	9702      	str	r7, [sp, #8]
 800ce36:	9300      	str	r3, [sp, #0]
 800ce38:	4a8d      	ldr	r2, [pc, #564]	; (800d070 <_strtod_l+0x2a0>)
 800ce3a:	ab19      	add	r3, sp, #100	; 0x64
 800ce3c:	a917      	add	r1, sp, #92	; 0x5c
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f001 fb1c 	bl	800e47c <__gethex>
 800ce44:	f010 0707 	ands.w	r7, r0, #7
 800ce48:	4605      	mov	r5, r0
 800ce4a:	d005      	beq.n	800ce58 <_strtod_l+0x88>
 800ce4c:	2f06      	cmp	r7, #6
 800ce4e:	d12c      	bne.n	800ceaa <_strtod_l+0xda>
 800ce50:	3601      	adds	r6, #1
 800ce52:	2300      	movs	r3, #0
 800ce54:	9617      	str	r6, [sp, #92]	; 0x5c
 800ce56:	930a      	str	r3, [sp, #40]	; 0x28
 800ce58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	f040 8590 	bne.w	800d980 <_strtod_l+0xbb0>
 800ce60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce62:	b1eb      	cbz	r3, 800cea0 <_strtod_l+0xd0>
 800ce64:	4652      	mov	r2, sl
 800ce66:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ce6a:	ec43 2b10 	vmov	d0, r2, r3
 800ce6e:	b01d      	add	sp, #116	; 0x74
 800ce70:	ecbd 8b02 	vpop	{d8}
 800ce74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce78:	2a20      	cmp	r2, #32
 800ce7a:	d1cc      	bne.n	800ce16 <_strtod_l+0x46>
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce80:	e7be      	b.n	800ce00 <_strtod_l+0x30>
 800ce82:	2a2d      	cmp	r2, #45	; 0x2d
 800ce84:	d1c7      	bne.n	800ce16 <_strtod_l+0x46>
 800ce86:	2201      	movs	r2, #1
 800ce88:	920a      	str	r2, [sp, #40]	; 0x28
 800ce8a:	1c5a      	adds	r2, r3, #1
 800ce8c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce8e:	785b      	ldrb	r3, [r3, #1]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1c2      	bne.n	800ce1a <_strtod_l+0x4a>
 800ce94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ce96:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	f040 856e 	bne.w	800d97c <_strtod_l+0xbac>
 800cea0:	4652      	mov	r2, sl
 800cea2:	465b      	mov	r3, fp
 800cea4:	e7e1      	b.n	800ce6a <_strtod_l+0x9a>
 800cea6:	2200      	movs	r2, #0
 800cea8:	e7ee      	b.n	800ce88 <_strtod_l+0xb8>
 800ceaa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ceac:	b13a      	cbz	r2, 800cebe <_strtod_l+0xee>
 800ceae:	2135      	movs	r1, #53	; 0x35
 800ceb0:	a81a      	add	r0, sp, #104	; 0x68
 800ceb2:	f7ff fce2 	bl	800c87a <__copybits>
 800ceb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ceb8:	4620      	mov	r0, r4
 800ceba:	f7ff f8d4 	bl	800c066 <_Bfree>
 800cebe:	3f01      	subs	r7, #1
 800cec0:	2f04      	cmp	r7, #4
 800cec2:	d806      	bhi.n	800ced2 <_strtod_l+0x102>
 800cec4:	e8df f007 	tbb	[pc, r7]
 800cec8:	1714030a 	.word	0x1714030a
 800cecc:	0a          	.byte	0x0a
 800cecd:	00          	.byte	0x00
 800cece:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ced2:	0728      	lsls	r0, r5, #28
 800ced4:	d5c0      	bpl.n	800ce58 <_strtod_l+0x88>
 800ced6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ceda:	e7bd      	b.n	800ce58 <_strtod_l+0x88>
 800cedc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800cee0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cee2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cee6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ceea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ceee:	e7f0      	b.n	800ced2 <_strtod_l+0x102>
 800cef0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d074 <_strtod_l+0x2a4>
 800cef4:	e7ed      	b.n	800ced2 <_strtod_l+0x102>
 800cef6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cefa:	f04f 3aff 	mov.w	sl, #4294967295
 800cefe:	e7e8      	b.n	800ced2 <_strtod_l+0x102>
 800cf00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf02:	1c5a      	adds	r2, r3, #1
 800cf04:	9217      	str	r2, [sp, #92]	; 0x5c
 800cf06:	785b      	ldrb	r3, [r3, #1]
 800cf08:	2b30      	cmp	r3, #48	; 0x30
 800cf0a:	d0f9      	beq.n	800cf00 <_strtod_l+0x130>
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d0a3      	beq.n	800ce58 <_strtod_l+0x88>
 800cf10:	2301      	movs	r3, #1
 800cf12:	f04f 0900 	mov.w	r9, #0
 800cf16:	9304      	str	r3, [sp, #16]
 800cf18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf1a:	9308      	str	r3, [sp, #32]
 800cf1c:	f8cd 901c 	str.w	r9, [sp, #28]
 800cf20:	464f      	mov	r7, r9
 800cf22:	220a      	movs	r2, #10
 800cf24:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cf26:	7806      	ldrb	r6, [r0, #0]
 800cf28:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cf2c:	b2d9      	uxtb	r1, r3
 800cf2e:	2909      	cmp	r1, #9
 800cf30:	d92a      	bls.n	800cf88 <_strtod_l+0x1b8>
 800cf32:	9905      	ldr	r1, [sp, #20]
 800cf34:	462a      	mov	r2, r5
 800cf36:	f7fb fc14 	bl	8008762 <strncmp>
 800cf3a:	b398      	cbz	r0, 800cfa4 <_strtod_l+0x1d4>
 800cf3c:	2000      	movs	r0, #0
 800cf3e:	4632      	mov	r2, r6
 800cf40:	463d      	mov	r5, r7
 800cf42:	9005      	str	r0, [sp, #20]
 800cf44:	4603      	mov	r3, r0
 800cf46:	2a65      	cmp	r2, #101	; 0x65
 800cf48:	d001      	beq.n	800cf4e <_strtod_l+0x17e>
 800cf4a:	2a45      	cmp	r2, #69	; 0x45
 800cf4c:	d118      	bne.n	800cf80 <_strtod_l+0x1b0>
 800cf4e:	b91d      	cbnz	r5, 800cf58 <_strtod_l+0x188>
 800cf50:	9a04      	ldr	r2, [sp, #16]
 800cf52:	4302      	orrs	r2, r0
 800cf54:	d09e      	beq.n	800ce94 <_strtod_l+0xc4>
 800cf56:	2500      	movs	r5, #0
 800cf58:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800cf5c:	f108 0201 	add.w	r2, r8, #1
 800cf60:	9217      	str	r2, [sp, #92]	; 0x5c
 800cf62:	f898 2001 	ldrb.w	r2, [r8, #1]
 800cf66:	2a2b      	cmp	r2, #43	; 0x2b
 800cf68:	d075      	beq.n	800d056 <_strtod_l+0x286>
 800cf6a:	2a2d      	cmp	r2, #45	; 0x2d
 800cf6c:	d07b      	beq.n	800d066 <_strtod_l+0x296>
 800cf6e:	f04f 0c00 	mov.w	ip, #0
 800cf72:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cf76:	2909      	cmp	r1, #9
 800cf78:	f240 8082 	bls.w	800d080 <_strtod_l+0x2b0>
 800cf7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cf80:	2600      	movs	r6, #0
 800cf82:	e09d      	b.n	800d0c0 <_strtod_l+0x2f0>
 800cf84:	2300      	movs	r3, #0
 800cf86:	e7c4      	b.n	800cf12 <_strtod_l+0x142>
 800cf88:	2f08      	cmp	r7, #8
 800cf8a:	bfd8      	it	le
 800cf8c:	9907      	ldrle	r1, [sp, #28]
 800cf8e:	f100 0001 	add.w	r0, r0, #1
 800cf92:	bfda      	itte	le
 800cf94:	fb02 3301 	mlale	r3, r2, r1, r3
 800cf98:	9307      	strle	r3, [sp, #28]
 800cf9a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800cf9e:	3701      	adds	r7, #1
 800cfa0:	9017      	str	r0, [sp, #92]	; 0x5c
 800cfa2:	e7bf      	b.n	800cf24 <_strtod_l+0x154>
 800cfa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfa6:	195a      	adds	r2, r3, r5
 800cfa8:	9217      	str	r2, [sp, #92]	; 0x5c
 800cfaa:	5d5a      	ldrb	r2, [r3, r5]
 800cfac:	2f00      	cmp	r7, #0
 800cfae:	d037      	beq.n	800d020 <_strtod_l+0x250>
 800cfb0:	9005      	str	r0, [sp, #20]
 800cfb2:	463d      	mov	r5, r7
 800cfb4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800cfb8:	2b09      	cmp	r3, #9
 800cfba:	d912      	bls.n	800cfe2 <_strtod_l+0x212>
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e7c2      	b.n	800cf46 <_strtod_l+0x176>
 800cfc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfc2:	1c5a      	adds	r2, r3, #1
 800cfc4:	9217      	str	r2, [sp, #92]	; 0x5c
 800cfc6:	785a      	ldrb	r2, [r3, #1]
 800cfc8:	3001      	adds	r0, #1
 800cfca:	2a30      	cmp	r2, #48	; 0x30
 800cfcc:	d0f8      	beq.n	800cfc0 <_strtod_l+0x1f0>
 800cfce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800cfd2:	2b08      	cmp	r3, #8
 800cfd4:	f200 84d9 	bhi.w	800d98a <_strtod_l+0xbba>
 800cfd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfda:	9005      	str	r0, [sp, #20]
 800cfdc:	2000      	movs	r0, #0
 800cfde:	9308      	str	r3, [sp, #32]
 800cfe0:	4605      	mov	r5, r0
 800cfe2:	3a30      	subs	r2, #48	; 0x30
 800cfe4:	f100 0301 	add.w	r3, r0, #1
 800cfe8:	d014      	beq.n	800d014 <_strtod_l+0x244>
 800cfea:	9905      	ldr	r1, [sp, #20]
 800cfec:	4419      	add	r1, r3
 800cfee:	9105      	str	r1, [sp, #20]
 800cff0:	462b      	mov	r3, r5
 800cff2:	eb00 0e05 	add.w	lr, r0, r5
 800cff6:	210a      	movs	r1, #10
 800cff8:	4573      	cmp	r3, lr
 800cffa:	d113      	bne.n	800d024 <_strtod_l+0x254>
 800cffc:	182b      	adds	r3, r5, r0
 800cffe:	2b08      	cmp	r3, #8
 800d000:	f105 0501 	add.w	r5, r5, #1
 800d004:	4405      	add	r5, r0
 800d006:	dc1c      	bgt.n	800d042 <_strtod_l+0x272>
 800d008:	9907      	ldr	r1, [sp, #28]
 800d00a:	230a      	movs	r3, #10
 800d00c:	fb03 2301 	mla	r3, r3, r1, r2
 800d010:	9307      	str	r3, [sp, #28]
 800d012:	2300      	movs	r3, #0
 800d014:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d016:	1c51      	adds	r1, r2, #1
 800d018:	9117      	str	r1, [sp, #92]	; 0x5c
 800d01a:	7852      	ldrb	r2, [r2, #1]
 800d01c:	4618      	mov	r0, r3
 800d01e:	e7c9      	b.n	800cfb4 <_strtod_l+0x1e4>
 800d020:	4638      	mov	r0, r7
 800d022:	e7d2      	b.n	800cfca <_strtod_l+0x1fa>
 800d024:	2b08      	cmp	r3, #8
 800d026:	dc04      	bgt.n	800d032 <_strtod_l+0x262>
 800d028:	9e07      	ldr	r6, [sp, #28]
 800d02a:	434e      	muls	r6, r1
 800d02c:	9607      	str	r6, [sp, #28]
 800d02e:	3301      	adds	r3, #1
 800d030:	e7e2      	b.n	800cff8 <_strtod_l+0x228>
 800d032:	f103 0c01 	add.w	ip, r3, #1
 800d036:	f1bc 0f10 	cmp.w	ip, #16
 800d03a:	bfd8      	it	le
 800d03c:	fb01 f909 	mulle.w	r9, r1, r9
 800d040:	e7f5      	b.n	800d02e <_strtod_l+0x25e>
 800d042:	2d10      	cmp	r5, #16
 800d044:	bfdc      	itt	le
 800d046:	230a      	movle	r3, #10
 800d048:	fb03 2909 	mlale	r9, r3, r9, r2
 800d04c:	e7e1      	b.n	800d012 <_strtod_l+0x242>
 800d04e:	2300      	movs	r3, #0
 800d050:	9305      	str	r3, [sp, #20]
 800d052:	2301      	movs	r3, #1
 800d054:	e77c      	b.n	800cf50 <_strtod_l+0x180>
 800d056:	f04f 0c00 	mov.w	ip, #0
 800d05a:	f108 0202 	add.w	r2, r8, #2
 800d05e:	9217      	str	r2, [sp, #92]	; 0x5c
 800d060:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d064:	e785      	b.n	800cf72 <_strtod_l+0x1a2>
 800d066:	f04f 0c01 	mov.w	ip, #1
 800d06a:	e7f6      	b.n	800d05a <_strtod_l+0x28a>
 800d06c:	080103e8 	.word	0x080103e8
 800d070:	080102f4 	.word	0x080102f4
 800d074:	7ff00000 	.word	0x7ff00000
 800d078:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d07a:	1c51      	adds	r1, r2, #1
 800d07c:	9117      	str	r1, [sp, #92]	; 0x5c
 800d07e:	7852      	ldrb	r2, [r2, #1]
 800d080:	2a30      	cmp	r2, #48	; 0x30
 800d082:	d0f9      	beq.n	800d078 <_strtod_l+0x2a8>
 800d084:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d088:	2908      	cmp	r1, #8
 800d08a:	f63f af79 	bhi.w	800cf80 <_strtod_l+0x1b0>
 800d08e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d092:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d094:	9206      	str	r2, [sp, #24]
 800d096:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d098:	1c51      	adds	r1, r2, #1
 800d09a:	9117      	str	r1, [sp, #92]	; 0x5c
 800d09c:	7852      	ldrb	r2, [r2, #1]
 800d09e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d0a2:	2e09      	cmp	r6, #9
 800d0a4:	d937      	bls.n	800d116 <_strtod_l+0x346>
 800d0a6:	9e06      	ldr	r6, [sp, #24]
 800d0a8:	1b89      	subs	r1, r1, r6
 800d0aa:	2908      	cmp	r1, #8
 800d0ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d0b0:	dc02      	bgt.n	800d0b8 <_strtod_l+0x2e8>
 800d0b2:	4576      	cmp	r6, lr
 800d0b4:	bfa8      	it	ge
 800d0b6:	4676      	movge	r6, lr
 800d0b8:	f1bc 0f00 	cmp.w	ip, #0
 800d0bc:	d000      	beq.n	800d0c0 <_strtod_l+0x2f0>
 800d0be:	4276      	negs	r6, r6
 800d0c0:	2d00      	cmp	r5, #0
 800d0c2:	d14d      	bne.n	800d160 <_strtod_l+0x390>
 800d0c4:	9904      	ldr	r1, [sp, #16]
 800d0c6:	4301      	orrs	r1, r0
 800d0c8:	f47f aec6 	bne.w	800ce58 <_strtod_l+0x88>
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	f47f aee1 	bne.w	800ce94 <_strtod_l+0xc4>
 800d0d2:	2a69      	cmp	r2, #105	; 0x69
 800d0d4:	d027      	beq.n	800d126 <_strtod_l+0x356>
 800d0d6:	dc24      	bgt.n	800d122 <_strtod_l+0x352>
 800d0d8:	2a49      	cmp	r2, #73	; 0x49
 800d0da:	d024      	beq.n	800d126 <_strtod_l+0x356>
 800d0dc:	2a4e      	cmp	r2, #78	; 0x4e
 800d0de:	f47f aed9 	bne.w	800ce94 <_strtod_l+0xc4>
 800d0e2:	499f      	ldr	r1, [pc, #636]	; (800d360 <_strtod_l+0x590>)
 800d0e4:	a817      	add	r0, sp, #92	; 0x5c
 800d0e6:	f001 fc21 	bl	800e92c <__match>
 800d0ea:	2800      	cmp	r0, #0
 800d0ec:	f43f aed2 	beq.w	800ce94 <_strtod_l+0xc4>
 800d0f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	2b28      	cmp	r3, #40	; 0x28
 800d0f6:	d12d      	bne.n	800d154 <_strtod_l+0x384>
 800d0f8:	499a      	ldr	r1, [pc, #616]	; (800d364 <_strtod_l+0x594>)
 800d0fa:	aa1a      	add	r2, sp, #104	; 0x68
 800d0fc:	a817      	add	r0, sp, #92	; 0x5c
 800d0fe:	f001 fc29 	bl	800e954 <__hexnan>
 800d102:	2805      	cmp	r0, #5
 800d104:	d126      	bne.n	800d154 <_strtod_l+0x384>
 800d106:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d108:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d10c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d110:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d114:	e6a0      	b.n	800ce58 <_strtod_l+0x88>
 800d116:	210a      	movs	r1, #10
 800d118:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d11c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d120:	e7b9      	b.n	800d096 <_strtod_l+0x2c6>
 800d122:	2a6e      	cmp	r2, #110	; 0x6e
 800d124:	e7db      	b.n	800d0de <_strtod_l+0x30e>
 800d126:	4990      	ldr	r1, [pc, #576]	; (800d368 <_strtod_l+0x598>)
 800d128:	a817      	add	r0, sp, #92	; 0x5c
 800d12a:	f001 fbff 	bl	800e92c <__match>
 800d12e:	2800      	cmp	r0, #0
 800d130:	f43f aeb0 	beq.w	800ce94 <_strtod_l+0xc4>
 800d134:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d136:	498d      	ldr	r1, [pc, #564]	; (800d36c <_strtod_l+0x59c>)
 800d138:	3b01      	subs	r3, #1
 800d13a:	a817      	add	r0, sp, #92	; 0x5c
 800d13c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d13e:	f001 fbf5 	bl	800e92c <__match>
 800d142:	b910      	cbnz	r0, 800d14a <_strtod_l+0x37a>
 800d144:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d146:	3301      	adds	r3, #1
 800d148:	9317      	str	r3, [sp, #92]	; 0x5c
 800d14a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d37c <_strtod_l+0x5ac>
 800d14e:	f04f 0a00 	mov.w	sl, #0
 800d152:	e681      	b.n	800ce58 <_strtod_l+0x88>
 800d154:	4886      	ldr	r0, [pc, #536]	; (800d370 <_strtod_l+0x5a0>)
 800d156:	f001 fcb3 	bl	800eac0 <nan>
 800d15a:	ec5b ab10 	vmov	sl, fp, d0
 800d15e:	e67b      	b.n	800ce58 <_strtod_l+0x88>
 800d160:	9b05      	ldr	r3, [sp, #20]
 800d162:	9807      	ldr	r0, [sp, #28]
 800d164:	1af3      	subs	r3, r6, r3
 800d166:	2f00      	cmp	r7, #0
 800d168:	bf08      	it	eq
 800d16a:	462f      	moveq	r7, r5
 800d16c:	2d10      	cmp	r5, #16
 800d16e:	9306      	str	r3, [sp, #24]
 800d170:	46a8      	mov	r8, r5
 800d172:	bfa8      	it	ge
 800d174:	f04f 0810 	movge.w	r8, #16
 800d178:	f7f3 f9cc 	bl	8000514 <__aeabi_ui2d>
 800d17c:	2d09      	cmp	r5, #9
 800d17e:	4682      	mov	sl, r0
 800d180:	468b      	mov	fp, r1
 800d182:	dd13      	ble.n	800d1ac <_strtod_l+0x3dc>
 800d184:	4b7b      	ldr	r3, [pc, #492]	; (800d374 <_strtod_l+0x5a4>)
 800d186:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d18a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d18e:	f7f3 fa3b 	bl	8000608 <__aeabi_dmul>
 800d192:	4682      	mov	sl, r0
 800d194:	4648      	mov	r0, r9
 800d196:	468b      	mov	fp, r1
 800d198:	f7f3 f9bc 	bl	8000514 <__aeabi_ui2d>
 800d19c:	4602      	mov	r2, r0
 800d19e:	460b      	mov	r3, r1
 800d1a0:	4650      	mov	r0, sl
 800d1a2:	4659      	mov	r1, fp
 800d1a4:	f7f3 f87a 	bl	800029c <__adddf3>
 800d1a8:	4682      	mov	sl, r0
 800d1aa:	468b      	mov	fp, r1
 800d1ac:	2d0f      	cmp	r5, #15
 800d1ae:	dc38      	bgt.n	800d222 <_strtod_l+0x452>
 800d1b0:	9b06      	ldr	r3, [sp, #24]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	f43f ae50 	beq.w	800ce58 <_strtod_l+0x88>
 800d1b8:	dd24      	ble.n	800d204 <_strtod_l+0x434>
 800d1ba:	2b16      	cmp	r3, #22
 800d1bc:	dc0b      	bgt.n	800d1d6 <_strtod_l+0x406>
 800d1be:	496d      	ldr	r1, [pc, #436]	; (800d374 <_strtod_l+0x5a4>)
 800d1c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d1c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1c8:	4652      	mov	r2, sl
 800d1ca:	465b      	mov	r3, fp
 800d1cc:	f7f3 fa1c 	bl	8000608 <__aeabi_dmul>
 800d1d0:	4682      	mov	sl, r0
 800d1d2:	468b      	mov	fp, r1
 800d1d4:	e640      	b.n	800ce58 <_strtod_l+0x88>
 800d1d6:	9a06      	ldr	r2, [sp, #24]
 800d1d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	db20      	blt.n	800d222 <_strtod_l+0x452>
 800d1e0:	4c64      	ldr	r4, [pc, #400]	; (800d374 <_strtod_l+0x5a4>)
 800d1e2:	f1c5 050f 	rsb	r5, r5, #15
 800d1e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d1ea:	4652      	mov	r2, sl
 800d1ec:	465b      	mov	r3, fp
 800d1ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1f2:	f7f3 fa09 	bl	8000608 <__aeabi_dmul>
 800d1f6:	9b06      	ldr	r3, [sp, #24]
 800d1f8:	1b5d      	subs	r5, r3, r5
 800d1fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d1fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d202:	e7e3      	b.n	800d1cc <_strtod_l+0x3fc>
 800d204:	9b06      	ldr	r3, [sp, #24]
 800d206:	3316      	adds	r3, #22
 800d208:	db0b      	blt.n	800d222 <_strtod_l+0x452>
 800d20a:	9b05      	ldr	r3, [sp, #20]
 800d20c:	1b9e      	subs	r6, r3, r6
 800d20e:	4b59      	ldr	r3, [pc, #356]	; (800d374 <_strtod_l+0x5a4>)
 800d210:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d214:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d218:	4650      	mov	r0, sl
 800d21a:	4659      	mov	r1, fp
 800d21c:	f7f3 fb1e 	bl	800085c <__aeabi_ddiv>
 800d220:	e7d6      	b.n	800d1d0 <_strtod_l+0x400>
 800d222:	9b06      	ldr	r3, [sp, #24]
 800d224:	eba5 0808 	sub.w	r8, r5, r8
 800d228:	4498      	add	r8, r3
 800d22a:	f1b8 0f00 	cmp.w	r8, #0
 800d22e:	dd74      	ble.n	800d31a <_strtod_l+0x54a>
 800d230:	f018 030f 	ands.w	r3, r8, #15
 800d234:	d00a      	beq.n	800d24c <_strtod_l+0x47c>
 800d236:	494f      	ldr	r1, [pc, #316]	; (800d374 <_strtod_l+0x5a4>)
 800d238:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d23c:	4652      	mov	r2, sl
 800d23e:	465b      	mov	r3, fp
 800d240:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d244:	f7f3 f9e0 	bl	8000608 <__aeabi_dmul>
 800d248:	4682      	mov	sl, r0
 800d24a:	468b      	mov	fp, r1
 800d24c:	f038 080f 	bics.w	r8, r8, #15
 800d250:	d04f      	beq.n	800d2f2 <_strtod_l+0x522>
 800d252:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d256:	dd22      	ble.n	800d29e <_strtod_l+0x4ce>
 800d258:	2500      	movs	r5, #0
 800d25a:	462e      	mov	r6, r5
 800d25c:	9507      	str	r5, [sp, #28]
 800d25e:	9505      	str	r5, [sp, #20]
 800d260:	2322      	movs	r3, #34	; 0x22
 800d262:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d37c <_strtod_l+0x5ac>
 800d266:	6023      	str	r3, [r4, #0]
 800d268:	f04f 0a00 	mov.w	sl, #0
 800d26c:	9b07      	ldr	r3, [sp, #28]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	f43f adf2 	beq.w	800ce58 <_strtod_l+0x88>
 800d274:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d276:	4620      	mov	r0, r4
 800d278:	f7fe fef5 	bl	800c066 <_Bfree>
 800d27c:	9905      	ldr	r1, [sp, #20]
 800d27e:	4620      	mov	r0, r4
 800d280:	f7fe fef1 	bl	800c066 <_Bfree>
 800d284:	4631      	mov	r1, r6
 800d286:	4620      	mov	r0, r4
 800d288:	f7fe feed 	bl	800c066 <_Bfree>
 800d28c:	9907      	ldr	r1, [sp, #28]
 800d28e:	4620      	mov	r0, r4
 800d290:	f7fe fee9 	bl	800c066 <_Bfree>
 800d294:	4629      	mov	r1, r5
 800d296:	4620      	mov	r0, r4
 800d298:	f7fe fee5 	bl	800c066 <_Bfree>
 800d29c:	e5dc      	b.n	800ce58 <_strtod_l+0x88>
 800d29e:	4b36      	ldr	r3, [pc, #216]	; (800d378 <_strtod_l+0x5a8>)
 800d2a0:	9304      	str	r3, [sp, #16]
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d2a8:	4650      	mov	r0, sl
 800d2aa:	4659      	mov	r1, fp
 800d2ac:	4699      	mov	r9, r3
 800d2ae:	f1b8 0f01 	cmp.w	r8, #1
 800d2b2:	dc21      	bgt.n	800d2f8 <_strtod_l+0x528>
 800d2b4:	b10b      	cbz	r3, 800d2ba <_strtod_l+0x4ea>
 800d2b6:	4682      	mov	sl, r0
 800d2b8:	468b      	mov	fp, r1
 800d2ba:	4b2f      	ldr	r3, [pc, #188]	; (800d378 <_strtod_l+0x5a8>)
 800d2bc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d2c0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d2c4:	4652      	mov	r2, sl
 800d2c6:	465b      	mov	r3, fp
 800d2c8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d2cc:	f7f3 f99c 	bl	8000608 <__aeabi_dmul>
 800d2d0:	4b2a      	ldr	r3, [pc, #168]	; (800d37c <_strtod_l+0x5ac>)
 800d2d2:	460a      	mov	r2, r1
 800d2d4:	400b      	ands	r3, r1
 800d2d6:	492a      	ldr	r1, [pc, #168]	; (800d380 <_strtod_l+0x5b0>)
 800d2d8:	428b      	cmp	r3, r1
 800d2da:	4682      	mov	sl, r0
 800d2dc:	d8bc      	bhi.n	800d258 <_strtod_l+0x488>
 800d2de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d2e2:	428b      	cmp	r3, r1
 800d2e4:	bf86      	itte	hi
 800d2e6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d384 <_strtod_l+0x5b4>
 800d2ea:	f04f 3aff 	movhi.w	sl, #4294967295
 800d2ee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	9304      	str	r3, [sp, #16]
 800d2f6:	e084      	b.n	800d402 <_strtod_l+0x632>
 800d2f8:	f018 0f01 	tst.w	r8, #1
 800d2fc:	d005      	beq.n	800d30a <_strtod_l+0x53a>
 800d2fe:	9b04      	ldr	r3, [sp, #16]
 800d300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d304:	f7f3 f980 	bl	8000608 <__aeabi_dmul>
 800d308:	2301      	movs	r3, #1
 800d30a:	9a04      	ldr	r2, [sp, #16]
 800d30c:	3208      	adds	r2, #8
 800d30e:	f109 0901 	add.w	r9, r9, #1
 800d312:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d316:	9204      	str	r2, [sp, #16]
 800d318:	e7c9      	b.n	800d2ae <_strtod_l+0x4de>
 800d31a:	d0ea      	beq.n	800d2f2 <_strtod_l+0x522>
 800d31c:	f1c8 0800 	rsb	r8, r8, #0
 800d320:	f018 020f 	ands.w	r2, r8, #15
 800d324:	d00a      	beq.n	800d33c <_strtod_l+0x56c>
 800d326:	4b13      	ldr	r3, [pc, #76]	; (800d374 <_strtod_l+0x5a4>)
 800d328:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d32c:	4650      	mov	r0, sl
 800d32e:	4659      	mov	r1, fp
 800d330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d334:	f7f3 fa92 	bl	800085c <__aeabi_ddiv>
 800d338:	4682      	mov	sl, r0
 800d33a:	468b      	mov	fp, r1
 800d33c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d340:	d0d7      	beq.n	800d2f2 <_strtod_l+0x522>
 800d342:	f1b8 0f1f 	cmp.w	r8, #31
 800d346:	dd1f      	ble.n	800d388 <_strtod_l+0x5b8>
 800d348:	2500      	movs	r5, #0
 800d34a:	462e      	mov	r6, r5
 800d34c:	9507      	str	r5, [sp, #28]
 800d34e:	9505      	str	r5, [sp, #20]
 800d350:	2322      	movs	r3, #34	; 0x22
 800d352:	f04f 0a00 	mov.w	sl, #0
 800d356:	f04f 0b00 	mov.w	fp, #0
 800d35a:	6023      	str	r3, [r4, #0]
 800d35c:	e786      	b.n	800d26c <_strtod_l+0x49c>
 800d35e:	bf00      	nop
 800d360:	0800ffa5 	.word	0x0800ffa5
 800d364:	08010308 	.word	0x08010308
 800d368:	0800ff9d 	.word	0x0800ff9d
 800d36c:	0801011c 	.word	0x0801011c
 800d370:	08010383 	.word	0x08010383
 800d374:	08010220 	.word	0x08010220
 800d378:	080101f8 	.word	0x080101f8
 800d37c:	7ff00000 	.word	0x7ff00000
 800d380:	7ca00000 	.word	0x7ca00000
 800d384:	7fefffff 	.word	0x7fefffff
 800d388:	f018 0310 	ands.w	r3, r8, #16
 800d38c:	bf18      	it	ne
 800d38e:	236a      	movne	r3, #106	; 0x6a
 800d390:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d740 <_strtod_l+0x970>
 800d394:	9304      	str	r3, [sp, #16]
 800d396:	4650      	mov	r0, sl
 800d398:	4659      	mov	r1, fp
 800d39a:	2300      	movs	r3, #0
 800d39c:	f018 0f01 	tst.w	r8, #1
 800d3a0:	d004      	beq.n	800d3ac <_strtod_l+0x5dc>
 800d3a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d3a6:	f7f3 f92f 	bl	8000608 <__aeabi_dmul>
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d3b0:	f109 0908 	add.w	r9, r9, #8
 800d3b4:	d1f2      	bne.n	800d39c <_strtod_l+0x5cc>
 800d3b6:	b10b      	cbz	r3, 800d3bc <_strtod_l+0x5ec>
 800d3b8:	4682      	mov	sl, r0
 800d3ba:	468b      	mov	fp, r1
 800d3bc:	9b04      	ldr	r3, [sp, #16]
 800d3be:	b1c3      	cbz	r3, 800d3f2 <_strtod_l+0x622>
 800d3c0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d3c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	4659      	mov	r1, fp
 800d3cc:	dd11      	ble.n	800d3f2 <_strtod_l+0x622>
 800d3ce:	2b1f      	cmp	r3, #31
 800d3d0:	f340 8124 	ble.w	800d61c <_strtod_l+0x84c>
 800d3d4:	2b34      	cmp	r3, #52	; 0x34
 800d3d6:	bfde      	ittt	le
 800d3d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d3dc:	f04f 33ff 	movle.w	r3, #4294967295
 800d3e0:	fa03 f202 	lslle.w	r2, r3, r2
 800d3e4:	f04f 0a00 	mov.w	sl, #0
 800d3e8:	bfcc      	ite	gt
 800d3ea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d3ee:	ea02 0b01 	andle.w	fp, r2, r1
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	4650      	mov	r0, sl
 800d3f8:	4659      	mov	r1, fp
 800d3fa:	f7f3 fb6d 	bl	8000ad8 <__aeabi_dcmpeq>
 800d3fe:	2800      	cmp	r0, #0
 800d400:	d1a2      	bne.n	800d348 <_strtod_l+0x578>
 800d402:	9b07      	ldr	r3, [sp, #28]
 800d404:	9300      	str	r3, [sp, #0]
 800d406:	9908      	ldr	r1, [sp, #32]
 800d408:	462b      	mov	r3, r5
 800d40a:	463a      	mov	r2, r7
 800d40c:	4620      	mov	r0, r4
 800d40e:	f7fe fe79 	bl	800c104 <__s2b>
 800d412:	9007      	str	r0, [sp, #28]
 800d414:	2800      	cmp	r0, #0
 800d416:	f43f af1f 	beq.w	800d258 <_strtod_l+0x488>
 800d41a:	9b05      	ldr	r3, [sp, #20]
 800d41c:	1b9e      	subs	r6, r3, r6
 800d41e:	9b06      	ldr	r3, [sp, #24]
 800d420:	2b00      	cmp	r3, #0
 800d422:	bfb4      	ite	lt
 800d424:	4633      	movlt	r3, r6
 800d426:	2300      	movge	r3, #0
 800d428:	930c      	str	r3, [sp, #48]	; 0x30
 800d42a:	9b06      	ldr	r3, [sp, #24]
 800d42c:	2500      	movs	r5, #0
 800d42e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d432:	9312      	str	r3, [sp, #72]	; 0x48
 800d434:	462e      	mov	r6, r5
 800d436:	9b07      	ldr	r3, [sp, #28]
 800d438:	4620      	mov	r0, r4
 800d43a:	6859      	ldr	r1, [r3, #4]
 800d43c:	f7fe fdee 	bl	800c01c <_Balloc>
 800d440:	9005      	str	r0, [sp, #20]
 800d442:	2800      	cmp	r0, #0
 800d444:	f43f af0c 	beq.w	800d260 <_strtod_l+0x490>
 800d448:	9b07      	ldr	r3, [sp, #28]
 800d44a:	691a      	ldr	r2, [r3, #16]
 800d44c:	3202      	adds	r2, #2
 800d44e:	f103 010c 	add.w	r1, r3, #12
 800d452:	0092      	lsls	r2, r2, #2
 800d454:	300c      	adds	r0, #12
 800d456:	f7fe fdd3 	bl	800c000 <memcpy>
 800d45a:	ec4b ab10 	vmov	d0, sl, fp
 800d45e:	aa1a      	add	r2, sp, #104	; 0x68
 800d460:	a919      	add	r1, sp, #100	; 0x64
 800d462:	4620      	mov	r0, r4
 800d464:	f7ff f97a 	bl	800c75c <__d2b>
 800d468:	ec4b ab18 	vmov	d8, sl, fp
 800d46c:	9018      	str	r0, [sp, #96]	; 0x60
 800d46e:	2800      	cmp	r0, #0
 800d470:	f43f aef6 	beq.w	800d260 <_strtod_l+0x490>
 800d474:	2101      	movs	r1, #1
 800d476:	4620      	mov	r0, r4
 800d478:	f7fe fede 	bl	800c238 <__i2b>
 800d47c:	4606      	mov	r6, r0
 800d47e:	2800      	cmp	r0, #0
 800d480:	f43f aeee 	beq.w	800d260 <_strtod_l+0x490>
 800d484:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d486:	9904      	ldr	r1, [sp, #16]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	bfab      	itete	ge
 800d48c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d48e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d490:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d492:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d496:	bfac      	ite	ge
 800d498:	eb03 0902 	addge.w	r9, r3, r2
 800d49c:	1ad7      	sublt	r7, r2, r3
 800d49e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d4a0:	eba3 0801 	sub.w	r8, r3, r1
 800d4a4:	4490      	add	r8, r2
 800d4a6:	4ba1      	ldr	r3, [pc, #644]	; (800d72c <_strtod_l+0x95c>)
 800d4a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800d4ac:	4598      	cmp	r8, r3
 800d4ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d4b2:	f280 80c7 	bge.w	800d644 <_strtod_l+0x874>
 800d4b6:	eba3 0308 	sub.w	r3, r3, r8
 800d4ba:	2b1f      	cmp	r3, #31
 800d4bc:	eba2 0203 	sub.w	r2, r2, r3
 800d4c0:	f04f 0101 	mov.w	r1, #1
 800d4c4:	f300 80b1 	bgt.w	800d62a <_strtod_l+0x85a>
 800d4c8:	fa01 f303 	lsl.w	r3, r1, r3
 800d4cc:	930d      	str	r3, [sp, #52]	; 0x34
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	9308      	str	r3, [sp, #32]
 800d4d2:	eb09 0802 	add.w	r8, r9, r2
 800d4d6:	9b04      	ldr	r3, [sp, #16]
 800d4d8:	45c1      	cmp	r9, r8
 800d4da:	4417      	add	r7, r2
 800d4dc:	441f      	add	r7, r3
 800d4de:	464b      	mov	r3, r9
 800d4e0:	bfa8      	it	ge
 800d4e2:	4643      	movge	r3, r8
 800d4e4:	42bb      	cmp	r3, r7
 800d4e6:	bfa8      	it	ge
 800d4e8:	463b      	movge	r3, r7
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	bfc2      	ittt	gt
 800d4ee:	eba8 0803 	subgt.w	r8, r8, r3
 800d4f2:	1aff      	subgt	r7, r7, r3
 800d4f4:	eba9 0903 	subgt.w	r9, r9, r3
 800d4f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	dd17      	ble.n	800d52e <_strtod_l+0x75e>
 800d4fe:	4631      	mov	r1, r6
 800d500:	461a      	mov	r2, r3
 800d502:	4620      	mov	r0, r4
 800d504:	f7fe ff58 	bl	800c3b8 <__pow5mult>
 800d508:	4606      	mov	r6, r0
 800d50a:	2800      	cmp	r0, #0
 800d50c:	f43f aea8 	beq.w	800d260 <_strtod_l+0x490>
 800d510:	4601      	mov	r1, r0
 800d512:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d514:	4620      	mov	r0, r4
 800d516:	f7fe fea5 	bl	800c264 <__multiply>
 800d51a:	900b      	str	r0, [sp, #44]	; 0x2c
 800d51c:	2800      	cmp	r0, #0
 800d51e:	f43f ae9f 	beq.w	800d260 <_strtod_l+0x490>
 800d522:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d524:	4620      	mov	r0, r4
 800d526:	f7fe fd9e 	bl	800c066 <_Bfree>
 800d52a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d52c:	9318      	str	r3, [sp, #96]	; 0x60
 800d52e:	f1b8 0f00 	cmp.w	r8, #0
 800d532:	f300 808c 	bgt.w	800d64e <_strtod_l+0x87e>
 800d536:	9b06      	ldr	r3, [sp, #24]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	dd08      	ble.n	800d54e <_strtod_l+0x77e>
 800d53c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d53e:	9905      	ldr	r1, [sp, #20]
 800d540:	4620      	mov	r0, r4
 800d542:	f7fe ff39 	bl	800c3b8 <__pow5mult>
 800d546:	9005      	str	r0, [sp, #20]
 800d548:	2800      	cmp	r0, #0
 800d54a:	f43f ae89 	beq.w	800d260 <_strtod_l+0x490>
 800d54e:	2f00      	cmp	r7, #0
 800d550:	dd08      	ble.n	800d564 <_strtod_l+0x794>
 800d552:	9905      	ldr	r1, [sp, #20]
 800d554:	463a      	mov	r2, r7
 800d556:	4620      	mov	r0, r4
 800d558:	f7fe ff6e 	bl	800c438 <__lshift>
 800d55c:	9005      	str	r0, [sp, #20]
 800d55e:	2800      	cmp	r0, #0
 800d560:	f43f ae7e 	beq.w	800d260 <_strtod_l+0x490>
 800d564:	f1b9 0f00 	cmp.w	r9, #0
 800d568:	dd08      	ble.n	800d57c <_strtod_l+0x7ac>
 800d56a:	4631      	mov	r1, r6
 800d56c:	464a      	mov	r2, r9
 800d56e:	4620      	mov	r0, r4
 800d570:	f7fe ff62 	bl	800c438 <__lshift>
 800d574:	4606      	mov	r6, r0
 800d576:	2800      	cmp	r0, #0
 800d578:	f43f ae72 	beq.w	800d260 <_strtod_l+0x490>
 800d57c:	9a05      	ldr	r2, [sp, #20]
 800d57e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d580:	4620      	mov	r0, r4
 800d582:	f7fe ffe5 	bl	800c550 <__mdiff>
 800d586:	4605      	mov	r5, r0
 800d588:	2800      	cmp	r0, #0
 800d58a:	f43f ae69 	beq.w	800d260 <_strtod_l+0x490>
 800d58e:	68c3      	ldr	r3, [r0, #12]
 800d590:	930b      	str	r3, [sp, #44]	; 0x2c
 800d592:	2300      	movs	r3, #0
 800d594:	60c3      	str	r3, [r0, #12]
 800d596:	4631      	mov	r1, r6
 800d598:	f7fe ffbe 	bl	800c518 <__mcmp>
 800d59c:	2800      	cmp	r0, #0
 800d59e:	da60      	bge.n	800d662 <_strtod_l+0x892>
 800d5a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5a2:	ea53 030a 	orrs.w	r3, r3, sl
 800d5a6:	f040 8082 	bne.w	800d6ae <_strtod_l+0x8de>
 800d5aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d17d      	bne.n	800d6ae <_strtod_l+0x8de>
 800d5b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d5b6:	0d1b      	lsrs	r3, r3, #20
 800d5b8:	051b      	lsls	r3, r3, #20
 800d5ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d5be:	d976      	bls.n	800d6ae <_strtod_l+0x8de>
 800d5c0:	696b      	ldr	r3, [r5, #20]
 800d5c2:	b913      	cbnz	r3, 800d5ca <_strtod_l+0x7fa>
 800d5c4:	692b      	ldr	r3, [r5, #16]
 800d5c6:	2b01      	cmp	r3, #1
 800d5c8:	dd71      	ble.n	800d6ae <_strtod_l+0x8de>
 800d5ca:	4629      	mov	r1, r5
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	f7fe ff32 	bl	800c438 <__lshift>
 800d5d4:	4631      	mov	r1, r6
 800d5d6:	4605      	mov	r5, r0
 800d5d8:	f7fe ff9e 	bl	800c518 <__mcmp>
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	dd66      	ble.n	800d6ae <_strtod_l+0x8de>
 800d5e0:	9904      	ldr	r1, [sp, #16]
 800d5e2:	4a53      	ldr	r2, [pc, #332]	; (800d730 <_strtod_l+0x960>)
 800d5e4:	465b      	mov	r3, fp
 800d5e6:	2900      	cmp	r1, #0
 800d5e8:	f000 8081 	beq.w	800d6ee <_strtod_l+0x91e>
 800d5ec:	ea02 010b 	and.w	r1, r2, fp
 800d5f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d5f4:	dc7b      	bgt.n	800d6ee <_strtod_l+0x91e>
 800d5f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d5fa:	f77f aea9 	ble.w	800d350 <_strtod_l+0x580>
 800d5fe:	4b4d      	ldr	r3, [pc, #308]	; (800d734 <_strtod_l+0x964>)
 800d600:	4650      	mov	r0, sl
 800d602:	4659      	mov	r1, fp
 800d604:	2200      	movs	r2, #0
 800d606:	f7f2 ffff 	bl	8000608 <__aeabi_dmul>
 800d60a:	460b      	mov	r3, r1
 800d60c:	4303      	orrs	r3, r0
 800d60e:	bf08      	it	eq
 800d610:	2322      	moveq	r3, #34	; 0x22
 800d612:	4682      	mov	sl, r0
 800d614:	468b      	mov	fp, r1
 800d616:	bf08      	it	eq
 800d618:	6023      	streq	r3, [r4, #0]
 800d61a:	e62b      	b.n	800d274 <_strtod_l+0x4a4>
 800d61c:	f04f 32ff 	mov.w	r2, #4294967295
 800d620:	fa02 f303 	lsl.w	r3, r2, r3
 800d624:	ea03 0a0a 	and.w	sl, r3, sl
 800d628:	e6e3      	b.n	800d3f2 <_strtod_l+0x622>
 800d62a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d62e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d632:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d636:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d63a:	fa01 f308 	lsl.w	r3, r1, r8
 800d63e:	9308      	str	r3, [sp, #32]
 800d640:	910d      	str	r1, [sp, #52]	; 0x34
 800d642:	e746      	b.n	800d4d2 <_strtod_l+0x702>
 800d644:	2300      	movs	r3, #0
 800d646:	9308      	str	r3, [sp, #32]
 800d648:	2301      	movs	r3, #1
 800d64a:	930d      	str	r3, [sp, #52]	; 0x34
 800d64c:	e741      	b.n	800d4d2 <_strtod_l+0x702>
 800d64e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d650:	4642      	mov	r2, r8
 800d652:	4620      	mov	r0, r4
 800d654:	f7fe fef0 	bl	800c438 <__lshift>
 800d658:	9018      	str	r0, [sp, #96]	; 0x60
 800d65a:	2800      	cmp	r0, #0
 800d65c:	f47f af6b 	bne.w	800d536 <_strtod_l+0x766>
 800d660:	e5fe      	b.n	800d260 <_strtod_l+0x490>
 800d662:	465f      	mov	r7, fp
 800d664:	d16e      	bne.n	800d744 <_strtod_l+0x974>
 800d666:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d668:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d66c:	b342      	cbz	r2, 800d6c0 <_strtod_l+0x8f0>
 800d66e:	4a32      	ldr	r2, [pc, #200]	; (800d738 <_strtod_l+0x968>)
 800d670:	4293      	cmp	r3, r2
 800d672:	d128      	bne.n	800d6c6 <_strtod_l+0x8f6>
 800d674:	9b04      	ldr	r3, [sp, #16]
 800d676:	4651      	mov	r1, sl
 800d678:	b1eb      	cbz	r3, 800d6b6 <_strtod_l+0x8e6>
 800d67a:	4b2d      	ldr	r3, [pc, #180]	; (800d730 <_strtod_l+0x960>)
 800d67c:	403b      	ands	r3, r7
 800d67e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d682:	f04f 32ff 	mov.w	r2, #4294967295
 800d686:	d819      	bhi.n	800d6bc <_strtod_l+0x8ec>
 800d688:	0d1b      	lsrs	r3, r3, #20
 800d68a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d68e:	fa02 f303 	lsl.w	r3, r2, r3
 800d692:	4299      	cmp	r1, r3
 800d694:	d117      	bne.n	800d6c6 <_strtod_l+0x8f6>
 800d696:	4b29      	ldr	r3, [pc, #164]	; (800d73c <_strtod_l+0x96c>)
 800d698:	429f      	cmp	r7, r3
 800d69a:	d102      	bne.n	800d6a2 <_strtod_l+0x8d2>
 800d69c:	3101      	adds	r1, #1
 800d69e:	f43f addf 	beq.w	800d260 <_strtod_l+0x490>
 800d6a2:	4b23      	ldr	r3, [pc, #140]	; (800d730 <_strtod_l+0x960>)
 800d6a4:	403b      	ands	r3, r7
 800d6a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d6aa:	f04f 0a00 	mov.w	sl, #0
 800d6ae:	9b04      	ldr	r3, [sp, #16]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d1a4      	bne.n	800d5fe <_strtod_l+0x82e>
 800d6b4:	e5de      	b.n	800d274 <_strtod_l+0x4a4>
 800d6b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d6ba:	e7ea      	b.n	800d692 <_strtod_l+0x8c2>
 800d6bc:	4613      	mov	r3, r2
 800d6be:	e7e8      	b.n	800d692 <_strtod_l+0x8c2>
 800d6c0:	ea53 030a 	orrs.w	r3, r3, sl
 800d6c4:	d08c      	beq.n	800d5e0 <_strtod_l+0x810>
 800d6c6:	9b08      	ldr	r3, [sp, #32]
 800d6c8:	b1db      	cbz	r3, 800d702 <_strtod_l+0x932>
 800d6ca:	423b      	tst	r3, r7
 800d6cc:	d0ef      	beq.n	800d6ae <_strtod_l+0x8de>
 800d6ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6d0:	9a04      	ldr	r2, [sp, #16]
 800d6d2:	4650      	mov	r0, sl
 800d6d4:	4659      	mov	r1, fp
 800d6d6:	b1c3      	cbz	r3, 800d70a <_strtod_l+0x93a>
 800d6d8:	f7ff fb5b 	bl	800cd92 <sulp>
 800d6dc:	4602      	mov	r2, r0
 800d6de:	460b      	mov	r3, r1
 800d6e0:	ec51 0b18 	vmov	r0, r1, d8
 800d6e4:	f7f2 fdda 	bl	800029c <__adddf3>
 800d6e8:	4682      	mov	sl, r0
 800d6ea:	468b      	mov	fp, r1
 800d6ec:	e7df      	b.n	800d6ae <_strtod_l+0x8de>
 800d6ee:	4013      	ands	r3, r2
 800d6f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d6f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d6f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d6fc:	f04f 3aff 	mov.w	sl, #4294967295
 800d700:	e7d5      	b.n	800d6ae <_strtod_l+0x8de>
 800d702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d704:	ea13 0f0a 	tst.w	r3, sl
 800d708:	e7e0      	b.n	800d6cc <_strtod_l+0x8fc>
 800d70a:	f7ff fb42 	bl	800cd92 <sulp>
 800d70e:	4602      	mov	r2, r0
 800d710:	460b      	mov	r3, r1
 800d712:	ec51 0b18 	vmov	r0, r1, d8
 800d716:	f7f2 fdbf 	bl	8000298 <__aeabi_dsub>
 800d71a:	2200      	movs	r2, #0
 800d71c:	2300      	movs	r3, #0
 800d71e:	4682      	mov	sl, r0
 800d720:	468b      	mov	fp, r1
 800d722:	f7f3 f9d9 	bl	8000ad8 <__aeabi_dcmpeq>
 800d726:	2800      	cmp	r0, #0
 800d728:	d0c1      	beq.n	800d6ae <_strtod_l+0x8de>
 800d72a:	e611      	b.n	800d350 <_strtod_l+0x580>
 800d72c:	fffffc02 	.word	0xfffffc02
 800d730:	7ff00000 	.word	0x7ff00000
 800d734:	39500000 	.word	0x39500000
 800d738:	000fffff 	.word	0x000fffff
 800d73c:	7fefffff 	.word	0x7fefffff
 800d740:	08010320 	.word	0x08010320
 800d744:	4631      	mov	r1, r6
 800d746:	4628      	mov	r0, r5
 800d748:	f7ff f864 	bl	800c814 <__ratio>
 800d74c:	ec59 8b10 	vmov	r8, r9, d0
 800d750:	ee10 0a10 	vmov	r0, s0
 800d754:	2200      	movs	r2, #0
 800d756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d75a:	4649      	mov	r1, r9
 800d75c:	f7f3 f9d0 	bl	8000b00 <__aeabi_dcmple>
 800d760:	2800      	cmp	r0, #0
 800d762:	d07a      	beq.n	800d85a <_strtod_l+0xa8a>
 800d764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d766:	2b00      	cmp	r3, #0
 800d768:	d04a      	beq.n	800d800 <_strtod_l+0xa30>
 800d76a:	4b95      	ldr	r3, [pc, #596]	; (800d9c0 <_strtod_l+0xbf0>)
 800d76c:	2200      	movs	r2, #0
 800d76e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d772:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d9c0 <_strtod_l+0xbf0>
 800d776:	f04f 0800 	mov.w	r8, #0
 800d77a:	4b92      	ldr	r3, [pc, #584]	; (800d9c4 <_strtod_l+0xbf4>)
 800d77c:	403b      	ands	r3, r7
 800d77e:	930d      	str	r3, [sp, #52]	; 0x34
 800d780:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d782:	4b91      	ldr	r3, [pc, #580]	; (800d9c8 <_strtod_l+0xbf8>)
 800d784:	429a      	cmp	r2, r3
 800d786:	f040 80b0 	bne.w	800d8ea <_strtod_l+0xb1a>
 800d78a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d78e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d792:	ec4b ab10 	vmov	d0, sl, fp
 800d796:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d79a:	f7fe ff63 	bl	800c664 <__ulp>
 800d79e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d7a2:	ec53 2b10 	vmov	r2, r3, d0
 800d7a6:	f7f2 ff2f 	bl	8000608 <__aeabi_dmul>
 800d7aa:	4652      	mov	r2, sl
 800d7ac:	465b      	mov	r3, fp
 800d7ae:	f7f2 fd75 	bl	800029c <__adddf3>
 800d7b2:	460b      	mov	r3, r1
 800d7b4:	4983      	ldr	r1, [pc, #524]	; (800d9c4 <_strtod_l+0xbf4>)
 800d7b6:	4a85      	ldr	r2, [pc, #532]	; (800d9cc <_strtod_l+0xbfc>)
 800d7b8:	4019      	ands	r1, r3
 800d7ba:	4291      	cmp	r1, r2
 800d7bc:	4682      	mov	sl, r0
 800d7be:	d960      	bls.n	800d882 <_strtod_l+0xab2>
 800d7c0:	ee18 3a90 	vmov	r3, s17
 800d7c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d104      	bne.n	800d7d6 <_strtod_l+0xa06>
 800d7cc:	ee18 3a10 	vmov	r3, s16
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	f43f ad45 	beq.w	800d260 <_strtod_l+0x490>
 800d7d6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d9d8 <_strtod_l+0xc08>
 800d7da:	f04f 3aff 	mov.w	sl, #4294967295
 800d7de:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f7fe fc40 	bl	800c066 <_Bfree>
 800d7e6:	9905      	ldr	r1, [sp, #20]
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	f7fe fc3c 	bl	800c066 <_Bfree>
 800d7ee:	4631      	mov	r1, r6
 800d7f0:	4620      	mov	r0, r4
 800d7f2:	f7fe fc38 	bl	800c066 <_Bfree>
 800d7f6:	4629      	mov	r1, r5
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f7fe fc34 	bl	800c066 <_Bfree>
 800d7fe:	e61a      	b.n	800d436 <_strtod_l+0x666>
 800d800:	f1ba 0f00 	cmp.w	sl, #0
 800d804:	d11b      	bne.n	800d83e <_strtod_l+0xa6e>
 800d806:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d80a:	b9f3      	cbnz	r3, 800d84a <_strtod_l+0xa7a>
 800d80c:	4b6c      	ldr	r3, [pc, #432]	; (800d9c0 <_strtod_l+0xbf0>)
 800d80e:	2200      	movs	r2, #0
 800d810:	4640      	mov	r0, r8
 800d812:	4649      	mov	r1, r9
 800d814:	f7f3 f96a 	bl	8000aec <__aeabi_dcmplt>
 800d818:	b9d0      	cbnz	r0, 800d850 <_strtod_l+0xa80>
 800d81a:	4640      	mov	r0, r8
 800d81c:	4649      	mov	r1, r9
 800d81e:	4b6c      	ldr	r3, [pc, #432]	; (800d9d0 <_strtod_l+0xc00>)
 800d820:	2200      	movs	r2, #0
 800d822:	f7f2 fef1 	bl	8000608 <__aeabi_dmul>
 800d826:	4680      	mov	r8, r0
 800d828:	4689      	mov	r9, r1
 800d82a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d82e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d832:	9315      	str	r3, [sp, #84]	; 0x54
 800d834:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d838:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d83c:	e79d      	b.n	800d77a <_strtod_l+0x9aa>
 800d83e:	f1ba 0f01 	cmp.w	sl, #1
 800d842:	d102      	bne.n	800d84a <_strtod_l+0xa7a>
 800d844:	2f00      	cmp	r7, #0
 800d846:	f43f ad83 	beq.w	800d350 <_strtod_l+0x580>
 800d84a:	4b62      	ldr	r3, [pc, #392]	; (800d9d4 <_strtod_l+0xc04>)
 800d84c:	2200      	movs	r2, #0
 800d84e:	e78e      	b.n	800d76e <_strtod_l+0x99e>
 800d850:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d9d0 <_strtod_l+0xc00>
 800d854:	f04f 0800 	mov.w	r8, #0
 800d858:	e7e7      	b.n	800d82a <_strtod_l+0xa5a>
 800d85a:	4b5d      	ldr	r3, [pc, #372]	; (800d9d0 <_strtod_l+0xc00>)
 800d85c:	4640      	mov	r0, r8
 800d85e:	4649      	mov	r1, r9
 800d860:	2200      	movs	r2, #0
 800d862:	f7f2 fed1 	bl	8000608 <__aeabi_dmul>
 800d866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d868:	4680      	mov	r8, r0
 800d86a:	4689      	mov	r9, r1
 800d86c:	b933      	cbnz	r3, 800d87c <_strtod_l+0xaac>
 800d86e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d872:	900e      	str	r0, [sp, #56]	; 0x38
 800d874:	930f      	str	r3, [sp, #60]	; 0x3c
 800d876:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d87a:	e7dd      	b.n	800d838 <_strtod_l+0xa68>
 800d87c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d880:	e7f9      	b.n	800d876 <_strtod_l+0xaa6>
 800d882:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d886:	9b04      	ldr	r3, [sp, #16]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d1a8      	bne.n	800d7de <_strtod_l+0xa0e>
 800d88c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d890:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d892:	0d1b      	lsrs	r3, r3, #20
 800d894:	051b      	lsls	r3, r3, #20
 800d896:	429a      	cmp	r2, r3
 800d898:	d1a1      	bne.n	800d7de <_strtod_l+0xa0e>
 800d89a:	4640      	mov	r0, r8
 800d89c:	4649      	mov	r1, r9
 800d89e:	f7f3 fa13 	bl	8000cc8 <__aeabi_d2lz>
 800d8a2:	f7f2 fe83 	bl	80005ac <__aeabi_l2d>
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	4640      	mov	r0, r8
 800d8ac:	4649      	mov	r1, r9
 800d8ae:	f7f2 fcf3 	bl	8000298 <__aeabi_dsub>
 800d8b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d8b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8b8:	ea43 030a 	orr.w	r3, r3, sl
 800d8bc:	4313      	orrs	r3, r2
 800d8be:	4680      	mov	r8, r0
 800d8c0:	4689      	mov	r9, r1
 800d8c2:	d055      	beq.n	800d970 <_strtod_l+0xba0>
 800d8c4:	a336      	add	r3, pc, #216	; (adr r3, 800d9a0 <_strtod_l+0xbd0>)
 800d8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ca:	f7f3 f90f 	bl	8000aec <__aeabi_dcmplt>
 800d8ce:	2800      	cmp	r0, #0
 800d8d0:	f47f acd0 	bne.w	800d274 <_strtod_l+0x4a4>
 800d8d4:	a334      	add	r3, pc, #208	; (adr r3, 800d9a8 <_strtod_l+0xbd8>)
 800d8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8da:	4640      	mov	r0, r8
 800d8dc:	4649      	mov	r1, r9
 800d8de:	f7f3 f923 	bl	8000b28 <__aeabi_dcmpgt>
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	f43f af7b 	beq.w	800d7de <_strtod_l+0xa0e>
 800d8e8:	e4c4      	b.n	800d274 <_strtod_l+0x4a4>
 800d8ea:	9b04      	ldr	r3, [sp, #16]
 800d8ec:	b333      	cbz	r3, 800d93c <_strtod_l+0xb6c>
 800d8ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d8f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d8f4:	d822      	bhi.n	800d93c <_strtod_l+0xb6c>
 800d8f6:	a32e      	add	r3, pc, #184	; (adr r3, 800d9b0 <_strtod_l+0xbe0>)
 800d8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fc:	4640      	mov	r0, r8
 800d8fe:	4649      	mov	r1, r9
 800d900:	f7f3 f8fe 	bl	8000b00 <__aeabi_dcmple>
 800d904:	b1a0      	cbz	r0, 800d930 <_strtod_l+0xb60>
 800d906:	4649      	mov	r1, r9
 800d908:	4640      	mov	r0, r8
 800d90a:	f7f3 f955 	bl	8000bb8 <__aeabi_d2uiz>
 800d90e:	2801      	cmp	r0, #1
 800d910:	bf38      	it	cc
 800d912:	2001      	movcc	r0, #1
 800d914:	f7f2 fdfe 	bl	8000514 <__aeabi_ui2d>
 800d918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d91a:	4680      	mov	r8, r0
 800d91c:	4689      	mov	r9, r1
 800d91e:	bb23      	cbnz	r3, 800d96a <_strtod_l+0xb9a>
 800d920:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d924:	9010      	str	r0, [sp, #64]	; 0x40
 800d926:	9311      	str	r3, [sp, #68]	; 0x44
 800d928:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d92c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d932:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d934:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d938:	1a9b      	subs	r3, r3, r2
 800d93a:	9309      	str	r3, [sp, #36]	; 0x24
 800d93c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d940:	eeb0 0a48 	vmov.f32	s0, s16
 800d944:	eef0 0a68 	vmov.f32	s1, s17
 800d948:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d94c:	f7fe fe8a 	bl	800c664 <__ulp>
 800d950:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d954:	ec53 2b10 	vmov	r2, r3, d0
 800d958:	f7f2 fe56 	bl	8000608 <__aeabi_dmul>
 800d95c:	ec53 2b18 	vmov	r2, r3, d8
 800d960:	f7f2 fc9c 	bl	800029c <__adddf3>
 800d964:	4682      	mov	sl, r0
 800d966:	468b      	mov	fp, r1
 800d968:	e78d      	b.n	800d886 <_strtod_l+0xab6>
 800d96a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d96e:	e7db      	b.n	800d928 <_strtod_l+0xb58>
 800d970:	a311      	add	r3, pc, #68	; (adr r3, 800d9b8 <_strtod_l+0xbe8>)
 800d972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d976:	f7f3 f8b9 	bl	8000aec <__aeabi_dcmplt>
 800d97a:	e7b2      	b.n	800d8e2 <_strtod_l+0xb12>
 800d97c:	2300      	movs	r3, #0
 800d97e:	930a      	str	r3, [sp, #40]	; 0x28
 800d980:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d982:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d984:	6013      	str	r3, [r2, #0]
 800d986:	f7ff ba6b 	b.w	800ce60 <_strtod_l+0x90>
 800d98a:	2a65      	cmp	r2, #101	; 0x65
 800d98c:	f43f ab5f 	beq.w	800d04e <_strtod_l+0x27e>
 800d990:	2a45      	cmp	r2, #69	; 0x45
 800d992:	f43f ab5c 	beq.w	800d04e <_strtod_l+0x27e>
 800d996:	2301      	movs	r3, #1
 800d998:	f7ff bb94 	b.w	800d0c4 <_strtod_l+0x2f4>
 800d99c:	f3af 8000 	nop.w
 800d9a0:	94a03595 	.word	0x94a03595
 800d9a4:	3fdfffff 	.word	0x3fdfffff
 800d9a8:	35afe535 	.word	0x35afe535
 800d9ac:	3fe00000 	.word	0x3fe00000
 800d9b0:	ffc00000 	.word	0xffc00000
 800d9b4:	41dfffff 	.word	0x41dfffff
 800d9b8:	94a03595 	.word	0x94a03595
 800d9bc:	3fcfffff 	.word	0x3fcfffff
 800d9c0:	3ff00000 	.word	0x3ff00000
 800d9c4:	7ff00000 	.word	0x7ff00000
 800d9c8:	7fe00000 	.word	0x7fe00000
 800d9cc:	7c9fffff 	.word	0x7c9fffff
 800d9d0:	3fe00000 	.word	0x3fe00000
 800d9d4:	bff00000 	.word	0xbff00000
 800d9d8:	7fefffff 	.word	0x7fefffff

0800d9dc <_strtod_r>:
 800d9dc:	4b01      	ldr	r3, [pc, #4]	; (800d9e4 <_strtod_r+0x8>)
 800d9de:	f7ff b9f7 	b.w	800cdd0 <_strtod_l>
 800d9e2:	bf00      	nop
 800d9e4:	20000854 	.word	0x20000854

0800d9e8 <_strtoll_l.constprop.0>:
 800d9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ec:	b085      	sub	sp, #20
 800d9ee:	4688      	mov	r8, r1
 800d9f0:	9201      	str	r2, [sp, #4]
 800d9f2:	4a47      	ldr	r2, [pc, #284]	; (800db10 <_strtoll_l.constprop.0+0x128>)
 800d9f4:	9003      	str	r0, [sp, #12]
 800d9f6:	461e      	mov	r6, r3
 800d9f8:	460d      	mov	r5, r1
 800d9fa:	462b      	mov	r3, r5
 800d9fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da00:	5ca7      	ldrb	r7, [r4, r2]
 800da02:	f017 0708 	ands.w	r7, r7, #8
 800da06:	d1f8      	bne.n	800d9fa <_strtoll_l.constprop.0+0x12>
 800da08:	2c2d      	cmp	r4, #45	; 0x2d
 800da0a:	d147      	bne.n	800da9c <_strtoll_l.constprop.0+0xb4>
 800da0c:	782c      	ldrb	r4, [r5, #0]
 800da0e:	2701      	movs	r7, #1
 800da10:	1c9d      	adds	r5, r3, #2
 800da12:	2e00      	cmp	r6, #0
 800da14:	d077      	beq.n	800db06 <_strtoll_l.constprop.0+0x11e>
 800da16:	2e10      	cmp	r6, #16
 800da18:	d109      	bne.n	800da2e <_strtoll_l.constprop.0+0x46>
 800da1a:	2c30      	cmp	r4, #48	; 0x30
 800da1c:	d107      	bne.n	800da2e <_strtoll_l.constprop.0+0x46>
 800da1e:	782b      	ldrb	r3, [r5, #0]
 800da20:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800da24:	2b58      	cmp	r3, #88	; 0x58
 800da26:	d169      	bne.n	800dafc <_strtoll_l.constprop.0+0x114>
 800da28:	786c      	ldrb	r4, [r5, #1]
 800da2a:	2610      	movs	r6, #16
 800da2c:	3502      	adds	r5, #2
 800da2e:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 800da32:	f107 3bff 	add.w	fp, r7, #4294967295
 800da36:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da3a:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800da3e:	4632      	mov	r2, r6
 800da40:	464b      	mov	r3, r9
 800da42:	4658      	mov	r0, fp
 800da44:	4651      	mov	r1, sl
 800da46:	f7f3 f927 	bl	8000c98 <__aeabi_uldivmod>
 800da4a:	2300      	movs	r3, #0
 800da4c:	9202      	str	r2, [sp, #8]
 800da4e:	468c      	mov	ip, r1
 800da50:	4602      	mov	r2, r0
 800da52:	4619      	mov	r1, r3
 800da54:	4618      	mov	r0, r3
 800da56:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800da5a:	f1be 0f09 	cmp.w	lr, #9
 800da5e:	d822      	bhi.n	800daa6 <_strtoll_l.constprop.0+0xbe>
 800da60:	4674      	mov	r4, lr
 800da62:	42a6      	cmp	r6, r4
 800da64:	dd30      	ble.n	800dac8 <_strtoll_l.constprop.0+0xe0>
 800da66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da6a:	d014      	beq.n	800da96 <_strtoll_l.constprop.0+0xae>
 800da6c:	4282      	cmp	r2, r0
 800da6e:	eb7c 0301 	sbcs.w	r3, ip, r1
 800da72:	d326      	bcc.n	800dac2 <_strtoll_l.constprop.0+0xda>
 800da74:	458c      	cmp	ip, r1
 800da76:	bf08      	it	eq
 800da78:	4282      	cmpeq	r2, r0
 800da7a:	d102      	bne.n	800da82 <_strtoll_l.constprop.0+0x9a>
 800da7c:	9b02      	ldr	r3, [sp, #8]
 800da7e:	42a3      	cmp	r3, r4
 800da80:	db1f      	blt.n	800dac2 <_strtoll_l.constprop.0+0xda>
 800da82:	4371      	muls	r1, r6
 800da84:	fb00 1109 	mla	r1, r0, r9, r1
 800da88:	fba6 0300 	umull	r0, r3, r6, r0
 800da8c:	4419      	add	r1, r3
 800da8e:	1820      	adds	r0, r4, r0
 800da90:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800da94:	2301      	movs	r3, #1
 800da96:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da9a:	e7dc      	b.n	800da56 <_strtoll_l.constprop.0+0x6e>
 800da9c:	2c2b      	cmp	r4, #43	; 0x2b
 800da9e:	bf04      	itt	eq
 800daa0:	782c      	ldrbeq	r4, [r5, #0]
 800daa2:	1c9d      	addeq	r5, r3, #2
 800daa4:	e7b5      	b.n	800da12 <_strtoll_l.constprop.0+0x2a>
 800daa6:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800daaa:	f1be 0f19 	cmp.w	lr, #25
 800daae:	d801      	bhi.n	800dab4 <_strtoll_l.constprop.0+0xcc>
 800dab0:	3c37      	subs	r4, #55	; 0x37
 800dab2:	e7d6      	b.n	800da62 <_strtoll_l.constprop.0+0x7a>
 800dab4:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800dab8:	f1be 0f19 	cmp.w	lr, #25
 800dabc:	d804      	bhi.n	800dac8 <_strtoll_l.constprop.0+0xe0>
 800dabe:	3c57      	subs	r4, #87	; 0x57
 800dac0:	e7cf      	b.n	800da62 <_strtoll_l.constprop.0+0x7a>
 800dac2:	f04f 33ff 	mov.w	r3, #4294967295
 800dac6:	e7e6      	b.n	800da96 <_strtoll_l.constprop.0+0xae>
 800dac8:	1c5a      	adds	r2, r3, #1
 800daca:	d109      	bne.n	800dae0 <_strtoll_l.constprop.0+0xf8>
 800dacc:	9a03      	ldr	r2, [sp, #12]
 800dace:	2322      	movs	r3, #34	; 0x22
 800dad0:	6013      	str	r3, [r2, #0]
 800dad2:	9b01      	ldr	r3, [sp, #4]
 800dad4:	4658      	mov	r0, fp
 800dad6:	4651      	mov	r1, sl
 800dad8:	b953      	cbnz	r3, 800daf0 <_strtoll_l.constprop.0+0x108>
 800dada:	b005      	add	sp, #20
 800dadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dae0:	b117      	cbz	r7, 800dae8 <_strtoll_l.constprop.0+0x100>
 800dae2:	4240      	negs	r0, r0
 800dae4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800dae8:	9a01      	ldr	r2, [sp, #4]
 800daea:	2a00      	cmp	r2, #0
 800daec:	d0f5      	beq.n	800dada <_strtoll_l.constprop.0+0xf2>
 800daee:	b10b      	cbz	r3, 800daf4 <_strtoll_l.constprop.0+0x10c>
 800daf0:	f105 38ff 	add.w	r8, r5, #4294967295
 800daf4:	9b01      	ldr	r3, [sp, #4]
 800daf6:	f8c3 8000 	str.w	r8, [r3]
 800dafa:	e7ee      	b.n	800dada <_strtoll_l.constprop.0+0xf2>
 800dafc:	2430      	movs	r4, #48	; 0x30
 800dafe:	2e00      	cmp	r6, #0
 800db00:	d195      	bne.n	800da2e <_strtoll_l.constprop.0+0x46>
 800db02:	2608      	movs	r6, #8
 800db04:	e793      	b.n	800da2e <_strtoll_l.constprop.0+0x46>
 800db06:	2c30      	cmp	r4, #48	; 0x30
 800db08:	d089      	beq.n	800da1e <_strtoll_l.constprop.0+0x36>
 800db0a:	260a      	movs	r6, #10
 800db0c:	e78f      	b.n	800da2e <_strtoll_l.constprop.0+0x46>
 800db0e:	bf00      	nop
 800db10:	08010015 	.word	0x08010015

0800db14 <_strtoll_r>:
 800db14:	f7ff bf68 	b.w	800d9e8 <_strtoll_l.constprop.0>

0800db18 <_strtoul_l.constprop.0>:
 800db18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db1c:	4f36      	ldr	r7, [pc, #216]	; (800dbf8 <_strtoul_l.constprop.0+0xe0>)
 800db1e:	4686      	mov	lr, r0
 800db20:	460d      	mov	r5, r1
 800db22:	4628      	mov	r0, r5
 800db24:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db28:	5de6      	ldrb	r6, [r4, r7]
 800db2a:	f016 0608 	ands.w	r6, r6, #8
 800db2e:	d1f8      	bne.n	800db22 <_strtoul_l.constprop.0+0xa>
 800db30:	2c2d      	cmp	r4, #45	; 0x2d
 800db32:	d12f      	bne.n	800db94 <_strtoul_l.constprop.0+0x7c>
 800db34:	782c      	ldrb	r4, [r5, #0]
 800db36:	2601      	movs	r6, #1
 800db38:	1c85      	adds	r5, r0, #2
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d057      	beq.n	800dbee <_strtoul_l.constprop.0+0xd6>
 800db3e:	2b10      	cmp	r3, #16
 800db40:	d109      	bne.n	800db56 <_strtoul_l.constprop.0+0x3e>
 800db42:	2c30      	cmp	r4, #48	; 0x30
 800db44:	d107      	bne.n	800db56 <_strtoul_l.constprop.0+0x3e>
 800db46:	7828      	ldrb	r0, [r5, #0]
 800db48:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800db4c:	2858      	cmp	r0, #88	; 0x58
 800db4e:	d149      	bne.n	800dbe4 <_strtoul_l.constprop.0+0xcc>
 800db50:	786c      	ldrb	r4, [r5, #1]
 800db52:	2310      	movs	r3, #16
 800db54:	3502      	adds	r5, #2
 800db56:	f04f 38ff 	mov.w	r8, #4294967295
 800db5a:	2700      	movs	r7, #0
 800db5c:	fbb8 f8f3 	udiv	r8, r8, r3
 800db60:	fb03 f908 	mul.w	r9, r3, r8
 800db64:	ea6f 0909 	mvn.w	r9, r9
 800db68:	4638      	mov	r0, r7
 800db6a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800db6e:	f1bc 0f09 	cmp.w	ip, #9
 800db72:	d814      	bhi.n	800db9e <_strtoul_l.constprop.0+0x86>
 800db74:	4664      	mov	r4, ip
 800db76:	42a3      	cmp	r3, r4
 800db78:	dd22      	ble.n	800dbc0 <_strtoul_l.constprop.0+0xa8>
 800db7a:	2f00      	cmp	r7, #0
 800db7c:	db1d      	blt.n	800dbba <_strtoul_l.constprop.0+0xa2>
 800db7e:	4580      	cmp	r8, r0
 800db80:	d31b      	bcc.n	800dbba <_strtoul_l.constprop.0+0xa2>
 800db82:	d101      	bne.n	800db88 <_strtoul_l.constprop.0+0x70>
 800db84:	45a1      	cmp	r9, r4
 800db86:	db18      	blt.n	800dbba <_strtoul_l.constprop.0+0xa2>
 800db88:	fb00 4003 	mla	r0, r0, r3, r4
 800db8c:	2701      	movs	r7, #1
 800db8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db92:	e7ea      	b.n	800db6a <_strtoul_l.constprop.0+0x52>
 800db94:	2c2b      	cmp	r4, #43	; 0x2b
 800db96:	bf04      	itt	eq
 800db98:	782c      	ldrbeq	r4, [r5, #0]
 800db9a:	1c85      	addeq	r5, r0, #2
 800db9c:	e7cd      	b.n	800db3a <_strtoul_l.constprop.0+0x22>
 800db9e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dba2:	f1bc 0f19 	cmp.w	ip, #25
 800dba6:	d801      	bhi.n	800dbac <_strtoul_l.constprop.0+0x94>
 800dba8:	3c37      	subs	r4, #55	; 0x37
 800dbaa:	e7e4      	b.n	800db76 <_strtoul_l.constprop.0+0x5e>
 800dbac:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dbb0:	f1bc 0f19 	cmp.w	ip, #25
 800dbb4:	d804      	bhi.n	800dbc0 <_strtoul_l.constprop.0+0xa8>
 800dbb6:	3c57      	subs	r4, #87	; 0x57
 800dbb8:	e7dd      	b.n	800db76 <_strtoul_l.constprop.0+0x5e>
 800dbba:	f04f 37ff 	mov.w	r7, #4294967295
 800dbbe:	e7e6      	b.n	800db8e <_strtoul_l.constprop.0+0x76>
 800dbc0:	2f00      	cmp	r7, #0
 800dbc2:	da07      	bge.n	800dbd4 <_strtoul_l.constprop.0+0xbc>
 800dbc4:	2322      	movs	r3, #34	; 0x22
 800dbc6:	f8ce 3000 	str.w	r3, [lr]
 800dbca:	f04f 30ff 	mov.w	r0, #4294967295
 800dbce:	b932      	cbnz	r2, 800dbde <_strtoul_l.constprop.0+0xc6>
 800dbd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbd4:	b106      	cbz	r6, 800dbd8 <_strtoul_l.constprop.0+0xc0>
 800dbd6:	4240      	negs	r0, r0
 800dbd8:	2a00      	cmp	r2, #0
 800dbda:	d0f9      	beq.n	800dbd0 <_strtoul_l.constprop.0+0xb8>
 800dbdc:	b107      	cbz	r7, 800dbe0 <_strtoul_l.constprop.0+0xc8>
 800dbde:	1e69      	subs	r1, r5, #1
 800dbe0:	6011      	str	r1, [r2, #0]
 800dbe2:	e7f5      	b.n	800dbd0 <_strtoul_l.constprop.0+0xb8>
 800dbe4:	2430      	movs	r4, #48	; 0x30
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d1b5      	bne.n	800db56 <_strtoul_l.constprop.0+0x3e>
 800dbea:	2308      	movs	r3, #8
 800dbec:	e7b3      	b.n	800db56 <_strtoul_l.constprop.0+0x3e>
 800dbee:	2c30      	cmp	r4, #48	; 0x30
 800dbf0:	d0a9      	beq.n	800db46 <_strtoul_l.constprop.0+0x2e>
 800dbf2:	230a      	movs	r3, #10
 800dbf4:	e7af      	b.n	800db56 <_strtoul_l.constprop.0+0x3e>
 800dbf6:	bf00      	nop
 800dbf8:	08010015 	.word	0x08010015

0800dbfc <_strtoul_r>:
 800dbfc:	f7ff bf8c 	b.w	800db18 <_strtoul_l.constprop.0>

0800dc00 <_strtoull_l.constprop.0>:
 800dc00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc04:	4692      	mov	sl, r2
 800dc06:	4a49      	ldr	r2, [pc, #292]	; (800dd2c <_strtoull_l.constprop.0+0x12c>)
 800dc08:	9001      	str	r0, [sp, #4]
 800dc0a:	4689      	mov	r9, r1
 800dc0c:	461d      	mov	r5, r3
 800dc0e:	460e      	mov	r6, r1
 800dc10:	4633      	mov	r3, r6
 800dc12:	f816 4b01 	ldrb.w	r4, [r6], #1
 800dc16:	5ca7      	ldrb	r7, [r4, r2]
 800dc18:	f017 0708 	ands.w	r7, r7, #8
 800dc1c:	d1f8      	bne.n	800dc10 <_strtoull_l.constprop.0+0x10>
 800dc1e:	2c2d      	cmp	r4, #45	; 0x2d
 800dc20:	d14a      	bne.n	800dcb8 <_strtoull_l.constprop.0+0xb8>
 800dc22:	7834      	ldrb	r4, [r6, #0]
 800dc24:	2701      	movs	r7, #1
 800dc26:	1c9e      	adds	r6, r3, #2
 800dc28:	2d00      	cmp	r5, #0
 800dc2a:	d07b      	beq.n	800dd24 <_strtoull_l.constprop.0+0x124>
 800dc2c:	2d10      	cmp	r5, #16
 800dc2e:	d109      	bne.n	800dc44 <_strtoull_l.constprop.0+0x44>
 800dc30:	2c30      	cmp	r4, #48	; 0x30
 800dc32:	d107      	bne.n	800dc44 <_strtoull_l.constprop.0+0x44>
 800dc34:	7833      	ldrb	r3, [r6, #0]
 800dc36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dc3a:	2b58      	cmp	r3, #88	; 0x58
 800dc3c:	d16d      	bne.n	800dd1a <_strtoull_l.constprop.0+0x11a>
 800dc3e:	7874      	ldrb	r4, [r6, #1]
 800dc40:	2510      	movs	r5, #16
 800dc42:	3602      	adds	r6, #2
 800dc44:	ea4f 7be5 	mov.w	fp, r5, asr #31
 800dc48:	462a      	mov	r2, r5
 800dc4a:	465b      	mov	r3, fp
 800dc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc50:	f04f 31ff 	mov.w	r1, #4294967295
 800dc54:	f7f3 f820 	bl	8000c98 <__aeabi_uldivmod>
 800dc58:	462a      	mov	r2, r5
 800dc5a:	9000      	str	r0, [sp, #0]
 800dc5c:	4688      	mov	r8, r1
 800dc5e:	465b      	mov	r3, fp
 800dc60:	f04f 30ff 	mov.w	r0, #4294967295
 800dc64:	f04f 31ff 	mov.w	r1, #4294967295
 800dc68:	f7f3 f816 	bl	8000c98 <__aeabi_uldivmod>
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	4618      	mov	r0, r3
 800dc70:	4619      	mov	r1, r3
 800dc72:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800dc76:	f1bc 0f09 	cmp.w	ip, #9
 800dc7a:	d822      	bhi.n	800dcc2 <_strtoull_l.constprop.0+0xc2>
 800dc7c:	4664      	mov	r4, ip
 800dc7e:	42a5      	cmp	r5, r4
 800dc80:	dd30      	ble.n	800dce4 <_strtoull_l.constprop.0+0xe4>
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	db2b      	blt.n	800dcde <_strtoull_l.constprop.0+0xde>
 800dc86:	9b00      	ldr	r3, [sp, #0]
 800dc88:	4283      	cmp	r3, r0
 800dc8a:	eb78 0301 	sbcs.w	r3, r8, r1
 800dc8e:	d326      	bcc.n	800dcde <_strtoull_l.constprop.0+0xde>
 800dc90:	9b00      	ldr	r3, [sp, #0]
 800dc92:	4588      	cmp	r8, r1
 800dc94:	bf08      	it	eq
 800dc96:	4283      	cmpeq	r3, r0
 800dc98:	d101      	bne.n	800dc9e <_strtoull_l.constprop.0+0x9e>
 800dc9a:	42a2      	cmp	r2, r4
 800dc9c:	db1f      	blt.n	800dcde <_strtoull_l.constprop.0+0xde>
 800dc9e:	4369      	muls	r1, r5
 800dca0:	fb00 110b 	mla	r1, r0, fp, r1
 800dca4:	fba5 0300 	umull	r0, r3, r5, r0
 800dca8:	4419      	add	r1, r3
 800dcaa:	1820      	adds	r0, r4, r0
 800dcac:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	f816 4b01 	ldrb.w	r4, [r6], #1
 800dcb6:	e7dc      	b.n	800dc72 <_strtoull_l.constprop.0+0x72>
 800dcb8:	2c2b      	cmp	r4, #43	; 0x2b
 800dcba:	bf04      	itt	eq
 800dcbc:	7834      	ldrbeq	r4, [r6, #0]
 800dcbe:	1c9e      	addeq	r6, r3, #2
 800dcc0:	e7b2      	b.n	800dc28 <_strtoull_l.constprop.0+0x28>
 800dcc2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dcc6:	f1bc 0f19 	cmp.w	ip, #25
 800dcca:	d801      	bhi.n	800dcd0 <_strtoull_l.constprop.0+0xd0>
 800dccc:	3c37      	subs	r4, #55	; 0x37
 800dcce:	e7d6      	b.n	800dc7e <_strtoull_l.constprop.0+0x7e>
 800dcd0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dcd4:	f1bc 0f19 	cmp.w	ip, #25
 800dcd8:	d804      	bhi.n	800dce4 <_strtoull_l.constprop.0+0xe4>
 800dcda:	3c57      	subs	r4, #87	; 0x57
 800dcdc:	e7cf      	b.n	800dc7e <_strtoull_l.constprop.0+0x7e>
 800dcde:	f04f 33ff 	mov.w	r3, #4294967295
 800dce2:	e7e6      	b.n	800dcb2 <_strtoull_l.constprop.0+0xb2>
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	da0b      	bge.n	800dd00 <_strtoull_l.constprop.0+0x100>
 800dce8:	9a01      	ldr	r2, [sp, #4]
 800dcea:	2322      	movs	r3, #34	; 0x22
 800dcec:	f04f 30ff 	mov.w	r0, #4294967295
 800dcf0:	6013      	str	r3, [r2, #0]
 800dcf2:	4601      	mov	r1, r0
 800dcf4:	f1ba 0f00 	cmp.w	sl, #0
 800dcf8:	d10a      	bne.n	800dd10 <_strtoull_l.constprop.0+0x110>
 800dcfa:	b003      	add	sp, #12
 800dcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd00:	b117      	cbz	r7, 800dd08 <_strtoull_l.constprop.0+0x108>
 800dd02:	4240      	negs	r0, r0
 800dd04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800dd08:	f1ba 0f00 	cmp.w	sl, #0
 800dd0c:	d0f5      	beq.n	800dcfa <_strtoull_l.constprop.0+0xfa>
 800dd0e:	b10b      	cbz	r3, 800dd14 <_strtoull_l.constprop.0+0x114>
 800dd10:	f106 39ff 	add.w	r9, r6, #4294967295
 800dd14:	f8ca 9000 	str.w	r9, [sl]
 800dd18:	e7ef      	b.n	800dcfa <_strtoull_l.constprop.0+0xfa>
 800dd1a:	2430      	movs	r4, #48	; 0x30
 800dd1c:	2d00      	cmp	r5, #0
 800dd1e:	d191      	bne.n	800dc44 <_strtoull_l.constprop.0+0x44>
 800dd20:	2508      	movs	r5, #8
 800dd22:	e78f      	b.n	800dc44 <_strtoull_l.constprop.0+0x44>
 800dd24:	2c30      	cmp	r4, #48	; 0x30
 800dd26:	d085      	beq.n	800dc34 <_strtoull_l.constprop.0+0x34>
 800dd28:	250a      	movs	r5, #10
 800dd2a:	e78b      	b.n	800dc44 <_strtoull_l.constprop.0+0x44>
 800dd2c:	08010015 	.word	0x08010015

0800dd30 <_strtoull_r>:
 800dd30:	f7ff bf66 	b.w	800dc00 <_strtoull_l.constprop.0>

0800dd34 <__ssprint_r>:
 800dd34:	6893      	ldr	r3, [r2, #8]
 800dd36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd3a:	4680      	mov	r8, r0
 800dd3c:	460c      	mov	r4, r1
 800dd3e:	4617      	mov	r7, r2
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d061      	beq.n	800de08 <__ssprint_r+0xd4>
 800dd44:	2300      	movs	r3, #0
 800dd46:	f8d2 a000 	ldr.w	sl, [r2]
 800dd4a:	9301      	str	r3, [sp, #4]
 800dd4c:	469b      	mov	fp, r3
 800dd4e:	f1bb 0f00 	cmp.w	fp, #0
 800dd52:	d02b      	beq.n	800ddac <__ssprint_r+0x78>
 800dd54:	68a6      	ldr	r6, [r4, #8]
 800dd56:	455e      	cmp	r6, fp
 800dd58:	d844      	bhi.n	800dde4 <__ssprint_r+0xb0>
 800dd5a:	89a2      	ldrh	r2, [r4, #12]
 800dd5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dd60:	d03e      	beq.n	800dde0 <__ssprint_r+0xac>
 800dd62:	6820      	ldr	r0, [r4, #0]
 800dd64:	6921      	ldr	r1, [r4, #16]
 800dd66:	6965      	ldr	r5, [r4, #20]
 800dd68:	eba0 0901 	sub.w	r9, r0, r1
 800dd6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd74:	f109 0001 	add.w	r0, r9, #1
 800dd78:	106d      	asrs	r5, r5, #1
 800dd7a:	4458      	add	r0, fp
 800dd7c:	4285      	cmp	r5, r0
 800dd7e:	bf38      	it	cc
 800dd80:	4605      	movcc	r5, r0
 800dd82:	0553      	lsls	r3, r2, #21
 800dd84:	d545      	bpl.n	800de12 <__ssprint_r+0xde>
 800dd86:	4629      	mov	r1, r5
 800dd88:	4640      	mov	r0, r8
 800dd8a:	f7fa f9f9 	bl	8008180 <_malloc_r>
 800dd8e:	4606      	mov	r6, r0
 800dd90:	b9a0      	cbnz	r0, 800ddbc <__ssprint_r+0x88>
 800dd92:	230c      	movs	r3, #12
 800dd94:	f8c8 3000 	str.w	r3, [r8]
 800dd98:	89a3      	ldrh	r3, [r4, #12]
 800dd9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd9e:	81a3      	strh	r3, [r4, #12]
 800dda0:	2300      	movs	r3, #0
 800dda2:	e9c7 3301 	strd	r3, r3, [r7, #4]
 800dda6:	f04f 30ff 	mov.w	r0, #4294967295
 800ddaa:	e02f      	b.n	800de0c <__ssprint_r+0xd8>
 800ddac:	f8da 3000 	ldr.w	r3, [sl]
 800ddb0:	f8da b004 	ldr.w	fp, [sl, #4]
 800ddb4:	9301      	str	r3, [sp, #4]
 800ddb6:	f10a 0a08 	add.w	sl, sl, #8
 800ddba:	e7c8      	b.n	800dd4e <__ssprint_r+0x1a>
 800ddbc:	464a      	mov	r2, r9
 800ddbe:	6921      	ldr	r1, [r4, #16]
 800ddc0:	f7fe f91e 	bl	800c000 <memcpy>
 800ddc4:	89a2      	ldrh	r2, [r4, #12]
 800ddc6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800ddca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ddce:	81a2      	strh	r2, [r4, #12]
 800ddd0:	6126      	str	r6, [r4, #16]
 800ddd2:	6165      	str	r5, [r4, #20]
 800ddd4:	444e      	add	r6, r9
 800ddd6:	eba5 0509 	sub.w	r5, r5, r9
 800ddda:	6026      	str	r6, [r4, #0]
 800dddc:	60a5      	str	r5, [r4, #8]
 800ddde:	465e      	mov	r6, fp
 800dde0:	455e      	cmp	r6, fp
 800dde2:	d900      	bls.n	800dde6 <__ssprint_r+0xb2>
 800dde4:	465e      	mov	r6, fp
 800dde6:	4632      	mov	r2, r6
 800dde8:	9901      	ldr	r1, [sp, #4]
 800ddea:	6820      	ldr	r0, [r4, #0]
 800ddec:	f000 fe4e 	bl	800ea8c <memmove>
 800ddf0:	68a2      	ldr	r2, [r4, #8]
 800ddf2:	1b92      	subs	r2, r2, r6
 800ddf4:	60a2      	str	r2, [r4, #8]
 800ddf6:	6822      	ldr	r2, [r4, #0]
 800ddf8:	4432      	add	r2, r6
 800ddfa:	6022      	str	r2, [r4, #0]
 800ddfc:	68ba      	ldr	r2, [r7, #8]
 800ddfe:	eba2 030b 	sub.w	r3, r2, fp
 800de02:	60bb      	str	r3, [r7, #8]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d1d1      	bne.n	800ddac <__ssprint_r+0x78>
 800de08:	2000      	movs	r0, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	b003      	add	sp, #12
 800de0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de12:	462a      	mov	r2, r5
 800de14:	4640      	mov	r0, r8
 800de16:	f7fe fd8f 	bl	800c938 <_realloc_r>
 800de1a:	4606      	mov	r6, r0
 800de1c:	2800      	cmp	r0, #0
 800de1e:	d1d7      	bne.n	800ddd0 <__ssprint_r+0x9c>
 800de20:	6921      	ldr	r1, [r4, #16]
 800de22:	4640      	mov	r0, r8
 800de24:	f7fd ffd2 	bl	800bdcc <_free_r>
 800de28:	e7b3      	b.n	800dd92 <__ssprint_r+0x5e>

0800de2a <_sungetc_r>:
 800de2a:	b538      	push	{r3, r4, r5, lr}
 800de2c:	1c4b      	adds	r3, r1, #1
 800de2e:	4614      	mov	r4, r2
 800de30:	d103      	bne.n	800de3a <_sungetc_r+0x10>
 800de32:	f04f 35ff 	mov.w	r5, #4294967295
 800de36:	4628      	mov	r0, r5
 800de38:	bd38      	pop	{r3, r4, r5, pc}
 800de3a:	8993      	ldrh	r3, [r2, #12]
 800de3c:	f023 0320 	bic.w	r3, r3, #32
 800de40:	8193      	strh	r3, [r2, #12]
 800de42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800de44:	6852      	ldr	r2, [r2, #4]
 800de46:	b2cd      	uxtb	r5, r1
 800de48:	b18b      	cbz	r3, 800de6e <_sungetc_r+0x44>
 800de4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de4c:	4293      	cmp	r3, r2
 800de4e:	dd08      	ble.n	800de62 <_sungetc_r+0x38>
 800de50:	6823      	ldr	r3, [r4, #0]
 800de52:	1e5a      	subs	r2, r3, #1
 800de54:	6022      	str	r2, [r4, #0]
 800de56:	f803 5c01 	strb.w	r5, [r3, #-1]
 800de5a:	6863      	ldr	r3, [r4, #4]
 800de5c:	3301      	adds	r3, #1
 800de5e:	6063      	str	r3, [r4, #4]
 800de60:	e7e9      	b.n	800de36 <_sungetc_r+0xc>
 800de62:	4621      	mov	r1, r4
 800de64:	f000 f873 	bl	800df4e <__submore>
 800de68:	2800      	cmp	r0, #0
 800de6a:	d0f1      	beq.n	800de50 <_sungetc_r+0x26>
 800de6c:	e7e1      	b.n	800de32 <_sungetc_r+0x8>
 800de6e:	6921      	ldr	r1, [r4, #16]
 800de70:	6823      	ldr	r3, [r4, #0]
 800de72:	b151      	cbz	r1, 800de8a <_sungetc_r+0x60>
 800de74:	4299      	cmp	r1, r3
 800de76:	d208      	bcs.n	800de8a <_sungetc_r+0x60>
 800de78:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800de7c:	42a9      	cmp	r1, r5
 800de7e:	d104      	bne.n	800de8a <_sungetc_r+0x60>
 800de80:	3b01      	subs	r3, #1
 800de82:	3201      	adds	r2, #1
 800de84:	6023      	str	r3, [r4, #0]
 800de86:	6062      	str	r2, [r4, #4]
 800de88:	e7d5      	b.n	800de36 <_sungetc_r+0xc>
 800de8a:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 800de8e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800de92:	6323      	str	r3, [r4, #48]	; 0x30
 800de94:	2303      	movs	r3, #3
 800de96:	6363      	str	r3, [r4, #52]	; 0x34
 800de98:	4623      	mov	r3, r4
 800de9a:	f803 5f42 	strb.w	r5, [r3, #66]!
 800de9e:	6023      	str	r3, [r4, #0]
 800dea0:	2301      	movs	r3, #1
 800dea2:	e7dc      	b.n	800de5e <_sungetc_r+0x34>

0800dea4 <__ssrefill_r>:
 800dea4:	b510      	push	{r4, lr}
 800dea6:	460c      	mov	r4, r1
 800dea8:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800deaa:	b169      	cbz	r1, 800dec8 <__ssrefill_r+0x24>
 800deac:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800deb0:	4299      	cmp	r1, r3
 800deb2:	d001      	beq.n	800deb8 <__ssrefill_r+0x14>
 800deb4:	f7fd ff8a 	bl	800bdcc <_free_r>
 800deb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800deba:	6063      	str	r3, [r4, #4]
 800debc:	2000      	movs	r0, #0
 800debe:	6320      	str	r0, [r4, #48]	; 0x30
 800dec0:	b113      	cbz	r3, 800dec8 <__ssrefill_r+0x24>
 800dec2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dec4:	6023      	str	r3, [r4, #0]
 800dec6:	bd10      	pop	{r4, pc}
 800dec8:	6923      	ldr	r3, [r4, #16]
 800deca:	6023      	str	r3, [r4, #0]
 800decc:	2300      	movs	r3, #0
 800dece:	6063      	str	r3, [r4, #4]
 800ded0:	89a3      	ldrh	r3, [r4, #12]
 800ded2:	f043 0320 	orr.w	r3, r3, #32
 800ded6:	81a3      	strh	r3, [r4, #12]
 800ded8:	f04f 30ff 	mov.w	r0, #4294967295
 800dedc:	e7f3      	b.n	800dec6 <__ssrefill_r+0x22>

0800dede <_sfread_r>:
 800dede:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee2:	461f      	mov	r7, r3
 800dee4:	4613      	mov	r3, r2
 800dee6:	437b      	muls	r3, r7
 800dee8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800deea:	4682      	mov	sl, r0
 800deec:	4688      	mov	r8, r1
 800deee:	4691      	mov	r9, r2
 800def0:	d027      	beq.n	800df42 <_sfread_r+0x64>
 800def2:	461e      	mov	r6, r3
 800def4:	e9d4 1500 	ldrd	r1, r5, [r4]
 800def8:	42b5      	cmp	r5, r6
 800defa:	d30b      	bcc.n	800df14 <_sfread_r+0x36>
 800defc:	4632      	mov	r2, r6
 800defe:	4640      	mov	r0, r8
 800df00:	f7fe f87e 	bl	800c000 <memcpy>
 800df04:	6862      	ldr	r2, [r4, #4]
 800df06:	6821      	ldr	r1, [r4, #0]
 800df08:	1b92      	subs	r2, r2, r6
 800df0a:	4431      	add	r1, r6
 800df0c:	6062      	str	r2, [r4, #4]
 800df0e:	6021      	str	r1, [r4, #0]
 800df10:	463b      	mov	r3, r7
 800df12:	e016      	b.n	800df42 <_sfread_r+0x64>
 800df14:	462a      	mov	r2, r5
 800df16:	4640      	mov	r0, r8
 800df18:	9301      	str	r3, [sp, #4]
 800df1a:	f7fe f871 	bl	800c000 <memcpy>
 800df1e:	6822      	ldr	r2, [r4, #0]
 800df20:	2300      	movs	r3, #0
 800df22:	442a      	add	r2, r5
 800df24:	6063      	str	r3, [r4, #4]
 800df26:	6022      	str	r2, [r4, #0]
 800df28:	4621      	mov	r1, r4
 800df2a:	4650      	mov	r0, sl
 800df2c:	f7ff ffba 	bl	800dea4 <__ssrefill_r>
 800df30:	44a8      	add	r8, r5
 800df32:	9b01      	ldr	r3, [sp, #4]
 800df34:	eba6 0b05 	sub.w	fp, r6, r5
 800df38:	b138      	cbz	r0, 800df4a <_sfread_r+0x6c>
 800df3a:	18e9      	adds	r1, r5, r3
 800df3c:	1b89      	subs	r1, r1, r6
 800df3e:	fbb1 f3f9 	udiv	r3, r1, r9
 800df42:	4618      	mov	r0, r3
 800df44:	b003      	add	sp, #12
 800df46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df4a:	465e      	mov	r6, fp
 800df4c:	e7d2      	b.n	800def4 <_sfread_r+0x16>

0800df4e <__submore>:
 800df4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df52:	460c      	mov	r4, r1
 800df54:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800df56:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800df5a:	4299      	cmp	r1, r3
 800df5c:	d11d      	bne.n	800df9a <__submore+0x4c>
 800df5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800df62:	f7fa f90d 	bl	8008180 <_malloc_r>
 800df66:	b918      	cbnz	r0, 800df70 <__submore+0x22>
 800df68:	f04f 30ff 	mov.w	r0, #4294967295
 800df6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df74:	6363      	str	r3, [r4, #52]	; 0x34
 800df76:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800df7a:	6320      	str	r0, [r4, #48]	; 0x30
 800df7c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800df80:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800df84:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800df88:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800df8c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800df90:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800df94:	6020      	str	r0, [r4, #0]
 800df96:	2000      	movs	r0, #0
 800df98:	e7e8      	b.n	800df6c <__submore+0x1e>
 800df9a:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800df9c:	0077      	lsls	r7, r6, #1
 800df9e:	463a      	mov	r2, r7
 800dfa0:	f7fe fcca 	bl	800c938 <_realloc_r>
 800dfa4:	4605      	mov	r5, r0
 800dfa6:	2800      	cmp	r0, #0
 800dfa8:	d0de      	beq.n	800df68 <__submore+0x1a>
 800dfaa:	eb00 0806 	add.w	r8, r0, r6
 800dfae:	4601      	mov	r1, r0
 800dfb0:	4632      	mov	r2, r6
 800dfb2:	4640      	mov	r0, r8
 800dfb4:	f7fe f824 	bl	800c000 <memcpy>
 800dfb8:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
 800dfbc:	f8c4 8000 	str.w	r8, [r4]
 800dfc0:	e7e9      	b.n	800df96 <__submore+0x48>

0800dfc2 <__ascii_wctomb>:
 800dfc2:	b149      	cbz	r1, 800dfd8 <__ascii_wctomb+0x16>
 800dfc4:	2aff      	cmp	r2, #255	; 0xff
 800dfc6:	bf85      	ittet	hi
 800dfc8:	238a      	movhi	r3, #138	; 0x8a
 800dfca:	6003      	strhi	r3, [r0, #0]
 800dfcc:	700a      	strbls	r2, [r1, #0]
 800dfce:	f04f 30ff 	movhi.w	r0, #4294967295
 800dfd2:	bf98      	it	ls
 800dfd4:	2001      	movls	r0, #1
 800dfd6:	4770      	bx	lr
 800dfd8:	4608      	mov	r0, r1
 800dfda:	4770      	bx	lr

0800dfdc <__register_exitproc>:
 800dfdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfe0:	f8df a078 	ldr.w	sl, [pc, #120]	; 800e05c <__register_exitproc+0x80>
 800dfe4:	4606      	mov	r6, r0
 800dfe6:	f8da 0000 	ldr.w	r0, [sl]
 800dfea:	4698      	mov	r8, r3
 800dfec:	460f      	mov	r7, r1
 800dfee:	4691      	mov	r9, r2
 800dff0:	f7fd ffc6 	bl	800bf80 <__retarget_lock_acquire_recursive>
 800dff4:	4b18      	ldr	r3, [pc, #96]	; (800e058 <__register_exitproc+0x7c>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800dffc:	b91c      	cbnz	r4, 800e006 <__register_exitproc+0x2a>
 800dffe:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800e002:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800e006:	6865      	ldr	r5, [r4, #4]
 800e008:	f8da 0000 	ldr.w	r0, [sl]
 800e00c:	2d1f      	cmp	r5, #31
 800e00e:	dd05      	ble.n	800e01c <__register_exitproc+0x40>
 800e010:	f7fd ffb7 	bl	800bf82 <__retarget_lock_release_recursive>
 800e014:	f04f 30ff 	mov.w	r0, #4294967295
 800e018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e01c:	b19e      	cbz	r6, 800e046 <__register_exitproc+0x6a>
 800e01e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800e022:	2201      	movs	r2, #1
 800e024:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800e028:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800e02c:	40aa      	lsls	r2, r5
 800e02e:	4313      	orrs	r3, r2
 800e030:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800e034:	2e02      	cmp	r6, #2
 800e036:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800e03a:	bf02      	ittt	eq
 800e03c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800e040:	4313      	orreq	r3, r2
 800e042:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800e046:	1c6b      	adds	r3, r5, #1
 800e048:	3502      	adds	r5, #2
 800e04a:	6063      	str	r3, [r4, #4]
 800e04c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800e050:	f7fd ff97 	bl	800bf82 <__retarget_lock_release_recursive>
 800e054:	2000      	movs	r0, #0
 800e056:	e7df      	b.n	800e018 <__register_exitproc+0x3c>
 800e058:	0800ff94 	.word	0x0800ff94
 800e05c:	20000850 	.word	0x20000850

0800e060 <__assert_func>:
 800e060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e062:	4614      	mov	r4, r2
 800e064:	461a      	mov	r2, r3
 800e066:	4b09      	ldr	r3, [pc, #36]	; (800e08c <__assert_func+0x2c>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4605      	mov	r5, r0
 800e06c:	68d8      	ldr	r0, [r3, #12]
 800e06e:	b14c      	cbz	r4, 800e084 <__assert_func+0x24>
 800e070:	4b07      	ldr	r3, [pc, #28]	; (800e090 <__assert_func+0x30>)
 800e072:	9100      	str	r1, [sp, #0]
 800e074:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e078:	4906      	ldr	r1, [pc, #24]	; (800e094 <__assert_func+0x34>)
 800e07a:	462b      	mov	r3, r5
 800e07c:	f000 f966 	bl	800e34c <fiprintf>
 800e080:	f001 fa86 	bl	800f590 <abort>
 800e084:	4b04      	ldr	r3, [pc, #16]	; (800e098 <__assert_func+0x38>)
 800e086:	461c      	mov	r4, r3
 800e088:	e7f3      	b.n	800e072 <__assert_func+0x12>
 800e08a:	bf00      	nop
 800e08c:	20000010 	.word	0x20000010
 800e090:	08010348 	.word	0x08010348
 800e094:	08010355 	.word	0x08010355
 800e098:	08010383 	.word	0x08010383

0800e09c <_calloc_r>:
 800e09c:	b538      	push	{r3, r4, r5, lr}
 800e09e:	fba1 1502 	umull	r1, r5, r1, r2
 800e0a2:	b92d      	cbnz	r5, 800e0b0 <_calloc_r+0x14>
 800e0a4:	f7fa f86c 	bl	8008180 <_malloc_r>
 800e0a8:	4604      	mov	r4, r0
 800e0aa:	b938      	cbnz	r0, 800e0bc <_calloc_r+0x20>
 800e0ac:	4620      	mov	r0, r4
 800e0ae:	bd38      	pop	{r3, r4, r5, pc}
 800e0b0:	f7fa f82c 	bl	800810c <__errno>
 800e0b4:	230c      	movs	r3, #12
 800e0b6:	6003      	str	r3, [r0, #0]
 800e0b8:	2400      	movs	r4, #0
 800e0ba:	e7f7      	b.n	800e0ac <_calloc_r+0x10>
 800e0bc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e0c0:	f022 0203 	bic.w	r2, r2, #3
 800e0c4:	3a04      	subs	r2, #4
 800e0c6:	2a24      	cmp	r2, #36	; 0x24
 800e0c8:	d819      	bhi.n	800e0fe <_calloc_r+0x62>
 800e0ca:	2a13      	cmp	r2, #19
 800e0cc:	d915      	bls.n	800e0fa <_calloc_r+0x5e>
 800e0ce:	2a1b      	cmp	r2, #27
 800e0d0:	e9c0 5500 	strd	r5, r5, [r0]
 800e0d4:	d806      	bhi.n	800e0e4 <_calloc_r+0x48>
 800e0d6:	f100 0308 	add.w	r3, r0, #8
 800e0da:	2200      	movs	r2, #0
 800e0dc:	e9c3 2200 	strd	r2, r2, [r3]
 800e0e0:	609a      	str	r2, [r3, #8]
 800e0e2:	e7e3      	b.n	800e0ac <_calloc_r+0x10>
 800e0e4:	2a24      	cmp	r2, #36	; 0x24
 800e0e6:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800e0ea:	bf11      	iteee	ne
 800e0ec:	f100 0310 	addne.w	r3, r0, #16
 800e0f0:	6105      	streq	r5, [r0, #16]
 800e0f2:	f100 0318 	addeq.w	r3, r0, #24
 800e0f6:	6145      	streq	r5, [r0, #20]
 800e0f8:	e7ef      	b.n	800e0da <_calloc_r+0x3e>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	e7ed      	b.n	800e0da <_calloc_r+0x3e>
 800e0fe:	4629      	mov	r1, r5
 800e100:	f7fa fa7a 	bl	80085f8 <memset>
 800e104:	e7d2      	b.n	800e0ac <_calloc_r+0x10>
	...

0800e108 <__sflush_r>:
 800e108:	898b      	ldrh	r3, [r1, #12]
 800e10a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e10e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e112:	4605      	mov	r5, r0
 800e114:	0718      	lsls	r0, r3, #28
 800e116:	460c      	mov	r4, r1
 800e118:	d45f      	bmi.n	800e1da <__sflush_r+0xd2>
 800e11a:	684b      	ldr	r3, [r1, #4]
 800e11c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e120:	2b00      	cmp	r3, #0
 800e122:	818a      	strh	r2, [r1, #12]
 800e124:	dc05      	bgt.n	800e132 <__sflush_r+0x2a>
 800e126:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800e128:	2b00      	cmp	r3, #0
 800e12a:	dc02      	bgt.n	800e132 <__sflush_r+0x2a>
 800e12c:	2000      	movs	r0, #0
 800e12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e132:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e134:	2e00      	cmp	r6, #0
 800e136:	d0f9      	beq.n	800e12c <__sflush_r+0x24>
 800e138:	2300      	movs	r3, #0
 800e13a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e13e:	682f      	ldr	r7, [r5, #0]
 800e140:	602b      	str	r3, [r5, #0]
 800e142:	d036      	beq.n	800e1b2 <__sflush_r+0xaa>
 800e144:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e146:	89a3      	ldrh	r3, [r4, #12]
 800e148:	075a      	lsls	r2, r3, #29
 800e14a:	d505      	bpl.n	800e158 <__sflush_r+0x50>
 800e14c:	6863      	ldr	r3, [r4, #4]
 800e14e:	1ac0      	subs	r0, r0, r3
 800e150:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e152:	b10b      	cbz	r3, 800e158 <__sflush_r+0x50>
 800e154:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e156:	1ac0      	subs	r0, r0, r3
 800e158:	2300      	movs	r3, #0
 800e15a:	4602      	mov	r2, r0
 800e15c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e15e:	69e1      	ldr	r1, [r4, #28]
 800e160:	4628      	mov	r0, r5
 800e162:	47b0      	blx	r6
 800e164:	1c43      	adds	r3, r0, #1
 800e166:	89a3      	ldrh	r3, [r4, #12]
 800e168:	d106      	bne.n	800e178 <__sflush_r+0x70>
 800e16a:	6829      	ldr	r1, [r5, #0]
 800e16c:	291d      	cmp	r1, #29
 800e16e:	d830      	bhi.n	800e1d2 <__sflush_r+0xca>
 800e170:	4a2b      	ldr	r2, [pc, #172]	; (800e220 <__sflush_r+0x118>)
 800e172:	40ca      	lsrs	r2, r1
 800e174:	07d6      	lsls	r6, r2, #31
 800e176:	d52c      	bpl.n	800e1d2 <__sflush_r+0xca>
 800e178:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e17c:	b21b      	sxth	r3, r3
 800e17e:	2200      	movs	r2, #0
 800e180:	6062      	str	r2, [r4, #4]
 800e182:	04d9      	lsls	r1, r3, #19
 800e184:	6922      	ldr	r2, [r4, #16]
 800e186:	81a3      	strh	r3, [r4, #12]
 800e188:	6022      	str	r2, [r4, #0]
 800e18a:	d504      	bpl.n	800e196 <__sflush_r+0x8e>
 800e18c:	1c42      	adds	r2, r0, #1
 800e18e:	d101      	bne.n	800e194 <__sflush_r+0x8c>
 800e190:	682b      	ldr	r3, [r5, #0]
 800e192:	b903      	cbnz	r3, 800e196 <__sflush_r+0x8e>
 800e194:	6520      	str	r0, [r4, #80]	; 0x50
 800e196:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e198:	602f      	str	r7, [r5, #0]
 800e19a:	2900      	cmp	r1, #0
 800e19c:	d0c6      	beq.n	800e12c <__sflush_r+0x24>
 800e19e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e1a2:	4299      	cmp	r1, r3
 800e1a4:	d002      	beq.n	800e1ac <__sflush_r+0xa4>
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	f7fd fe10 	bl	800bdcc <_free_r>
 800e1ac:	2000      	movs	r0, #0
 800e1ae:	6320      	str	r0, [r4, #48]	; 0x30
 800e1b0:	e7bd      	b.n	800e12e <__sflush_r+0x26>
 800e1b2:	69e1      	ldr	r1, [r4, #28]
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	4628      	mov	r0, r5
 800e1b8:	47b0      	blx	r6
 800e1ba:	1c41      	adds	r1, r0, #1
 800e1bc:	d1c3      	bne.n	800e146 <__sflush_r+0x3e>
 800e1be:	682b      	ldr	r3, [r5, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d0c0      	beq.n	800e146 <__sflush_r+0x3e>
 800e1c4:	2b1d      	cmp	r3, #29
 800e1c6:	d001      	beq.n	800e1cc <__sflush_r+0xc4>
 800e1c8:	2b16      	cmp	r3, #22
 800e1ca:	d101      	bne.n	800e1d0 <__sflush_r+0xc8>
 800e1cc:	602f      	str	r7, [r5, #0]
 800e1ce:	e7ad      	b.n	800e12c <__sflush_r+0x24>
 800e1d0:	89a3      	ldrh	r3, [r4, #12]
 800e1d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1d6:	81a3      	strh	r3, [r4, #12]
 800e1d8:	e7a9      	b.n	800e12e <__sflush_r+0x26>
 800e1da:	690f      	ldr	r7, [r1, #16]
 800e1dc:	2f00      	cmp	r7, #0
 800e1de:	d0a5      	beq.n	800e12c <__sflush_r+0x24>
 800e1e0:	079b      	lsls	r3, r3, #30
 800e1e2:	680e      	ldr	r6, [r1, #0]
 800e1e4:	bf08      	it	eq
 800e1e6:	694b      	ldreq	r3, [r1, #20]
 800e1e8:	600f      	str	r7, [r1, #0]
 800e1ea:	bf18      	it	ne
 800e1ec:	2300      	movne	r3, #0
 800e1ee:	eba6 0807 	sub.w	r8, r6, r7
 800e1f2:	608b      	str	r3, [r1, #8]
 800e1f4:	f1b8 0f00 	cmp.w	r8, #0
 800e1f8:	dd98      	ble.n	800e12c <__sflush_r+0x24>
 800e1fa:	69e1      	ldr	r1, [r4, #28]
 800e1fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e1fe:	4643      	mov	r3, r8
 800e200:	463a      	mov	r2, r7
 800e202:	4628      	mov	r0, r5
 800e204:	47b0      	blx	r6
 800e206:	2800      	cmp	r0, #0
 800e208:	dc06      	bgt.n	800e218 <__sflush_r+0x110>
 800e20a:	89a3      	ldrh	r3, [r4, #12]
 800e20c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e210:	81a3      	strh	r3, [r4, #12]
 800e212:	f04f 30ff 	mov.w	r0, #4294967295
 800e216:	e78a      	b.n	800e12e <__sflush_r+0x26>
 800e218:	4407      	add	r7, r0
 800e21a:	eba8 0800 	sub.w	r8, r8, r0
 800e21e:	e7e9      	b.n	800e1f4 <__sflush_r+0xec>
 800e220:	20400001 	.word	0x20400001

0800e224 <_fflush_r>:
 800e224:	b538      	push	{r3, r4, r5, lr}
 800e226:	460c      	mov	r4, r1
 800e228:	4605      	mov	r5, r0
 800e22a:	b118      	cbz	r0, 800e234 <_fflush_r+0x10>
 800e22c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e22e:	b90b      	cbnz	r3, 800e234 <_fflush_r+0x10>
 800e230:	f000 f864 	bl	800e2fc <__sinit>
 800e234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e238:	b1bb      	cbz	r3, 800e26a <_fflush_r+0x46>
 800e23a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e23c:	07d0      	lsls	r0, r2, #31
 800e23e:	d404      	bmi.n	800e24a <_fflush_r+0x26>
 800e240:	0599      	lsls	r1, r3, #22
 800e242:	d402      	bmi.n	800e24a <_fflush_r+0x26>
 800e244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e246:	f7fd fe9b 	bl	800bf80 <__retarget_lock_acquire_recursive>
 800e24a:	4628      	mov	r0, r5
 800e24c:	4621      	mov	r1, r4
 800e24e:	f7ff ff5b 	bl	800e108 <__sflush_r>
 800e252:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e254:	07da      	lsls	r2, r3, #31
 800e256:	4605      	mov	r5, r0
 800e258:	d405      	bmi.n	800e266 <_fflush_r+0x42>
 800e25a:	89a3      	ldrh	r3, [r4, #12]
 800e25c:	059b      	lsls	r3, r3, #22
 800e25e:	d402      	bmi.n	800e266 <_fflush_r+0x42>
 800e260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e262:	f7fd fe8e 	bl	800bf82 <__retarget_lock_release_recursive>
 800e266:	4628      	mov	r0, r5
 800e268:	bd38      	pop	{r3, r4, r5, pc}
 800e26a:	461d      	mov	r5, r3
 800e26c:	e7fb      	b.n	800e266 <_fflush_r+0x42>
	...

0800e270 <std>:
 800e270:	2300      	movs	r3, #0
 800e272:	b510      	push	{r4, lr}
 800e274:	4604      	mov	r4, r0
 800e276:	e9c0 3300 	strd	r3, r3, [r0]
 800e27a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e27e:	6083      	str	r3, [r0, #8]
 800e280:	8181      	strh	r1, [r0, #12]
 800e282:	6643      	str	r3, [r0, #100]	; 0x64
 800e284:	81c2      	strh	r2, [r0, #14]
 800e286:	6183      	str	r3, [r0, #24]
 800e288:	4619      	mov	r1, r3
 800e28a:	2208      	movs	r2, #8
 800e28c:	305c      	adds	r0, #92	; 0x5c
 800e28e:	f7fa f9b3 	bl	80085f8 <memset>
 800e292:	4b07      	ldr	r3, [pc, #28]	; (800e2b0 <std+0x40>)
 800e294:	6223      	str	r3, [r4, #32]
 800e296:	4b07      	ldr	r3, [pc, #28]	; (800e2b4 <std+0x44>)
 800e298:	6263      	str	r3, [r4, #36]	; 0x24
 800e29a:	4b07      	ldr	r3, [pc, #28]	; (800e2b8 <std+0x48>)
 800e29c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e29e:	4b07      	ldr	r3, [pc, #28]	; (800e2bc <std+0x4c>)
 800e2a0:	61e4      	str	r4, [r4, #28]
 800e2a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e2a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e2a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2ac:	f7fd be66 	b.w	800bf7c <__retarget_lock_init_recursive>
 800e2b0:	080086d9 	.word	0x080086d9
 800e2b4:	080086ff 	.word	0x080086ff
 800e2b8:	08008737 	.word	0x08008737
 800e2bc:	0800875b 	.word	0x0800875b

0800e2c0 <_cleanup_r>:
 800e2c0:	4901      	ldr	r1, [pc, #4]	; (800e2c8 <_cleanup_r+0x8>)
 800e2c2:	f000 b855 	b.w	800e370 <_fwalk_reent>
 800e2c6:	bf00      	nop
 800e2c8:	0800f59f 	.word	0x0800f59f

0800e2cc <__sfp_lock_acquire>:
 800e2cc:	4801      	ldr	r0, [pc, #4]	; (800e2d4 <__sfp_lock_acquire+0x8>)
 800e2ce:	f7fd be57 	b.w	800bf80 <__retarget_lock_acquire_recursive>
 800e2d2:	bf00      	nop
 800e2d4:	2000119e 	.word	0x2000119e

0800e2d8 <__sfp_lock_release>:
 800e2d8:	4801      	ldr	r0, [pc, #4]	; (800e2e0 <__sfp_lock_release+0x8>)
 800e2da:	f7fd be52 	b.w	800bf82 <__retarget_lock_release_recursive>
 800e2de:	bf00      	nop
 800e2e0:	2000119e 	.word	0x2000119e

0800e2e4 <__sinit_lock_acquire>:
 800e2e4:	4801      	ldr	r0, [pc, #4]	; (800e2ec <__sinit_lock_acquire+0x8>)
 800e2e6:	f7fd be4b 	b.w	800bf80 <__retarget_lock_acquire_recursive>
 800e2ea:	bf00      	nop
 800e2ec:	2000119f 	.word	0x2000119f

0800e2f0 <__sinit_lock_release>:
 800e2f0:	4801      	ldr	r0, [pc, #4]	; (800e2f8 <__sinit_lock_release+0x8>)
 800e2f2:	f7fd be46 	b.w	800bf82 <__retarget_lock_release_recursive>
 800e2f6:	bf00      	nop
 800e2f8:	2000119f 	.word	0x2000119f

0800e2fc <__sinit>:
 800e2fc:	b510      	push	{r4, lr}
 800e2fe:	4604      	mov	r4, r0
 800e300:	f7ff fff0 	bl	800e2e4 <__sinit_lock_acquire>
 800e304:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e306:	b11a      	cbz	r2, 800e310 <__sinit+0x14>
 800e308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e30c:	f7ff bff0 	b.w	800e2f0 <__sinit_lock_release>
 800e310:	4b0d      	ldr	r3, [pc, #52]	; (800e348 <__sinit+0x4c>)
 800e312:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e314:	2303      	movs	r3, #3
 800e316:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800e31a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800e31e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800e322:	6860      	ldr	r0, [r4, #4]
 800e324:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800e328:	2104      	movs	r1, #4
 800e32a:	f7ff ffa1 	bl	800e270 <std>
 800e32e:	68a0      	ldr	r0, [r4, #8]
 800e330:	2201      	movs	r2, #1
 800e332:	2109      	movs	r1, #9
 800e334:	f7ff ff9c 	bl	800e270 <std>
 800e338:	68e0      	ldr	r0, [r4, #12]
 800e33a:	2202      	movs	r2, #2
 800e33c:	2112      	movs	r1, #18
 800e33e:	f7ff ff97 	bl	800e270 <std>
 800e342:	2301      	movs	r3, #1
 800e344:	63a3      	str	r3, [r4, #56]	; 0x38
 800e346:	e7df      	b.n	800e308 <__sinit+0xc>
 800e348:	0800e2c1 	.word	0x0800e2c1

0800e34c <fiprintf>:
 800e34c:	b40e      	push	{r1, r2, r3}
 800e34e:	b503      	push	{r0, r1, lr}
 800e350:	4601      	mov	r1, r0
 800e352:	ab03      	add	r3, sp, #12
 800e354:	4805      	ldr	r0, [pc, #20]	; (800e36c <fiprintf+0x20>)
 800e356:	f853 2b04 	ldr.w	r2, [r3], #4
 800e35a:	6800      	ldr	r0, [r0, #0]
 800e35c:	9301      	str	r3, [sp, #4]
 800e35e:	f000 fbe9 	bl	800eb34 <_vfiprintf_r>
 800e362:	b002      	add	sp, #8
 800e364:	f85d eb04 	ldr.w	lr, [sp], #4
 800e368:	b003      	add	sp, #12
 800e36a:	4770      	bx	lr
 800e36c:	20000010 	.word	0x20000010

0800e370 <_fwalk_reent>:
 800e370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e374:	4606      	mov	r6, r0
 800e376:	4688      	mov	r8, r1
 800e378:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800e37c:	2700      	movs	r7, #0
 800e37e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e382:	f1b9 0901 	subs.w	r9, r9, #1
 800e386:	d505      	bpl.n	800e394 <_fwalk_reent+0x24>
 800e388:	6824      	ldr	r4, [r4, #0]
 800e38a:	2c00      	cmp	r4, #0
 800e38c:	d1f7      	bne.n	800e37e <_fwalk_reent+0xe>
 800e38e:	4638      	mov	r0, r7
 800e390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e394:	89ab      	ldrh	r3, [r5, #12]
 800e396:	2b01      	cmp	r3, #1
 800e398:	d907      	bls.n	800e3aa <_fwalk_reent+0x3a>
 800e39a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e39e:	3301      	adds	r3, #1
 800e3a0:	d003      	beq.n	800e3aa <_fwalk_reent+0x3a>
 800e3a2:	4629      	mov	r1, r5
 800e3a4:	4630      	mov	r0, r6
 800e3a6:	47c0      	blx	r8
 800e3a8:	4307      	orrs	r7, r0
 800e3aa:	3568      	adds	r5, #104	; 0x68
 800e3ac:	e7e9      	b.n	800e382 <_fwalk_reent+0x12>

0800e3ae <rshift>:
 800e3ae:	6903      	ldr	r3, [r0, #16]
 800e3b0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e3b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3b8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e3bc:	f100 0414 	add.w	r4, r0, #20
 800e3c0:	dd45      	ble.n	800e44e <rshift+0xa0>
 800e3c2:	f011 011f 	ands.w	r1, r1, #31
 800e3c6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e3ca:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e3ce:	d10c      	bne.n	800e3ea <rshift+0x3c>
 800e3d0:	f100 0710 	add.w	r7, r0, #16
 800e3d4:	4629      	mov	r1, r5
 800e3d6:	42b1      	cmp	r1, r6
 800e3d8:	d334      	bcc.n	800e444 <rshift+0x96>
 800e3da:	1a9b      	subs	r3, r3, r2
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	1eea      	subs	r2, r5, #3
 800e3e0:	4296      	cmp	r6, r2
 800e3e2:	bf38      	it	cc
 800e3e4:	2300      	movcc	r3, #0
 800e3e6:	4423      	add	r3, r4
 800e3e8:	e015      	b.n	800e416 <rshift+0x68>
 800e3ea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e3ee:	f1c1 0820 	rsb	r8, r1, #32
 800e3f2:	40cf      	lsrs	r7, r1
 800e3f4:	f105 0e04 	add.w	lr, r5, #4
 800e3f8:	46a1      	mov	r9, r4
 800e3fa:	4576      	cmp	r6, lr
 800e3fc:	46f4      	mov	ip, lr
 800e3fe:	d815      	bhi.n	800e42c <rshift+0x7e>
 800e400:	1a9a      	subs	r2, r3, r2
 800e402:	0092      	lsls	r2, r2, #2
 800e404:	3a04      	subs	r2, #4
 800e406:	3501      	adds	r5, #1
 800e408:	42ae      	cmp	r6, r5
 800e40a:	bf38      	it	cc
 800e40c:	2200      	movcc	r2, #0
 800e40e:	18a3      	adds	r3, r4, r2
 800e410:	50a7      	str	r7, [r4, r2]
 800e412:	b107      	cbz	r7, 800e416 <rshift+0x68>
 800e414:	3304      	adds	r3, #4
 800e416:	1b1a      	subs	r2, r3, r4
 800e418:	42a3      	cmp	r3, r4
 800e41a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e41e:	bf08      	it	eq
 800e420:	2300      	moveq	r3, #0
 800e422:	6102      	str	r2, [r0, #16]
 800e424:	bf08      	it	eq
 800e426:	6143      	streq	r3, [r0, #20]
 800e428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e42c:	f8dc c000 	ldr.w	ip, [ip]
 800e430:	fa0c fc08 	lsl.w	ip, ip, r8
 800e434:	ea4c 0707 	orr.w	r7, ip, r7
 800e438:	f849 7b04 	str.w	r7, [r9], #4
 800e43c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e440:	40cf      	lsrs	r7, r1
 800e442:	e7da      	b.n	800e3fa <rshift+0x4c>
 800e444:	f851 cb04 	ldr.w	ip, [r1], #4
 800e448:	f847 cf04 	str.w	ip, [r7, #4]!
 800e44c:	e7c3      	b.n	800e3d6 <rshift+0x28>
 800e44e:	4623      	mov	r3, r4
 800e450:	e7e1      	b.n	800e416 <rshift+0x68>

0800e452 <__hexdig_fun>:
 800e452:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e456:	2b09      	cmp	r3, #9
 800e458:	d802      	bhi.n	800e460 <__hexdig_fun+0xe>
 800e45a:	3820      	subs	r0, #32
 800e45c:	b2c0      	uxtb	r0, r0
 800e45e:	4770      	bx	lr
 800e460:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e464:	2b05      	cmp	r3, #5
 800e466:	d801      	bhi.n	800e46c <__hexdig_fun+0x1a>
 800e468:	3847      	subs	r0, #71	; 0x47
 800e46a:	e7f7      	b.n	800e45c <__hexdig_fun+0xa>
 800e46c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e470:	2b05      	cmp	r3, #5
 800e472:	d801      	bhi.n	800e478 <__hexdig_fun+0x26>
 800e474:	3827      	subs	r0, #39	; 0x27
 800e476:	e7f1      	b.n	800e45c <__hexdig_fun+0xa>
 800e478:	2000      	movs	r0, #0
 800e47a:	4770      	bx	lr

0800e47c <__gethex>:
 800e47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e480:	ed2d 8b02 	vpush	{d8}
 800e484:	b089      	sub	sp, #36	; 0x24
 800e486:	ee08 0a10 	vmov	s16, r0
 800e48a:	9304      	str	r3, [sp, #16]
 800e48c:	4bb4      	ldr	r3, [pc, #720]	; (800e760 <__gethex+0x2e4>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	9301      	str	r3, [sp, #4]
 800e492:	4618      	mov	r0, r3
 800e494:	468b      	mov	fp, r1
 800e496:	4690      	mov	r8, r2
 800e498:	f7f1 fea2 	bl	80001e0 <strlen>
 800e49c:	9b01      	ldr	r3, [sp, #4]
 800e49e:	f8db 2000 	ldr.w	r2, [fp]
 800e4a2:	4403      	add	r3, r0
 800e4a4:	4682      	mov	sl, r0
 800e4a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e4aa:	9305      	str	r3, [sp, #20]
 800e4ac:	1c93      	adds	r3, r2, #2
 800e4ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e4b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e4b6:	32fe      	adds	r2, #254	; 0xfe
 800e4b8:	18d1      	adds	r1, r2, r3
 800e4ba:	461f      	mov	r7, r3
 800e4bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e4c0:	9100      	str	r1, [sp, #0]
 800e4c2:	2830      	cmp	r0, #48	; 0x30
 800e4c4:	d0f8      	beq.n	800e4b8 <__gethex+0x3c>
 800e4c6:	f7ff ffc4 	bl	800e452 <__hexdig_fun>
 800e4ca:	4604      	mov	r4, r0
 800e4cc:	2800      	cmp	r0, #0
 800e4ce:	d13a      	bne.n	800e546 <__gethex+0xca>
 800e4d0:	9901      	ldr	r1, [sp, #4]
 800e4d2:	4652      	mov	r2, sl
 800e4d4:	4638      	mov	r0, r7
 800e4d6:	f7fa f944 	bl	8008762 <strncmp>
 800e4da:	4605      	mov	r5, r0
 800e4dc:	2800      	cmp	r0, #0
 800e4de:	d168      	bne.n	800e5b2 <__gethex+0x136>
 800e4e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e4e4:	eb07 060a 	add.w	r6, r7, sl
 800e4e8:	f7ff ffb3 	bl	800e452 <__hexdig_fun>
 800e4ec:	2800      	cmp	r0, #0
 800e4ee:	d062      	beq.n	800e5b6 <__gethex+0x13a>
 800e4f0:	4633      	mov	r3, r6
 800e4f2:	7818      	ldrb	r0, [r3, #0]
 800e4f4:	2830      	cmp	r0, #48	; 0x30
 800e4f6:	461f      	mov	r7, r3
 800e4f8:	f103 0301 	add.w	r3, r3, #1
 800e4fc:	d0f9      	beq.n	800e4f2 <__gethex+0x76>
 800e4fe:	f7ff ffa8 	bl	800e452 <__hexdig_fun>
 800e502:	2301      	movs	r3, #1
 800e504:	fab0 f480 	clz	r4, r0
 800e508:	0964      	lsrs	r4, r4, #5
 800e50a:	4635      	mov	r5, r6
 800e50c:	9300      	str	r3, [sp, #0]
 800e50e:	463a      	mov	r2, r7
 800e510:	4616      	mov	r6, r2
 800e512:	3201      	adds	r2, #1
 800e514:	7830      	ldrb	r0, [r6, #0]
 800e516:	f7ff ff9c 	bl	800e452 <__hexdig_fun>
 800e51a:	2800      	cmp	r0, #0
 800e51c:	d1f8      	bne.n	800e510 <__gethex+0x94>
 800e51e:	9901      	ldr	r1, [sp, #4]
 800e520:	4652      	mov	r2, sl
 800e522:	4630      	mov	r0, r6
 800e524:	f7fa f91d 	bl	8008762 <strncmp>
 800e528:	b980      	cbnz	r0, 800e54c <__gethex+0xd0>
 800e52a:	b94d      	cbnz	r5, 800e540 <__gethex+0xc4>
 800e52c:	eb06 050a 	add.w	r5, r6, sl
 800e530:	462a      	mov	r2, r5
 800e532:	4616      	mov	r6, r2
 800e534:	3201      	adds	r2, #1
 800e536:	7830      	ldrb	r0, [r6, #0]
 800e538:	f7ff ff8b 	bl	800e452 <__hexdig_fun>
 800e53c:	2800      	cmp	r0, #0
 800e53e:	d1f8      	bne.n	800e532 <__gethex+0xb6>
 800e540:	1bad      	subs	r5, r5, r6
 800e542:	00ad      	lsls	r5, r5, #2
 800e544:	e004      	b.n	800e550 <__gethex+0xd4>
 800e546:	2400      	movs	r4, #0
 800e548:	4625      	mov	r5, r4
 800e54a:	e7e0      	b.n	800e50e <__gethex+0x92>
 800e54c:	2d00      	cmp	r5, #0
 800e54e:	d1f7      	bne.n	800e540 <__gethex+0xc4>
 800e550:	7833      	ldrb	r3, [r6, #0]
 800e552:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e556:	2b50      	cmp	r3, #80	; 0x50
 800e558:	d13b      	bne.n	800e5d2 <__gethex+0x156>
 800e55a:	7873      	ldrb	r3, [r6, #1]
 800e55c:	2b2b      	cmp	r3, #43	; 0x2b
 800e55e:	d02c      	beq.n	800e5ba <__gethex+0x13e>
 800e560:	2b2d      	cmp	r3, #45	; 0x2d
 800e562:	d02e      	beq.n	800e5c2 <__gethex+0x146>
 800e564:	1c71      	adds	r1, r6, #1
 800e566:	f04f 0900 	mov.w	r9, #0
 800e56a:	7808      	ldrb	r0, [r1, #0]
 800e56c:	f7ff ff71 	bl	800e452 <__hexdig_fun>
 800e570:	1e43      	subs	r3, r0, #1
 800e572:	b2db      	uxtb	r3, r3
 800e574:	2b18      	cmp	r3, #24
 800e576:	d82c      	bhi.n	800e5d2 <__gethex+0x156>
 800e578:	f1a0 0210 	sub.w	r2, r0, #16
 800e57c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e580:	f7ff ff67 	bl	800e452 <__hexdig_fun>
 800e584:	1e43      	subs	r3, r0, #1
 800e586:	b2db      	uxtb	r3, r3
 800e588:	2b18      	cmp	r3, #24
 800e58a:	d91d      	bls.n	800e5c8 <__gethex+0x14c>
 800e58c:	f1b9 0f00 	cmp.w	r9, #0
 800e590:	d000      	beq.n	800e594 <__gethex+0x118>
 800e592:	4252      	negs	r2, r2
 800e594:	4415      	add	r5, r2
 800e596:	f8cb 1000 	str.w	r1, [fp]
 800e59a:	b1e4      	cbz	r4, 800e5d6 <__gethex+0x15a>
 800e59c:	9b00      	ldr	r3, [sp, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	bf14      	ite	ne
 800e5a2:	2700      	movne	r7, #0
 800e5a4:	2706      	moveq	r7, #6
 800e5a6:	4638      	mov	r0, r7
 800e5a8:	b009      	add	sp, #36	; 0x24
 800e5aa:	ecbd 8b02 	vpop	{d8}
 800e5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5b2:	463e      	mov	r6, r7
 800e5b4:	4625      	mov	r5, r4
 800e5b6:	2401      	movs	r4, #1
 800e5b8:	e7ca      	b.n	800e550 <__gethex+0xd4>
 800e5ba:	f04f 0900 	mov.w	r9, #0
 800e5be:	1cb1      	adds	r1, r6, #2
 800e5c0:	e7d3      	b.n	800e56a <__gethex+0xee>
 800e5c2:	f04f 0901 	mov.w	r9, #1
 800e5c6:	e7fa      	b.n	800e5be <__gethex+0x142>
 800e5c8:	230a      	movs	r3, #10
 800e5ca:	fb03 0202 	mla	r2, r3, r2, r0
 800e5ce:	3a10      	subs	r2, #16
 800e5d0:	e7d4      	b.n	800e57c <__gethex+0x100>
 800e5d2:	4631      	mov	r1, r6
 800e5d4:	e7df      	b.n	800e596 <__gethex+0x11a>
 800e5d6:	1bf3      	subs	r3, r6, r7
 800e5d8:	3b01      	subs	r3, #1
 800e5da:	4621      	mov	r1, r4
 800e5dc:	2b07      	cmp	r3, #7
 800e5de:	dc0b      	bgt.n	800e5f8 <__gethex+0x17c>
 800e5e0:	ee18 0a10 	vmov	r0, s16
 800e5e4:	f7fd fd1a 	bl	800c01c <_Balloc>
 800e5e8:	4604      	mov	r4, r0
 800e5ea:	b940      	cbnz	r0, 800e5fe <__gethex+0x182>
 800e5ec:	4b5d      	ldr	r3, [pc, #372]	; (800e764 <__gethex+0x2e8>)
 800e5ee:	4602      	mov	r2, r0
 800e5f0:	21de      	movs	r1, #222	; 0xde
 800e5f2:	485d      	ldr	r0, [pc, #372]	; (800e768 <__gethex+0x2ec>)
 800e5f4:	f7ff fd34 	bl	800e060 <__assert_func>
 800e5f8:	3101      	adds	r1, #1
 800e5fa:	105b      	asrs	r3, r3, #1
 800e5fc:	e7ee      	b.n	800e5dc <__gethex+0x160>
 800e5fe:	f100 0914 	add.w	r9, r0, #20
 800e602:	f04f 0b00 	mov.w	fp, #0
 800e606:	f1ca 0301 	rsb	r3, sl, #1
 800e60a:	f8cd 9008 	str.w	r9, [sp, #8]
 800e60e:	f8cd b000 	str.w	fp, [sp]
 800e612:	9306      	str	r3, [sp, #24]
 800e614:	42b7      	cmp	r7, r6
 800e616:	d340      	bcc.n	800e69a <__gethex+0x21e>
 800e618:	9802      	ldr	r0, [sp, #8]
 800e61a:	9b00      	ldr	r3, [sp, #0]
 800e61c:	f840 3b04 	str.w	r3, [r0], #4
 800e620:	eba0 0009 	sub.w	r0, r0, r9
 800e624:	1080      	asrs	r0, r0, #2
 800e626:	0146      	lsls	r6, r0, #5
 800e628:	6120      	str	r0, [r4, #16]
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7fd fdb4 	bl	800c198 <__hi0bits>
 800e630:	1a30      	subs	r0, r6, r0
 800e632:	f8d8 6000 	ldr.w	r6, [r8]
 800e636:	42b0      	cmp	r0, r6
 800e638:	dd63      	ble.n	800e702 <__gethex+0x286>
 800e63a:	1b87      	subs	r7, r0, r6
 800e63c:	4639      	mov	r1, r7
 800e63e:	4620      	mov	r0, r4
 800e640:	f7fe f93e 	bl	800c8c0 <__any_on>
 800e644:	4682      	mov	sl, r0
 800e646:	b1a8      	cbz	r0, 800e674 <__gethex+0x1f8>
 800e648:	1e7b      	subs	r3, r7, #1
 800e64a:	1159      	asrs	r1, r3, #5
 800e64c:	f003 021f 	and.w	r2, r3, #31
 800e650:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e654:	f04f 0a01 	mov.w	sl, #1
 800e658:	fa0a f202 	lsl.w	r2, sl, r2
 800e65c:	420a      	tst	r2, r1
 800e65e:	d009      	beq.n	800e674 <__gethex+0x1f8>
 800e660:	4553      	cmp	r3, sl
 800e662:	dd05      	ble.n	800e670 <__gethex+0x1f4>
 800e664:	1eb9      	subs	r1, r7, #2
 800e666:	4620      	mov	r0, r4
 800e668:	f7fe f92a 	bl	800c8c0 <__any_on>
 800e66c:	2800      	cmp	r0, #0
 800e66e:	d145      	bne.n	800e6fc <__gethex+0x280>
 800e670:	f04f 0a02 	mov.w	sl, #2
 800e674:	4639      	mov	r1, r7
 800e676:	4620      	mov	r0, r4
 800e678:	f7ff fe99 	bl	800e3ae <rshift>
 800e67c:	443d      	add	r5, r7
 800e67e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e682:	42ab      	cmp	r3, r5
 800e684:	da4c      	bge.n	800e720 <__gethex+0x2a4>
 800e686:	ee18 0a10 	vmov	r0, s16
 800e68a:	4621      	mov	r1, r4
 800e68c:	f7fd fceb 	bl	800c066 <_Bfree>
 800e690:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e692:	2300      	movs	r3, #0
 800e694:	6013      	str	r3, [r2, #0]
 800e696:	27a3      	movs	r7, #163	; 0xa3
 800e698:	e785      	b.n	800e5a6 <__gethex+0x12a>
 800e69a:	1e73      	subs	r3, r6, #1
 800e69c:	9a05      	ldr	r2, [sp, #20]
 800e69e:	9303      	str	r3, [sp, #12]
 800e6a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e6a4:	4293      	cmp	r3, r2
 800e6a6:	d019      	beq.n	800e6dc <__gethex+0x260>
 800e6a8:	f1bb 0f20 	cmp.w	fp, #32
 800e6ac:	d107      	bne.n	800e6be <__gethex+0x242>
 800e6ae:	9b02      	ldr	r3, [sp, #8]
 800e6b0:	9a00      	ldr	r2, [sp, #0]
 800e6b2:	f843 2b04 	str.w	r2, [r3], #4
 800e6b6:	9302      	str	r3, [sp, #8]
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	9300      	str	r3, [sp, #0]
 800e6bc:	469b      	mov	fp, r3
 800e6be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e6c2:	f7ff fec6 	bl	800e452 <__hexdig_fun>
 800e6c6:	9b00      	ldr	r3, [sp, #0]
 800e6c8:	f000 000f 	and.w	r0, r0, #15
 800e6cc:	fa00 f00b 	lsl.w	r0, r0, fp
 800e6d0:	4303      	orrs	r3, r0
 800e6d2:	9300      	str	r3, [sp, #0]
 800e6d4:	f10b 0b04 	add.w	fp, fp, #4
 800e6d8:	9b03      	ldr	r3, [sp, #12]
 800e6da:	e00d      	b.n	800e6f8 <__gethex+0x27c>
 800e6dc:	9b03      	ldr	r3, [sp, #12]
 800e6de:	9a06      	ldr	r2, [sp, #24]
 800e6e0:	4413      	add	r3, r2
 800e6e2:	42bb      	cmp	r3, r7
 800e6e4:	d3e0      	bcc.n	800e6a8 <__gethex+0x22c>
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	9901      	ldr	r1, [sp, #4]
 800e6ea:	9307      	str	r3, [sp, #28]
 800e6ec:	4652      	mov	r2, sl
 800e6ee:	f7fa f838 	bl	8008762 <strncmp>
 800e6f2:	9b07      	ldr	r3, [sp, #28]
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	d1d7      	bne.n	800e6a8 <__gethex+0x22c>
 800e6f8:	461e      	mov	r6, r3
 800e6fa:	e78b      	b.n	800e614 <__gethex+0x198>
 800e6fc:	f04f 0a03 	mov.w	sl, #3
 800e700:	e7b8      	b.n	800e674 <__gethex+0x1f8>
 800e702:	da0a      	bge.n	800e71a <__gethex+0x29e>
 800e704:	1a37      	subs	r7, r6, r0
 800e706:	4621      	mov	r1, r4
 800e708:	ee18 0a10 	vmov	r0, s16
 800e70c:	463a      	mov	r2, r7
 800e70e:	f7fd fe93 	bl	800c438 <__lshift>
 800e712:	1bed      	subs	r5, r5, r7
 800e714:	4604      	mov	r4, r0
 800e716:	f100 0914 	add.w	r9, r0, #20
 800e71a:	f04f 0a00 	mov.w	sl, #0
 800e71e:	e7ae      	b.n	800e67e <__gethex+0x202>
 800e720:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e724:	42a8      	cmp	r0, r5
 800e726:	dd72      	ble.n	800e80e <__gethex+0x392>
 800e728:	1b45      	subs	r5, r0, r5
 800e72a:	42ae      	cmp	r6, r5
 800e72c:	dc36      	bgt.n	800e79c <__gethex+0x320>
 800e72e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e732:	2b02      	cmp	r3, #2
 800e734:	d02a      	beq.n	800e78c <__gethex+0x310>
 800e736:	2b03      	cmp	r3, #3
 800e738:	d02c      	beq.n	800e794 <__gethex+0x318>
 800e73a:	2b01      	cmp	r3, #1
 800e73c:	d11c      	bne.n	800e778 <__gethex+0x2fc>
 800e73e:	42ae      	cmp	r6, r5
 800e740:	d11a      	bne.n	800e778 <__gethex+0x2fc>
 800e742:	2e01      	cmp	r6, #1
 800e744:	d112      	bne.n	800e76c <__gethex+0x2f0>
 800e746:	9a04      	ldr	r2, [sp, #16]
 800e748:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e74c:	6013      	str	r3, [r2, #0]
 800e74e:	2301      	movs	r3, #1
 800e750:	6123      	str	r3, [r4, #16]
 800e752:	f8c9 3000 	str.w	r3, [r9]
 800e756:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e758:	2762      	movs	r7, #98	; 0x62
 800e75a:	601c      	str	r4, [r3, #0]
 800e75c:	e723      	b.n	800e5a6 <__gethex+0x12a>
 800e75e:	bf00      	nop
 800e760:	080103e8 	.word	0x080103e8
 800e764:	08010122 	.word	0x08010122
 800e768:	08010384 	.word	0x08010384
 800e76c:	1e71      	subs	r1, r6, #1
 800e76e:	4620      	mov	r0, r4
 800e770:	f7fe f8a6 	bl	800c8c0 <__any_on>
 800e774:	2800      	cmp	r0, #0
 800e776:	d1e6      	bne.n	800e746 <__gethex+0x2ca>
 800e778:	ee18 0a10 	vmov	r0, s16
 800e77c:	4621      	mov	r1, r4
 800e77e:	f7fd fc72 	bl	800c066 <_Bfree>
 800e782:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e784:	2300      	movs	r3, #0
 800e786:	6013      	str	r3, [r2, #0]
 800e788:	2750      	movs	r7, #80	; 0x50
 800e78a:	e70c      	b.n	800e5a6 <__gethex+0x12a>
 800e78c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d1f2      	bne.n	800e778 <__gethex+0x2fc>
 800e792:	e7d8      	b.n	800e746 <__gethex+0x2ca>
 800e794:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e796:	2b00      	cmp	r3, #0
 800e798:	d1d5      	bne.n	800e746 <__gethex+0x2ca>
 800e79a:	e7ed      	b.n	800e778 <__gethex+0x2fc>
 800e79c:	1e6f      	subs	r7, r5, #1
 800e79e:	f1ba 0f00 	cmp.w	sl, #0
 800e7a2:	d131      	bne.n	800e808 <__gethex+0x38c>
 800e7a4:	b127      	cbz	r7, 800e7b0 <__gethex+0x334>
 800e7a6:	4639      	mov	r1, r7
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	f7fe f889 	bl	800c8c0 <__any_on>
 800e7ae:	4682      	mov	sl, r0
 800e7b0:	117b      	asrs	r3, r7, #5
 800e7b2:	2101      	movs	r1, #1
 800e7b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e7b8:	f007 071f 	and.w	r7, r7, #31
 800e7bc:	fa01 f707 	lsl.w	r7, r1, r7
 800e7c0:	421f      	tst	r7, r3
 800e7c2:	4629      	mov	r1, r5
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	bf18      	it	ne
 800e7c8:	f04a 0a02 	orrne.w	sl, sl, #2
 800e7cc:	1b76      	subs	r6, r6, r5
 800e7ce:	f7ff fdee 	bl	800e3ae <rshift>
 800e7d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e7d6:	2702      	movs	r7, #2
 800e7d8:	f1ba 0f00 	cmp.w	sl, #0
 800e7dc:	d048      	beq.n	800e870 <__gethex+0x3f4>
 800e7de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e7e2:	2b02      	cmp	r3, #2
 800e7e4:	d015      	beq.n	800e812 <__gethex+0x396>
 800e7e6:	2b03      	cmp	r3, #3
 800e7e8:	d017      	beq.n	800e81a <__gethex+0x39e>
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	d109      	bne.n	800e802 <__gethex+0x386>
 800e7ee:	f01a 0f02 	tst.w	sl, #2
 800e7f2:	d006      	beq.n	800e802 <__gethex+0x386>
 800e7f4:	f8d9 0000 	ldr.w	r0, [r9]
 800e7f8:	ea4a 0a00 	orr.w	sl, sl, r0
 800e7fc:	f01a 0f01 	tst.w	sl, #1
 800e800:	d10e      	bne.n	800e820 <__gethex+0x3a4>
 800e802:	f047 0710 	orr.w	r7, r7, #16
 800e806:	e033      	b.n	800e870 <__gethex+0x3f4>
 800e808:	f04f 0a01 	mov.w	sl, #1
 800e80c:	e7d0      	b.n	800e7b0 <__gethex+0x334>
 800e80e:	2701      	movs	r7, #1
 800e810:	e7e2      	b.n	800e7d8 <__gethex+0x35c>
 800e812:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e814:	f1c3 0301 	rsb	r3, r3, #1
 800e818:	9315      	str	r3, [sp, #84]	; 0x54
 800e81a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d0f0      	beq.n	800e802 <__gethex+0x386>
 800e820:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e824:	f104 0314 	add.w	r3, r4, #20
 800e828:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e82c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e830:	f04f 0c00 	mov.w	ip, #0
 800e834:	4618      	mov	r0, r3
 800e836:	f853 2b04 	ldr.w	r2, [r3], #4
 800e83a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e83e:	d01c      	beq.n	800e87a <__gethex+0x3fe>
 800e840:	3201      	adds	r2, #1
 800e842:	6002      	str	r2, [r0, #0]
 800e844:	2f02      	cmp	r7, #2
 800e846:	f104 0314 	add.w	r3, r4, #20
 800e84a:	d13f      	bne.n	800e8cc <__gethex+0x450>
 800e84c:	f8d8 2000 	ldr.w	r2, [r8]
 800e850:	3a01      	subs	r2, #1
 800e852:	42b2      	cmp	r2, r6
 800e854:	d10a      	bne.n	800e86c <__gethex+0x3f0>
 800e856:	1171      	asrs	r1, r6, #5
 800e858:	2201      	movs	r2, #1
 800e85a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e85e:	f006 061f 	and.w	r6, r6, #31
 800e862:	fa02 f606 	lsl.w	r6, r2, r6
 800e866:	421e      	tst	r6, r3
 800e868:	bf18      	it	ne
 800e86a:	4617      	movne	r7, r2
 800e86c:	f047 0720 	orr.w	r7, r7, #32
 800e870:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e872:	601c      	str	r4, [r3, #0]
 800e874:	9b04      	ldr	r3, [sp, #16]
 800e876:	601d      	str	r5, [r3, #0]
 800e878:	e695      	b.n	800e5a6 <__gethex+0x12a>
 800e87a:	4299      	cmp	r1, r3
 800e87c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e880:	d8d8      	bhi.n	800e834 <__gethex+0x3b8>
 800e882:	68a3      	ldr	r3, [r4, #8]
 800e884:	459b      	cmp	fp, r3
 800e886:	db19      	blt.n	800e8bc <__gethex+0x440>
 800e888:	6861      	ldr	r1, [r4, #4]
 800e88a:	ee18 0a10 	vmov	r0, s16
 800e88e:	3101      	adds	r1, #1
 800e890:	f7fd fbc4 	bl	800c01c <_Balloc>
 800e894:	4681      	mov	r9, r0
 800e896:	b918      	cbnz	r0, 800e8a0 <__gethex+0x424>
 800e898:	4b1a      	ldr	r3, [pc, #104]	; (800e904 <__gethex+0x488>)
 800e89a:	4602      	mov	r2, r0
 800e89c:	2184      	movs	r1, #132	; 0x84
 800e89e:	e6a8      	b.n	800e5f2 <__gethex+0x176>
 800e8a0:	6922      	ldr	r2, [r4, #16]
 800e8a2:	3202      	adds	r2, #2
 800e8a4:	f104 010c 	add.w	r1, r4, #12
 800e8a8:	0092      	lsls	r2, r2, #2
 800e8aa:	300c      	adds	r0, #12
 800e8ac:	f7fd fba8 	bl	800c000 <memcpy>
 800e8b0:	4621      	mov	r1, r4
 800e8b2:	ee18 0a10 	vmov	r0, s16
 800e8b6:	f7fd fbd6 	bl	800c066 <_Bfree>
 800e8ba:	464c      	mov	r4, r9
 800e8bc:	6923      	ldr	r3, [r4, #16]
 800e8be:	1c5a      	adds	r2, r3, #1
 800e8c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e8c4:	6122      	str	r2, [r4, #16]
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	615a      	str	r2, [r3, #20]
 800e8ca:	e7bb      	b.n	800e844 <__gethex+0x3c8>
 800e8cc:	6922      	ldr	r2, [r4, #16]
 800e8ce:	455a      	cmp	r2, fp
 800e8d0:	dd0b      	ble.n	800e8ea <__gethex+0x46e>
 800e8d2:	2101      	movs	r1, #1
 800e8d4:	4620      	mov	r0, r4
 800e8d6:	f7ff fd6a 	bl	800e3ae <rshift>
 800e8da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e8de:	3501      	adds	r5, #1
 800e8e0:	42ab      	cmp	r3, r5
 800e8e2:	f6ff aed0 	blt.w	800e686 <__gethex+0x20a>
 800e8e6:	2701      	movs	r7, #1
 800e8e8:	e7c0      	b.n	800e86c <__gethex+0x3f0>
 800e8ea:	f016 061f 	ands.w	r6, r6, #31
 800e8ee:	d0fa      	beq.n	800e8e6 <__gethex+0x46a>
 800e8f0:	4453      	add	r3, sl
 800e8f2:	f1c6 0620 	rsb	r6, r6, #32
 800e8f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e8fa:	f7fd fc4d 	bl	800c198 <__hi0bits>
 800e8fe:	42b0      	cmp	r0, r6
 800e900:	dbe7      	blt.n	800e8d2 <__gethex+0x456>
 800e902:	e7f0      	b.n	800e8e6 <__gethex+0x46a>
 800e904:	08010122 	.word	0x08010122

0800e908 <L_shift>:
 800e908:	f1c2 0208 	rsb	r2, r2, #8
 800e90c:	0092      	lsls	r2, r2, #2
 800e90e:	b570      	push	{r4, r5, r6, lr}
 800e910:	f1c2 0620 	rsb	r6, r2, #32
 800e914:	6843      	ldr	r3, [r0, #4]
 800e916:	6804      	ldr	r4, [r0, #0]
 800e918:	fa03 f506 	lsl.w	r5, r3, r6
 800e91c:	432c      	orrs	r4, r5
 800e91e:	40d3      	lsrs	r3, r2
 800e920:	6004      	str	r4, [r0, #0]
 800e922:	f840 3f04 	str.w	r3, [r0, #4]!
 800e926:	4288      	cmp	r0, r1
 800e928:	d3f4      	bcc.n	800e914 <L_shift+0xc>
 800e92a:	bd70      	pop	{r4, r5, r6, pc}

0800e92c <__match>:
 800e92c:	b530      	push	{r4, r5, lr}
 800e92e:	6803      	ldr	r3, [r0, #0]
 800e930:	3301      	adds	r3, #1
 800e932:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e936:	b914      	cbnz	r4, 800e93e <__match+0x12>
 800e938:	6003      	str	r3, [r0, #0]
 800e93a:	2001      	movs	r0, #1
 800e93c:	bd30      	pop	{r4, r5, pc}
 800e93e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e942:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e946:	2d19      	cmp	r5, #25
 800e948:	bf98      	it	ls
 800e94a:	3220      	addls	r2, #32
 800e94c:	42a2      	cmp	r2, r4
 800e94e:	d0f0      	beq.n	800e932 <__match+0x6>
 800e950:	2000      	movs	r0, #0
 800e952:	e7f3      	b.n	800e93c <__match+0x10>

0800e954 <__hexnan>:
 800e954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e958:	680b      	ldr	r3, [r1, #0]
 800e95a:	115e      	asrs	r6, r3, #5
 800e95c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e960:	f013 031f 	ands.w	r3, r3, #31
 800e964:	b087      	sub	sp, #28
 800e966:	bf18      	it	ne
 800e968:	3604      	addne	r6, #4
 800e96a:	2500      	movs	r5, #0
 800e96c:	1f37      	subs	r7, r6, #4
 800e96e:	4690      	mov	r8, r2
 800e970:	6802      	ldr	r2, [r0, #0]
 800e972:	9301      	str	r3, [sp, #4]
 800e974:	4682      	mov	sl, r0
 800e976:	f846 5c04 	str.w	r5, [r6, #-4]
 800e97a:	46b9      	mov	r9, r7
 800e97c:	463c      	mov	r4, r7
 800e97e:	9502      	str	r5, [sp, #8]
 800e980:	46ab      	mov	fp, r5
 800e982:	7851      	ldrb	r1, [r2, #1]
 800e984:	1c53      	adds	r3, r2, #1
 800e986:	9303      	str	r3, [sp, #12]
 800e988:	b341      	cbz	r1, 800e9dc <__hexnan+0x88>
 800e98a:	4608      	mov	r0, r1
 800e98c:	9205      	str	r2, [sp, #20]
 800e98e:	9104      	str	r1, [sp, #16]
 800e990:	f7ff fd5f 	bl	800e452 <__hexdig_fun>
 800e994:	2800      	cmp	r0, #0
 800e996:	d14f      	bne.n	800ea38 <__hexnan+0xe4>
 800e998:	9904      	ldr	r1, [sp, #16]
 800e99a:	9a05      	ldr	r2, [sp, #20]
 800e99c:	2920      	cmp	r1, #32
 800e99e:	d818      	bhi.n	800e9d2 <__hexnan+0x7e>
 800e9a0:	9b02      	ldr	r3, [sp, #8]
 800e9a2:	459b      	cmp	fp, r3
 800e9a4:	dd13      	ble.n	800e9ce <__hexnan+0x7a>
 800e9a6:	454c      	cmp	r4, r9
 800e9a8:	d206      	bcs.n	800e9b8 <__hexnan+0x64>
 800e9aa:	2d07      	cmp	r5, #7
 800e9ac:	dc04      	bgt.n	800e9b8 <__hexnan+0x64>
 800e9ae:	462a      	mov	r2, r5
 800e9b0:	4649      	mov	r1, r9
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	f7ff ffa8 	bl	800e908 <L_shift>
 800e9b8:	4544      	cmp	r4, r8
 800e9ba:	d950      	bls.n	800ea5e <__hexnan+0x10a>
 800e9bc:	2300      	movs	r3, #0
 800e9be:	f1a4 0904 	sub.w	r9, r4, #4
 800e9c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800e9c6:	f8cd b008 	str.w	fp, [sp, #8]
 800e9ca:	464c      	mov	r4, r9
 800e9cc:	461d      	mov	r5, r3
 800e9ce:	9a03      	ldr	r2, [sp, #12]
 800e9d0:	e7d7      	b.n	800e982 <__hexnan+0x2e>
 800e9d2:	2929      	cmp	r1, #41	; 0x29
 800e9d4:	d156      	bne.n	800ea84 <__hexnan+0x130>
 800e9d6:	3202      	adds	r2, #2
 800e9d8:	f8ca 2000 	str.w	r2, [sl]
 800e9dc:	f1bb 0f00 	cmp.w	fp, #0
 800e9e0:	d050      	beq.n	800ea84 <__hexnan+0x130>
 800e9e2:	454c      	cmp	r4, r9
 800e9e4:	d206      	bcs.n	800e9f4 <__hexnan+0xa0>
 800e9e6:	2d07      	cmp	r5, #7
 800e9e8:	dc04      	bgt.n	800e9f4 <__hexnan+0xa0>
 800e9ea:	462a      	mov	r2, r5
 800e9ec:	4649      	mov	r1, r9
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f7ff ff8a 	bl	800e908 <L_shift>
 800e9f4:	4544      	cmp	r4, r8
 800e9f6:	d934      	bls.n	800ea62 <__hexnan+0x10e>
 800e9f8:	f1a8 0204 	sub.w	r2, r8, #4
 800e9fc:	4623      	mov	r3, r4
 800e9fe:	f853 1b04 	ldr.w	r1, [r3], #4
 800ea02:	f842 1f04 	str.w	r1, [r2, #4]!
 800ea06:	429f      	cmp	r7, r3
 800ea08:	d2f9      	bcs.n	800e9fe <__hexnan+0xaa>
 800ea0a:	1b3b      	subs	r3, r7, r4
 800ea0c:	f023 0303 	bic.w	r3, r3, #3
 800ea10:	3304      	adds	r3, #4
 800ea12:	3401      	adds	r4, #1
 800ea14:	3e03      	subs	r6, #3
 800ea16:	42b4      	cmp	r4, r6
 800ea18:	bf88      	it	hi
 800ea1a:	2304      	movhi	r3, #4
 800ea1c:	4443      	add	r3, r8
 800ea1e:	2200      	movs	r2, #0
 800ea20:	f843 2b04 	str.w	r2, [r3], #4
 800ea24:	429f      	cmp	r7, r3
 800ea26:	d2fb      	bcs.n	800ea20 <__hexnan+0xcc>
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	b91b      	cbnz	r3, 800ea34 <__hexnan+0xe0>
 800ea2c:	4547      	cmp	r7, r8
 800ea2e:	d127      	bne.n	800ea80 <__hexnan+0x12c>
 800ea30:	2301      	movs	r3, #1
 800ea32:	603b      	str	r3, [r7, #0]
 800ea34:	2005      	movs	r0, #5
 800ea36:	e026      	b.n	800ea86 <__hexnan+0x132>
 800ea38:	3501      	adds	r5, #1
 800ea3a:	2d08      	cmp	r5, #8
 800ea3c:	f10b 0b01 	add.w	fp, fp, #1
 800ea40:	dd06      	ble.n	800ea50 <__hexnan+0xfc>
 800ea42:	4544      	cmp	r4, r8
 800ea44:	d9c3      	bls.n	800e9ce <__hexnan+0x7a>
 800ea46:	2300      	movs	r3, #0
 800ea48:	f844 3c04 	str.w	r3, [r4, #-4]
 800ea4c:	2501      	movs	r5, #1
 800ea4e:	3c04      	subs	r4, #4
 800ea50:	6822      	ldr	r2, [r4, #0]
 800ea52:	f000 000f 	and.w	r0, r0, #15
 800ea56:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ea5a:	6022      	str	r2, [r4, #0]
 800ea5c:	e7b7      	b.n	800e9ce <__hexnan+0x7a>
 800ea5e:	2508      	movs	r5, #8
 800ea60:	e7b5      	b.n	800e9ce <__hexnan+0x7a>
 800ea62:	9b01      	ldr	r3, [sp, #4]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d0df      	beq.n	800ea28 <__hexnan+0xd4>
 800ea68:	f04f 32ff 	mov.w	r2, #4294967295
 800ea6c:	f1c3 0320 	rsb	r3, r3, #32
 800ea70:	fa22 f303 	lsr.w	r3, r2, r3
 800ea74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ea78:	401a      	ands	r2, r3
 800ea7a:	f846 2c04 	str.w	r2, [r6, #-4]
 800ea7e:	e7d3      	b.n	800ea28 <__hexnan+0xd4>
 800ea80:	3f04      	subs	r7, #4
 800ea82:	e7d1      	b.n	800ea28 <__hexnan+0xd4>
 800ea84:	2004      	movs	r0, #4
 800ea86:	b007      	add	sp, #28
 800ea88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ea8c <memmove>:
 800ea8c:	4288      	cmp	r0, r1
 800ea8e:	b510      	push	{r4, lr}
 800ea90:	eb01 0402 	add.w	r4, r1, r2
 800ea94:	d902      	bls.n	800ea9c <memmove+0x10>
 800ea96:	4284      	cmp	r4, r0
 800ea98:	4623      	mov	r3, r4
 800ea9a:	d807      	bhi.n	800eaac <memmove+0x20>
 800ea9c:	1e43      	subs	r3, r0, #1
 800ea9e:	42a1      	cmp	r1, r4
 800eaa0:	d008      	beq.n	800eab4 <memmove+0x28>
 800eaa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eaa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eaaa:	e7f8      	b.n	800ea9e <memmove+0x12>
 800eaac:	4402      	add	r2, r0
 800eaae:	4601      	mov	r1, r0
 800eab0:	428a      	cmp	r2, r1
 800eab2:	d100      	bne.n	800eab6 <memmove+0x2a>
 800eab4:	bd10      	pop	{r4, pc}
 800eab6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eaba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eabe:	e7f7      	b.n	800eab0 <memmove+0x24>

0800eac0 <nan>:
 800eac0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800eac8 <nan+0x8>
 800eac4:	4770      	bx	lr
 800eac6:	bf00      	nop
 800eac8:	00000000 	.word	0x00000000
 800eacc:	7ff80000 	.word	0x7ff80000

0800ead0 <__sprint_r>:
 800ead0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ead4:	6893      	ldr	r3, [r2, #8]
 800ead6:	4680      	mov	r8, r0
 800ead8:	460f      	mov	r7, r1
 800eada:	4614      	mov	r4, r2
 800eadc:	b91b      	cbnz	r3, 800eae6 <__sprint_r+0x16>
 800eade:	6053      	str	r3, [r2, #4]
 800eae0:	4618      	mov	r0, r3
 800eae2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eae6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800eae8:	049d      	lsls	r5, r3, #18
 800eaea:	d520      	bpl.n	800eb2e <__sprint_r+0x5e>
 800eaec:	6815      	ldr	r5, [r2, #0]
 800eaee:	3508      	adds	r5, #8
 800eaf0:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800eaf4:	f04f 0900 	mov.w	r9, #0
 800eaf8:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800eafc:	45ca      	cmp	sl, r9
 800eafe:	dc0b      	bgt.n	800eb18 <__sprint_r+0x48>
 800eb00:	68a3      	ldr	r3, [r4, #8]
 800eb02:	f026 0003 	bic.w	r0, r6, #3
 800eb06:	1a18      	subs	r0, r3, r0
 800eb08:	60a0      	str	r0, [r4, #8]
 800eb0a:	3508      	adds	r5, #8
 800eb0c:	2800      	cmp	r0, #0
 800eb0e:	d1ef      	bne.n	800eaf0 <__sprint_r+0x20>
 800eb10:	2300      	movs	r3, #0
 800eb12:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800eb16:	e7e4      	b.n	800eae2 <__sprint_r+0x12>
 800eb18:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800eb1c:	463a      	mov	r2, r7
 800eb1e:	4640      	mov	r0, r8
 800eb20:	f000 fdd5 	bl	800f6ce <_fputwc_r>
 800eb24:	1c43      	adds	r3, r0, #1
 800eb26:	d0f3      	beq.n	800eb10 <__sprint_r+0x40>
 800eb28:	f109 0901 	add.w	r9, r9, #1
 800eb2c:	e7e6      	b.n	800eafc <__sprint_r+0x2c>
 800eb2e:	f000 fdf9 	bl	800f724 <__sfvwrite_r>
 800eb32:	e7ed      	b.n	800eb10 <__sprint_r+0x40>

0800eb34 <_vfiprintf_r>:
 800eb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb38:	ed2d 8b02 	vpush	{d8}
 800eb3c:	b0b9      	sub	sp, #228	; 0xe4
 800eb3e:	460f      	mov	r7, r1
 800eb40:	9201      	str	r2, [sp, #4]
 800eb42:	461d      	mov	r5, r3
 800eb44:	461c      	mov	r4, r3
 800eb46:	4681      	mov	r9, r0
 800eb48:	b118      	cbz	r0, 800eb52 <_vfiprintf_r+0x1e>
 800eb4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800eb4c:	b90b      	cbnz	r3, 800eb52 <_vfiprintf_r+0x1e>
 800eb4e:	f7ff fbd5 	bl	800e2fc <__sinit>
 800eb52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb54:	07d8      	lsls	r0, r3, #31
 800eb56:	d405      	bmi.n	800eb64 <_vfiprintf_r+0x30>
 800eb58:	89bb      	ldrh	r3, [r7, #12]
 800eb5a:	0599      	lsls	r1, r3, #22
 800eb5c:	d402      	bmi.n	800eb64 <_vfiprintf_r+0x30>
 800eb5e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800eb60:	f7fd fa0e 	bl	800bf80 <__retarget_lock_acquire_recursive>
 800eb64:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800eb68:	049a      	lsls	r2, r3, #18
 800eb6a:	d406      	bmi.n	800eb7a <_vfiprintf_r+0x46>
 800eb6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800eb70:	81bb      	strh	r3, [r7, #12]
 800eb72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eb78:	667b      	str	r3, [r7, #100]	; 0x64
 800eb7a:	89bb      	ldrh	r3, [r7, #12]
 800eb7c:	071e      	lsls	r6, r3, #28
 800eb7e:	d501      	bpl.n	800eb84 <_vfiprintf_r+0x50>
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	b9bb      	cbnz	r3, 800ebb4 <_vfiprintf_r+0x80>
 800eb84:	4639      	mov	r1, r7
 800eb86:	4648      	mov	r0, r9
 800eb88:	f000 fcaa 	bl	800f4e0 <__swsetup_r>
 800eb8c:	b190      	cbz	r0, 800ebb4 <_vfiprintf_r+0x80>
 800eb8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb90:	07d8      	lsls	r0, r3, #31
 800eb92:	d508      	bpl.n	800eba6 <_vfiprintf_r+0x72>
 800eb94:	f04f 33ff 	mov.w	r3, #4294967295
 800eb98:	9302      	str	r3, [sp, #8]
 800eb9a:	9802      	ldr	r0, [sp, #8]
 800eb9c:	b039      	add	sp, #228	; 0xe4
 800eb9e:	ecbd 8b02 	vpop	{d8}
 800eba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eba6:	89bb      	ldrh	r3, [r7, #12]
 800eba8:	0599      	lsls	r1, r3, #22
 800ebaa:	d4f3      	bmi.n	800eb94 <_vfiprintf_r+0x60>
 800ebac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ebae:	f7fd f9e8 	bl	800bf82 <__retarget_lock_release_recursive>
 800ebb2:	e7ef      	b.n	800eb94 <_vfiprintf_r+0x60>
 800ebb4:	89bb      	ldrh	r3, [r7, #12]
 800ebb6:	f003 021a 	and.w	r2, r3, #26
 800ebba:	2a0a      	cmp	r2, #10
 800ebbc:	d116      	bne.n	800ebec <_vfiprintf_r+0xb8>
 800ebbe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ebc2:	2a00      	cmp	r2, #0
 800ebc4:	db12      	blt.n	800ebec <_vfiprintf_r+0xb8>
 800ebc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ebc8:	07d2      	lsls	r2, r2, #31
 800ebca:	d404      	bmi.n	800ebd6 <_vfiprintf_r+0xa2>
 800ebcc:	059e      	lsls	r6, r3, #22
 800ebce:	d402      	bmi.n	800ebd6 <_vfiprintf_r+0xa2>
 800ebd0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ebd2:	f7fd f9d6 	bl	800bf82 <__retarget_lock_release_recursive>
 800ebd6:	9a01      	ldr	r2, [sp, #4]
 800ebd8:	462b      	mov	r3, r5
 800ebda:	4639      	mov	r1, r7
 800ebdc:	4648      	mov	r0, r9
 800ebde:	b039      	add	sp, #228	; 0xe4
 800ebe0:	ecbd 8b02 	vpop	{d8}
 800ebe4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebe8:	f000 bc3a 	b.w	800f460 <__sbprintf>
 800ebec:	2300      	movs	r3, #0
 800ebee:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800ebf2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ebf6:	ae0f      	add	r6, sp, #60	; 0x3c
 800ebf8:	ee08 3a10 	vmov	s16, r3
 800ebfc:	960c      	str	r6, [sp, #48]	; 0x30
 800ebfe:	9307      	str	r3, [sp, #28]
 800ec00:	9302      	str	r3, [sp, #8]
 800ec02:	9b01      	ldr	r3, [sp, #4]
 800ec04:	461d      	mov	r5, r3
 800ec06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec0a:	b10a      	cbz	r2, 800ec10 <_vfiprintf_r+0xdc>
 800ec0c:	2a25      	cmp	r2, #37	; 0x25
 800ec0e:	d1f9      	bne.n	800ec04 <_vfiprintf_r+0xd0>
 800ec10:	9b01      	ldr	r3, [sp, #4]
 800ec12:	ebb5 0803 	subs.w	r8, r5, r3
 800ec16:	d00d      	beq.n	800ec34 <_vfiprintf_r+0x100>
 800ec18:	e9c6 3800 	strd	r3, r8, [r6]
 800ec1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec1e:	4443      	add	r3, r8
 800ec20:	930e      	str	r3, [sp, #56]	; 0x38
 800ec22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec24:	3301      	adds	r3, #1
 800ec26:	2b07      	cmp	r3, #7
 800ec28:	930d      	str	r3, [sp, #52]	; 0x34
 800ec2a:	dc75      	bgt.n	800ed18 <_vfiprintf_r+0x1e4>
 800ec2c:	3608      	adds	r6, #8
 800ec2e:	9b02      	ldr	r3, [sp, #8]
 800ec30:	4443      	add	r3, r8
 800ec32:	9302      	str	r3, [sp, #8]
 800ec34:	782b      	ldrb	r3, [r5, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	f000 83d6 	beq.w	800f3e8 <_vfiprintf_r+0x8b4>
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	f04f 31ff 	mov.w	r1, #4294967295
 800ec42:	1c6a      	adds	r2, r5, #1
 800ec44:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800ec48:	9100      	str	r1, [sp, #0]
 800ec4a:	9303      	str	r3, [sp, #12]
 800ec4c:	469a      	mov	sl, r3
 800ec4e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ec52:	9201      	str	r2, [sp, #4]
 800ec54:	f1a3 0220 	sub.w	r2, r3, #32
 800ec58:	2a5a      	cmp	r2, #90	; 0x5a
 800ec5a:	f200 831f 	bhi.w	800f29c <_vfiprintf_r+0x768>
 800ec5e:	e8df f012 	tbh	[pc, r2, lsl #1]
 800ec62:	009b      	.short	0x009b
 800ec64:	031d031d 	.word	0x031d031d
 800ec68:	031d00a3 	.word	0x031d00a3
 800ec6c:	031d031d 	.word	0x031d031d
 800ec70:	031d0082 	.word	0x031d0082
 800ec74:	00a6031d 	.word	0x00a6031d
 800ec78:	031d00b0 	.word	0x031d00b0
 800ec7c:	00b200ad 	.word	0x00b200ad
 800ec80:	00cd031d 	.word	0x00cd031d
 800ec84:	00d000d0 	.word	0x00d000d0
 800ec88:	00d000d0 	.word	0x00d000d0
 800ec8c:	00d000d0 	.word	0x00d000d0
 800ec90:	00d000d0 	.word	0x00d000d0
 800ec94:	031d00d0 	.word	0x031d00d0
 800ec98:	031d031d 	.word	0x031d031d
 800ec9c:	031d031d 	.word	0x031d031d
 800eca0:	031d031d 	.word	0x031d031d
 800eca4:	031d031d 	.word	0x031d031d
 800eca8:	010800fa 	.word	0x010800fa
 800ecac:	031d031d 	.word	0x031d031d
 800ecb0:	031d031d 	.word	0x031d031d
 800ecb4:	031d031d 	.word	0x031d031d
 800ecb8:	031d031d 	.word	0x031d031d
 800ecbc:	031d031d 	.word	0x031d031d
 800ecc0:	031d0158 	.word	0x031d0158
 800ecc4:	031d031d 	.word	0x031d031d
 800ecc8:	031d01a1 	.word	0x031d01a1
 800eccc:	031d027e 	.word	0x031d027e
 800ecd0:	029e031d 	.word	0x029e031d
 800ecd4:	031d031d 	.word	0x031d031d
 800ecd8:	031d031d 	.word	0x031d031d
 800ecdc:	031d031d 	.word	0x031d031d
 800ece0:	031d031d 	.word	0x031d031d
 800ece4:	031d031d 	.word	0x031d031d
 800ece8:	010a00fa 	.word	0x010a00fa
 800ecec:	031d031d 	.word	0x031d031d
 800ecf0:	00e0031d 	.word	0x00e0031d
 800ecf4:	00f4010a 	.word	0x00f4010a
 800ecf8:	00ed031d 	.word	0x00ed031d
 800ecfc:	0136031d 	.word	0x0136031d
 800ed00:	018f015a 	.word	0x018f015a
 800ed04:	031d00f4 	.word	0x031d00f4
 800ed08:	009901a1 	.word	0x009901a1
 800ed0c:	031d0280 	.word	0x031d0280
 800ed10:	0065031d 	.word	0x0065031d
 800ed14:	0099031d 	.word	0x0099031d
 800ed18:	aa0c      	add	r2, sp, #48	; 0x30
 800ed1a:	4639      	mov	r1, r7
 800ed1c:	4648      	mov	r0, r9
 800ed1e:	f7ff fed7 	bl	800ead0 <__sprint_r>
 800ed22:	2800      	cmp	r0, #0
 800ed24:	f040 833f 	bne.w	800f3a6 <_vfiprintf_r+0x872>
 800ed28:	ae0f      	add	r6, sp, #60	; 0x3c
 800ed2a:	e780      	b.n	800ec2e <_vfiprintf_r+0xfa>
 800ed2c:	4a9c      	ldr	r2, [pc, #624]	; (800efa0 <_vfiprintf_r+0x46c>)
 800ed2e:	9205      	str	r2, [sp, #20]
 800ed30:	f01a 0220 	ands.w	r2, sl, #32
 800ed34:	f000 8235 	beq.w	800f1a2 <_vfiprintf_r+0x66e>
 800ed38:	3407      	adds	r4, #7
 800ed3a:	f024 0207 	bic.w	r2, r4, #7
 800ed3e:	4693      	mov	fp, r2
 800ed40:	6855      	ldr	r5, [r2, #4]
 800ed42:	f85b 4b08 	ldr.w	r4, [fp], #8
 800ed46:	f01a 0f01 	tst.w	sl, #1
 800ed4a:	d009      	beq.n	800ed60 <_vfiprintf_r+0x22c>
 800ed4c:	ea54 0205 	orrs.w	r2, r4, r5
 800ed50:	bf1f      	itttt	ne
 800ed52:	2230      	movne	r2, #48	; 0x30
 800ed54:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800ed58:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 800ed5c:	f04a 0a02 	orrne.w	sl, sl, #2
 800ed60:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800ed64:	e11a      	b.n	800ef9c <_vfiprintf_r+0x468>
 800ed66:	4648      	mov	r0, r9
 800ed68:	f7fd f904 	bl	800bf74 <_localeconv_r>
 800ed6c:	6843      	ldr	r3, [r0, #4]
 800ed6e:	4618      	mov	r0, r3
 800ed70:	ee08 3a10 	vmov	s16, r3
 800ed74:	f7f1 fa34 	bl	80001e0 <strlen>
 800ed78:	9007      	str	r0, [sp, #28]
 800ed7a:	4648      	mov	r0, r9
 800ed7c:	f7fd f8fa 	bl	800bf74 <_localeconv_r>
 800ed80:	6883      	ldr	r3, [r0, #8]
 800ed82:	9306      	str	r3, [sp, #24]
 800ed84:	9b07      	ldr	r3, [sp, #28]
 800ed86:	b12b      	cbz	r3, 800ed94 <_vfiprintf_r+0x260>
 800ed88:	9b06      	ldr	r3, [sp, #24]
 800ed8a:	b11b      	cbz	r3, 800ed94 <_vfiprintf_r+0x260>
 800ed8c:	781b      	ldrb	r3, [r3, #0]
 800ed8e:	b10b      	cbz	r3, 800ed94 <_vfiprintf_r+0x260>
 800ed90:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800ed94:	9a01      	ldr	r2, [sp, #4]
 800ed96:	e75a      	b.n	800ec4e <_vfiprintf_r+0x11a>
 800ed98:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d1f9      	bne.n	800ed94 <_vfiprintf_r+0x260>
 800eda0:	2320      	movs	r3, #32
 800eda2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800eda6:	e7f5      	b.n	800ed94 <_vfiprintf_r+0x260>
 800eda8:	f04a 0a01 	orr.w	sl, sl, #1
 800edac:	e7f2      	b.n	800ed94 <_vfiprintf_r+0x260>
 800edae:	f854 3b04 	ldr.w	r3, [r4], #4
 800edb2:	9303      	str	r3, [sp, #12]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	daed      	bge.n	800ed94 <_vfiprintf_r+0x260>
 800edb8:	425b      	negs	r3, r3
 800edba:	9303      	str	r3, [sp, #12]
 800edbc:	f04a 0a04 	orr.w	sl, sl, #4
 800edc0:	e7e8      	b.n	800ed94 <_vfiprintf_r+0x260>
 800edc2:	232b      	movs	r3, #43	; 0x2b
 800edc4:	e7ed      	b.n	800eda2 <_vfiprintf_r+0x26e>
 800edc6:	9a01      	ldr	r2, [sp, #4]
 800edc8:	f812 3b01 	ldrb.w	r3, [r2], #1
 800edcc:	2b2a      	cmp	r3, #42	; 0x2a
 800edce:	d112      	bne.n	800edf6 <_vfiprintf_r+0x2c2>
 800edd0:	f854 0b04 	ldr.w	r0, [r4], #4
 800edd4:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800edd8:	e9cd 3200 	strd	r3, r2, [sp]
 800eddc:	e7da      	b.n	800ed94 <_vfiprintf_r+0x260>
 800edde:	9b00      	ldr	r3, [sp, #0]
 800ede0:	200a      	movs	r0, #10
 800ede2:	fb00 1303 	mla	r3, r0, r3, r1
 800ede6:	9300      	str	r3, [sp, #0]
 800ede8:	f812 3b01 	ldrb.w	r3, [r2], #1
 800edec:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800edf0:	2909      	cmp	r1, #9
 800edf2:	d9f4      	bls.n	800edde <_vfiprintf_r+0x2aa>
 800edf4:	e72d      	b.n	800ec52 <_vfiprintf_r+0x11e>
 800edf6:	2100      	movs	r1, #0
 800edf8:	9100      	str	r1, [sp, #0]
 800edfa:	e7f7      	b.n	800edec <_vfiprintf_r+0x2b8>
 800edfc:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800ee00:	e7c8      	b.n	800ed94 <_vfiprintf_r+0x260>
 800ee02:	2100      	movs	r1, #0
 800ee04:	9a01      	ldr	r2, [sp, #4]
 800ee06:	9103      	str	r1, [sp, #12]
 800ee08:	9903      	ldr	r1, [sp, #12]
 800ee0a:	3b30      	subs	r3, #48	; 0x30
 800ee0c:	200a      	movs	r0, #10
 800ee0e:	fb00 3301 	mla	r3, r0, r1, r3
 800ee12:	9303      	str	r3, [sp, #12]
 800ee14:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ee18:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ee1c:	2909      	cmp	r1, #9
 800ee1e:	d9f3      	bls.n	800ee08 <_vfiprintf_r+0x2d4>
 800ee20:	e717      	b.n	800ec52 <_vfiprintf_r+0x11e>
 800ee22:	9b01      	ldr	r3, [sp, #4]
 800ee24:	781b      	ldrb	r3, [r3, #0]
 800ee26:	2b68      	cmp	r3, #104	; 0x68
 800ee28:	bf01      	itttt	eq
 800ee2a:	9b01      	ldreq	r3, [sp, #4]
 800ee2c:	3301      	addeq	r3, #1
 800ee2e:	9301      	streq	r3, [sp, #4]
 800ee30:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800ee34:	bf18      	it	ne
 800ee36:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800ee3a:	e7ab      	b.n	800ed94 <_vfiprintf_r+0x260>
 800ee3c:	9b01      	ldr	r3, [sp, #4]
 800ee3e:	781b      	ldrb	r3, [r3, #0]
 800ee40:	2b6c      	cmp	r3, #108	; 0x6c
 800ee42:	d105      	bne.n	800ee50 <_vfiprintf_r+0x31c>
 800ee44:	9b01      	ldr	r3, [sp, #4]
 800ee46:	3301      	adds	r3, #1
 800ee48:	9301      	str	r3, [sp, #4]
 800ee4a:	f04a 0a20 	orr.w	sl, sl, #32
 800ee4e:	e7a1      	b.n	800ed94 <_vfiprintf_r+0x260>
 800ee50:	f04a 0a10 	orr.w	sl, sl, #16
 800ee54:	e79e      	b.n	800ed94 <_vfiprintf_r+0x260>
 800ee56:	46a3      	mov	fp, r4
 800ee58:	2100      	movs	r1, #0
 800ee5a:	f85b 3b04 	ldr.w	r3, [fp], #4
 800ee5e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800ee62:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800ee66:	2301      	movs	r3, #1
 800ee68:	9300      	str	r3, [sp, #0]
 800ee6a:	460d      	mov	r5, r1
 800ee6c:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 800ee70:	e0ad      	b.n	800efce <_vfiprintf_r+0x49a>
 800ee72:	f04a 0a10 	orr.w	sl, sl, #16
 800ee76:	f01a 0f20 	tst.w	sl, #32
 800ee7a:	d011      	beq.n	800eea0 <_vfiprintf_r+0x36c>
 800ee7c:	3407      	adds	r4, #7
 800ee7e:	f024 0307 	bic.w	r3, r4, #7
 800ee82:	469b      	mov	fp, r3
 800ee84:	685d      	ldr	r5, [r3, #4]
 800ee86:	f85b 4b08 	ldr.w	r4, [fp], #8
 800ee8a:	2d00      	cmp	r5, #0
 800ee8c:	da06      	bge.n	800ee9c <_vfiprintf_r+0x368>
 800ee8e:	4264      	negs	r4, r4
 800ee90:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800ee94:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800ee98:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	e04a      	b.n	800ef36 <_vfiprintf_r+0x402>
 800eea0:	46a3      	mov	fp, r4
 800eea2:	f01a 0f10 	tst.w	sl, #16
 800eea6:	f85b 5b04 	ldr.w	r5, [fp], #4
 800eeaa:	d002      	beq.n	800eeb2 <_vfiprintf_r+0x37e>
 800eeac:	462c      	mov	r4, r5
 800eeae:	17ed      	asrs	r5, r5, #31
 800eeb0:	e7eb      	b.n	800ee8a <_vfiprintf_r+0x356>
 800eeb2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800eeb6:	d003      	beq.n	800eec0 <_vfiprintf_r+0x38c>
 800eeb8:	b22c      	sxth	r4, r5
 800eeba:	f345 35c0 	sbfx	r5, r5, #15, #1
 800eebe:	e7e4      	b.n	800ee8a <_vfiprintf_r+0x356>
 800eec0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800eec4:	d0f2      	beq.n	800eeac <_vfiprintf_r+0x378>
 800eec6:	b26c      	sxtb	r4, r5
 800eec8:	f345 15c0 	sbfx	r5, r5, #7, #1
 800eecc:	e7dd      	b.n	800ee8a <_vfiprintf_r+0x356>
 800eece:	f01a 0f20 	tst.w	sl, #32
 800eed2:	f104 0b04 	add.w	fp, r4, #4
 800eed6:	d007      	beq.n	800eee8 <_vfiprintf_r+0x3b4>
 800eed8:	9a02      	ldr	r2, [sp, #8]
 800eeda:	6823      	ldr	r3, [r4, #0]
 800eedc:	9902      	ldr	r1, [sp, #8]
 800eede:	17d2      	asrs	r2, r2, #31
 800eee0:	e9c3 1200 	strd	r1, r2, [r3]
 800eee4:	465c      	mov	r4, fp
 800eee6:	e68c      	b.n	800ec02 <_vfiprintf_r+0xce>
 800eee8:	f01a 0f10 	tst.w	sl, #16
 800eeec:	d003      	beq.n	800eef6 <_vfiprintf_r+0x3c2>
 800eeee:	6823      	ldr	r3, [r4, #0]
 800eef0:	9a02      	ldr	r2, [sp, #8]
 800eef2:	601a      	str	r2, [r3, #0]
 800eef4:	e7f6      	b.n	800eee4 <_vfiprintf_r+0x3b0>
 800eef6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800eefa:	d003      	beq.n	800ef04 <_vfiprintf_r+0x3d0>
 800eefc:	6823      	ldr	r3, [r4, #0]
 800eefe:	9a02      	ldr	r2, [sp, #8]
 800ef00:	801a      	strh	r2, [r3, #0]
 800ef02:	e7ef      	b.n	800eee4 <_vfiprintf_r+0x3b0>
 800ef04:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800ef08:	d0f1      	beq.n	800eeee <_vfiprintf_r+0x3ba>
 800ef0a:	6823      	ldr	r3, [r4, #0]
 800ef0c:	9a02      	ldr	r2, [sp, #8]
 800ef0e:	701a      	strb	r2, [r3, #0]
 800ef10:	e7e8      	b.n	800eee4 <_vfiprintf_r+0x3b0>
 800ef12:	f04a 0a10 	orr.w	sl, sl, #16
 800ef16:	f01a 0320 	ands.w	r3, sl, #32
 800ef1a:	d01f      	beq.n	800ef5c <_vfiprintf_r+0x428>
 800ef1c:	3407      	adds	r4, #7
 800ef1e:	f024 0307 	bic.w	r3, r4, #7
 800ef22:	469b      	mov	fp, r3
 800ef24:	685d      	ldr	r5, [r3, #4]
 800ef26:	f85b 4b08 	ldr.w	r4, [fp], #8
 800ef2a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800ef2e:	2300      	movs	r3, #0
 800ef30:	2200      	movs	r2, #0
 800ef32:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 800ef36:	9a00      	ldr	r2, [sp, #0]
 800ef38:	3201      	adds	r2, #1
 800ef3a:	f000 8262 	beq.w	800f402 <_vfiprintf_r+0x8ce>
 800ef3e:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800ef42:	9204      	str	r2, [sp, #16]
 800ef44:	ea54 0205 	orrs.w	r2, r4, r5
 800ef48:	f040 8261 	bne.w	800f40e <_vfiprintf_r+0x8da>
 800ef4c:	9a00      	ldr	r2, [sp, #0]
 800ef4e:	2a00      	cmp	r2, #0
 800ef50:	f000 8199 	beq.w	800f286 <_vfiprintf_r+0x752>
 800ef54:	2b01      	cmp	r3, #1
 800ef56:	f040 825d 	bne.w	800f414 <_vfiprintf_r+0x8e0>
 800ef5a:	e139      	b.n	800f1d0 <_vfiprintf_r+0x69c>
 800ef5c:	46a3      	mov	fp, r4
 800ef5e:	f01a 0510 	ands.w	r5, sl, #16
 800ef62:	f85b 4b04 	ldr.w	r4, [fp], #4
 800ef66:	d001      	beq.n	800ef6c <_vfiprintf_r+0x438>
 800ef68:	461d      	mov	r5, r3
 800ef6a:	e7de      	b.n	800ef2a <_vfiprintf_r+0x3f6>
 800ef6c:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800ef70:	d001      	beq.n	800ef76 <_vfiprintf_r+0x442>
 800ef72:	b2a4      	uxth	r4, r4
 800ef74:	e7d9      	b.n	800ef2a <_vfiprintf_r+0x3f6>
 800ef76:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800ef7a:	d0d6      	beq.n	800ef2a <_vfiprintf_r+0x3f6>
 800ef7c:	b2e4      	uxtb	r4, r4
 800ef7e:	e7f3      	b.n	800ef68 <_vfiprintf_r+0x434>
 800ef80:	2330      	movs	r3, #48	; 0x30
 800ef82:	46a3      	mov	fp, r4
 800ef84:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800ef88:	2378      	movs	r3, #120	; 0x78
 800ef8a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 800ef8e:	f85b 4b04 	ldr.w	r4, [fp], #4
 800ef92:	4b03      	ldr	r3, [pc, #12]	; (800efa0 <_vfiprintf_r+0x46c>)
 800ef94:	9305      	str	r3, [sp, #20]
 800ef96:	2500      	movs	r5, #0
 800ef98:	f04a 0a02 	orr.w	sl, sl, #2
 800ef9c:	2302      	movs	r3, #2
 800ef9e:	e7c7      	b.n	800ef30 <_vfiprintf_r+0x3fc>
 800efa0:	0800ffa8 	.word	0x0800ffa8
 800efa4:	9b00      	ldr	r3, [sp, #0]
 800efa6:	46a3      	mov	fp, r4
 800efa8:	2500      	movs	r5, #0
 800efaa:	1c5c      	adds	r4, r3, #1
 800efac:	f85b 8b04 	ldr.w	r8, [fp], #4
 800efb0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800efb4:	f000 80ce 	beq.w	800f154 <_vfiprintf_r+0x620>
 800efb8:	461a      	mov	r2, r3
 800efba:	4629      	mov	r1, r5
 800efbc:	4640      	mov	r0, r8
 800efbe:	f7f1 f917 	bl	80001f0 <memchr>
 800efc2:	2800      	cmp	r0, #0
 800efc4:	f000 8174 	beq.w	800f2b0 <_vfiprintf_r+0x77c>
 800efc8:	eba0 0308 	sub.w	r3, r0, r8
 800efcc:	9300      	str	r3, [sp, #0]
 800efce:	9b00      	ldr	r3, [sp, #0]
 800efd0:	42ab      	cmp	r3, r5
 800efd2:	bfb8      	it	lt
 800efd4:	462b      	movlt	r3, r5
 800efd6:	9304      	str	r3, [sp, #16]
 800efd8:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800efdc:	b113      	cbz	r3, 800efe4 <_vfiprintf_r+0x4b0>
 800efde:	9b04      	ldr	r3, [sp, #16]
 800efe0:	3301      	adds	r3, #1
 800efe2:	9304      	str	r3, [sp, #16]
 800efe4:	f01a 0302 	ands.w	r3, sl, #2
 800efe8:	9308      	str	r3, [sp, #32]
 800efea:	bf1e      	ittt	ne
 800efec:	9b04      	ldrne	r3, [sp, #16]
 800efee:	3302      	addne	r3, #2
 800eff0:	9304      	strne	r3, [sp, #16]
 800eff2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800eff6:	9309      	str	r3, [sp, #36]	; 0x24
 800eff8:	d11f      	bne.n	800f03a <_vfiprintf_r+0x506>
 800effa:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800effe:	1a9c      	subs	r4, r3, r2
 800f000:	2c00      	cmp	r4, #0
 800f002:	dd1a      	ble.n	800f03a <_vfiprintf_r+0x506>
 800f004:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800f008:	48aa      	ldr	r0, [pc, #680]	; (800f2b4 <_vfiprintf_r+0x780>)
 800f00a:	6030      	str	r0, [r6, #0]
 800f00c:	2c10      	cmp	r4, #16
 800f00e:	f103 0301 	add.w	r3, r3, #1
 800f012:	f106 0108 	add.w	r1, r6, #8
 800f016:	f300 8153 	bgt.w	800f2c0 <_vfiprintf_r+0x78c>
 800f01a:	6074      	str	r4, [r6, #4]
 800f01c:	2b07      	cmp	r3, #7
 800f01e:	4414      	add	r4, r2
 800f020:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800f024:	f340 815e 	ble.w	800f2e4 <_vfiprintf_r+0x7b0>
 800f028:	aa0c      	add	r2, sp, #48	; 0x30
 800f02a:	4639      	mov	r1, r7
 800f02c:	4648      	mov	r0, r9
 800f02e:	f7ff fd4f 	bl	800ead0 <__sprint_r>
 800f032:	2800      	cmp	r0, #0
 800f034:	f040 81b7 	bne.w	800f3a6 <_vfiprintf_r+0x872>
 800f038:	ae0f      	add	r6, sp, #60	; 0x3c
 800f03a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800f03e:	b173      	cbz	r3, 800f05e <_vfiprintf_r+0x52a>
 800f040:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 800f044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f046:	6032      	str	r2, [r6, #0]
 800f048:	2201      	movs	r2, #1
 800f04a:	6072      	str	r2, [r6, #4]
 800f04c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f04e:	3301      	adds	r3, #1
 800f050:	3201      	adds	r2, #1
 800f052:	2b07      	cmp	r3, #7
 800f054:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800f058:	f300 8146 	bgt.w	800f2e8 <_vfiprintf_r+0x7b4>
 800f05c:	3608      	adds	r6, #8
 800f05e:	9b08      	ldr	r3, [sp, #32]
 800f060:	b16b      	cbz	r3, 800f07e <_vfiprintf_r+0x54a>
 800f062:	aa0b      	add	r2, sp, #44	; 0x2c
 800f064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f066:	6032      	str	r2, [r6, #0]
 800f068:	2202      	movs	r2, #2
 800f06a:	6072      	str	r2, [r6, #4]
 800f06c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f06e:	3301      	adds	r3, #1
 800f070:	3202      	adds	r2, #2
 800f072:	2b07      	cmp	r3, #7
 800f074:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800f078:	f300 813f 	bgt.w	800f2fa <_vfiprintf_r+0x7c6>
 800f07c:	3608      	adds	r6, #8
 800f07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f080:	2b80      	cmp	r3, #128	; 0x80
 800f082:	d11f      	bne.n	800f0c4 <_vfiprintf_r+0x590>
 800f084:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f088:	1a9c      	subs	r4, r3, r2
 800f08a:	2c00      	cmp	r4, #0
 800f08c:	dd1a      	ble.n	800f0c4 <_vfiprintf_r+0x590>
 800f08e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800f092:	4889      	ldr	r0, [pc, #548]	; (800f2b8 <_vfiprintf_r+0x784>)
 800f094:	6030      	str	r0, [r6, #0]
 800f096:	2c10      	cmp	r4, #16
 800f098:	f103 0301 	add.w	r3, r3, #1
 800f09c:	f106 0108 	add.w	r1, r6, #8
 800f0a0:	f300 8134 	bgt.w	800f30c <_vfiprintf_r+0x7d8>
 800f0a4:	6074      	str	r4, [r6, #4]
 800f0a6:	2b07      	cmp	r3, #7
 800f0a8:	4414      	add	r4, r2
 800f0aa:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800f0ae:	f340 813f 	ble.w	800f330 <_vfiprintf_r+0x7fc>
 800f0b2:	aa0c      	add	r2, sp, #48	; 0x30
 800f0b4:	4639      	mov	r1, r7
 800f0b6:	4648      	mov	r0, r9
 800f0b8:	f7ff fd0a 	bl	800ead0 <__sprint_r>
 800f0bc:	2800      	cmp	r0, #0
 800f0be:	f040 8172 	bne.w	800f3a6 <_vfiprintf_r+0x872>
 800f0c2:	ae0f      	add	r6, sp, #60	; 0x3c
 800f0c4:	9b00      	ldr	r3, [sp, #0]
 800f0c6:	1aec      	subs	r4, r5, r3
 800f0c8:	2c00      	cmp	r4, #0
 800f0ca:	dd1a      	ble.n	800f102 <_vfiprintf_r+0x5ce>
 800f0cc:	4d7a      	ldr	r5, [pc, #488]	; (800f2b8 <_vfiprintf_r+0x784>)
 800f0ce:	6035      	str	r5, [r6, #0]
 800f0d0:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800f0d4:	2c10      	cmp	r4, #16
 800f0d6:	f103 0301 	add.w	r3, r3, #1
 800f0da:	f106 0208 	add.w	r2, r6, #8
 800f0de:	f300 8129 	bgt.w	800f334 <_vfiprintf_r+0x800>
 800f0e2:	6074      	str	r4, [r6, #4]
 800f0e4:	2b07      	cmp	r3, #7
 800f0e6:	440c      	add	r4, r1
 800f0e8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800f0ec:	f340 8133 	ble.w	800f356 <_vfiprintf_r+0x822>
 800f0f0:	aa0c      	add	r2, sp, #48	; 0x30
 800f0f2:	4639      	mov	r1, r7
 800f0f4:	4648      	mov	r0, r9
 800f0f6:	f7ff fceb 	bl	800ead0 <__sprint_r>
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	f040 8153 	bne.w	800f3a6 <_vfiprintf_r+0x872>
 800f100:	ae0f      	add	r6, sp, #60	; 0x3c
 800f102:	9b00      	ldr	r3, [sp, #0]
 800f104:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f106:	6073      	str	r3, [r6, #4]
 800f108:	4418      	add	r0, r3
 800f10a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f10c:	f8c6 8000 	str.w	r8, [r6]
 800f110:	3301      	adds	r3, #1
 800f112:	2b07      	cmp	r3, #7
 800f114:	900e      	str	r0, [sp, #56]	; 0x38
 800f116:	930d      	str	r3, [sp, #52]	; 0x34
 800f118:	f300 811f 	bgt.w	800f35a <_vfiprintf_r+0x826>
 800f11c:	f106 0308 	add.w	r3, r6, #8
 800f120:	f01a 0f04 	tst.w	sl, #4
 800f124:	f040 8121 	bne.w	800f36a <_vfiprintf_r+0x836>
 800f128:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f12c:	9904      	ldr	r1, [sp, #16]
 800f12e:	428a      	cmp	r2, r1
 800f130:	bfac      	ite	ge
 800f132:	189b      	addge	r3, r3, r2
 800f134:	185b      	addlt	r3, r3, r1
 800f136:	9302      	str	r3, [sp, #8]
 800f138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f13a:	b13b      	cbz	r3, 800f14c <_vfiprintf_r+0x618>
 800f13c:	aa0c      	add	r2, sp, #48	; 0x30
 800f13e:	4639      	mov	r1, r7
 800f140:	4648      	mov	r0, r9
 800f142:	f7ff fcc5 	bl	800ead0 <__sprint_r>
 800f146:	2800      	cmp	r0, #0
 800f148:	f040 812d 	bne.w	800f3a6 <_vfiprintf_r+0x872>
 800f14c:	2300      	movs	r3, #0
 800f14e:	930d      	str	r3, [sp, #52]	; 0x34
 800f150:	ae0f      	add	r6, sp, #60	; 0x3c
 800f152:	e6c7      	b.n	800eee4 <_vfiprintf_r+0x3b0>
 800f154:	4640      	mov	r0, r8
 800f156:	f7f1 f843 	bl	80001e0 <strlen>
 800f15a:	9000      	str	r0, [sp, #0]
 800f15c:	e737      	b.n	800efce <_vfiprintf_r+0x49a>
 800f15e:	f04a 0a10 	orr.w	sl, sl, #16
 800f162:	f01a 0320 	ands.w	r3, sl, #32
 800f166:	d008      	beq.n	800f17a <_vfiprintf_r+0x646>
 800f168:	3407      	adds	r4, #7
 800f16a:	f024 0307 	bic.w	r3, r4, #7
 800f16e:	469b      	mov	fp, r3
 800f170:	685d      	ldr	r5, [r3, #4]
 800f172:	f85b 4b08 	ldr.w	r4, [fp], #8
 800f176:	2301      	movs	r3, #1
 800f178:	e6da      	b.n	800ef30 <_vfiprintf_r+0x3fc>
 800f17a:	46a3      	mov	fp, r4
 800f17c:	f01a 0510 	ands.w	r5, sl, #16
 800f180:	f85b 4b04 	ldr.w	r4, [fp], #4
 800f184:	d001      	beq.n	800f18a <_vfiprintf_r+0x656>
 800f186:	461d      	mov	r5, r3
 800f188:	e7f5      	b.n	800f176 <_vfiprintf_r+0x642>
 800f18a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800f18e:	d001      	beq.n	800f194 <_vfiprintf_r+0x660>
 800f190:	b2a4      	uxth	r4, r4
 800f192:	e7f0      	b.n	800f176 <_vfiprintf_r+0x642>
 800f194:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800f198:	d0ed      	beq.n	800f176 <_vfiprintf_r+0x642>
 800f19a:	b2e4      	uxtb	r4, r4
 800f19c:	e7f3      	b.n	800f186 <_vfiprintf_r+0x652>
 800f19e:	4a47      	ldr	r2, [pc, #284]	; (800f2bc <_vfiprintf_r+0x788>)
 800f1a0:	e5c5      	b.n	800ed2e <_vfiprintf_r+0x1fa>
 800f1a2:	46a3      	mov	fp, r4
 800f1a4:	f01a 0510 	ands.w	r5, sl, #16
 800f1a8:	f85b 4b04 	ldr.w	r4, [fp], #4
 800f1ac:	d001      	beq.n	800f1b2 <_vfiprintf_r+0x67e>
 800f1ae:	4615      	mov	r5, r2
 800f1b0:	e5c9      	b.n	800ed46 <_vfiprintf_r+0x212>
 800f1b2:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800f1b6:	d001      	beq.n	800f1bc <_vfiprintf_r+0x688>
 800f1b8:	b2a4      	uxth	r4, r4
 800f1ba:	e5c4      	b.n	800ed46 <_vfiprintf_r+0x212>
 800f1bc:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800f1c0:	f43f adc1 	beq.w	800ed46 <_vfiprintf_r+0x212>
 800f1c4:	b2e4      	uxtb	r4, r4
 800f1c6:	e7f2      	b.n	800f1ae <_vfiprintf_r+0x67a>
 800f1c8:	2c0a      	cmp	r4, #10
 800f1ca:	f175 0300 	sbcs.w	r3, r5, #0
 800f1ce:	d205      	bcs.n	800f1dc <_vfiprintf_r+0x6a8>
 800f1d0:	3430      	adds	r4, #48	; 0x30
 800f1d2:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 800f1d6:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800f1da:	e137      	b.n	800f44c <_vfiprintf_r+0x918>
 800f1dc:	ab38      	add	r3, sp, #224	; 0xe0
 800f1de:	9308      	str	r3, [sp, #32]
 800f1e0:	9b04      	ldr	r3, [sp, #16]
 800f1e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f1e6:	f04f 0a00 	mov.w	sl, #0
 800f1ea:	9309      	str	r3, [sp, #36]	; 0x24
 800f1ec:	9b08      	ldr	r3, [sp, #32]
 800f1ee:	220a      	movs	r2, #10
 800f1f0:	f103 38ff 	add.w	r8, r3, #4294967295
 800f1f4:	4620      	mov	r0, r4
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	4629      	mov	r1, r5
 800f1fa:	f7f1 fd4d 	bl	8000c98 <__aeabi_uldivmod>
 800f1fe:	9b08      	ldr	r3, [sp, #32]
 800f200:	3230      	adds	r2, #48	; 0x30
 800f202:	f803 2c01 	strb.w	r2, [r3, #-1]
 800f206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f208:	f10a 0a01 	add.w	sl, sl, #1
 800f20c:	b1db      	cbz	r3, 800f246 <_vfiprintf_r+0x712>
 800f20e:	9b06      	ldr	r3, [sp, #24]
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	4553      	cmp	r3, sl
 800f214:	d117      	bne.n	800f246 <_vfiprintf_r+0x712>
 800f216:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800f21a:	d014      	beq.n	800f246 <_vfiprintf_r+0x712>
 800f21c:	2c0a      	cmp	r4, #10
 800f21e:	f175 0300 	sbcs.w	r3, r5, #0
 800f222:	d310      	bcc.n	800f246 <_vfiprintf_r+0x712>
 800f224:	9b07      	ldr	r3, [sp, #28]
 800f226:	eba8 0803 	sub.w	r8, r8, r3
 800f22a:	461a      	mov	r2, r3
 800f22c:	ee18 1a10 	vmov	r1, s16
 800f230:	4640      	mov	r0, r8
 800f232:	f7fd fd9b 	bl	800cd6c <strncpy>
 800f236:	9b06      	ldr	r3, [sp, #24]
 800f238:	785b      	ldrb	r3, [r3, #1]
 800f23a:	b1a3      	cbz	r3, 800f266 <_vfiprintf_r+0x732>
 800f23c:	9b06      	ldr	r3, [sp, #24]
 800f23e:	3301      	adds	r3, #1
 800f240:	9306      	str	r3, [sp, #24]
 800f242:	f04f 0a00 	mov.w	sl, #0
 800f246:	2300      	movs	r3, #0
 800f248:	220a      	movs	r2, #10
 800f24a:	4620      	mov	r0, r4
 800f24c:	4629      	mov	r1, r5
 800f24e:	f7f1 fd23 	bl	8000c98 <__aeabi_uldivmod>
 800f252:	2c0a      	cmp	r4, #10
 800f254:	f175 0300 	sbcs.w	r3, r5, #0
 800f258:	f0c0 80f8 	bcc.w	800f44c <_vfiprintf_r+0x918>
 800f25c:	4604      	mov	r4, r0
 800f25e:	460d      	mov	r5, r1
 800f260:	f8cd 8020 	str.w	r8, [sp, #32]
 800f264:	e7c2      	b.n	800f1ec <_vfiprintf_r+0x6b8>
 800f266:	469a      	mov	sl, r3
 800f268:	e7ed      	b.n	800f246 <_vfiprintf_r+0x712>
 800f26a:	f004 030f 	and.w	r3, r4, #15
 800f26e:	9a05      	ldr	r2, [sp, #20]
 800f270:	0924      	lsrs	r4, r4, #4
 800f272:	5cd3      	ldrb	r3, [r2, r3]
 800f274:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800f278:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800f27c:	092d      	lsrs	r5, r5, #4
 800f27e:	ea54 0305 	orrs.w	r3, r4, r5
 800f282:	d1f2      	bne.n	800f26a <_vfiprintf_r+0x736>
 800f284:	e0e2      	b.n	800f44c <_vfiprintf_r+0x918>
 800f286:	b933      	cbnz	r3, 800f296 <_vfiprintf_r+0x762>
 800f288:	f01a 0f01 	tst.w	sl, #1
 800f28c:	d003      	beq.n	800f296 <_vfiprintf_r+0x762>
 800f28e:	2330      	movs	r3, #48	; 0x30
 800f290:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 800f294:	e79f      	b.n	800f1d6 <_vfiprintf_r+0x6a2>
 800f296:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800f29a:	e0d7      	b.n	800f44c <_vfiprintf_r+0x918>
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	f000 80a3 	beq.w	800f3e8 <_vfiprintf_r+0x8b4>
 800f2a2:	2100      	movs	r1, #0
 800f2a4:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800f2a8:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800f2ac:	46a3      	mov	fp, r4
 800f2ae:	e5da      	b.n	800ee66 <_vfiprintf_r+0x332>
 800f2b0:	4605      	mov	r5, r0
 800f2b2:	e68c      	b.n	800efce <_vfiprintf_r+0x49a>
 800f2b4:	080103f4 	.word	0x080103f4
 800f2b8:	08010404 	.word	0x08010404
 800f2bc:	0800ffb9 	.word	0x0800ffb9
 800f2c0:	2010      	movs	r0, #16
 800f2c2:	4402      	add	r2, r0
 800f2c4:	2b07      	cmp	r3, #7
 800f2c6:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800f2ca:	6070      	str	r0, [r6, #4]
 800f2cc:	dd07      	ble.n	800f2de <_vfiprintf_r+0x7aa>
 800f2ce:	aa0c      	add	r2, sp, #48	; 0x30
 800f2d0:	4639      	mov	r1, r7
 800f2d2:	4648      	mov	r0, r9
 800f2d4:	f7ff fbfc 	bl	800ead0 <__sprint_r>
 800f2d8:	2800      	cmp	r0, #0
 800f2da:	d164      	bne.n	800f3a6 <_vfiprintf_r+0x872>
 800f2dc:	a90f      	add	r1, sp, #60	; 0x3c
 800f2de:	3c10      	subs	r4, #16
 800f2e0:	460e      	mov	r6, r1
 800f2e2:	e68f      	b.n	800f004 <_vfiprintf_r+0x4d0>
 800f2e4:	460e      	mov	r6, r1
 800f2e6:	e6a8      	b.n	800f03a <_vfiprintf_r+0x506>
 800f2e8:	aa0c      	add	r2, sp, #48	; 0x30
 800f2ea:	4639      	mov	r1, r7
 800f2ec:	4648      	mov	r0, r9
 800f2ee:	f7ff fbef 	bl	800ead0 <__sprint_r>
 800f2f2:	2800      	cmp	r0, #0
 800f2f4:	d157      	bne.n	800f3a6 <_vfiprintf_r+0x872>
 800f2f6:	ae0f      	add	r6, sp, #60	; 0x3c
 800f2f8:	e6b1      	b.n	800f05e <_vfiprintf_r+0x52a>
 800f2fa:	aa0c      	add	r2, sp, #48	; 0x30
 800f2fc:	4639      	mov	r1, r7
 800f2fe:	4648      	mov	r0, r9
 800f300:	f7ff fbe6 	bl	800ead0 <__sprint_r>
 800f304:	2800      	cmp	r0, #0
 800f306:	d14e      	bne.n	800f3a6 <_vfiprintf_r+0x872>
 800f308:	ae0f      	add	r6, sp, #60	; 0x3c
 800f30a:	e6b8      	b.n	800f07e <_vfiprintf_r+0x54a>
 800f30c:	2010      	movs	r0, #16
 800f30e:	4402      	add	r2, r0
 800f310:	2b07      	cmp	r3, #7
 800f312:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800f316:	6070      	str	r0, [r6, #4]
 800f318:	dd07      	ble.n	800f32a <_vfiprintf_r+0x7f6>
 800f31a:	aa0c      	add	r2, sp, #48	; 0x30
 800f31c:	4639      	mov	r1, r7
 800f31e:	4648      	mov	r0, r9
 800f320:	f7ff fbd6 	bl	800ead0 <__sprint_r>
 800f324:	2800      	cmp	r0, #0
 800f326:	d13e      	bne.n	800f3a6 <_vfiprintf_r+0x872>
 800f328:	a90f      	add	r1, sp, #60	; 0x3c
 800f32a:	3c10      	subs	r4, #16
 800f32c:	460e      	mov	r6, r1
 800f32e:	e6ae      	b.n	800f08e <_vfiprintf_r+0x55a>
 800f330:	460e      	mov	r6, r1
 800f332:	e6c7      	b.n	800f0c4 <_vfiprintf_r+0x590>
 800f334:	2010      	movs	r0, #16
 800f336:	4401      	add	r1, r0
 800f338:	2b07      	cmp	r3, #7
 800f33a:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800f33e:	6070      	str	r0, [r6, #4]
 800f340:	dd06      	ble.n	800f350 <_vfiprintf_r+0x81c>
 800f342:	aa0c      	add	r2, sp, #48	; 0x30
 800f344:	4639      	mov	r1, r7
 800f346:	4648      	mov	r0, r9
 800f348:	f7ff fbc2 	bl	800ead0 <__sprint_r>
 800f34c:	bb58      	cbnz	r0, 800f3a6 <_vfiprintf_r+0x872>
 800f34e:	aa0f      	add	r2, sp, #60	; 0x3c
 800f350:	3c10      	subs	r4, #16
 800f352:	4616      	mov	r6, r2
 800f354:	e6bb      	b.n	800f0ce <_vfiprintf_r+0x59a>
 800f356:	4616      	mov	r6, r2
 800f358:	e6d3      	b.n	800f102 <_vfiprintf_r+0x5ce>
 800f35a:	aa0c      	add	r2, sp, #48	; 0x30
 800f35c:	4639      	mov	r1, r7
 800f35e:	4648      	mov	r0, r9
 800f360:	f7ff fbb6 	bl	800ead0 <__sprint_r>
 800f364:	b9f8      	cbnz	r0, 800f3a6 <_vfiprintf_r+0x872>
 800f366:	ab0f      	add	r3, sp, #60	; 0x3c
 800f368:	e6da      	b.n	800f120 <_vfiprintf_r+0x5ec>
 800f36a:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800f36e:	1a54      	subs	r4, r2, r1
 800f370:	2c00      	cmp	r4, #0
 800f372:	f77f aed9 	ble.w	800f128 <_vfiprintf_r+0x5f4>
 800f376:	4d39      	ldr	r5, [pc, #228]	; (800f45c <_vfiprintf_r+0x928>)
 800f378:	2610      	movs	r6, #16
 800f37a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800f37e:	2c10      	cmp	r4, #16
 800f380:	f102 0201 	add.w	r2, r2, #1
 800f384:	601d      	str	r5, [r3, #0]
 800f386:	dc1d      	bgt.n	800f3c4 <_vfiprintf_r+0x890>
 800f388:	605c      	str	r4, [r3, #4]
 800f38a:	2a07      	cmp	r2, #7
 800f38c:	440c      	add	r4, r1
 800f38e:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 800f392:	f77f aec9 	ble.w	800f128 <_vfiprintf_r+0x5f4>
 800f396:	aa0c      	add	r2, sp, #48	; 0x30
 800f398:	4639      	mov	r1, r7
 800f39a:	4648      	mov	r0, r9
 800f39c:	f7ff fb98 	bl	800ead0 <__sprint_r>
 800f3a0:	2800      	cmp	r0, #0
 800f3a2:	f43f aec1 	beq.w	800f128 <_vfiprintf_r+0x5f4>
 800f3a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f3a8:	07d9      	lsls	r1, r3, #31
 800f3aa:	d405      	bmi.n	800f3b8 <_vfiprintf_r+0x884>
 800f3ac:	89bb      	ldrh	r3, [r7, #12]
 800f3ae:	059a      	lsls	r2, r3, #22
 800f3b0:	d402      	bmi.n	800f3b8 <_vfiprintf_r+0x884>
 800f3b2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f3b4:	f7fc fde5 	bl	800bf82 <__retarget_lock_release_recursive>
 800f3b8:	89bb      	ldrh	r3, [r7, #12]
 800f3ba:	065b      	lsls	r3, r3, #25
 800f3bc:	f57f abed 	bpl.w	800eb9a <_vfiprintf_r+0x66>
 800f3c0:	f7ff bbe8 	b.w	800eb94 <_vfiprintf_r+0x60>
 800f3c4:	3110      	adds	r1, #16
 800f3c6:	2a07      	cmp	r2, #7
 800f3c8:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 800f3cc:	605e      	str	r6, [r3, #4]
 800f3ce:	dc02      	bgt.n	800f3d6 <_vfiprintf_r+0x8a2>
 800f3d0:	3308      	adds	r3, #8
 800f3d2:	3c10      	subs	r4, #16
 800f3d4:	e7d1      	b.n	800f37a <_vfiprintf_r+0x846>
 800f3d6:	aa0c      	add	r2, sp, #48	; 0x30
 800f3d8:	4639      	mov	r1, r7
 800f3da:	4648      	mov	r0, r9
 800f3dc:	f7ff fb78 	bl	800ead0 <__sprint_r>
 800f3e0:	2800      	cmp	r0, #0
 800f3e2:	d1e0      	bne.n	800f3a6 <_vfiprintf_r+0x872>
 800f3e4:	ab0f      	add	r3, sp, #60	; 0x3c
 800f3e6:	e7f4      	b.n	800f3d2 <_vfiprintf_r+0x89e>
 800f3e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f3ea:	b913      	cbnz	r3, 800f3f2 <_vfiprintf_r+0x8be>
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	930d      	str	r3, [sp, #52]	; 0x34
 800f3f0:	e7d9      	b.n	800f3a6 <_vfiprintf_r+0x872>
 800f3f2:	aa0c      	add	r2, sp, #48	; 0x30
 800f3f4:	4639      	mov	r1, r7
 800f3f6:	4648      	mov	r0, r9
 800f3f8:	f7ff fb6a 	bl	800ead0 <__sprint_r>
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	d0f5      	beq.n	800f3ec <_vfiprintf_r+0x8b8>
 800f400:	e7d1      	b.n	800f3a6 <_vfiprintf_r+0x872>
 800f402:	ea54 0205 	orrs.w	r2, r4, r5
 800f406:	f8cd a010 	str.w	sl, [sp, #16]
 800f40a:	f43f ada3 	beq.w	800ef54 <_vfiprintf_r+0x420>
 800f40e:	2b01      	cmp	r3, #1
 800f410:	f43f aeda 	beq.w	800f1c8 <_vfiprintf_r+0x694>
 800f414:	2b02      	cmp	r3, #2
 800f416:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800f41a:	f43f af26 	beq.w	800f26a <_vfiprintf_r+0x736>
 800f41e:	f004 0307 	and.w	r3, r4, #7
 800f422:	08e4      	lsrs	r4, r4, #3
 800f424:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800f428:	08ed      	lsrs	r5, r5, #3
 800f42a:	3330      	adds	r3, #48	; 0x30
 800f42c:	ea54 0105 	orrs.w	r1, r4, r5
 800f430:	4642      	mov	r2, r8
 800f432:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800f436:	d1f2      	bne.n	800f41e <_vfiprintf_r+0x8ea>
 800f438:	9904      	ldr	r1, [sp, #16]
 800f43a:	07c8      	lsls	r0, r1, #31
 800f43c:	d506      	bpl.n	800f44c <_vfiprintf_r+0x918>
 800f43e:	2b30      	cmp	r3, #48	; 0x30
 800f440:	d004      	beq.n	800f44c <_vfiprintf_r+0x918>
 800f442:	2330      	movs	r3, #48	; 0x30
 800f444:	f808 3c01 	strb.w	r3, [r8, #-1]
 800f448:	f1a2 0802 	sub.w	r8, r2, #2
 800f44c:	ab38      	add	r3, sp, #224	; 0xe0
 800f44e:	eba3 0308 	sub.w	r3, r3, r8
 800f452:	9d00      	ldr	r5, [sp, #0]
 800f454:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f458:	9300      	str	r3, [sp, #0]
 800f45a:	e5b8      	b.n	800efce <_vfiprintf_r+0x49a>
 800f45c:	080103f4 	.word	0x080103f4

0800f460 <__sbprintf>:
 800f460:	b570      	push	{r4, r5, r6, lr}
 800f462:	460c      	mov	r4, r1
 800f464:	8989      	ldrh	r1, [r1, #12]
 800f466:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800f46a:	f021 0102 	bic.w	r1, r1, #2
 800f46e:	f8ad 1014 	strh.w	r1, [sp, #20]
 800f472:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800f474:	911b      	str	r1, [sp, #108]	; 0x6c
 800f476:	89e1      	ldrh	r1, [r4, #14]
 800f478:	f8ad 1016 	strh.w	r1, [sp, #22]
 800f47c:	69e1      	ldr	r1, [r4, #28]
 800f47e:	9109      	str	r1, [sp, #36]	; 0x24
 800f480:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f482:	910b      	str	r1, [sp, #44]	; 0x2c
 800f484:	a91c      	add	r1, sp, #112	; 0x70
 800f486:	9102      	str	r1, [sp, #8]
 800f488:	9106      	str	r1, [sp, #24]
 800f48a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f48e:	4606      	mov	r6, r0
 800f490:	9104      	str	r1, [sp, #16]
 800f492:	9107      	str	r1, [sp, #28]
 800f494:	a818      	add	r0, sp, #96	; 0x60
 800f496:	2100      	movs	r1, #0
 800f498:	e9cd 3200 	strd	r3, r2, [sp]
 800f49c:	9108      	str	r1, [sp, #32]
 800f49e:	f7fc fd6d 	bl	800bf7c <__retarget_lock_init_recursive>
 800f4a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f4a6:	a902      	add	r1, sp, #8
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	f7ff fb43 	bl	800eb34 <_vfiprintf_r>
 800f4ae:	1e05      	subs	r5, r0, #0
 800f4b0:	db07      	blt.n	800f4c2 <__sbprintf+0x62>
 800f4b2:	a902      	add	r1, sp, #8
 800f4b4:	4630      	mov	r0, r6
 800f4b6:	f7fe feb5 	bl	800e224 <_fflush_r>
 800f4ba:	2800      	cmp	r0, #0
 800f4bc:	bf18      	it	ne
 800f4be:	f04f 35ff 	movne.w	r5, #4294967295
 800f4c2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800f4c6:	9818      	ldr	r0, [sp, #96]	; 0x60
 800f4c8:	065b      	lsls	r3, r3, #25
 800f4ca:	bf42      	ittt	mi
 800f4cc:	89a3      	ldrhmi	r3, [r4, #12]
 800f4ce:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800f4d2:	81a3      	strhmi	r3, [r4, #12]
 800f4d4:	f7fc fd53 	bl	800bf7e <__retarget_lock_close_recursive>
 800f4d8:	4628      	mov	r0, r5
 800f4da:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800f4de:	bd70      	pop	{r4, r5, r6, pc}

0800f4e0 <__swsetup_r>:
 800f4e0:	b538      	push	{r3, r4, r5, lr}
 800f4e2:	4b2a      	ldr	r3, [pc, #168]	; (800f58c <__swsetup_r+0xac>)
 800f4e4:	4605      	mov	r5, r0
 800f4e6:	6818      	ldr	r0, [r3, #0]
 800f4e8:	460c      	mov	r4, r1
 800f4ea:	b118      	cbz	r0, 800f4f4 <__swsetup_r+0x14>
 800f4ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f4ee:	b90b      	cbnz	r3, 800f4f4 <__swsetup_r+0x14>
 800f4f0:	f7fe ff04 	bl	800e2fc <__sinit>
 800f4f4:	89a3      	ldrh	r3, [r4, #12]
 800f4f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f4fa:	0718      	lsls	r0, r3, #28
 800f4fc:	d422      	bmi.n	800f544 <__swsetup_r+0x64>
 800f4fe:	06d9      	lsls	r1, r3, #27
 800f500:	d407      	bmi.n	800f512 <__swsetup_r+0x32>
 800f502:	2309      	movs	r3, #9
 800f504:	602b      	str	r3, [r5, #0]
 800f506:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f50a:	81a3      	strh	r3, [r4, #12]
 800f50c:	f04f 30ff 	mov.w	r0, #4294967295
 800f510:	e034      	b.n	800f57c <__swsetup_r+0x9c>
 800f512:	0758      	lsls	r0, r3, #29
 800f514:	d512      	bpl.n	800f53c <__swsetup_r+0x5c>
 800f516:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f518:	b141      	cbz	r1, 800f52c <__swsetup_r+0x4c>
 800f51a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800f51e:	4299      	cmp	r1, r3
 800f520:	d002      	beq.n	800f528 <__swsetup_r+0x48>
 800f522:	4628      	mov	r0, r5
 800f524:	f7fc fc52 	bl	800bdcc <_free_r>
 800f528:	2300      	movs	r3, #0
 800f52a:	6323      	str	r3, [r4, #48]	; 0x30
 800f52c:	89a3      	ldrh	r3, [r4, #12]
 800f52e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f532:	81a3      	strh	r3, [r4, #12]
 800f534:	2300      	movs	r3, #0
 800f536:	6063      	str	r3, [r4, #4]
 800f538:	6923      	ldr	r3, [r4, #16]
 800f53a:	6023      	str	r3, [r4, #0]
 800f53c:	89a3      	ldrh	r3, [r4, #12]
 800f53e:	f043 0308 	orr.w	r3, r3, #8
 800f542:	81a3      	strh	r3, [r4, #12]
 800f544:	6923      	ldr	r3, [r4, #16]
 800f546:	b94b      	cbnz	r3, 800f55c <__swsetup_r+0x7c>
 800f548:	89a3      	ldrh	r3, [r4, #12]
 800f54a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f54e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f552:	d003      	beq.n	800f55c <__swsetup_r+0x7c>
 800f554:	4621      	mov	r1, r4
 800f556:	4628      	mov	r0, r5
 800f558:	f000 fa5a 	bl	800fa10 <__smakebuf_r>
 800f55c:	89a0      	ldrh	r0, [r4, #12]
 800f55e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f562:	f010 0301 	ands.w	r3, r0, #1
 800f566:	d00a      	beq.n	800f57e <__swsetup_r+0x9e>
 800f568:	2300      	movs	r3, #0
 800f56a:	60a3      	str	r3, [r4, #8]
 800f56c:	6963      	ldr	r3, [r4, #20]
 800f56e:	425b      	negs	r3, r3
 800f570:	61a3      	str	r3, [r4, #24]
 800f572:	6923      	ldr	r3, [r4, #16]
 800f574:	b943      	cbnz	r3, 800f588 <__swsetup_r+0xa8>
 800f576:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f57a:	d1c4      	bne.n	800f506 <__swsetup_r+0x26>
 800f57c:	bd38      	pop	{r3, r4, r5, pc}
 800f57e:	0781      	lsls	r1, r0, #30
 800f580:	bf58      	it	pl
 800f582:	6963      	ldrpl	r3, [r4, #20]
 800f584:	60a3      	str	r3, [r4, #8]
 800f586:	e7f4      	b.n	800f572 <__swsetup_r+0x92>
 800f588:	2000      	movs	r0, #0
 800f58a:	e7f7      	b.n	800f57c <__swsetup_r+0x9c>
 800f58c:	20000010 	.word	0x20000010

0800f590 <abort>:
 800f590:	b508      	push	{r3, lr}
 800f592:	2006      	movs	r0, #6
 800f594:	f000 faa6 	bl	800fae4 <raise>
 800f598:	2001      	movs	r0, #1
 800f59a:	f7f4 fa0b 	bl	80039b4 <_exit>

0800f59e <_fclose_r>:
 800f59e:	b570      	push	{r4, r5, r6, lr}
 800f5a0:	4606      	mov	r6, r0
 800f5a2:	460c      	mov	r4, r1
 800f5a4:	b911      	cbnz	r1, 800f5ac <_fclose_r+0xe>
 800f5a6:	2500      	movs	r5, #0
 800f5a8:	4628      	mov	r0, r5
 800f5aa:	bd70      	pop	{r4, r5, r6, pc}
 800f5ac:	b118      	cbz	r0, 800f5b6 <_fclose_r+0x18>
 800f5ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f5b0:	b90b      	cbnz	r3, 800f5b6 <_fclose_r+0x18>
 800f5b2:	f7fe fea3 	bl	800e2fc <__sinit>
 800f5b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5b8:	07d8      	lsls	r0, r3, #31
 800f5ba:	d405      	bmi.n	800f5c8 <_fclose_r+0x2a>
 800f5bc:	89a3      	ldrh	r3, [r4, #12]
 800f5be:	0599      	lsls	r1, r3, #22
 800f5c0:	d402      	bmi.n	800f5c8 <_fclose_r+0x2a>
 800f5c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5c4:	f7fc fcdc 	bl	800bf80 <__retarget_lock_acquire_recursive>
 800f5c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5cc:	b93b      	cbnz	r3, 800f5de <_fclose_r+0x40>
 800f5ce:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800f5d0:	f015 0501 	ands.w	r5, r5, #1
 800f5d4:	d1e7      	bne.n	800f5a6 <_fclose_r+0x8>
 800f5d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5d8:	f7fc fcd3 	bl	800bf82 <__retarget_lock_release_recursive>
 800f5dc:	e7e4      	b.n	800f5a8 <_fclose_r+0xa>
 800f5de:	4621      	mov	r1, r4
 800f5e0:	4630      	mov	r0, r6
 800f5e2:	f7fe fd91 	bl	800e108 <__sflush_r>
 800f5e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f5e8:	4605      	mov	r5, r0
 800f5ea:	b133      	cbz	r3, 800f5fa <_fclose_r+0x5c>
 800f5ec:	69e1      	ldr	r1, [r4, #28]
 800f5ee:	4630      	mov	r0, r6
 800f5f0:	4798      	blx	r3
 800f5f2:	2800      	cmp	r0, #0
 800f5f4:	bfb8      	it	lt
 800f5f6:	f04f 35ff 	movlt.w	r5, #4294967295
 800f5fa:	89a3      	ldrh	r3, [r4, #12]
 800f5fc:	061a      	lsls	r2, r3, #24
 800f5fe:	d503      	bpl.n	800f608 <_fclose_r+0x6a>
 800f600:	6921      	ldr	r1, [r4, #16]
 800f602:	4630      	mov	r0, r6
 800f604:	f7fc fbe2 	bl	800bdcc <_free_r>
 800f608:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f60a:	b141      	cbz	r1, 800f61e <_fclose_r+0x80>
 800f60c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800f610:	4299      	cmp	r1, r3
 800f612:	d002      	beq.n	800f61a <_fclose_r+0x7c>
 800f614:	4630      	mov	r0, r6
 800f616:	f7fc fbd9 	bl	800bdcc <_free_r>
 800f61a:	2300      	movs	r3, #0
 800f61c:	6323      	str	r3, [r4, #48]	; 0x30
 800f61e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f620:	b121      	cbz	r1, 800f62c <_fclose_r+0x8e>
 800f622:	4630      	mov	r0, r6
 800f624:	f7fc fbd2 	bl	800bdcc <_free_r>
 800f628:	2300      	movs	r3, #0
 800f62a:	6463      	str	r3, [r4, #68]	; 0x44
 800f62c:	f7fe fe4e 	bl	800e2cc <__sfp_lock_acquire>
 800f630:	2300      	movs	r3, #0
 800f632:	81a3      	strh	r3, [r4, #12]
 800f634:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f636:	07db      	lsls	r3, r3, #31
 800f638:	d402      	bmi.n	800f640 <_fclose_r+0xa2>
 800f63a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f63c:	f7fc fca1 	bl	800bf82 <__retarget_lock_release_recursive>
 800f640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f642:	f7fc fc9c 	bl	800bf7e <__retarget_lock_close_recursive>
 800f646:	f7fe fe47 	bl	800e2d8 <__sfp_lock_release>
 800f64a:	e7ad      	b.n	800f5a8 <_fclose_r+0xa>

0800f64c <__fputwc>:
 800f64c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f650:	4680      	mov	r8, r0
 800f652:	460e      	mov	r6, r1
 800f654:	4615      	mov	r5, r2
 800f656:	f7fc fc87 	bl	800bf68 <__locale_mb_cur_max>
 800f65a:	2801      	cmp	r0, #1
 800f65c:	d11c      	bne.n	800f698 <__fputwc+0x4c>
 800f65e:	1e73      	subs	r3, r6, #1
 800f660:	2bfe      	cmp	r3, #254	; 0xfe
 800f662:	d819      	bhi.n	800f698 <__fputwc+0x4c>
 800f664:	f88d 6004 	strb.w	r6, [sp, #4]
 800f668:	4604      	mov	r4, r0
 800f66a:	2700      	movs	r7, #0
 800f66c:	f10d 0904 	add.w	r9, sp, #4
 800f670:	42a7      	cmp	r7, r4
 800f672:	d020      	beq.n	800f6b6 <__fputwc+0x6a>
 800f674:	68ab      	ldr	r3, [r5, #8]
 800f676:	f817 1009 	ldrb.w	r1, [r7, r9]
 800f67a:	3b01      	subs	r3, #1
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	60ab      	str	r3, [r5, #8]
 800f680:	da04      	bge.n	800f68c <__fputwc+0x40>
 800f682:	69aa      	ldr	r2, [r5, #24]
 800f684:	4293      	cmp	r3, r2
 800f686:	db1a      	blt.n	800f6be <__fputwc+0x72>
 800f688:	290a      	cmp	r1, #10
 800f68a:	d018      	beq.n	800f6be <__fputwc+0x72>
 800f68c:	682b      	ldr	r3, [r5, #0]
 800f68e:	1c5a      	adds	r2, r3, #1
 800f690:	602a      	str	r2, [r5, #0]
 800f692:	7019      	strb	r1, [r3, #0]
 800f694:	3701      	adds	r7, #1
 800f696:	e7eb      	b.n	800f670 <__fputwc+0x24>
 800f698:	a901      	add	r1, sp, #4
 800f69a:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800f69e:	4632      	mov	r2, r6
 800f6a0:	4640      	mov	r0, r8
 800f6a2:	f000 fa85 	bl	800fbb0 <_wcrtomb_r>
 800f6a6:	1c41      	adds	r1, r0, #1
 800f6a8:	4604      	mov	r4, r0
 800f6aa:	d1de      	bne.n	800f66a <__fputwc+0x1e>
 800f6ac:	89ab      	ldrh	r3, [r5, #12]
 800f6ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6b2:	81ab      	strh	r3, [r5, #12]
 800f6b4:	4606      	mov	r6, r0
 800f6b6:	4630      	mov	r0, r6
 800f6b8:	b003      	add	sp, #12
 800f6ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6be:	462a      	mov	r2, r5
 800f6c0:	4640      	mov	r0, r8
 800f6c2:	f000 fa2b 	bl	800fb1c <__swbuf_r>
 800f6c6:	1c42      	adds	r2, r0, #1
 800f6c8:	d1e4      	bne.n	800f694 <__fputwc+0x48>
 800f6ca:	4606      	mov	r6, r0
 800f6cc:	e7f3      	b.n	800f6b6 <__fputwc+0x6a>

0800f6ce <_fputwc_r>:
 800f6ce:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800f6d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f6d2:	4614      	mov	r4, r2
 800f6d4:	07da      	lsls	r2, r3, #31
 800f6d6:	4605      	mov	r5, r0
 800f6d8:	d407      	bmi.n	800f6ea <_fputwc_r+0x1c>
 800f6da:	89a3      	ldrh	r3, [r4, #12]
 800f6dc:	059b      	lsls	r3, r3, #22
 800f6de:	d404      	bmi.n	800f6ea <_fputwc_r+0x1c>
 800f6e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6e2:	9101      	str	r1, [sp, #4]
 800f6e4:	f7fc fc4c 	bl	800bf80 <__retarget_lock_acquire_recursive>
 800f6e8:	9901      	ldr	r1, [sp, #4]
 800f6ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6ee:	0498      	lsls	r0, r3, #18
 800f6f0:	d406      	bmi.n	800f700 <_fputwc_r+0x32>
 800f6f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f6f6:	81a3      	strh	r3, [r4, #12]
 800f6f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f6fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f6fe:	6663      	str	r3, [r4, #100]	; 0x64
 800f700:	4622      	mov	r2, r4
 800f702:	4628      	mov	r0, r5
 800f704:	f7ff ffa2 	bl	800f64c <__fputwc>
 800f708:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f70a:	07da      	lsls	r2, r3, #31
 800f70c:	4605      	mov	r5, r0
 800f70e:	d405      	bmi.n	800f71c <_fputwc_r+0x4e>
 800f710:	89a3      	ldrh	r3, [r4, #12]
 800f712:	059b      	lsls	r3, r3, #22
 800f714:	d402      	bmi.n	800f71c <_fputwc_r+0x4e>
 800f716:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f718:	f7fc fc33 	bl	800bf82 <__retarget_lock_release_recursive>
 800f71c:	4628      	mov	r0, r5
 800f71e:	b003      	add	sp, #12
 800f720:	bd30      	pop	{r4, r5, pc}
	...

0800f724 <__sfvwrite_r>:
 800f724:	6893      	ldr	r3, [r2, #8]
 800f726:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f72a:	4606      	mov	r6, r0
 800f72c:	460c      	mov	r4, r1
 800f72e:	4690      	mov	r8, r2
 800f730:	b91b      	cbnz	r3, 800f73a <__sfvwrite_r+0x16>
 800f732:	2000      	movs	r0, #0
 800f734:	b003      	add	sp, #12
 800f736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f73a:	898b      	ldrh	r3, [r1, #12]
 800f73c:	0718      	lsls	r0, r3, #28
 800f73e:	d550      	bpl.n	800f7e2 <__sfvwrite_r+0xbe>
 800f740:	690b      	ldr	r3, [r1, #16]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d04d      	beq.n	800f7e2 <__sfvwrite_r+0xbe>
 800f746:	89a3      	ldrh	r3, [r4, #12]
 800f748:	f8d8 7000 	ldr.w	r7, [r8]
 800f74c:	f013 0902 	ands.w	r9, r3, #2
 800f750:	d16c      	bne.n	800f82c <__sfvwrite_r+0x108>
 800f752:	f013 0301 	ands.w	r3, r3, #1
 800f756:	f000 809c 	beq.w	800f892 <__sfvwrite_r+0x16e>
 800f75a:	4648      	mov	r0, r9
 800f75c:	46ca      	mov	sl, r9
 800f75e:	46cb      	mov	fp, r9
 800f760:	f1bb 0f00 	cmp.w	fp, #0
 800f764:	f000 8103 	beq.w	800f96e <__sfvwrite_r+0x24a>
 800f768:	b950      	cbnz	r0, 800f780 <__sfvwrite_r+0x5c>
 800f76a:	465a      	mov	r2, fp
 800f76c:	210a      	movs	r1, #10
 800f76e:	4650      	mov	r0, sl
 800f770:	f7f0 fd3e 	bl	80001f0 <memchr>
 800f774:	2800      	cmp	r0, #0
 800f776:	f000 80ff 	beq.w	800f978 <__sfvwrite_r+0x254>
 800f77a:	3001      	adds	r0, #1
 800f77c:	eba0 090a 	sub.w	r9, r0, sl
 800f780:	6820      	ldr	r0, [r4, #0]
 800f782:	6921      	ldr	r1, [r4, #16]
 800f784:	6963      	ldr	r3, [r4, #20]
 800f786:	45d9      	cmp	r9, fp
 800f788:	464a      	mov	r2, r9
 800f78a:	bf28      	it	cs
 800f78c:	465a      	movcs	r2, fp
 800f78e:	4288      	cmp	r0, r1
 800f790:	f240 80f5 	bls.w	800f97e <__sfvwrite_r+0x25a>
 800f794:	68a5      	ldr	r5, [r4, #8]
 800f796:	441d      	add	r5, r3
 800f798:	42aa      	cmp	r2, r5
 800f79a:	f340 80f0 	ble.w	800f97e <__sfvwrite_r+0x25a>
 800f79e:	4651      	mov	r1, sl
 800f7a0:	462a      	mov	r2, r5
 800f7a2:	f7ff f973 	bl	800ea8c <memmove>
 800f7a6:	6823      	ldr	r3, [r4, #0]
 800f7a8:	442b      	add	r3, r5
 800f7aa:	6023      	str	r3, [r4, #0]
 800f7ac:	4621      	mov	r1, r4
 800f7ae:	4630      	mov	r0, r6
 800f7b0:	f7fe fd38 	bl	800e224 <_fflush_r>
 800f7b4:	2800      	cmp	r0, #0
 800f7b6:	d167      	bne.n	800f888 <__sfvwrite_r+0x164>
 800f7b8:	ebb9 0905 	subs.w	r9, r9, r5
 800f7bc:	f040 80f7 	bne.w	800f9ae <__sfvwrite_r+0x28a>
 800f7c0:	4621      	mov	r1, r4
 800f7c2:	4630      	mov	r0, r6
 800f7c4:	f7fe fd2e 	bl	800e224 <_fflush_r>
 800f7c8:	2800      	cmp	r0, #0
 800f7ca:	d15d      	bne.n	800f888 <__sfvwrite_r+0x164>
 800f7cc:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800f7d0:	44aa      	add	sl, r5
 800f7d2:	ebab 0b05 	sub.w	fp, fp, r5
 800f7d6:	1b55      	subs	r5, r2, r5
 800f7d8:	f8c8 5008 	str.w	r5, [r8, #8]
 800f7dc:	2d00      	cmp	r5, #0
 800f7de:	d1bf      	bne.n	800f760 <__sfvwrite_r+0x3c>
 800f7e0:	e7a7      	b.n	800f732 <__sfvwrite_r+0xe>
 800f7e2:	4621      	mov	r1, r4
 800f7e4:	4630      	mov	r0, r6
 800f7e6:	f7ff fe7b 	bl	800f4e0 <__swsetup_r>
 800f7ea:	2800      	cmp	r0, #0
 800f7ec:	d0ab      	beq.n	800f746 <__sfvwrite_r+0x22>
 800f7ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f2:	e79f      	b.n	800f734 <__sfvwrite_r+0x10>
 800f7f4:	e9d7 b900 	ldrd	fp, r9, [r7]
 800f7f8:	3708      	adds	r7, #8
 800f7fa:	f1b9 0f00 	cmp.w	r9, #0
 800f7fe:	d0f9      	beq.n	800f7f4 <__sfvwrite_r+0xd0>
 800f800:	45d1      	cmp	r9, sl
 800f802:	464b      	mov	r3, r9
 800f804:	69e1      	ldr	r1, [r4, #28]
 800f806:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f808:	bf28      	it	cs
 800f80a:	4653      	movcs	r3, sl
 800f80c:	465a      	mov	r2, fp
 800f80e:	4630      	mov	r0, r6
 800f810:	47a8      	blx	r5
 800f812:	2800      	cmp	r0, #0
 800f814:	dd38      	ble.n	800f888 <__sfvwrite_r+0x164>
 800f816:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f81a:	4483      	add	fp, r0
 800f81c:	eba9 0900 	sub.w	r9, r9, r0
 800f820:	1a18      	subs	r0, r3, r0
 800f822:	f8c8 0008 	str.w	r0, [r8, #8]
 800f826:	2800      	cmp	r0, #0
 800f828:	d1e7      	bne.n	800f7fa <__sfvwrite_r+0xd6>
 800f82a:	e782      	b.n	800f732 <__sfvwrite_r+0xe>
 800f82c:	f04f 0b00 	mov.w	fp, #0
 800f830:	f8df a180 	ldr.w	sl, [pc, #384]	; 800f9b4 <__sfvwrite_r+0x290>
 800f834:	46d9      	mov	r9, fp
 800f836:	e7e0      	b.n	800f7fa <__sfvwrite_r+0xd6>
 800f838:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800f83c:	3708      	adds	r7, #8
 800f83e:	f1ba 0f00 	cmp.w	sl, #0
 800f842:	d0f9      	beq.n	800f838 <__sfvwrite_r+0x114>
 800f844:	89a3      	ldrh	r3, [r4, #12]
 800f846:	6820      	ldr	r0, [r4, #0]
 800f848:	68a2      	ldr	r2, [r4, #8]
 800f84a:	0599      	lsls	r1, r3, #22
 800f84c:	d563      	bpl.n	800f916 <__sfvwrite_r+0x1f2>
 800f84e:	4552      	cmp	r2, sl
 800f850:	d836      	bhi.n	800f8c0 <__sfvwrite_r+0x19c>
 800f852:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800f856:	d033      	beq.n	800f8c0 <__sfvwrite_r+0x19c>
 800f858:	6921      	ldr	r1, [r4, #16]
 800f85a:	6965      	ldr	r5, [r4, #20]
 800f85c:	eba0 0b01 	sub.w	fp, r0, r1
 800f860:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f864:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f868:	f10b 0201 	add.w	r2, fp, #1
 800f86c:	106d      	asrs	r5, r5, #1
 800f86e:	4452      	add	r2, sl
 800f870:	4295      	cmp	r5, r2
 800f872:	bf38      	it	cc
 800f874:	4615      	movcc	r5, r2
 800f876:	055b      	lsls	r3, r3, #21
 800f878:	d53d      	bpl.n	800f8f6 <__sfvwrite_r+0x1d2>
 800f87a:	4629      	mov	r1, r5
 800f87c:	4630      	mov	r0, r6
 800f87e:	f7f8 fc7f 	bl	8008180 <_malloc_r>
 800f882:	b948      	cbnz	r0, 800f898 <__sfvwrite_r+0x174>
 800f884:	230c      	movs	r3, #12
 800f886:	6033      	str	r3, [r6, #0]
 800f888:	89a3      	ldrh	r3, [r4, #12]
 800f88a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f88e:	81a3      	strh	r3, [r4, #12]
 800f890:	e7ad      	b.n	800f7ee <__sfvwrite_r+0xca>
 800f892:	4699      	mov	r9, r3
 800f894:	469a      	mov	sl, r3
 800f896:	e7d2      	b.n	800f83e <__sfvwrite_r+0x11a>
 800f898:	465a      	mov	r2, fp
 800f89a:	6921      	ldr	r1, [r4, #16]
 800f89c:	9001      	str	r0, [sp, #4]
 800f89e:	f7fc fbaf 	bl	800c000 <memcpy>
 800f8a2:	89a2      	ldrh	r2, [r4, #12]
 800f8a4:	9b01      	ldr	r3, [sp, #4]
 800f8a6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800f8aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f8ae:	81a2      	strh	r2, [r4, #12]
 800f8b0:	6123      	str	r3, [r4, #16]
 800f8b2:	6165      	str	r5, [r4, #20]
 800f8b4:	445b      	add	r3, fp
 800f8b6:	eba5 050b 	sub.w	r5, r5, fp
 800f8ba:	6023      	str	r3, [r4, #0]
 800f8bc:	4652      	mov	r2, sl
 800f8be:	60a5      	str	r5, [r4, #8]
 800f8c0:	4552      	cmp	r2, sl
 800f8c2:	bf28      	it	cs
 800f8c4:	4652      	movcs	r2, sl
 800f8c6:	6820      	ldr	r0, [r4, #0]
 800f8c8:	9201      	str	r2, [sp, #4]
 800f8ca:	4649      	mov	r1, r9
 800f8cc:	f7ff f8de 	bl	800ea8c <memmove>
 800f8d0:	68a3      	ldr	r3, [r4, #8]
 800f8d2:	9a01      	ldr	r2, [sp, #4]
 800f8d4:	1a9b      	subs	r3, r3, r2
 800f8d6:	60a3      	str	r3, [r4, #8]
 800f8d8:	6823      	ldr	r3, [r4, #0]
 800f8da:	441a      	add	r2, r3
 800f8dc:	4655      	mov	r5, sl
 800f8de:	6022      	str	r2, [r4, #0]
 800f8e0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800f8e4:	44a9      	add	r9, r5
 800f8e6:	ebaa 0a05 	sub.w	sl, sl, r5
 800f8ea:	1b45      	subs	r5, r0, r5
 800f8ec:	f8c8 5008 	str.w	r5, [r8, #8]
 800f8f0:	2d00      	cmp	r5, #0
 800f8f2:	d1a4      	bne.n	800f83e <__sfvwrite_r+0x11a>
 800f8f4:	e71d      	b.n	800f732 <__sfvwrite_r+0xe>
 800f8f6:	462a      	mov	r2, r5
 800f8f8:	4630      	mov	r0, r6
 800f8fa:	f7fd f81d 	bl	800c938 <_realloc_r>
 800f8fe:	4603      	mov	r3, r0
 800f900:	2800      	cmp	r0, #0
 800f902:	d1d5      	bne.n	800f8b0 <__sfvwrite_r+0x18c>
 800f904:	6921      	ldr	r1, [r4, #16]
 800f906:	4630      	mov	r0, r6
 800f908:	f7fc fa60 	bl	800bdcc <_free_r>
 800f90c:	89a3      	ldrh	r3, [r4, #12]
 800f90e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f912:	81a3      	strh	r3, [r4, #12]
 800f914:	e7b6      	b.n	800f884 <__sfvwrite_r+0x160>
 800f916:	6923      	ldr	r3, [r4, #16]
 800f918:	4283      	cmp	r3, r0
 800f91a:	d302      	bcc.n	800f922 <__sfvwrite_r+0x1fe>
 800f91c:	6961      	ldr	r1, [r4, #20]
 800f91e:	4551      	cmp	r1, sl
 800f920:	d915      	bls.n	800f94e <__sfvwrite_r+0x22a>
 800f922:	4552      	cmp	r2, sl
 800f924:	bf28      	it	cs
 800f926:	4652      	movcs	r2, sl
 800f928:	4649      	mov	r1, r9
 800f92a:	4615      	mov	r5, r2
 800f92c:	f7ff f8ae 	bl	800ea8c <memmove>
 800f930:	68a3      	ldr	r3, [r4, #8]
 800f932:	6822      	ldr	r2, [r4, #0]
 800f934:	1b5b      	subs	r3, r3, r5
 800f936:	442a      	add	r2, r5
 800f938:	60a3      	str	r3, [r4, #8]
 800f93a:	6022      	str	r2, [r4, #0]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d1cf      	bne.n	800f8e0 <__sfvwrite_r+0x1bc>
 800f940:	4621      	mov	r1, r4
 800f942:	4630      	mov	r0, r6
 800f944:	f7fe fc6e 	bl	800e224 <_fflush_r>
 800f948:	2800      	cmp	r0, #0
 800f94a:	d0c9      	beq.n	800f8e0 <__sfvwrite_r+0x1bc>
 800f94c:	e79c      	b.n	800f888 <__sfvwrite_r+0x164>
 800f94e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f952:	459a      	cmp	sl, r3
 800f954:	bf38      	it	cc
 800f956:	4653      	movcc	r3, sl
 800f958:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f95a:	fb93 f3f1 	sdiv	r3, r3, r1
 800f95e:	464a      	mov	r2, r9
 800f960:	434b      	muls	r3, r1
 800f962:	4630      	mov	r0, r6
 800f964:	69e1      	ldr	r1, [r4, #28]
 800f966:	47a8      	blx	r5
 800f968:	1e05      	subs	r5, r0, #0
 800f96a:	dcb9      	bgt.n	800f8e0 <__sfvwrite_r+0x1bc>
 800f96c:	e78c      	b.n	800f888 <__sfvwrite_r+0x164>
 800f96e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800f972:	2000      	movs	r0, #0
 800f974:	3708      	adds	r7, #8
 800f976:	e6f3      	b.n	800f760 <__sfvwrite_r+0x3c>
 800f978:	f10b 0901 	add.w	r9, fp, #1
 800f97c:	e700      	b.n	800f780 <__sfvwrite_r+0x5c>
 800f97e:	4293      	cmp	r3, r2
 800f980:	dc08      	bgt.n	800f994 <__sfvwrite_r+0x270>
 800f982:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f984:	69e1      	ldr	r1, [r4, #28]
 800f986:	4652      	mov	r2, sl
 800f988:	4630      	mov	r0, r6
 800f98a:	47a8      	blx	r5
 800f98c:	1e05      	subs	r5, r0, #0
 800f98e:	f73f af13 	bgt.w	800f7b8 <__sfvwrite_r+0x94>
 800f992:	e779      	b.n	800f888 <__sfvwrite_r+0x164>
 800f994:	4651      	mov	r1, sl
 800f996:	9201      	str	r2, [sp, #4]
 800f998:	f7ff f878 	bl	800ea8c <memmove>
 800f99c:	9a01      	ldr	r2, [sp, #4]
 800f99e:	68a3      	ldr	r3, [r4, #8]
 800f9a0:	1a9b      	subs	r3, r3, r2
 800f9a2:	60a3      	str	r3, [r4, #8]
 800f9a4:	6823      	ldr	r3, [r4, #0]
 800f9a6:	4413      	add	r3, r2
 800f9a8:	6023      	str	r3, [r4, #0]
 800f9aa:	4615      	mov	r5, r2
 800f9ac:	e704      	b.n	800f7b8 <__sfvwrite_r+0x94>
 800f9ae:	2001      	movs	r0, #1
 800f9b0:	e70c      	b.n	800f7cc <__sfvwrite_r+0xa8>
 800f9b2:	bf00      	nop
 800f9b4:	7ffffc00 	.word	0x7ffffc00

0800f9b8 <__swhatbuf_r>:
 800f9b8:	b570      	push	{r4, r5, r6, lr}
 800f9ba:	460e      	mov	r6, r1
 800f9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9c0:	2900      	cmp	r1, #0
 800f9c2:	b096      	sub	sp, #88	; 0x58
 800f9c4:	4614      	mov	r4, r2
 800f9c6:	461d      	mov	r5, r3
 800f9c8:	da0a      	bge.n	800f9e0 <__swhatbuf_r+0x28>
 800f9ca:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 800f9d4:	602b      	str	r3, [r5, #0]
 800f9d6:	d116      	bne.n	800fa06 <__swhatbuf_r+0x4e>
 800f9d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9dc:	6023      	str	r3, [r4, #0]
 800f9de:	e015      	b.n	800fa0c <__swhatbuf_r+0x54>
 800f9e0:	466a      	mov	r2, sp
 800f9e2:	f000 f8fb 	bl	800fbdc <_fstat_r>
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	dbef      	blt.n	800f9ca <__swhatbuf_r+0x12>
 800f9ea:	9a01      	ldr	r2, [sp, #4]
 800f9ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f9f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f9f4:	425a      	negs	r2, r3
 800f9f6:	415a      	adcs	r2, r3
 800f9f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9fc:	602a      	str	r2, [r5, #0]
 800f9fe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800fa02:	6023      	str	r3, [r4, #0]
 800fa04:	e002      	b.n	800fa0c <__swhatbuf_r+0x54>
 800fa06:	2240      	movs	r2, #64	; 0x40
 800fa08:	6022      	str	r2, [r4, #0]
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	b016      	add	sp, #88	; 0x58
 800fa0e:	bd70      	pop	{r4, r5, r6, pc}

0800fa10 <__smakebuf_r>:
 800fa10:	898b      	ldrh	r3, [r1, #12]
 800fa12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa14:	079d      	lsls	r5, r3, #30
 800fa16:	4606      	mov	r6, r0
 800fa18:	460c      	mov	r4, r1
 800fa1a:	d507      	bpl.n	800fa2c <__smakebuf_r+0x1c>
 800fa1c:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800fa20:	6023      	str	r3, [r4, #0]
 800fa22:	6123      	str	r3, [r4, #16]
 800fa24:	2301      	movs	r3, #1
 800fa26:	6163      	str	r3, [r4, #20]
 800fa28:	b002      	add	sp, #8
 800fa2a:	bd70      	pop	{r4, r5, r6, pc}
 800fa2c:	ab01      	add	r3, sp, #4
 800fa2e:	466a      	mov	r2, sp
 800fa30:	f7ff ffc2 	bl	800f9b8 <__swhatbuf_r>
 800fa34:	9900      	ldr	r1, [sp, #0]
 800fa36:	4605      	mov	r5, r0
 800fa38:	4630      	mov	r0, r6
 800fa3a:	f7f8 fba1 	bl	8008180 <_malloc_r>
 800fa3e:	b948      	cbnz	r0, 800fa54 <__smakebuf_r+0x44>
 800fa40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa44:	059a      	lsls	r2, r3, #22
 800fa46:	d4ef      	bmi.n	800fa28 <__smakebuf_r+0x18>
 800fa48:	f023 0303 	bic.w	r3, r3, #3
 800fa4c:	f043 0302 	orr.w	r3, r3, #2
 800fa50:	81a3      	strh	r3, [r4, #12]
 800fa52:	e7e3      	b.n	800fa1c <__smakebuf_r+0xc>
 800fa54:	4b0d      	ldr	r3, [pc, #52]	; (800fa8c <__smakebuf_r+0x7c>)
 800fa56:	63f3      	str	r3, [r6, #60]	; 0x3c
 800fa58:	89a3      	ldrh	r3, [r4, #12]
 800fa5a:	6020      	str	r0, [r4, #0]
 800fa5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa60:	81a3      	strh	r3, [r4, #12]
 800fa62:	9b00      	ldr	r3, [sp, #0]
 800fa64:	6163      	str	r3, [r4, #20]
 800fa66:	9b01      	ldr	r3, [sp, #4]
 800fa68:	6120      	str	r0, [r4, #16]
 800fa6a:	b15b      	cbz	r3, 800fa84 <__smakebuf_r+0x74>
 800fa6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa70:	4630      	mov	r0, r6
 800fa72:	f000 f8c5 	bl	800fc00 <_isatty_r>
 800fa76:	b128      	cbz	r0, 800fa84 <__smakebuf_r+0x74>
 800fa78:	89a3      	ldrh	r3, [r4, #12]
 800fa7a:	f023 0303 	bic.w	r3, r3, #3
 800fa7e:	f043 0301 	orr.w	r3, r3, #1
 800fa82:	81a3      	strh	r3, [r4, #12]
 800fa84:	89a0      	ldrh	r0, [r4, #12]
 800fa86:	4305      	orrs	r5, r0
 800fa88:	81a5      	strh	r5, [r4, #12]
 800fa8a:	e7cd      	b.n	800fa28 <__smakebuf_r+0x18>
 800fa8c:	0800e2c1 	.word	0x0800e2c1

0800fa90 <_raise_r>:
 800fa90:	291f      	cmp	r1, #31
 800fa92:	b538      	push	{r3, r4, r5, lr}
 800fa94:	4604      	mov	r4, r0
 800fa96:	460d      	mov	r5, r1
 800fa98:	d904      	bls.n	800faa4 <_raise_r+0x14>
 800fa9a:	2316      	movs	r3, #22
 800fa9c:	6003      	str	r3, [r0, #0]
 800fa9e:	f04f 30ff 	mov.w	r0, #4294967295
 800faa2:	bd38      	pop	{r3, r4, r5, pc}
 800faa4:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800faa8:	b112      	cbz	r2, 800fab0 <_raise_r+0x20>
 800faaa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800faae:	b94b      	cbnz	r3, 800fac4 <_raise_r+0x34>
 800fab0:	4620      	mov	r0, r4
 800fab2:	f000 f831 	bl	800fb18 <_getpid_r>
 800fab6:	462a      	mov	r2, r5
 800fab8:	4601      	mov	r1, r0
 800faba:	4620      	mov	r0, r4
 800fabc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fac0:	f000 b818 	b.w	800faf4 <_kill_r>
 800fac4:	2b01      	cmp	r3, #1
 800fac6:	d00a      	beq.n	800fade <_raise_r+0x4e>
 800fac8:	1c59      	adds	r1, r3, #1
 800faca:	d103      	bne.n	800fad4 <_raise_r+0x44>
 800facc:	2316      	movs	r3, #22
 800face:	6003      	str	r3, [r0, #0]
 800fad0:	2001      	movs	r0, #1
 800fad2:	e7e6      	b.n	800faa2 <_raise_r+0x12>
 800fad4:	2400      	movs	r4, #0
 800fad6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fada:	4628      	mov	r0, r5
 800fadc:	4798      	blx	r3
 800fade:	2000      	movs	r0, #0
 800fae0:	e7df      	b.n	800faa2 <_raise_r+0x12>
	...

0800fae4 <raise>:
 800fae4:	4b02      	ldr	r3, [pc, #8]	; (800faf0 <raise+0xc>)
 800fae6:	4601      	mov	r1, r0
 800fae8:	6818      	ldr	r0, [r3, #0]
 800faea:	f7ff bfd1 	b.w	800fa90 <_raise_r>
 800faee:	bf00      	nop
 800faf0:	20000010 	.word	0x20000010

0800faf4 <_kill_r>:
 800faf4:	b538      	push	{r3, r4, r5, lr}
 800faf6:	4d07      	ldr	r5, [pc, #28]	; (800fb14 <_kill_r+0x20>)
 800faf8:	2300      	movs	r3, #0
 800fafa:	4604      	mov	r4, r0
 800fafc:	4608      	mov	r0, r1
 800fafe:	4611      	mov	r1, r2
 800fb00:	602b      	str	r3, [r5, #0]
 800fb02:	f7f3 ff47 	bl	8003994 <_kill>
 800fb06:	1c43      	adds	r3, r0, #1
 800fb08:	d102      	bne.n	800fb10 <_kill_r+0x1c>
 800fb0a:	682b      	ldr	r3, [r5, #0]
 800fb0c:	b103      	cbz	r3, 800fb10 <_kill_r+0x1c>
 800fb0e:	6023      	str	r3, [r4, #0]
 800fb10:	bd38      	pop	{r3, r4, r5, pc}
 800fb12:	bf00      	nop
 800fb14:	200011a0 	.word	0x200011a0

0800fb18 <_getpid_r>:
 800fb18:	f7f3 bf34 	b.w	8003984 <_getpid>

0800fb1c <__swbuf_r>:
 800fb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb1e:	460e      	mov	r6, r1
 800fb20:	4614      	mov	r4, r2
 800fb22:	4605      	mov	r5, r0
 800fb24:	b118      	cbz	r0, 800fb2e <__swbuf_r+0x12>
 800fb26:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800fb28:	b90b      	cbnz	r3, 800fb2e <__swbuf_r+0x12>
 800fb2a:	f7fe fbe7 	bl	800e2fc <__sinit>
 800fb2e:	69a3      	ldr	r3, [r4, #24]
 800fb30:	60a3      	str	r3, [r4, #8]
 800fb32:	89a3      	ldrh	r3, [r4, #12]
 800fb34:	0719      	lsls	r1, r3, #28
 800fb36:	d529      	bpl.n	800fb8c <__swbuf_r+0x70>
 800fb38:	6923      	ldr	r3, [r4, #16]
 800fb3a:	b33b      	cbz	r3, 800fb8c <__swbuf_r+0x70>
 800fb3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb40:	b2f6      	uxtb	r6, r6
 800fb42:	049a      	lsls	r2, r3, #18
 800fb44:	4637      	mov	r7, r6
 800fb46:	d52a      	bpl.n	800fb9e <__swbuf_r+0x82>
 800fb48:	6823      	ldr	r3, [r4, #0]
 800fb4a:	6920      	ldr	r0, [r4, #16]
 800fb4c:	1a18      	subs	r0, r3, r0
 800fb4e:	6963      	ldr	r3, [r4, #20]
 800fb50:	4283      	cmp	r3, r0
 800fb52:	dc04      	bgt.n	800fb5e <__swbuf_r+0x42>
 800fb54:	4621      	mov	r1, r4
 800fb56:	4628      	mov	r0, r5
 800fb58:	f7fe fb64 	bl	800e224 <_fflush_r>
 800fb5c:	b9e0      	cbnz	r0, 800fb98 <__swbuf_r+0x7c>
 800fb5e:	68a3      	ldr	r3, [r4, #8]
 800fb60:	3b01      	subs	r3, #1
 800fb62:	60a3      	str	r3, [r4, #8]
 800fb64:	6823      	ldr	r3, [r4, #0]
 800fb66:	1c5a      	adds	r2, r3, #1
 800fb68:	6022      	str	r2, [r4, #0]
 800fb6a:	701e      	strb	r6, [r3, #0]
 800fb6c:	6962      	ldr	r2, [r4, #20]
 800fb6e:	1c43      	adds	r3, r0, #1
 800fb70:	429a      	cmp	r2, r3
 800fb72:	d004      	beq.n	800fb7e <__swbuf_r+0x62>
 800fb74:	89a3      	ldrh	r3, [r4, #12]
 800fb76:	07db      	lsls	r3, r3, #31
 800fb78:	d506      	bpl.n	800fb88 <__swbuf_r+0x6c>
 800fb7a:	2e0a      	cmp	r6, #10
 800fb7c:	d104      	bne.n	800fb88 <__swbuf_r+0x6c>
 800fb7e:	4621      	mov	r1, r4
 800fb80:	4628      	mov	r0, r5
 800fb82:	f7fe fb4f 	bl	800e224 <_fflush_r>
 800fb86:	b938      	cbnz	r0, 800fb98 <__swbuf_r+0x7c>
 800fb88:	4638      	mov	r0, r7
 800fb8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb8c:	4621      	mov	r1, r4
 800fb8e:	4628      	mov	r0, r5
 800fb90:	f7ff fca6 	bl	800f4e0 <__swsetup_r>
 800fb94:	2800      	cmp	r0, #0
 800fb96:	d0d1      	beq.n	800fb3c <__swbuf_r+0x20>
 800fb98:	f04f 37ff 	mov.w	r7, #4294967295
 800fb9c:	e7f4      	b.n	800fb88 <__swbuf_r+0x6c>
 800fb9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fba2:	81a3      	strh	r3, [r4, #12]
 800fba4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fba6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fbaa:	6663      	str	r3, [r4, #100]	; 0x64
 800fbac:	e7cc      	b.n	800fb48 <__swbuf_r+0x2c>
	...

0800fbb0 <_wcrtomb_r>:
 800fbb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbb2:	4c09      	ldr	r4, [pc, #36]	; (800fbd8 <_wcrtomb_r+0x28>)
 800fbb4:	b085      	sub	sp, #20
 800fbb6:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800fbba:	4605      	mov	r5, r0
 800fbbc:	461e      	mov	r6, r3
 800fbbe:	b909      	cbnz	r1, 800fbc4 <_wcrtomb_r+0x14>
 800fbc0:	460a      	mov	r2, r1
 800fbc2:	a901      	add	r1, sp, #4
 800fbc4:	47b8      	blx	r7
 800fbc6:	1c43      	adds	r3, r0, #1
 800fbc8:	bf01      	itttt	eq
 800fbca:	2300      	moveq	r3, #0
 800fbcc:	6033      	streq	r3, [r6, #0]
 800fbce:	238a      	moveq	r3, #138	; 0x8a
 800fbd0:	602b      	streq	r3, [r5, #0]
 800fbd2:	b005      	add	sp, #20
 800fbd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbd6:	bf00      	nop
 800fbd8:	20000854 	.word	0x20000854

0800fbdc <_fstat_r>:
 800fbdc:	b538      	push	{r3, r4, r5, lr}
 800fbde:	4d07      	ldr	r5, [pc, #28]	; (800fbfc <_fstat_r+0x20>)
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	4604      	mov	r4, r0
 800fbe4:	4608      	mov	r0, r1
 800fbe6:	4611      	mov	r1, r2
 800fbe8:	602b      	str	r3, [r5, #0]
 800fbea:	f7f3 ff32 	bl	8003a52 <_fstat>
 800fbee:	1c43      	adds	r3, r0, #1
 800fbf0:	d102      	bne.n	800fbf8 <_fstat_r+0x1c>
 800fbf2:	682b      	ldr	r3, [r5, #0]
 800fbf4:	b103      	cbz	r3, 800fbf8 <_fstat_r+0x1c>
 800fbf6:	6023      	str	r3, [r4, #0]
 800fbf8:	bd38      	pop	{r3, r4, r5, pc}
 800fbfa:	bf00      	nop
 800fbfc:	200011a0 	.word	0x200011a0

0800fc00 <_isatty_r>:
 800fc00:	b538      	push	{r3, r4, r5, lr}
 800fc02:	4d06      	ldr	r5, [pc, #24]	; (800fc1c <_isatty_r+0x1c>)
 800fc04:	2300      	movs	r3, #0
 800fc06:	4604      	mov	r4, r0
 800fc08:	4608      	mov	r0, r1
 800fc0a:	602b      	str	r3, [r5, #0]
 800fc0c:	f7f3 ff31 	bl	8003a72 <_isatty>
 800fc10:	1c43      	adds	r3, r0, #1
 800fc12:	d102      	bne.n	800fc1a <_isatty_r+0x1a>
 800fc14:	682b      	ldr	r3, [r5, #0]
 800fc16:	b103      	cbz	r3, 800fc1a <_isatty_r+0x1a>
 800fc18:	6023      	str	r3, [r4, #0]
 800fc1a:	bd38      	pop	{r3, r4, r5, pc}
 800fc1c:	200011a0 	.word	0x200011a0

0800fc20 <_init>:
 800fc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc22:	bf00      	nop
 800fc24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc26:	bc08      	pop	{r3}
 800fc28:	469e      	mov	lr, r3
 800fc2a:	4770      	bx	lr

0800fc2c <_fini>:
 800fc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc2e:	bf00      	nop
 800fc30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc32:	bc08      	pop	{r3}
 800fc34:	469e      	mov	lr, r3
 800fc36:	4770      	bx	lr
